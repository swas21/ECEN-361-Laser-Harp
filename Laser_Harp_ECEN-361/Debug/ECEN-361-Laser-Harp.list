
ECEN-361-Laser-Harp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005580  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00037604  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803cd0c  0803cd0c  000501c4  2**0
                  CONTENTS
  4 .ARM          00000008  0803cd0c  0803cd0c  0004cd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803cd14  0803cd14  000501c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803cd14  0803cd14  0004cd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803cd18  0803cd18  0004cd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0803cd1c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001c4  0803cee0  000501c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  0803cee0  000503d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000501c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000501f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017486  00000000  00000000  00050237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d2a  00000000  00000000  000676bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0006a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc1  00000000  00000000  0006b800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272d9  00000000  00000000  0006c7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018706  00000000  00000000  00093a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f476b  00000000  00000000  000ac1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005524  00000000  00000000  001a090c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001a5e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c4 	.word	0x200001c4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080056f0 	.word	0x080056f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001c8 	.word	0x200001c8
 80001c4:	080056f0 	.word	0x080056f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f001 f959 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f833 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9a5 	bl	8000820 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 f973 	bl	80007c0 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80004da:	f000 f87f 	bl	80005dc <MX_DAC1_Init>
  MX_I2C1_Init();
 80004de:	f000 f8b9 	bl	8000654 <MX_I2C1_Init>
  MX_TIM16_Init();
 80004e2:	f000 f947 	bl	8000774 <MX_TIM16_Init>
  MX_TIM15_Init();
 80004e6:	f000 f8f5 	bl	80006d4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim15); // Start the Music Interrupt Timer
 80004ea:	480f      	ldr	r0, [pc, #60]	; (8000528 <main+0x64>)
 80004ec:	f003 fc26 	bl	8003d3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16); // start the Sustain Interrupt Timer
 80004f0:	480e      	ldr	r0, [pc, #56]	; (800052c <main+0x68>)
 80004f2:	f003 fc23 	bl	8003d3c <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Start one of the dac channels
 80004f6:	2110      	movs	r1, #16
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <main+0x6c>)
 80004fa:	f001 fb14 	bl	8001b26 <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(UP_BTN_GPIO_Port, UP_BTN_Pin)){
 80004fe:	2101      	movs	r1, #1
 8000500:	480c      	ldr	r0, [pc, #48]	; (8000534 <main+0x70>)
 8000502:	f001 ff41 	bl	8002388 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <main+0x4c>
		  tranposition__increment_octave();
 800050c:	f000 fdae 	bl	800106c <tranposition__increment_octave>
	  }
	  int val = HAL_GPIO_ReadPin(DOWN_BTN_GPIO_Port, DOWN_BTN_Pin);
 8000510:	2102      	movs	r1, #2
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x70>)
 8000514:	f001 ff38 	bl	8002388 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	607b      	str	r3, [r7, #4]
	  if(val){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0ed      	beq.n	80004fe <main+0x3a>
	  		  tranposition__decrement_octave();
 8000522:	f000 fddb 	bl	80010dc <tranposition__decrement_octave>
  {
 8000526:	e7ea      	b.n	80004fe <main+0x3a>
 8000528:	20000248 	.word	0x20000248
 800052c:	20000294 	.word	0x20000294
 8000530:	200001e0 	.word	0x200001e0
 8000534:	48000400 	.word	0x48000400

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	; 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	; 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 f8a5 	bl	8005696 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800055e:	f002 f883 	bl	8002668 <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 fb60 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057e:	2302      	movs	r3, #2
 8000580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000586:	230a      	movs	r3, #10
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f8ba 	bl	8002714 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005a6:	f000 fb41 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2303      	movs	r3, #3
 80005b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	2104      	movs	r1, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fc82 	bl	8002ecc <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ce:	f000 fb2d 	bl	8000c2c <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3758      	adds	r7, #88	; 0x58
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2224      	movs	r2, #36	; 0x24
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f005 f854 	bl	8005696 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_DAC1_Init+0x70>)
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <MX_DAC1_Init+0x74>)
 80005f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005f4:	4815      	ldr	r0, [pc, #84]	; (800064c <MX_DAC1_Init+0x70>)
 80005f6:	f001 fa74 	bl	8001ae2 <HAL_DAC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000600:	f000 fb14 	bl	8000c2c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <MX_DAC1_Init+0x70>)
 8000620:	f001 fb57 	bl	8001cd2 <HAL_DAC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800062a:	f000 faff 	bl	8000c2c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2210      	movs	r2, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_DAC1_Init+0x70>)
 8000636:	f001 fb4c 	bl	8001cd2 <HAL_DAC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000640:	f000 faf4 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	; 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200001e0 	.word	0x200001e0
 8000650:	40007400 	.word	0x40007400

08000654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_I2C1_Init+0x74>)
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_I2C1_Init+0x78>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000660:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <MX_I2C1_Init+0x7c>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_I2C1_Init+0x74>)
 800066c:	2201      	movs	r2, #1
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000690:	f001 feaa 	bl	80023e8 <HAL_I2C_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800069a:	f000 fac7 	bl	8000c2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <MX_I2C1_Init+0x74>)
 80006a2:	f001 ff3c 	bl	800251e <HAL_I2CEx_ConfigAnalogFilter>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006ac:	f000 fabe 	bl	8000c2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_I2C1_Init+0x74>)
 80006b4:	f001 ff7e 	bl	80025b4 <HAL_I2CEx_ConfigDigitalFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 fab5 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200001f4 	.word	0x200001f4
 80006cc:	40005400 	.word	0x40005400
 80006d0:	10909cec 	.word	0x10909cec

080006d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_TIM15_Init+0x98>)
 80006f4:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_TIM15_Init+0x9c>)
 80006f6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_TIM15_Init+0x98>)
 80006fa:	224f      	movs	r2, #79	; 0x4f
 80006fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_TIM15_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10-1;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_TIM15_Init+0x98>)
 8000706:	2209      	movs	r2, #9
 8000708:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_TIM15_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_TIM15_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_TIM15_Init+0x98>)
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <MX_TIM15_Init+0x98>)
 800071e:	f003 fab5 	bl	8003c8c <HAL_TIM_Base_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000728:	f000 fa80 	bl	8000c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_TIM15_Init+0x98>)
 800073a:	f003 fc71 	bl	8004020 <HAL_TIM_ConfigClockSource>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000744:	f000 fa72 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_TIM15_Init+0x98>)
 8000756:	f003 fe89 	bl	800446c <HAL_TIMEx_MasterConfigSynchronization>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000760:	f000 fa64 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000248 	.word	0x20000248
 8000770:	40014000 	.word	0x40014000

08000774 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_TIM16_Init+0x44>)
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <MX_TIM16_Init+0x48>)
 800077c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3200-1;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_TIM16_Init+0x44>)
 8000780:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000784:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_TIM16_Init+0x44>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_TIM16_Init+0x44>)
 800078e:	2264      	movs	r2, #100	; 0x64
 8000790:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_TIM16_Init+0x44>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_TIM16_Init+0x44>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_TIM16_Init+0x44>)
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_TIM16_Init+0x44>)
 80007a6:	f003 fa71 	bl	8003c8c <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80007b0:	f000 fa3c 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000294 	.word	0x20000294
 80007bc:	40014400 	.word	0x40014400

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART2_UART_Init+0x58>)
 8000804:	f003 fed8 	bl	80045b8 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 fa0d 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200002e0 	.word	0x200002e0
 800081c:	40004400 	.word	0x40004400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b51      	ldr	r3, [pc, #324]	; (800097c <MX_GPIO_Init+0x15c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a50      	ldr	r2, [pc, #320]	; (800097c <MX_GPIO_Init+0x15c>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b4e      	ldr	r3, [pc, #312]	; (800097c <MX_GPIO_Init+0x15c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b4b      	ldr	r3, [pc, #300]	; (800097c <MX_GPIO_Init+0x15c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a4a      	ldr	r2, [pc, #296]	; (800097c <MX_GPIO_Init+0x15c>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b48      	ldr	r3, [pc, #288]	; (800097c <MX_GPIO_Init+0x15c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b45      	ldr	r3, [pc, #276]	; (800097c <MX_GPIO_Init+0x15c>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a44      	ldr	r2, [pc, #272]	; (800097c <MX_GPIO_Init+0x15c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b42      	ldr	r3, [pc, #264]	; (800097c <MX_GPIO_Init+0x15c>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b3f      	ldr	r3, [pc, #252]	; (800097c <MX_GPIO_Init+0x15c>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a3e      	ldr	r2, [pc, #248]	; (800097c <MX_GPIO_Init+0x15c>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b3c      	ldr	r3, [pc, #240]	; (800097c <MX_GPIO_Init+0x15c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4834      	ldr	r0, [pc, #208]	; (8000980 <MX_GPIO_Init+0x160>)
 80008ae:	f001 fbc1 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOTE_1_Pin NOTE_2_Pin NOTE_3_Pin NOTE_4_Pin
                           NOTE_5_Pin NOTE_6_Pin NOTE_7_Pin NOTE_8_Pin
                           NOTE_10_Pin NOTE_11_Pin */
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_4_Pin
 80008b2:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80008b6:	617b      	str	r3, [r7, #20]
                          |NOTE_5_Pin|NOTE_6_Pin|NOTE_7_Pin|NOTE_8_Pin
                          |NOTE_10_Pin|NOTE_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	482d      	ldr	r0, [pc, #180]	; (8000980 <MX_GPIO_Init+0x160>)
 80008ca:	f001 fbb3 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_BTN_Pin DOWN_BTN_Pin LEFT_BTN_Pin RIGHT_BTN_Pin */
  GPIO_InitStruct.Pin = UP_BTN_Pin|DOWN_BTN_Pin|LEFT_BTN_Pin|RIGHT_BTN_Pin;
 80008ce:	2317      	movs	r3, #23
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4828      	ldr	r0, [pc, #160]	; (8000984 <MX_GPIO_Init+0x164>)
 80008e2:	f001 fba7 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOTE_9_Pin NOTE_12_Pin */
  GPIO_InitStruct.Pin = NOTE_9_Pin|NOTE_12_Pin;
 80008e6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4820      	ldr	r0, [pc, #128]	; (8000980 <MX_GPIO_Init+0x160>)
 80008fe:	f001 fb99 	bl	8002034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2006      	movs	r0, #6
 8000908:	f001 f8b5 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800090c:	2006      	movs	r0, #6
 800090e:	f001 f8ce 	bl	8001aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	2007      	movs	r0, #7
 8000918:	f001 f8ad 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800091c:	2007      	movs	r0, #7
 800091e:	f001 f8c6 	bl	8001aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2008      	movs	r0, #8
 8000928:	f001 f8a5 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800092c:	2008      	movs	r0, #8
 800092e:	f001 f8be 	bl	8001aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2009      	movs	r0, #9
 8000938:	f001 f89d 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800093c:	2009      	movs	r0, #9
 800093e:	f001 f8b6 	bl	8001aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	200a      	movs	r0, #10
 8000948:	f001 f895 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800094c:	200a      	movs	r0, #10
 800094e:	f001 f8ae 	bl	8001aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2017      	movs	r0, #23
 8000958:	f001 f88d 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800095c:	2017      	movs	r0, #23
 800095e:	f001 f8a6 	bl	8001aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2028      	movs	r0, #40	; 0x28
 8000968:	f001 f885 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800096c:	2028      	movs	r0, #40	; 0x28
 800096e:	f001 f89e 	bl	8001aae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000
 8000980:	48000800 	.word	0x48000800
 8000984:	48000400 	.word	0x48000400

08000988 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000998:	f000 80ea 	beq.w	8000b70 <HAL_GPIO_EXTI_Callback+0x1e8>
 800099c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009a0:	f300 80f1 	bgt.w	8000b86 <HAL_GPIO_EXTI_Callback+0x1fe>
 80009a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009a8:	f000 80d7 	beq.w	8000b5a <HAL_GPIO_EXTI_Callback+0x1d2>
 80009ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009b0:	f300 80e9 	bgt.w	8000b86 <HAL_GPIO_EXTI_Callback+0x1fe>
 80009b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009b8:	f000 80c4 	beq.w	8000b44 <HAL_GPIO_EXTI_Callback+0x1bc>
 80009bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009c0:	f300 80e1 	bgt.w	8000b86 <HAL_GPIO_EXTI_Callback+0x1fe>
 80009c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009c8:	f000 80b1 	beq.w	8000b2e <HAL_GPIO_EXTI_Callback+0x1a6>
 80009cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009d0:	f300 80d9 	bgt.w	8000b86 <HAL_GPIO_EXTI_Callback+0x1fe>
 80009d4:	2b80      	cmp	r3, #128	; 0x80
 80009d6:	f000 809f 	beq.w	8000b18 <HAL_GPIO_EXTI_Callback+0x190>
 80009da:	2b80      	cmp	r3, #128	; 0x80
 80009dc:	f300 80d3 	bgt.w	8000b86 <HAL_GPIO_EXTI_Callback+0x1fe>
 80009e0:	2b20      	cmp	r3, #32
 80009e2:	dc49      	bgt.n	8000a78 <HAL_GPIO_EXTI_Callback+0xf0>
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f340 80ce 	ble.w	8000b86 <HAL_GPIO_EXTI_Callback+0x1fe>
 80009ea:	3b01      	subs	r3, #1
 80009ec:	2b1f      	cmp	r3, #31
 80009ee:	f200 80ca 	bhi.w	8000b86 <HAL_GPIO_EXTI_Callback+0x1fe>
 80009f2:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <HAL_GPIO_EXTI_Callback+0x70>)
 80009f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f8:	08000a7f 	.word	0x08000a7f
 80009fc:	08000a95 	.word	0x08000a95
 8000a00:	08000b87 	.word	0x08000b87
 8000a04:	08000aab 	.word	0x08000aab
 8000a08:	08000b87 	.word	0x08000b87
 8000a0c:	08000b87 	.word	0x08000b87
 8000a10:	08000b87 	.word	0x08000b87
 8000a14:	08000ac1 	.word	0x08000ac1
 8000a18:	08000b87 	.word	0x08000b87
 8000a1c:	08000b87 	.word	0x08000b87
 8000a20:	08000b87 	.word	0x08000b87
 8000a24:	08000b87 	.word	0x08000b87
 8000a28:	08000b87 	.word	0x08000b87
 8000a2c:	08000b87 	.word	0x08000b87
 8000a30:	08000b87 	.word	0x08000b87
 8000a34:	08000ad7 	.word	0x08000ad7
 8000a38:	08000b87 	.word	0x08000b87
 8000a3c:	08000b87 	.word	0x08000b87
 8000a40:	08000b87 	.word	0x08000b87
 8000a44:	08000b87 	.word	0x08000b87
 8000a48:	08000b87 	.word	0x08000b87
 8000a4c:	08000b87 	.word	0x08000b87
 8000a50:	08000b87 	.word	0x08000b87
 8000a54:	08000b87 	.word	0x08000b87
 8000a58:	08000b87 	.word	0x08000b87
 8000a5c:	08000b87 	.word	0x08000b87
 8000a60:	08000b87 	.word	0x08000b87
 8000a64:	08000b87 	.word	0x08000b87
 8000a68:	08000b87 	.word	0x08000b87
 8000a6c:	08000b87 	.word	0x08000b87
 8000a70:	08000b87 	.word	0x08000b87
 8000a74:	08000aed 	.word	0x08000aed
 8000a78:	2b40      	cmp	r3, #64	; 0x40
 8000a7a:	d042      	beq.n	8000b02 <HAL_GPIO_EXTI_Callback+0x17a>
	case NOTE_12_Pin:
		active[NOTE_B] = !active[NOTE_B];
		break;

	default:
		break;
 8000a7c:	e083      	b.n	8000b86 <HAL_GPIO_EXTI_Callback+0x1fe>
		active[NOTE_C] = !active[NOTE_C];
 8000a7e:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bf0c      	ite	eq
 8000a86:	2301      	moveq	r3, #1
 8000a88:	2300      	movne	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000a90:	601a      	str	r2, [r3, #0]
		break;
 8000a92:	e079      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Cs] = !active[NOTE_Cs];
 8000a94:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b3b      	ldr	r3, [pc, #236]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000aa6:	605a      	str	r2, [r3, #4]
		break;
 8000aa8:	e06e      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_D] = !active[NOTE_D];
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2301      	moveq	r3, #1
 8000ab4:	2300      	movne	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000abc:	609a      	str	r2, [r3, #8]
		break;
 8000abe:	e063      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Ds] = !active[NOTE_Ds];
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bf0c      	ite	eq
 8000ac8:	2301      	moveq	r3, #1
 8000aca:	2300      	movne	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000ad2:	60da      	str	r2, [r3, #12]
		break;
 8000ad4:	e058      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_E] = !active[NOTE_E];
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bf0c      	ite	eq
 8000ade:	2301      	moveq	r3, #1
 8000ae0:	2300      	movne	r3, #0
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000ae8:	611a      	str	r2, [r3, #16]
		break;
 8000aea:	e04d      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_F] = !active[NOTE_F];
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf0c      	ite	eq
 8000af4:	2301      	moveq	r3, #1
 8000af6:	2300      	movne	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000afe:	615a      	str	r2, [r3, #20]
		break;
 8000b00:	e042      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Fs] = !active[NOTE_Fs];
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf0c      	ite	eq
 8000b0a:	2301      	moveq	r3, #1
 8000b0c:	2300      	movne	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b14:	619a      	str	r2, [r3, #24]
		break;
 8000b16:	e037      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_G] = !active[NOTE_G];
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf0c      	ite	eq
 8000b20:	2301      	moveq	r3, #1
 8000b22:	2300      	movne	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b2a:	61da      	str	r2, [r3, #28]
		break;
 8000b2c:	e02c      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Gs] = !active[NOTE_Gs];
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf0c      	ite	eq
 8000b36:	2301      	moveq	r3, #1
 8000b38:	2300      	movne	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b40:	621a      	str	r2, [r3, #32]
		break;
 8000b42:	e021      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_A] = !active[NOTE_A];
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000b58:	e016      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_As] = !active[NOTE_As];
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bf0c      	ite	eq
 8000b62:	2301      	moveq	r3, #1
 8000b64:	2300      	movne	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000b6e:	e00b      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_B] = !active[NOTE_B];
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf0c      	ite	eq
 8000b78:	2301      	moveq	r3, #1
 8000b7a:	2300      	movne	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8000b84:	e000      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x200>
		break;
 8000b86:	bf00      	nop
	}
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	20000030 	.word	0x20000030

08000b98 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  //timer for sustain value update at 25kHz sample rate
  if(htim == &htim16 )
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d115      	bne.n	8000bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>
  {

	  decay_value = decay_table[decay_index];
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bb6:	6013      	str	r3, [r2, #0]
	  decay_index++;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bc0:	6013      	str	r3, [r2, #0]

	  if(decay_index > 2500-1)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	dd02      	ble.n	8000bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  {
		  decay_index = 0;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
	  }

  }

  //timer for sinewave output at 1Mhz sample rate
  if (htim == &htim15 )
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d116      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x72>
  {
	  //Disable the IRQ
	  //HAL_TIM_Base_Stop(htim);
	  int wave = tranposition__note_update(&htim15) * decay_value;
 8000bdc:	4811      	ldr	r0, [pc, #68]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000bde:	f000 fbdf 	bl	80013a0 <tranposition__note_update>
 8000be2:	ee07 0a90 	vmov	s15, r0
 8000be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bec:	edd3 7a00 	vldr	s15, [r3]
 8000bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf8:	ee17 3a90 	vmov	r3, s15
 8000bfc:	60fb      	str	r3, [r7, #12]
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, wave);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	4808      	ldr	r0, [pc, #32]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c06:	f001 f835 	bl	8001c74 <HAL_DAC_SetValue>
	  //HAL_TIM_Base_Start_IT(&htim15);
  }


}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000294 	.word	0x20000294
 8000c18:	20000368 	.word	0x20000368
 8000c1c:	08005708 	.word	0x08005708
 8000c20:	20000060 	.word	0x20000060
 8000c24:	20000248 	.word	0x20000248
 8000c28:	200001e0 	.word	0x200001e0

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_MspInit+0x44>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6593      	str	r3, [r2, #88]	; 0x58
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_DAC_MspInit+0x84>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d12c      	bne.n	8000cfc <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_DAC_MspInit+0x88>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_DAC_MspInit+0x88>)
 8000ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_DAC_MspInit+0x88>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_DAC_MspInit+0x88>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <HAL_DAC_MspInit+0x88>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_DAC_MspInit+0x88>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cd2:	2330      	movs	r3, #48	; 0x30
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f001 f9a4 	bl	8002034 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2036      	movs	r0, #54	; 0x36
 8000cf2:	f000 fec0 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cf6:	2036      	movs	r0, #54	; 0x36
 8000cf8:	f000 fed9 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40007400 	.word	0x40007400
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0ac      	sub	sp, #176	; 0xb0
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2288      	movs	r2, #136	; 0x88
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fcb2 	bl	8005696 <memset>
  if(hi2c->Instance==I2C1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <HAL_I2C_MspInit+0xb0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d13a      	bne.n	8000db2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d3c:	2340      	movs	r3, #64	; 0x40
 8000d3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 fae3 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff ff6a 	bl	8000c2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_I2C_MspInit+0xb4>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <HAL_I2C_MspInit+0xb4>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_I2C_MspInit+0xb4>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d70:	23c0      	movs	r3, #192	; 0xc0
 8000d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d76:	2312      	movs	r3, #18
 8000d78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d92:	4619      	mov	r1, r3
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <HAL_I2C_MspInit+0xb8>)
 8000d96:	f001 f94d 	bl	8002034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_I2C_MspInit+0xb4>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_I2C_MspInit+0xb4>)
 8000da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_I2C_MspInit+0xb4>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	37b0      	adds	r7, #176	; 0xb0
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <HAL_TIM_Base_MspInit+0x78>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d114      	bne.n	8000e04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de4:	6613      	str	r3, [r2, #96]	; 0x60
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2018      	movs	r0, #24
 8000df8:	f000 fe3d 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000dfc:	2018      	movs	r0, #24
 8000dfe:	f000 fe56 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000e02:	e018      	b.n	8000e36 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_TIM_Base_MspInit+0x80>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d113      	bne.n	8000e36 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e12:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e18:	6613      	str	r3, [r2, #96]	; 0x60
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_TIM_Base_MspInit+0x7c>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2019      	movs	r0, #25
 8000e2c:	f000 fe23 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e30:	2019      	movs	r0, #25
 8000e32:	f000 fe3c 	bl	8001aae <HAL_NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40014000 	.word	0x40014000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40014400 	.word	0x40014400

08000e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0ac      	sub	sp, #176	; 0xb0
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2288      	movs	r2, #136	; 0x88
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 fc12 	bl	8005696 <memset>
  if(huart->Instance==USART2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <HAL_UART_MspInit+0xc0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d143      	bne.n	8000f04 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 fa43 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e94:	f7ff feca 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9c:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a16      	ldr	r2, [pc, #88]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_UART_MspInit+0xc4>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 f8a0 	bl	8002034 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2026      	movs	r0, #38	; 0x26
 8000efa:	f000 fdbc 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000efe:	2026      	movs	r0, #38	; 0x26
 8000f00:	f000 fdd5 	bl	8001aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f04:	bf00      	nop
 8000f06:	37b0      	adds	r7, #176	; 0xb0
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40004400 	.word	0x40004400
 8000f10:	40021000 	.word	0x40021000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f18:	e7fe      	b.n	8000f18 <NMI_Handler+0x4>

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f60:	f000 fc6a 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_1_Pin);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f001 fa23 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_2_Pin);
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f001 fa1c 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_3_Pin);
 8000f88:	2004      	movs	r0, #4
 8000f8a:	f001 fa15 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_4_Pin);
 8000f96:	2008      	movs	r0, #8
 8000f98:	f001 fa0e 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_5_Pin);
 8000fa4:	2010      	movs	r0, #16
 8000fa6:	f001 fa07 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}

08000fae <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_6_Pin);
 8000fb2:	2020      	movs	r0, #32
 8000fb4:	f001 fa00 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_7_Pin);
 8000fb8:	2040      	movs	r0, #64	; 0x40
 8000fba:	f001 f9fd 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_8_Pin);
 8000fbe:	2080      	movs	r0, #128	; 0x80
 8000fc0:	f001 f9fa 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_9_Pin);
 8000fc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fc8:	f001 f9f6 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_10_Pin);
 8000fcc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fd0:	f001 f9f2 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000fde:	f002 ff1d 	bl	8003e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000248 	.word	0x20000248

08000fec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ff2:	f002 ff13 	bl	8003e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000294 	.word	0x20000294

08001000 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <USART2_IRQHandler+0x10>)
 8001006:	f003 fb25 	bl	8004654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200002e0 	.word	0x200002e0

08001014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_11_Pin);
 8001018:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800101c:	f001 f9cc 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_12_Pin);
 8001020:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001024:	f001 f9c8 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001028:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800102c:	f001 f9c4 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM6_DAC_IRQHandler+0x10>)
 800103a:	f000 fdc1 	bl	8001bc0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200001e0 	.word	0x200001e0

08001048 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <tranposition__increment_octave>:


void update_note_tables();


void tranposition__increment_octave() {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	/*
	 * This is a simple state machine to increase the octave.
	 * After the switch case we need to update the values for
	 * the notes and indexes.
	 */
	switch (activeOctave) {
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <tranposition__increment_octave+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b05      	cmp	r3, #5
 8001076:	d827      	bhi.n	80010c8 <tranposition__increment_octave+0x5c>
 8001078:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <tranposition__increment_octave+0x14>)
 800107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107e:	bf00      	nop
 8001080:	08001099 	.word	0x08001099
 8001084:	080010a1 	.word	0x080010a1
 8001088:	080010a9 	.word	0x080010a9
 800108c:	080010b1 	.word	0x080010b1
 8001090:	080010b9 	.word	0x080010b9
 8001094:	080010c1 	.word	0x080010c1
	case OCTAVE_1:
		activeOctave = OCTAVE_2;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <tranposition__increment_octave+0x6c>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
		break;
 800109e:	e017      	b.n	80010d0 <tranposition__increment_octave+0x64>
	case OCTAVE_2:
		activeOctave = OCTAVE_3;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <tranposition__increment_octave+0x6c>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	701a      	strb	r2, [r3, #0]
		break;
 80010a6:	e013      	b.n	80010d0 <tranposition__increment_octave+0x64>
	case OCTAVE_3:
		activeOctave = OCTAVE_4;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <tranposition__increment_octave+0x6c>)
 80010aa:	2203      	movs	r2, #3
 80010ac:	701a      	strb	r2, [r3, #0]
		break;
 80010ae:	e00f      	b.n	80010d0 <tranposition__increment_octave+0x64>
	case OCTAVE_4:
		activeOctave = OCTAVE_5;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <tranposition__increment_octave+0x6c>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	701a      	strb	r2, [r3, #0]
		break;
 80010b6:	e00b      	b.n	80010d0 <tranposition__increment_octave+0x64>
	case OCTAVE_5:
		activeOctave = OCTAVE_6;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <tranposition__increment_octave+0x6c>)
 80010ba:	2205      	movs	r2, #5
 80010bc:	701a      	strb	r2, [r3, #0]
		break;
 80010be:	e007      	b.n	80010d0 <tranposition__increment_octave+0x64>
	case OCTAVE_6:
		activeOctave = OCTAVE_7;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <tranposition__increment_octave+0x6c>)
 80010c2:	2206      	movs	r2, #6
 80010c4:	701a      	strb	r2, [r3, #0]
		break;
 80010c6:	e003      	b.n	80010d0 <tranposition__increment_octave+0x64>
	default:
	case OCTAVE_7:
		activeOctave = OCTAVE_1;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <tranposition__increment_octave+0x6c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
		break;
 80010ce:	bf00      	nop

	}

	update_note_tables();
 80010d0:	f000 f83c 	bl	800114c <update_note_tables>

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001b8 	.word	0x200001b8

080010dc <tranposition__decrement_octave>:

void tranposition__decrement_octave() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	 * This is a simple state machine to decrement the octave.
	 * After the switch case we need to update the values for
	 * the notes and indexes.
	 */

	switch (activeOctave) {
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <tranposition__decrement_octave+0x6c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d827      	bhi.n	8001138 <tranposition__decrement_octave+0x5c>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <tranposition__decrement_octave+0x14>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001109 	.word	0x08001109
 80010f4:	08001111 	.word	0x08001111
 80010f8:	08001119 	.word	0x08001119
 80010fc:	08001121 	.word	0x08001121
 8001100:	08001129 	.word	0x08001129
 8001104:	08001131 	.word	0x08001131
	case OCTAVE_1:
		activeOctave = OCTAVE_7;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <tranposition__decrement_octave+0x6c>)
 800110a:	2206      	movs	r2, #6
 800110c:	701a      	strb	r2, [r3, #0]
		break;
 800110e:	e017      	b.n	8001140 <tranposition__decrement_octave+0x64>
	case OCTAVE_2:
		activeOctave = OCTAVE_1;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <tranposition__decrement_octave+0x6c>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
		break;
 8001116:	e013      	b.n	8001140 <tranposition__decrement_octave+0x64>
	case OCTAVE_3:
		activeOctave = OCTAVE_2;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <tranposition__decrement_octave+0x6c>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
		break;
 800111e:	e00f      	b.n	8001140 <tranposition__decrement_octave+0x64>
	case OCTAVE_4:
		activeOctave = OCTAVE_3;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <tranposition__decrement_octave+0x6c>)
 8001122:	2202      	movs	r2, #2
 8001124:	701a      	strb	r2, [r3, #0]
		break;
 8001126:	e00b      	b.n	8001140 <tranposition__decrement_octave+0x64>
	case OCTAVE_5:
		activeOctave = OCTAVE_4;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <tranposition__decrement_octave+0x6c>)
 800112a:	2203      	movs	r2, #3
 800112c:	701a      	strb	r2, [r3, #0]
		break;
 800112e:	e007      	b.n	8001140 <tranposition__decrement_octave+0x64>
	case OCTAVE_6:
		activeOctave = OCTAVE_5;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <tranposition__decrement_octave+0x6c>)
 8001132:	2204      	movs	r2, #4
 8001134:	701a      	strb	r2, [r3, #0]
		break;
 8001136:	e003      	b.n	8001140 <tranposition__decrement_octave+0x64>
	default:
	case OCTAVE_7:
		activeOctave = OCTAVE_6;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <tranposition__decrement_octave+0x6c>)
 800113a:	2205      	movs	r2, #5
 800113c:	701a      	strb	r2, [r3, #0]
		break;
 800113e:	bf00      	nop

	}

	update_note_tables();
 8001140:	f000 f804 	bl	800114c <update_note_tables>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001b8 	.word	0x200001b8

0800114c <update_note_tables>:

void update_note_tables(){
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	 * This function takes the current octave and uses it to update our current
	 * note and sample information.
	 * The NOTE_TABLES are found in sine_tables.h
	 *
	 */
	current_C_TABLE = C_TABLES[activeOctave];
 8001150:	4b62      	ldr	r3, [pc, #392]	; (80012dc <update_note_tables+0x190>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <update_note_tables+0x194>)
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	4a61      	ldr	r2, [pc, #388]	; (80012e4 <update_note_tables+0x198>)
 800115e:	6013      	str	r3, [r2, #0]
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 8001160:	4b5e      	ldr	r3, [pc, #376]	; (80012dc <update_note_tables+0x190>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b60      	ldr	r3, [pc, #384]	; (80012e8 <update_note_tables+0x19c>)
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	4a5f      	ldr	r2, [pc, #380]	; (80012ec <update_note_tables+0x1a0>)
 800116e:	6013      	str	r3, [r2, #0]
	current_D_TABLE = D_TABLES[activeOctave];
 8001170:	4b5a      	ldr	r3, [pc, #360]	; (80012dc <update_note_tables+0x190>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b5e      	ldr	r3, [pc, #376]	; (80012f0 <update_note_tables+0x1a4>)
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	4a5d      	ldr	r2, [pc, #372]	; (80012f4 <update_note_tables+0x1a8>)
 800117e:	6013      	str	r3, [r2, #0]
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 8001180:	4b56      	ldr	r3, [pc, #344]	; (80012dc <update_note_tables+0x190>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <update_note_tables+0x1ac>)
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	4a5b      	ldr	r2, [pc, #364]	; (80012fc <update_note_tables+0x1b0>)
 800118e:	6013      	str	r3, [r2, #0]
	current_E_TABLE = E_TABLES[activeOctave];
 8001190:	4b52      	ldr	r3, [pc, #328]	; (80012dc <update_note_tables+0x190>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b5a      	ldr	r3, [pc, #360]	; (8001300 <update_note_tables+0x1b4>)
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	4a59      	ldr	r2, [pc, #356]	; (8001304 <update_note_tables+0x1b8>)
 800119e:	6013      	str	r3, [r2, #0]
	current_F_TABLE = F_TABLES[activeOctave];
 80011a0:	4b4e      	ldr	r3, [pc, #312]	; (80012dc <update_note_tables+0x190>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b58      	ldr	r3, [pc, #352]	; (8001308 <update_note_tables+0x1bc>)
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	4a57      	ldr	r2, [pc, #348]	; (800130c <update_note_tables+0x1c0>)
 80011ae:	6013      	str	r3, [r2, #0]
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 80011b0:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <update_note_tables+0x190>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b56      	ldr	r3, [pc, #344]	; (8001310 <update_note_tables+0x1c4>)
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	4a55      	ldr	r2, [pc, #340]	; (8001314 <update_note_tables+0x1c8>)
 80011be:	6013      	str	r3, [r2, #0]
	current_G_TABLE = G_TABLES[activeOctave];
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <update_note_tables+0x190>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b54      	ldr	r3, [pc, #336]	; (8001318 <update_note_tables+0x1cc>)
 80011c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011cc:	4a53      	ldr	r2, [pc, #332]	; (800131c <update_note_tables+0x1d0>)
 80011ce:	6013      	str	r3, [r2, #0]
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 80011d0:	4b42      	ldr	r3, [pc, #264]	; (80012dc <update_note_tables+0x190>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b52      	ldr	r3, [pc, #328]	; (8001320 <update_note_tables+0x1d4>)
 80011d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011dc:	4a51      	ldr	r2, [pc, #324]	; (8001324 <update_note_tables+0x1d8>)
 80011de:	6013      	str	r3, [r2, #0]
	current_A_TABLE = A_TABLES[activeOctave];
 80011e0:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <update_note_tables+0x190>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b50      	ldr	r3, [pc, #320]	; (8001328 <update_note_tables+0x1dc>)
 80011e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <update_note_tables+0x1e0>)
 80011ee:	6013      	str	r3, [r2, #0]
	current_As_TABLE = As_TABLES[activeOctave];
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <update_note_tables+0x190>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b4e      	ldr	r3, [pc, #312]	; (8001330 <update_note_tables+0x1e4>)
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <update_note_tables+0x1e8>)
 80011fe:	6013      	str	r3, [r2, #0]
	current_B_TABLE = B_TABLES[activeOctave];
 8001200:	4b36      	ldr	r3, [pc, #216]	; (80012dc <update_note_tables+0x190>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <update_note_tables+0x1ec>)
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	4a4b      	ldr	r2, [pc, #300]	; (800133c <update_note_tables+0x1f0>)
 800120e:	6013      	str	r3, [r2, #0]

	current_C_SAMPLES = C_SAMPLES[activeOctave];
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <update_note_tables+0x190>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <update_note_tables+0x1f4>)
 8001218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121c:	4a49      	ldr	r2, [pc, #292]	; (8001344 <update_note_tables+0x1f8>)
 800121e:	6013      	str	r3, [r2, #0]
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <update_note_tables+0x190>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b48      	ldr	r3, [pc, #288]	; (8001348 <update_note_tables+0x1fc>)
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	4a47      	ldr	r2, [pc, #284]	; (800134c <update_note_tables+0x200>)
 800122e:	6013      	str	r3, [r2, #0]
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <update_note_tables+0x190>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b46      	ldr	r3, [pc, #280]	; (8001350 <update_note_tables+0x204>)
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	4a45      	ldr	r2, [pc, #276]	; (8001354 <update_note_tables+0x208>)
 800123e:	6013      	str	r3, [r2, #0]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <update_note_tables+0x190>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b44      	ldr	r3, [pc, #272]	; (8001358 <update_note_tables+0x20c>)
 8001248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124c:	4a43      	ldr	r2, [pc, #268]	; (800135c <update_note_tables+0x210>)
 800124e:	6013      	str	r3, [r2, #0]
	current_E_SAMPLES = E_SAMPLES[activeOctave];
 8001250:	4b22      	ldr	r3, [pc, #136]	; (80012dc <update_note_tables+0x190>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b42      	ldr	r3, [pc, #264]	; (8001360 <update_note_tables+0x214>)
 8001258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125c:	4a41      	ldr	r2, [pc, #260]	; (8001364 <update_note_tables+0x218>)
 800125e:	6013      	str	r3, [r2, #0]
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <update_note_tables+0x190>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b40      	ldr	r3, [pc, #256]	; (8001368 <update_note_tables+0x21c>)
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	4a3f      	ldr	r2, [pc, #252]	; (800136c <update_note_tables+0x220>)
 800126e:	6013      	str	r3, [r2, #0]
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <update_note_tables+0x190>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <update_note_tables+0x224>)
 8001278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127c:	4a3d      	ldr	r2, [pc, #244]	; (8001374 <update_note_tables+0x228>)
 800127e:	6013      	str	r3, [r2, #0]
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <update_note_tables+0x190>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <update_note_tables+0x22c>)
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	4a3b      	ldr	r2, [pc, #236]	; (800137c <update_note_tables+0x230>)
 800128e:	6013      	str	r3, [r2, #0]
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <update_note_tables+0x190>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <update_note_tables+0x234>)
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	4a39      	ldr	r2, [pc, #228]	; (8001384 <update_note_tables+0x238>)
 800129e:	6013      	str	r3, [r2, #0]
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <update_note_tables+0x190>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <update_note_tables+0x23c>)
 80012a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ac:	4a37      	ldr	r2, [pc, #220]	; (800138c <update_note_tables+0x240>)
 80012ae:	6013      	str	r3, [r2, #0]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <update_note_tables+0x190>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <update_note_tables+0x244>)
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	4a35      	ldr	r2, [pc, #212]	; (8001394 <update_note_tables+0x248>)
 80012be:	6013      	str	r3, [r2, #0]
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <update_note_tables+0x190>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b34      	ldr	r3, [pc, #208]	; (8001398 <update_note_tables+0x24c>)
 80012c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012cc:	4a33      	ldr	r2, [pc, #204]	; (800139c <update_note_tables+0x250>)
 80012ce:	6013      	str	r3, [r2, #0]

}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200001b8 	.word	0x200001b8
 80012e0:	20000068 	.word	0x20000068
 80012e4:	2000036c 	.word	0x2000036c
 80012e8:	20000084 	.word	0x20000084
 80012ec:	20000370 	.word	0x20000370
 80012f0:	200000a0 	.word	0x200000a0
 80012f4:	20000374 	.word	0x20000374
 80012f8:	200000bc 	.word	0x200000bc
 80012fc:	20000378 	.word	0x20000378
 8001300:	200000d8 	.word	0x200000d8
 8001304:	2000037c 	.word	0x2000037c
 8001308:	200000f4 	.word	0x200000f4
 800130c:	20000380 	.word	0x20000380
 8001310:	20000110 	.word	0x20000110
 8001314:	20000384 	.word	0x20000384
 8001318:	2000012c 	.word	0x2000012c
 800131c:	20000388 	.word	0x20000388
 8001320:	20000148 	.word	0x20000148
 8001324:	2000038c 	.word	0x2000038c
 8001328:	20000164 	.word	0x20000164
 800132c:	20000390 	.word	0x20000390
 8001330:	20000180 	.word	0x20000180
 8001334:	20000394 	.word	0x20000394
 8001338:	2000019c 	.word	0x2000019c
 800133c:	20000398 	.word	0x20000398
 8001340:	0803cbbc 	.word	0x0803cbbc
 8001344:	2000039c 	.word	0x2000039c
 8001348:	0803cbd8 	.word	0x0803cbd8
 800134c:	200003a0 	.word	0x200003a0
 8001350:	0803cbf4 	.word	0x0803cbf4
 8001354:	200003a4 	.word	0x200003a4
 8001358:	0803cc10 	.word	0x0803cc10
 800135c:	200003a8 	.word	0x200003a8
 8001360:	0803cc2c 	.word	0x0803cc2c
 8001364:	200003ac 	.word	0x200003ac
 8001368:	0803cc48 	.word	0x0803cc48
 800136c:	200003b0 	.word	0x200003b0
 8001370:	0803cc64 	.word	0x0803cc64
 8001374:	200003b4 	.word	0x200003b4
 8001378:	0803cc80 	.word	0x0803cc80
 800137c:	200003b8 	.word	0x200003b8
 8001380:	0803cc9c 	.word	0x0803cc9c
 8001384:	200003bc 	.word	0x200003bc
 8001388:	0803ccb8 	.word	0x0803ccb8
 800138c:	200003c0 	.word	0x200003c0
 8001390:	0803ccd4 	.word	0x0803ccd4
 8001394:	200003c4 	.word	0x200003c4
 8001398:	0803ccf0 	.word	0x0803ccf0
 800139c:	200003c8 	.word	0x200003c8

080013a0 <tranposition__note_update>:

int tranposition__note_update() {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
	/****************************************************************
		 This first section of Code is to handle the reseting of each index.
		 Normally this would be done at the end, but since we might be switching octaves
		 we need to make sure that our indexes are restarted.
	*********************************************************************/
		if (index[NOTE_C] > current_C_SAMPLES)
 80013a6:	4b85      	ldr	r3, [pc, #532]	; (80015bc <tranposition__note_update+0x21c>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <tranposition__note_update+0x220>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dd02      	ble.n	80013b8 <tranposition__note_update+0x18>
			index[NOTE_C] = 0;
 80013b2:	4b82      	ldr	r3, [pc, #520]	; (80015bc <tranposition__note_update+0x21c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
		if (index[NOTE_Cs] > current_Cs_SAMPLES)
 80013b8:	4b80      	ldr	r3, [pc, #512]	; (80015bc <tranposition__note_update+0x21c>)
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <tranposition__note_update+0x224>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dd02      	ble.n	80013ca <tranposition__note_update+0x2a>
			index[NOTE_Cs] = 0;
 80013c4:	4b7d      	ldr	r3, [pc, #500]	; (80015bc <tranposition__note_update+0x21c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
		if (index[NOTE_D] > current_D_SAMPLES)
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <tranposition__note_update+0x21c>)
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	4b7e      	ldr	r3, [pc, #504]	; (80015c8 <tranposition__note_update+0x228>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dd02      	ble.n	80013dc <tranposition__note_update+0x3c>
			index[NOTE_D] = 0;
 80013d6:	4b79      	ldr	r3, [pc, #484]	; (80015bc <tranposition__note_update+0x21c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
		if (index[NOTE_Ds] > current_Ds_SAMPLES)
 80013dc:	4b77      	ldr	r3, [pc, #476]	; (80015bc <tranposition__note_update+0x21c>)
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	4b7a      	ldr	r3, [pc, #488]	; (80015cc <tranposition__note_update+0x22c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dd02      	ble.n	80013ee <tranposition__note_update+0x4e>
			index[NOTE_Ds] = 0;
 80013e8:	4b74      	ldr	r3, [pc, #464]	; (80015bc <tranposition__note_update+0x21c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
		if (index[NOTE_E] > current_E_SAMPLES)
 80013ee:	4b73      	ldr	r3, [pc, #460]	; (80015bc <tranposition__note_update+0x21c>)
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	4b77      	ldr	r3, [pc, #476]	; (80015d0 <tranposition__note_update+0x230>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	dd02      	ble.n	8001400 <tranposition__note_update+0x60>
			index[NOTE_E] = 0;
 80013fa:	4b70      	ldr	r3, [pc, #448]	; (80015bc <tranposition__note_update+0x21c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
		if (index[NOTE_F] > current_F_SAMPLES)
 8001400:	4b6e      	ldr	r3, [pc, #440]	; (80015bc <tranposition__note_update+0x21c>)
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	4b73      	ldr	r3, [pc, #460]	; (80015d4 <tranposition__note_update+0x234>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	dd02      	ble.n	8001412 <tranposition__note_update+0x72>
			index[NOTE_F] = 0;
 800140c:	4b6b      	ldr	r3, [pc, #428]	; (80015bc <tranposition__note_update+0x21c>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
		if (index[NOTE_Fs] > current_Fs_SAMPLES)
 8001412:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <tranposition__note_update+0x21c>)
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <tranposition__note_update+0x238>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	dd02      	ble.n	8001424 <tranposition__note_update+0x84>
			index[NOTE_Fs] = 0;
 800141e:	4b67      	ldr	r3, [pc, #412]	; (80015bc <tranposition__note_update+0x21c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
		if (index[NOTE_G] > current_G_SAMPLES)
 8001424:	4b65      	ldr	r3, [pc, #404]	; (80015bc <tranposition__note_update+0x21c>)
 8001426:	69da      	ldr	r2, [r3, #28]
 8001428:	4b6c      	ldr	r3, [pc, #432]	; (80015dc <tranposition__note_update+0x23c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	dd02      	ble.n	8001436 <tranposition__note_update+0x96>
			index[NOTE_G] = 0;
 8001430:	4b62      	ldr	r3, [pc, #392]	; (80015bc <tranposition__note_update+0x21c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
		if (index[NOTE_Gs] > current_Gs_SAMPLES)
 8001436:	4b61      	ldr	r3, [pc, #388]	; (80015bc <tranposition__note_update+0x21c>)
 8001438:	6a1a      	ldr	r2, [r3, #32]
 800143a:	4b69      	ldr	r3, [pc, #420]	; (80015e0 <tranposition__note_update+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	dd02      	ble.n	8001448 <tranposition__note_update+0xa8>
			index[NOTE_Gs] = 0;
 8001442:	4b5e      	ldr	r3, [pc, #376]	; (80015bc <tranposition__note_update+0x21c>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
		if (index[NOTE_A] > current_A_SAMPLES)
 8001448:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <tranposition__note_update+0x21c>)
 800144a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800144c:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <tranposition__note_update+0x244>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	dd02      	ble.n	800145a <tranposition__note_update+0xba>
			index[NOTE_A] = 0;
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <tranposition__note_update+0x21c>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
		if (index[NOTE_As] > current_As_SAMPLES)
 800145a:	4b58      	ldr	r3, [pc, #352]	; (80015bc <tranposition__note_update+0x21c>)
 800145c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800145e:	4b62      	ldr	r3, [pc, #392]	; (80015e8 <tranposition__note_update+0x248>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	dd02      	ble.n	800146c <tranposition__note_update+0xcc>
			index[NOTE_As] = 0;
 8001466:	4b55      	ldr	r3, [pc, #340]	; (80015bc <tranposition__note_update+0x21c>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
		if (index[NOTE_B] > current_B_SAMPLES)
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <tranposition__note_update+0x21c>)
 800146e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001470:	4b5e      	ldr	r3, [pc, #376]	; (80015ec <tranposition__note_update+0x24c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	dd02      	ble.n	800147e <tranposition__note_update+0xde>
			index[NOTE_B] = 0;
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <tranposition__note_update+0x21c>)
 800147a:	2200      	movs	r2, #0
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* ***************************************************************
	 * This first batch of values is to look update the value for each Note.
	 * By using a list and different indexes we can speed up the program with good spatial locality
	 * If the note is active then we update the value. Otherwise we return a zero.
	 ***************************************************************************/
	int wave_out =0;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
	wave_out	+= active[NOTE_C] ? current_C_TABLE[index[NOTE_C]] : 0;
 8001482:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <tranposition__note_update+0x250>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <tranposition__note_update+0xfa>
 800148a:	4b5a      	ldr	r3, [pc, #360]	; (80015f4 <tranposition__note_update+0x254>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <tranposition__note_update+0x21c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	e000      	b.n	800149c <tranposition__note_update+0xfc>
 800149a:	2300      	movs	r3, #0
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	607b      	str	r3, [r7, #4]
	wave_out	+= active[NOTE_Cs] ? current_Cs_TABLE[index[NOTE_Cs]] : 0;
 80014a2:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <tranposition__note_update+0x250>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d007      	beq.n	80014ba <tranposition__note_update+0x11a>
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <tranposition__note_update+0x258>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <tranposition__note_update+0x21c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	e000      	b.n	80014bc <tranposition__note_update+0x11c>
 80014ba:	2300      	movs	r3, #0
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_D] ? current_D_TABLE[index[NOTE_D]] : 0;
 80014c2:	4b4b      	ldr	r3, [pc, #300]	; (80015f0 <tranposition__note_update+0x250>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <tranposition__note_update+0x13a>
 80014ca:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <tranposition__note_update+0x25c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <tranposition__note_update+0x21c>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	e000      	b.n	80014dc <tranposition__note_update+0x13c>
 80014da:	2300      	movs	r3, #0
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_Ds] ? current_Ds_TABLE[index[NOTE_Ds]] : 0;
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <tranposition__note_update+0x250>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <tranposition__note_update+0x15a>
 80014ea:	4b45      	ldr	r3, [pc, #276]	; (8001600 <tranposition__note_update+0x260>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b33      	ldr	r3, [pc, #204]	; (80015bc <tranposition__note_update+0x21c>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	e000      	b.n	80014fc <tranposition__note_update+0x15c>
 80014fa:	2300      	movs	r3, #0
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_E] ? current_E_TABLE[index[NOTE_E]] : 0;
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <tranposition__note_update+0x250>)
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <tranposition__note_update+0x17a>
 800150a:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <tranposition__note_update+0x264>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <tranposition__note_update+0x21c>)
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	e000      	b.n	800151c <tranposition__note_update+0x17c>
 800151a:	2300      	movs	r3, #0
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_F] ? current_F_TABLE[index[NOTE_F]] : 0;
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <tranposition__note_update+0x250>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <tranposition__note_update+0x19a>
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <tranposition__note_update+0x268>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <tranposition__note_update+0x21c>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	e000      	b.n	800153c <tranposition__note_update+0x19c>
 800153a:	2300      	movs	r3, #0
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_Fs] ? current_Fs_TABLE[index[NOTE_Fs]] : 0;
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <tranposition__note_update+0x250>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <tranposition__note_update+0x1ba>
 800154a:	4b30      	ldr	r3, [pc, #192]	; (800160c <tranposition__note_update+0x26c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <tranposition__note_update+0x21c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	e000      	b.n	800155c <tranposition__note_update+0x1bc>
 800155a:	2300      	movs	r3, #0
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_G] ? current_G_TABLE[index[NOTE_G]] : 0;
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <tranposition__note_update+0x250>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <tranposition__note_update+0x1da>
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <tranposition__note_update+0x270>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <tranposition__note_update+0x21c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	e000      	b.n	800157c <tranposition__note_update+0x1dc>
 800157a:	2300      	movs	r3, #0
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_Gs] ? current_Gs_TABLE[index[NOTE_Gs]] : 0;
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <tranposition__note_update+0x250>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <tranposition__note_update+0x1fa>
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <tranposition__note_update+0x274>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <tranposition__note_update+0x21c>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	e000      	b.n	800159c <tranposition__note_update+0x1fc>
 800159a:	2300      	movs	r3, #0
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_A] ? current_A_TABLE[index[NOTE_A]] : 0;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <tranposition__note_update+0x250>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d038      	beq.n	800161c <tranposition__note_update+0x27c>
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <tranposition__note_update+0x278>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b03      	ldr	r3, [pc, #12]	; (80015bc <tranposition__note_update+0x21c>)
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	e031      	b.n	800161e <tranposition__note_update+0x27e>
 80015ba:	bf00      	nop
 80015bc:	20000000 	.word	0x20000000
 80015c0:	2000039c 	.word	0x2000039c
 80015c4:	200003a0 	.word	0x200003a0
 80015c8:	200003a4 	.word	0x200003a4
 80015cc:	200003a8 	.word	0x200003a8
 80015d0:	200003ac 	.word	0x200003ac
 80015d4:	200003b0 	.word	0x200003b0
 80015d8:	200003b4 	.word	0x200003b4
 80015dc:	200003b8 	.word	0x200003b8
 80015e0:	200003bc 	.word	0x200003bc
 80015e4:	200003c0 	.word	0x200003c0
 80015e8:	200003c4 	.word	0x200003c4
 80015ec:	200003c8 	.word	0x200003c8
 80015f0:	20000030 	.word	0x20000030
 80015f4:	2000036c 	.word	0x2000036c
 80015f8:	20000370 	.word	0x20000370
 80015fc:	20000374 	.word	0x20000374
 8001600:	20000378 	.word	0x20000378
 8001604:	2000037c 	.word	0x2000037c
 8001608:	20000380 	.word	0x20000380
 800160c:	20000384 	.word	0x20000384
 8001610:	20000388 	.word	0x20000388
 8001614:	2000038c 	.word	0x2000038c
 8001618:	20000390 	.word	0x20000390
 800161c:	2300      	movs	r3, #0
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_As] ? current_As_TABLE[index[NOTE_As]] : 0;
 8001624:	4b3d      	ldr	r3, [pc, #244]	; (800171c <tranposition__note_update+0x37c>)
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <tranposition__note_update+0x29c>
 800162c:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <tranposition__note_update+0x380>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <tranposition__note_update+0x384>)
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	e000      	b.n	800163e <tranposition__note_update+0x29e>
 800163c:	2300      	movs	r3, #0
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_B] ? current_B_TABLE[index[NOTE_B]] : 0;
 8001644:	4b35      	ldr	r3, [pc, #212]	; (800171c <tranposition__note_update+0x37c>)
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <tranposition__note_update+0x2bc>
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <tranposition__note_update+0x388>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b34      	ldr	r3, [pc, #208]	; (8001724 <tranposition__note_update+0x384>)
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	e000      	b.n	800165e <tranposition__note_update+0x2be>
 800165c:	2300      	movs	r3, #0
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	607b      	str	r3, [r7, #4]

	/* ***************************************************************
	 This batch of code is to just update the index if the note is active.
	 Since the active list should only ever hold a 0 or a 1, this code works. Avoid if statements
	 ***************************************************************************/
	index[NOTE_C] += active[NOTE_C];
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <tranposition__note_update+0x384>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <tranposition__note_update+0x37c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4413      	add	r3, r2
 800166e:	4a2d      	ldr	r2, [pc, #180]	; (8001724 <tranposition__note_update+0x384>)
 8001670:	6013      	str	r3, [r2, #0]
	index[NOTE_Cs] += active[NOTE_Cs];
 8001672:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <tranposition__note_update+0x384>)
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <tranposition__note_update+0x37c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4413      	add	r3, r2
 800167c:	4a29      	ldr	r2, [pc, #164]	; (8001724 <tranposition__note_update+0x384>)
 800167e:	6053      	str	r3, [r2, #4]
	index[NOTE_D] += active[NOTE_D];
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <tranposition__note_update+0x384>)
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <tranposition__note_update+0x37c>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4413      	add	r3, r2
 800168a:	4a26      	ldr	r2, [pc, #152]	; (8001724 <tranposition__note_update+0x384>)
 800168c:	6093      	str	r3, [r2, #8]
	index[NOTE_Ds] += active[NOTE_Ds];
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <tranposition__note_update+0x384>)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <tranposition__note_update+0x37c>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	4413      	add	r3, r2
 8001698:	4a22      	ldr	r2, [pc, #136]	; (8001724 <tranposition__note_update+0x384>)
 800169a:	60d3      	str	r3, [r2, #12]
	index[NOTE_E] += active[NOTE_E];
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <tranposition__note_update+0x384>)
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <tranposition__note_update+0x37c>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <tranposition__note_update+0x384>)
 80016a8:	6113      	str	r3, [r2, #16]
	index[NOTE_F] += active[NOTE_F];
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <tranposition__note_update+0x384>)
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <tranposition__note_update+0x37c>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <tranposition__note_update+0x384>)
 80016b6:	6153      	str	r3, [r2, #20]
	index[NOTE_Fs] += active[NOTE_Fs];
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <tranposition__note_update+0x384>)
 80016ba:	699a      	ldr	r2, [r3, #24]
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <tranposition__note_update+0x37c>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a18      	ldr	r2, [pc, #96]	; (8001724 <tranposition__note_update+0x384>)
 80016c4:	6193      	str	r3, [r2, #24]
	index[NOTE_G] += active[NOTE_G];
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <tranposition__note_update+0x384>)
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <tranposition__note_update+0x37c>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <tranposition__note_update+0x384>)
 80016d2:	61d3      	str	r3, [r2, #28]
	index[NOTE_Gs] += active[NOTE_Gs];
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <tranposition__note_update+0x384>)
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <tranposition__note_update+0x37c>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4413      	add	r3, r2
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <tranposition__note_update+0x384>)
 80016e0:	6213      	str	r3, [r2, #32]
	index[NOTE_A] += active[NOTE_A];
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <tranposition__note_update+0x384>)
 80016e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <tranposition__note_update+0x37c>)
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	4413      	add	r3, r2
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <tranposition__note_update+0x384>)
 80016ee:	6253      	str	r3, [r2, #36]	; 0x24
	index[NOTE_As] += active[NOTE_As];
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <tranposition__note_update+0x384>)
 80016f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <tranposition__note_update+0x37c>)
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	4413      	add	r3, r2
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <tranposition__note_update+0x384>)
 80016fc:	6293      	str	r3, [r2, #40]	; 0x28
	index[NOTE_B] += active[NOTE_B];
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <tranposition__note_update+0x384>)
 8001700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <tranposition__note_update+0x37c>)
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	4413      	add	r3, r2
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <tranposition__note_update+0x384>)
 800170a:	62d3      	str	r3, [r2, #44]	; 0x2c



	return	wave_out;
 800170c:	687b      	ldr	r3, [r7, #4]

}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000030 	.word	0x20000030
 8001720:	20000394 	.word	0x20000394
 8001724:	20000000 	.word	0x20000000
 8001728:	20000398 	.word	0x20000398

0800172c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001730:	f7ff fc8a 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <LoopForever+0x6>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	; (800176c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <LoopForever+0xe>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	; (8001778 <LoopForever+0x16>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f003 ffa5 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175e:	f7fe feb1 	bl	80004c4 <main>

08001762 <LoopForever>:

LoopForever:
    b LoopForever
 8001762:	e7fe      	b.n	8001762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001764:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8001770:	0803cd1c 	.word	0x0803cd1c
  ldr r2, =_sbss
 8001774:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8001778:	200003d0 	.word	0x200003d0

0800177c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_2_IRQHandler>
	...

08001780 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_Init+0x3c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_Init+0x3c>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001794:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001796:	2003      	movs	r0, #3
 8001798:	f000 f962 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179c:	2000      	movs	r0, #0
 800179e:	f000 f80f 	bl	80017c0 <HAL_InitTick>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	e001      	b.n	80017b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ae:	f7ff fa43 	bl	8000c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b2:	79fb      	ldrb	r3, [r7, #7]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <HAL_InitTick+0x6c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d023      	beq.n	800181c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_InitTick+0x70>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_InitTick+0x6c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f96d 	bl	8001aca <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10f      	bne.n	8001816 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d809      	bhi.n	8001810 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f937 	bl	8001a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_InitTick+0x74>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e007      	b.n	8001820 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e004      	b.n	8001820 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e001      	b.n	8001820 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200001c0 	.word	0x200001c0
 8001830:	20000064 	.word	0x20000064
 8001834:	200001bc 	.word	0x200001bc

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x20>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_IncTick+0x24>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200001c0 	.word	0x200001c0
 800185c:	200003cc 	.word	0x200003cc

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	200003cc 	.word	0x200003cc

08001878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff ffee 	bl	8001860 <HAL_GetTick>
 8001884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d005      	beq.n	800189e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_Delay+0x44>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800189e:	bf00      	nop
 80018a0:	f7ff ffde 	bl	8001860 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <HAL_Delay+0x28>
  {
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200001c0 	.word	0x200001c0

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	; (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e014      	b.n	8001b1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	791b      	ldrb	r3, [r3, #4]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d105      	bne.n	8001b0a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff f8bb 	bl	8000c80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	795b      	ldrb	r3, [r3, #5]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_DAC_Start+0x16>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e03b      	b.n	8001bb4 <HAL_DAC_Start+0x8e>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2201      	movs	r2, #1
 8001b56:	409a      	lsls	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d118      	bne.n	8001ba6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	e00f      	b.n	8001ba6 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b94:	d107      	bne.n	8001ba6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0202 	orr.w	r2, r2, #2
 8001ba4:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bd6:	d120      	bne.n	8001c1a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be6:	d118      	bne.n	8001c1a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2204      	movs	r2, #4
 8001bec:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c12:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f852 	bl	8001cbe <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c28:	d120      	bne.n	8001c6c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c38:	d118      	bne.n	8001c6c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f043 0202 	orr.w	r2, r3, #2
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001c64:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f95a 	bl	8001f20 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	3308      	adds	r3, #8
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e004      	b.n	8001ca8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3314      	adds	r3, #20
 8001ca6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	461a      	mov	r2, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b088      	sub	sp, #32
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	795b      	ldrb	r3, [r3, #5]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_DAC_ConfigChannel+0x1c>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e114      	b.n	8001f18 <HAL_DAC_ConfigChannel+0x246>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	f040 8081 	bne.w	8001e06 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001d04:	f7ff fdac 	bl	8001860 <HAL_GetTick>
 8001d08:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d140      	bne.n	8001d92 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d10:	e018      	b.n	8001d44 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d12:	f7ff fda5 	bl	8001860 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d911      	bls.n	8001d44 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f043 0208 	orr.w	r2, r3, #8
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0e9      	b.n	8001f18 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1df      	bne.n	8001d12 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff fd90 	bl	8001878 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	6992      	ldr	r2, [r2, #24]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
 8001d62:	e023      	b.n	8001dac <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d64:	f7ff fd7c 	bl	8001860 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d90f      	bls.n	8001d92 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da0a      	bge.n	8001d92 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f043 0208 	orr.w	r2, r3, #8
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0c2      	b.n	8001f18 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	dbe3      	blt.n	8001d64 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff fd6b 	bl	8001878 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	6992      	ldr	r2, [r2, #24]
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	ea02 0103 	and.w	r1, r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	21ff      	movs	r1, #255	; 0xff
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	ea02 0103 	and.w	r1, r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	6a1a      	ldr	r2, [r3, #32]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d11d      	bne.n	8001e4a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e14:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	221f      	movs	r2, #31
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2207      	movs	r2, #7
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	22c0      	movs	r2, #192	; 0xc0
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43da      	mvns	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	400a      	ands	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d008      	beq.n	8001f5e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e022      	b.n	8001fa4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 020e 	bic.w	r2, r2, #14
 8001f6c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f003 021c 	and.w	r2, r3, #28
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d005      	beq.n	8001fd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e029      	b.n	8002028 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020e 	bic.w	r2, r2, #14
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	f003 021c 	and.w	r2, r3, #28
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	2101      	movs	r1, #1
 8002002:	fa01 f202 	lsl.w	r2, r1, r2
 8002006:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
    }
  }
  return status;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002042:	e17f      	b.n	8002344 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2101      	movs	r1, #1
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8171 	beq.w	800233e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d005      	beq.n	8002074 <HAL_GPIO_Init+0x40>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d130      	bne.n	80020d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020aa:	2201      	movs	r2, #1
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f003 0201 	and.w	r2, r3, #1
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d118      	bne.n	8002114 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020e8:	2201      	movs	r2, #1
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	08db      	lsrs	r3, r3, #3
 80020fe:	f003 0201 	and.w	r2, r3, #1
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b03      	cmp	r3, #3
 800211e:	d017      	beq.n	8002150 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d123      	bne.n	80021a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	6939      	ldr	r1, [r7, #16]
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80ac 	beq.w	800233e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	4b5f      	ldr	r3, [pc, #380]	; (8002364 <HAL_GPIO_Init+0x330>)
 80021e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ea:	4a5e      	ldr	r2, [pc, #376]	; (8002364 <HAL_GPIO_Init+0x330>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6613      	str	r3, [r2, #96]	; 0x60
 80021f2:	4b5c      	ldr	r3, [pc, #368]	; (8002364 <HAL_GPIO_Init+0x330>)
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021fe:	4a5a      	ldr	r2, [pc, #360]	; (8002368 <HAL_GPIO_Init+0x334>)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002228:	d025      	beq.n	8002276 <HAL_GPIO_Init+0x242>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4f      	ldr	r2, [pc, #316]	; (800236c <HAL_GPIO_Init+0x338>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01f      	beq.n	8002272 <HAL_GPIO_Init+0x23e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4e      	ldr	r2, [pc, #312]	; (8002370 <HAL_GPIO_Init+0x33c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d019      	beq.n	800226e <HAL_GPIO_Init+0x23a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4d      	ldr	r2, [pc, #308]	; (8002374 <HAL_GPIO_Init+0x340>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_GPIO_Init+0x236>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4c      	ldr	r2, [pc, #304]	; (8002378 <HAL_GPIO_Init+0x344>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00d      	beq.n	8002266 <HAL_GPIO_Init+0x232>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4b      	ldr	r2, [pc, #300]	; (800237c <HAL_GPIO_Init+0x348>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d007      	beq.n	8002262 <HAL_GPIO_Init+0x22e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4a      	ldr	r2, [pc, #296]	; (8002380 <HAL_GPIO_Init+0x34c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_GPIO_Init+0x22a>
 800225a:	2306      	movs	r3, #6
 800225c:	e00c      	b.n	8002278 <HAL_GPIO_Init+0x244>
 800225e:	2307      	movs	r3, #7
 8002260:	e00a      	b.n	8002278 <HAL_GPIO_Init+0x244>
 8002262:	2305      	movs	r3, #5
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x244>
 8002266:	2304      	movs	r3, #4
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x244>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x244>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x244>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x244>
 8002276:	2300      	movs	r3, #0
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002288:	4937      	ldr	r1, [pc, #220]	; (8002368 <HAL_GPIO_Init+0x334>)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_GPIO_Init+0x350>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022ba:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_GPIO_Init+0x350>)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022c0:	4b30      	ldr	r3, [pc, #192]	; (8002384 <HAL_GPIO_Init+0x350>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <HAL_GPIO_Init+0x350>)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_GPIO_Init+0x350>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800230e:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_GPIO_Init+0x350>)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_GPIO_Init+0x350>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002338:	4a12      	ldr	r2, [pc, #72]	; (8002384 <HAL_GPIO_Init+0x350>)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	f47f ae78 	bne.w	8002044 <HAL_GPIO_Init+0x10>
  }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	40010000 	.word	0x40010000
 800236c:	48000400 	.word	0x48000400
 8002370:	48000800 	.word	0x48000800
 8002374:	48000c00 	.word	0x48000c00
 8002378:	48001000 	.word	0x48001000
 800237c:	48001400 	.word	0x48001400
 8002380:	48001800 	.word	0x48001800
 8002384:	40010400 	.word	0x40010400

08002388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	887b      	ldrh	r3, [r7, #2]
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e001      	b.n	80023aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fad6 	bl	8000988 <HAL_GPIO_EXTI_Callback>
  }
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40010400 	.word	0x40010400

080023e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e08d      	b.n	8002516 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fc7c 	bl	8000d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2224      	movs	r2, #36	; 0x24
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002438:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002448:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d107      	bne.n	8002462 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	e006      	b.n	8002470 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800246e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d108      	bne.n	800248a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	e007      	b.n	800249a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002498:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69d9      	ldr	r1, [r3, #28]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1a      	ldr	r2, [r3, #32]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b20      	cmp	r3, #32
 8002532:	d138      	bne.n	80025a6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800253e:	2302      	movs	r3, #2
 8002540:	e032      	b.n	80025a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2224      	movs	r2, #36	; 0x24
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002570:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6819      	ldr	r1, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
  }
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d139      	bne.n	800263e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e033      	b.n	8002640 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002606:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_PWREx_GetVoltageRange+0x18>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40007000 	.word	0x40007000

08002668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002676:	d130      	bne.n	80026da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002678:	4b23      	ldr	r3, [pc, #140]	; (8002708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002684:	d038      	beq.n	80026f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800268e:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002694:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2232      	movs	r2, #50	; 0x32
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	0c9b      	lsrs	r3, r3, #18
 80026a8:	3301      	adds	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ac:	e002      	b.n	80026b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c0:	d102      	bne.n	80026c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f2      	bne.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d4:	d110      	bne.n	80026f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e00f      	b.n	80026fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d007      	beq.n	80026f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026f0:	4a05      	ldr	r2, [pc, #20]	; (8002708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40007000 	.word	0x40007000
 800270c:	20000064 	.word	0x20000064
 8002710:	431bde83 	.word	0x431bde83

08002714 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e3ca      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002726:	4b97      	ldr	r3, [pc, #604]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002730:	4b94      	ldr	r3, [pc, #592]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80e4 	beq.w	8002910 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_RCC_OscConfig+0x4a>
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	f040 808b 	bne.w	800286c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b01      	cmp	r3, #1
 800275a:	f040 8087 	bne.w	800286c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800275e:	4b89      	ldr	r3, [pc, #548]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_RCC_OscConfig+0x62>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e3a2      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1a      	ldr	r2, [r3, #32]
 800277a:	4b82      	ldr	r3, [pc, #520]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d004      	beq.n	8002790 <HAL_RCC_OscConfig+0x7c>
 8002786:	4b7f      	ldr	r3, [pc, #508]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800278e:	e005      	b.n	800279c <HAL_RCC_OscConfig+0x88>
 8002790:	4b7c      	ldr	r3, [pc, #496]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800279c:	4293      	cmp	r3, r2
 800279e:	d223      	bcs.n	80027e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fd55 	bl	8003254 <RCC_SetFlashLatencyFromMSIRange>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e383      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b4:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a72      	ldr	r2, [pc, #456]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80027ba:	f043 0308 	orr.w	r3, r3, #8
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b70      	ldr	r3, [pc, #448]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	496d      	ldr	r1, [pc, #436]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027d2:	4b6c      	ldr	r3, [pc, #432]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	4968      	ldr	r1, [pc, #416]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
 80027e6:	e025      	b.n	8002834 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e8:	4b66      	ldr	r3, [pc, #408]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a65      	ldr	r2, [pc, #404]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80027ee:	f043 0308 	orr.w	r3, r3, #8
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4960      	ldr	r1, [pc, #384]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002806:	4b5f      	ldr	r3, [pc, #380]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	495b      	ldr	r1, [pc, #364]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fd15 	bl	8003254 <RCC_SetFlashLatencyFromMSIRange>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e343      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002834:	f000 fc4a 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b52      	ldr	r3, [pc, #328]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	4950      	ldr	r1, [pc, #320]	; (8002988 <HAL_RCC_OscConfig+0x274>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	4a4e      	ldr	r2, [pc, #312]	; (800298c <HAL_RCC_OscConfig+0x278>)
 8002852:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002854:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <HAL_RCC_OscConfig+0x27c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe ffb1 	bl	80017c0 <HAL_InitTick>
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d052      	beq.n	800290e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	e327      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d032      	beq.n	80028da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002874:	4b43      	ldr	r3, [pc, #268]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a42      	ldr	r2, [pc, #264]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002880:	f7fe ffee 	bl	8001860 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002888:	f7fe ffea 	bl	8001860 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e310      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800289a:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a36      	ldr	r2, [pc, #216]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028ac:	f043 0308 	orr.w	r3, r3, #8
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b34      	ldr	r3, [pc, #208]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4931      	ldr	r1, [pc, #196]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028c4:	4b2f      	ldr	r3, [pc, #188]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	492c      	ldr	r1, [pc, #176]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
 80028d8:	e01a      	b.n	8002910 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028da:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a29      	ldr	r2, [pc, #164]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028e6:	f7fe ffbb 	bl	8001860 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ee:	f7fe ffb7 	bl	8001860 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e2dd      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002900:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0x1da>
 800290c:	e000      	b.n	8002910 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800290e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d074      	beq.n	8002a06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b08      	cmp	r3, #8
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x21a>
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b0c      	cmp	r3, #12
 8002926:	d10e      	bne.n	8002946 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b03      	cmp	r3, #3
 800292c:	d10b      	bne.n	8002946 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d064      	beq.n	8002a04 <HAL_RCC_OscConfig+0x2f0>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d160      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e2ba      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x24a>
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e026      	b.n	80029ac <HAL_RCC_OscConfig+0x298>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002966:	d115      	bne.n	8002994 <HAL_RCC_OscConfig+0x280>
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a05      	ldr	r2, [pc, #20]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 800296e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a02      	ldr	r2, [pc, #8]	; (8002984 <HAL_RCC_OscConfig+0x270>)
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	e014      	b.n	80029ac <HAL_RCC_OscConfig+0x298>
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	08007e18 	.word	0x08007e18
 800298c:	20000064 	.word	0x20000064
 8002990:	200001bc 	.word	0x200001bc
 8002994:	4ba0      	ldr	r3, [pc, #640]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a9f      	ldr	r2, [pc, #636]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b9d      	ldr	r3, [pc, #628]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a9c      	ldr	r2, [pc, #624]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe ff54 	bl	8001860 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe ff50 	bl	8001860 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e276      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ce:	4b92      	ldr	r3, [pc, #584]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x2a8>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe ff40 	bl	8001860 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe ff3c 	bl	8001860 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e262      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f6:	4b88      	ldr	r3, [pc, #544]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x2d0>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d060      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_OscConfig+0x310>
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d119      	bne.n	8002a52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d116      	bne.n	8002a52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a24:	4b7c      	ldr	r3, [pc, #496]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_OscConfig+0x328>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e23f      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3c:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	4973      	ldr	r1, [pc, #460]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a50:	e040      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d023      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5a:	4b6f      	ldr	r3, [pc, #444]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6e      	ldr	r2, [pc, #440]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7fe fefb 	bl	8001860 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fef7 	bl	8001860 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e21d      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a80:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8c:	4b62      	ldr	r3, [pc, #392]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	495f      	ldr	r1, [pc, #380]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
 8002aa0:	e018      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5c      	ldr	r2, [pc, #368]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7fe fed7 	bl	8001860 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fed3 	bl	8001860 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e1f9      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac8:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f0      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d03c      	beq.n	8002b5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae8:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aee:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7fe feb2 	bl	8001860 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b00:	f7fe feae 	bl	8001860 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1d4      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ef      	beq.n	8002b00 <HAL_RCC_OscConfig+0x3ec>
 8002b20:	e01b      	b.n	8002b5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b22:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b28:	4a3b      	ldr	r2, [pc, #236]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	f023 0301 	bic.w	r3, r3, #1
 8002b2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7fe fe95 	bl	8001860 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3a:	f7fe fe91 	bl	8001860 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1b7      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b4c:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1ef      	bne.n	8002b3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80a6 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10d      	bne.n	8002b94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6593      	str	r3, [r2, #88]	; 0x58
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b90:	2301      	movs	r3, #1
 8002b92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCC_OscConfig+0x508>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d118      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_RCC_OscConfig+0x508>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_RCC_OscConfig+0x508>)
 8002ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002baa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bac:	f7fe fe58 	bl	8001860 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb4:	f7fe fe54 	bl	8001860 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e17a      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_RCC_OscConfig+0x508>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d108      	bne.n	8002bec <HAL_RCC_OscConfig+0x4d8>
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bea:	e029      	b.n	8002c40 <HAL_RCC_OscConfig+0x52c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d115      	bne.n	8002c20 <HAL_RCC_OscConfig+0x50c>
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	4a03      	ldr	r2, [pc, #12]	; (8002c18 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c14:	e014      	b.n	8002c40 <HAL_RCC_OscConfig+0x52c>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	4b9c      	ldr	r3, [pc, #624]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	4a9b      	ldr	r2, [pc, #620]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c30:	4b98      	ldr	r3, [pc, #608]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	4a97      	ldr	r2, [pc, #604]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002c38:	f023 0304 	bic.w	r3, r3, #4
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d016      	beq.n	8002c76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fe0a 	bl	8001860 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe fe06 	bl	8001860 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e12a      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c66:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ed      	beq.n	8002c50 <HAL_RCC_OscConfig+0x53c>
 8002c74:	e015      	b.n	8002ca2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fe fdf3 	bl	8001860 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7e:	f7fe fdef 	bl	8001860 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e113      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c94:	4b7f      	ldr	r3, [pc, #508]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ed      	bne.n	8002c7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca2:	7ffb      	ldrb	r3, [r7, #31]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca8:	4b7a      	ldr	r3, [pc, #488]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	4a79      	ldr	r2, [pc, #484]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80fe 	beq.w	8002eba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	f040 80d0 	bne.w	8002e68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cc8:	4b72      	ldr	r3, [pc, #456]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f003 0203 	and.w	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d130      	bne.n	8002d3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d127      	bne.n	8002d3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d11f      	bne.n	8002d3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d08:	2a07      	cmp	r2, #7
 8002d0a:	bf14      	ite	ne
 8002d0c:	2201      	movne	r2, #1
 8002d0e:	2200      	moveq	r2, #0
 8002d10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d113      	bne.n	8002d3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	3b01      	subs	r3, #1
 8002d24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	3b01      	subs	r3, #1
 8002d38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d06e      	beq.n	8002e1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d069      	beq.n	8002e18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d44:	4b53      	ldr	r3, [pc, #332]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d50:	4b50      	ldr	r3, [pc, #320]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0ad      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d60:	4b4c      	ldr	r3, [pc, #304]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a4b      	ldr	r2, [pc, #300]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d6c:	f7fe fd78 	bl	8001860 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d74:	f7fe fd74 	bl	8001860 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e09a      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d92:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	4b40      	ldr	r3, [pc, #256]	; (8002e98 <HAL_RCC_OscConfig+0x784>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002da2:	3a01      	subs	r2, #1
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	4311      	orrs	r1, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dac:	0212      	lsls	r2, r2, #8
 8002dae:	4311      	orrs	r1, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002db4:	0852      	lsrs	r2, r2, #1
 8002db6:	3a01      	subs	r2, #1
 8002db8:	0552      	lsls	r2, r2, #21
 8002dba:	4311      	orrs	r1, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dc0:	0852      	lsrs	r2, r2, #1
 8002dc2:	3a01      	subs	r2, #1
 8002dc4:	0652      	lsls	r2, r2, #25
 8002dc6:	4311      	orrs	r1, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dcc:	0912      	lsrs	r2, r2, #4
 8002dce:	0452      	lsls	r2, r2, #17
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	4930      	ldr	r1, [pc, #192]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2d      	ldr	r2, [pc, #180]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002de2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002de4:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002df0:	f7fe fd36 	bl	8001860 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fd32 	bl	8001860 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e058      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e16:	e050      	b.n	8002eba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e04f      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d148      	bne.n	8002eba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a16      	ldr	r2, [pc, #88]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e40:	f7fe fd0e 	bl	8001860 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fd0a 	bl	8001860 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e030      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x734>
 8002e66:	e028      	b.n	8002eba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d023      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <HAL_RCC_OscConfig+0x780>)
 8002e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fcf1 	bl	8001860 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e80:	e00c      	b.n	8002e9c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe fced 	bl	8001860 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d905      	bls.n	8002e9c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e013      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
 8002e94:	40021000 	.word	0x40021000
 8002e98:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_RCC_OscConfig+0x7b0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ec      	bne.n	8002e82 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_RCC_OscConfig+0x7b0>)
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	4905      	ldr	r1, [pc, #20]	; (8002ec4 <HAL_RCC_OscConfig+0x7b0>)
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_OscConfig+0x7b4>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60cb      	str	r3, [r1, #12]
 8002eb4:	e001      	b.n	8002eba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	feeefffc 	.word	0xfeeefffc

08002ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0e7      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b75      	ldr	r3, [pc, #468]	; (80030b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d910      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b72      	ldr	r3, [pc, #456]	; (80030b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 0207 	bic.w	r2, r3, #7
 8002ef6:	4970      	ldr	r1, [pc, #448]	; (80030b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b6e      	ldr	r3, [pc, #440]	; (80030b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0cf      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d010      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	4b66      	ldr	r3, [pc, #408]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d908      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4960      	ldr	r1, [pc, #384]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d04c      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f52:	4b5a      	ldr	r3, [pc, #360]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d121      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0a6      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6a:	4b54      	ldr	r3, [pc, #336]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d115      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e09a      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f82:	4b4e      	ldr	r3, [pc, #312]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e08e      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f92:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e086      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fa2:	4b46      	ldr	r3, [pc, #280]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f023 0203 	bic.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4943      	ldr	r1, [pc, #268]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb4:	f7fe fc54 	bl	8001860 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fe fc50 	bl	8001860 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e06e      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 020c 	and.w	r2, r3, #12
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1eb      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d208      	bcs.n	8003012 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003000:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	492b      	ldr	r1, [pc, #172]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003012:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d210      	bcs.n	8003042 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 0207 	bic.w	r2, r3, #7
 8003028:	4923      	ldr	r1, [pc, #140]	; (80030b8 <HAL_RCC_ClockConfig+0x1ec>)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d001      	beq.n	8003042 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e036      	b.n	80030b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304e:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4918      	ldr	r1, [pc, #96]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4910      	ldr	r1, [pc, #64]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 800307c:	4313      	orrs	r3, r2
 800307e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003080:	f000 f824 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	490b      	ldr	r1, [pc, #44]	; (80030c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
 800309c:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 800309e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1fc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fe fb8b 	bl	80017c0 <HAL_InitTick>
 80030aa:	4603      	mov	r3, r0
 80030ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80030ae:	7afb      	ldrb	r3, [r7, #11]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40022000 	.word	0x40022000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08007e18 	.word	0x08007e18
 80030c4:	20000064 	.word	0x20000064
 80030c8:	200001bc 	.word	0x200001bc

080030cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	; 0x24
 80030d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030da:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e4:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x34>
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d121      	bne.n	800313e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d11e      	bne.n	800313e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003100:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800310c:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800310e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e005      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003128:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003130:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10d      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d102      	bne.n	800314a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	e004      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d101      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003150:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003152:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d134      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0xa6>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d003      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0xac>
 8003170:	e005      	b.n	800317e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003174:	617b      	str	r3, [r7, #20]
      break;
 8003176:	e005      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800317a:	617b      	str	r3, [r7, #20]
      break;
 800317c:	e002      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	617b      	str	r3, [r7, #20]
      break;
 8003182:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	3301      	adds	r3, #1
 8003190:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	fb03 f202 	mul.w	r2, r3, r2
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031aa:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	0e5b      	lsrs	r3, r3, #25
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	3301      	adds	r3, #1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031c4:	69bb      	ldr	r3, [r7, #24]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	08007e30 	.word	0x08007e30
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	007a1200 	.word	0x007a1200

080031e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000064 	.word	0x20000064

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4904      	ldr	r1, [pc, #16]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	08007e28 	.word	0x08007e28

08003228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800322c:	f7ff ffda 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0adb      	lsrs	r3, r3, #11
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4904      	ldr	r1, [pc, #16]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	08007e28 	.word	0x08007e28

08003254 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003260:	4b2a      	ldr	r3, [pc, #168]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800326c:	f7ff f9ee 	bl	800264c <HAL_PWREx_GetVoltageRange>
 8003270:	6178      	str	r0, [r7, #20]
 8003272:	e014      	b.n	800329e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	4a24      	ldr	r2, [pc, #144]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	6593      	str	r3, [r2, #88]	; 0x58
 8003280:	4b22      	ldr	r3, [pc, #136]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800328c:	f7ff f9de 	bl	800264c <HAL_PWREx_GetVoltageRange>
 8003290:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003292:	4b1e      	ldr	r3, [pc, #120]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	4a1d      	ldr	r2, [pc, #116]	; (800330c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a4:	d10b      	bne.n	80032be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b80      	cmp	r3, #128	; 0x80
 80032aa:	d919      	bls.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2ba0      	cmp	r3, #160	; 0xa0
 80032b0:	d902      	bls.n	80032b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032b2:	2302      	movs	r3, #2
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	e013      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032b8:	2301      	movs	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e010      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d902      	bls.n	80032ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032c4:	2303      	movs	r3, #3
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	e00a      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b80      	cmp	r3, #128	; 0x80
 80032ce:	d102      	bne.n	80032d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032d0:	2302      	movs	r3, #2
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	e004      	b.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b70      	cmp	r3, #112	; 0x70
 80032da:	d101      	bne.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032dc:	2301      	movs	r3, #1
 80032de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 0207 	bic.w	r2, r3, #7
 80032e8:	4909      	ldr	r1, [pc, #36]	; (8003310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	40022000 	.word	0x40022000

08003314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800331c:	2300      	movs	r3, #0
 800331e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003320:	2300      	movs	r3, #0
 8003322:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332c:	2b00      	cmp	r3, #0
 800332e:	d041      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003334:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003338:	d02a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800333a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800333e:	d824      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003340:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003344:	d008      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003346:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800334a:	d81e      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003354:	d010      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003356:	e018      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003358:	4b86      	ldr	r3, [pc, #536]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a85      	ldr	r2, [pc, #532]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003362:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003364:	e015      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fabb 	bl	80038e8 <RCCEx_PLLSAI1_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003376:	e00c      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3320      	adds	r3, #32
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fba6 	bl	8003ad0 <RCCEx_PLLSAI2_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003388:	e003      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	74fb      	strb	r3, [r7, #19]
      break;
 800338e:	e000      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003398:	4b76      	ldr	r3, [pc, #472]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a6:	4973      	ldr	r1, [pc, #460]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033ae:	e001      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d041      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033c8:	d02a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033ce:	d824      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033d4:	d008      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033da:	d81e      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033e4:	d010      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033e6:	e018      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033e8:	4b62      	ldr	r3, [pc, #392]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a61      	ldr	r2, [pc, #388]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033f4:	e015      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fa73 	bl	80038e8 <RCCEx_PLLSAI1_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003406:	e00c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3320      	adds	r3, #32
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fb5e 	bl	8003ad0 <RCCEx_PLLSAI2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	74fb      	strb	r3, [r7, #19]
      break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003428:	4b52      	ldr	r3, [pc, #328]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003436:	494f      	ldr	r1, [pc, #316]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800343e:	e001      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a0 	beq.w	8003592 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003456:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00d      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	4a40      	ldr	r2, [pc, #256]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003476:	6593      	str	r3, [r2, #88]	; 0x58
 8003478:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003484:	2301      	movs	r3, #1
 8003486:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003488:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800348e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003492:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003494:	f7fe f9e4 	bl	8001860 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800349a:	e009      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349c:	f7fe f9e0 	bl	8001860 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d902      	bls.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	74fb      	strb	r3, [r7, #19]
        break;
 80034ae:	e005      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034b0:	4b31      	ldr	r3, [pc, #196]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ef      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d15c      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01f      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d019      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034e0:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ec:	4b21      	ldr	r3, [pc, #132]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	4a20      	ldr	r2, [pc, #128]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fe f99f 	bl	8001860 <HAL_GetTick>
 8003522:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003524:	e00b      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fe f99b 	bl	8001860 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d902      	bls.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	74fb      	strb	r3, [r7, #19]
            break;
 800353c:	e006      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ec      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10c      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003562:	4904      	ldr	r1, [pc, #16]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800356a:	e009      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
 8003570:	e006      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003580:	7c7b      	ldrb	r3, [r7, #17]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d105      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003586:	4b9e      	ldr	r3, [pc, #632]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	4a9d      	ldr	r2, [pc, #628]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003590:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800359e:	4b98      	ldr	r3, [pc, #608]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f023 0203 	bic.w	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	4994      	ldr	r1, [pc, #592]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035c0:	4b8f      	ldr	r3, [pc, #572]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f023 020c 	bic.w	r2, r3, #12
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	498c      	ldr	r1, [pc, #560]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035e2:	4b87      	ldr	r3, [pc, #540]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	4983      	ldr	r1, [pc, #524]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003604:	4b7e      	ldr	r3, [pc, #504]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	497b      	ldr	r1, [pc, #492]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003626:	4b76      	ldr	r3, [pc, #472]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003634:	4972      	ldr	r1, [pc, #456]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003648:	4b6d      	ldr	r3, [pc, #436]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	496a      	ldr	r1, [pc, #424]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800366a:	4b65      	ldr	r3, [pc, #404]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003678:	4961      	ldr	r1, [pc, #388]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800368c:	4b5c      	ldr	r3, [pc, #368]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	4959      	ldr	r1, [pc, #356]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ae:	4b54      	ldr	r3, [pc, #336]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	4950      	ldr	r1, [pc, #320]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036d0:	4b4b      	ldr	r3, [pc, #300]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	4948      	ldr	r1, [pc, #288]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036f2:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	493f      	ldr	r1, [pc, #252]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d028      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003714:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003722:	4937      	ldr	r1, [pc, #220]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003732:	d106      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003734:	4b32      	ldr	r3, [pc, #200]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a31      	ldr	r2, [pc, #196]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373e:	60d3      	str	r3, [r2, #12]
 8003740:	e011      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003746:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374a:	d10c      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f8c8 	bl	80038e8 <RCCEx_PLLSAI1_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003762:	7cfb      	ldrb	r3, [r7, #19]
 8003764:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d028      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003772:	4b23      	ldr	r3, [pc, #140]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	491f      	ldr	r1, [pc, #124]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003790:	d106      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003792:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379c:	60d3      	str	r3, [r2, #12]
 800379e:	e011      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 f899 	bl	80038e8 <RCCEx_PLLSAI1_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02b      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037de:	4908      	ldr	r1, [pc, #32]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ee:	d109      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a02      	ldr	r2, [pc, #8]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e014      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	2101      	movs	r1, #1
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f867 	bl	80038e8 <RCCEx_PLLSAI1_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02f      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003834:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003842:	4928      	ldr	r1, [pc, #160]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800384e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003852:	d10d      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f844 	bl	80038e8 <RCCEx_PLLSAI1_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d014      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	74bb      	strb	r3, [r7, #18]
 800386e:	e011      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003878:	d10c      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3320      	adds	r3, #32
 800387e:	2102      	movs	r1, #2
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f925 	bl	8003ad0 <RCCEx_PLLSAI2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ae:	490d      	ldr	r1, [pc, #52]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d2:	4904      	ldr	r1, [pc, #16]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038da:	7cbb      	ldrb	r3, [r7, #18]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021000 	.word	0x40021000

080038e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038f6:	4b75      	ldr	r3, [pc, #468]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d018      	beq.n	8003934 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003902:	4b72      	ldr	r3, [pc, #456]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0203 	and.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d10d      	bne.n	800392e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
       ||
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800391a:	4b6c      	ldr	r3, [pc, #432]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
       ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d047      	beq.n	80039be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
 8003932:	e044      	b.n	80039be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d018      	beq.n	800396e <RCCEx_PLLSAI1_Config+0x86>
 800393c:	2b03      	cmp	r3, #3
 800393e:	d825      	bhi.n	800398c <RCCEx_PLLSAI1_Config+0xa4>
 8003940:	2b01      	cmp	r3, #1
 8003942:	d002      	beq.n	800394a <RCCEx_PLLSAI1_Config+0x62>
 8003944:	2b02      	cmp	r3, #2
 8003946:	d009      	beq.n	800395c <RCCEx_PLLSAI1_Config+0x74>
 8003948:	e020      	b.n	800398c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800394a:	4b60      	ldr	r3, [pc, #384]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d11d      	bne.n	8003992 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800395a:	e01a      	b.n	8003992 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800395c:	4b5b      	ldr	r3, [pc, #364]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003964:	2b00      	cmp	r3, #0
 8003966:	d116      	bne.n	8003996 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800396c:	e013      	b.n	8003996 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800396e:	4b57      	ldr	r3, [pc, #348]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800397a:	4b54      	ldr	r3, [pc, #336]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800398a:	e006      	b.n	800399a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      break;
 8003990:	e004      	b.n	800399c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003992:	bf00      	nop
 8003994:	e002      	b.n	800399c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800399a:	bf00      	nop
    }

    if(status == HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039a2:	4b4a      	ldr	r3, [pc, #296]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6819      	ldr	r1, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	430b      	orrs	r3, r1
 80039b8:	4944      	ldr	r1, [pc, #272]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d17d      	bne.n	8003ac0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039c4:	4b41      	ldr	r3, [pc, #260]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a40      	ldr	r2, [pc, #256]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d0:	f7fd ff46 	bl	8001860 <HAL_GetTick>
 80039d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039d6:	e009      	b.n	80039ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d8:	f7fd ff42 	bl	8001860 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d902      	bls.n	80039ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	73fb      	strb	r3, [r7, #15]
        break;
 80039ea:	e005      	b.n	80039f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039ec:	4b37      	ldr	r3, [pc, #220]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1ef      	bne.n	80039d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d160      	bne.n	8003ac0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d111      	bne.n	8003a28 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a04:	4b31      	ldr	r3, [pc, #196]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6892      	ldr	r2, [r2, #8]
 8003a14:	0211      	lsls	r1, r2, #8
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68d2      	ldr	r2, [r2, #12]
 8003a1a:	0912      	lsrs	r2, r2, #4
 8003a1c:	0452      	lsls	r2, r2, #17
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	492a      	ldr	r1, [pc, #168]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	610b      	str	r3, [r1, #16]
 8003a26:	e027      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d112      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a2e:	4b27      	ldr	r3, [pc, #156]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6892      	ldr	r2, [r2, #8]
 8003a3e:	0211      	lsls	r1, r2, #8
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6912      	ldr	r2, [r2, #16]
 8003a44:	0852      	lsrs	r2, r2, #1
 8003a46:	3a01      	subs	r2, #1
 8003a48:	0552      	lsls	r2, r2, #21
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	491f      	ldr	r1, [pc, #124]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	610b      	str	r3, [r1, #16]
 8003a52:	e011      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6892      	ldr	r2, [r2, #8]
 8003a64:	0211      	lsls	r1, r2, #8
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6952      	ldr	r2, [r2, #20]
 8003a6a:	0852      	lsrs	r2, r2, #1
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	0652      	lsls	r2, r2, #25
 8003a70:	430a      	orrs	r2, r1
 8003a72:	4916      	ldr	r1, [pc, #88]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a13      	ldr	r2, [pc, #76]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fd feec 	bl	8001860 <HAL_GetTick>
 8003a88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a8a:	e009      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a8c:	f7fd fee8 	bl	8001860 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d902      	bls.n	8003aa0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a9e:	e005      	b.n	8003aac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ef      	beq.n	8003a8c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	4904      	ldr	r1, [pc, #16]	; (8003acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000

08003ad0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ade:	4b6a      	ldr	r3, [pc, #424]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d018      	beq.n	8003b1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003aea:	4b67      	ldr	r3, [pc, #412]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0203 	and.w	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d10d      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
       ||
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b02:	4b61      	ldr	r3, [pc, #388]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
       ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d047      	beq.n	8003ba6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
 8003b1a:	e044      	b.n	8003ba6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d018      	beq.n	8003b56 <RCCEx_PLLSAI2_Config+0x86>
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d825      	bhi.n	8003b74 <RCCEx_PLLSAI2_Config+0xa4>
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d002      	beq.n	8003b32 <RCCEx_PLLSAI2_Config+0x62>
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d009      	beq.n	8003b44 <RCCEx_PLLSAI2_Config+0x74>
 8003b30:	e020      	b.n	8003b74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b32:	4b55      	ldr	r3, [pc, #340]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11d      	bne.n	8003b7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b42:	e01a      	b.n	8003b7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b44:	4b50      	ldr	r3, [pc, #320]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d116      	bne.n	8003b7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b54:	e013      	b.n	8003b7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b56:	4b4c      	ldr	r3, [pc, #304]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b62:	4b49      	ldr	r3, [pc, #292]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b72:	e006      	b.n	8003b82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      break;
 8003b78:	e004      	b.n	8003b84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e002      	b.n	8003b84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10d      	bne.n	8003ba6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b8a:	4b3f      	ldr	r3, [pc, #252]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	4939      	ldr	r1, [pc, #228]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d167      	bne.n	8003c7c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bac:	4b36      	ldr	r3, [pc, #216]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a35      	ldr	r2, [pc, #212]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb8:	f7fd fe52 	bl	8001860 <HAL_GetTick>
 8003bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bbe:	e009      	b.n	8003bd4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bc0:	f7fd fe4e 	bl	8001860 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d902      	bls.n	8003bd4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8003bd2:	e005      	b.n	8003be0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bd4:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ef      	bne.n	8003bc0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d14a      	bne.n	8003c7c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d111      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bec:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6892      	ldr	r2, [r2, #8]
 8003bfc:	0211      	lsls	r1, r2, #8
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68d2      	ldr	r2, [r2, #12]
 8003c02:	0912      	lsrs	r2, r2, #4
 8003c04:	0452      	lsls	r2, r2, #17
 8003c06:	430a      	orrs	r2, r1
 8003c08:	491f      	ldr	r1, [pc, #124]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	614b      	str	r3, [r1, #20]
 8003c0e:	e011      	b.n	8003c34 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6892      	ldr	r2, [r2, #8]
 8003c20:	0211      	lsls	r1, r2, #8
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6912      	ldr	r2, [r2, #16]
 8003c26:	0852      	lsrs	r2, r2, #1
 8003c28:	3a01      	subs	r2, #1
 8003c2a:	0652      	lsls	r2, r2, #25
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	4916      	ldr	r1, [pc, #88]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fd fe0e 	bl	8001860 <HAL_GetTick>
 8003c44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c46:	e009      	b.n	8003c5c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c48:	f7fd fe0a 	bl	8001860 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d902      	bls.n	8003c5c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	73fb      	strb	r3, [r7, #15]
          break;
 8003c5a:	e005      	b.n	8003c68 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ef      	beq.n	8003c48 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	4904      	ldr	r1, [pc, #16]	; (8003c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000

08003c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e049      	b.n	8003d32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fd f888 	bl	8000dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f000 fa9a 	bl	8004204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d001      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e04f      	b.n	8003df4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a23      	ldr	r2, [pc, #140]	; (8003e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01d      	beq.n	8003db2 <HAL_TIM_Base_Start_IT+0x76>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7e:	d018      	beq.n	8003db2 <HAL_TIM_Base_Start_IT+0x76>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_TIM_Base_Start_IT+0x76>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_TIM_Base_Start_IT+0x76>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1c      	ldr	r2, [pc, #112]	; (8003e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_TIM_Base_Start_IT+0x76>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_TIM_Base_Start_IT+0x76>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d115      	bne.n	8003dde <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d015      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0xb4>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dca:	d011      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	e008      	b.n	8003df0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e000      	b.n	8003df2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00
 8003e10:	40013400 	.word	0x40013400
 8003e14:	40014000 	.word	0x40014000
 8003e18:	00010007 	.word	0x00010007

08003e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d020      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01b      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0202 	mvn.w	r2, #2
 8003e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f9ad 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f99f 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f9b0 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d020      	beq.n	8003ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01b      	beq.n	8003ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0204 	mvn.w	r2, #4
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f987 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f979 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f98a 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d020      	beq.n	8003f18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01b      	beq.n	8003f18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0208 	mvn.w	r2, #8
 8003ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2204      	movs	r2, #4
 8003eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f961 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8003f04:	e005      	b.n	8003f12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f953 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f964 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d020      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01b      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0210 	mvn.w	r2, #16
 8003f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2208      	movs	r2, #8
 8003f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f93b 	bl	80041c6 <HAL_TIM_IC_CaptureCallback>
 8003f50:	e005      	b.n	8003f5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f92d 	bl	80041b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f93e 	bl	80041da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0201 	mvn.w	r2, #1
 8003f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fc fe08 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00c      	beq.n	8003fac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 faf2 	bl	8004590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00c      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 faea 	bl	80045a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f8fd 	bl	80041ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00c      	beq.n	8004018 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0220 	mvn.w	r2, #32
 8004010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fab2 	bl	800457c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_TIM_ConfigClockSource+0x1c>
 8004038:	2302      	movs	r3, #2
 800403a:	e0b6      	b.n	80041aa <HAL_TIM_ConfigClockSource+0x18a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800405e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004078:	d03e      	beq.n	80040f8 <HAL_TIM_ConfigClockSource+0xd8>
 800407a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407e:	f200 8087 	bhi.w	8004190 <HAL_TIM_ConfigClockSource+0x170>
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	f000 8086 	beq.w	8004196 <HAL_TIM_ConfigClockSource+0x176>
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	d87f      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 8004090:	2b70      	cmp	r3, #112	; 0x70
 8004092:	d01a      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0xaa>
 8004094:	2b70      	cmp	r3, #112	; 0x70
 8004096:	d87b      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 8004098:	2b60      	cmp	r3, #96	; 0x60
 800409a:	d050      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x11e>
 800409c:	2b60      	cmp	r3, #96	; 0x60
 800409e:	d877      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 80040a0:	2b50      	cmp	r3, #80	; 0x50
 80040a2:	d03c      	beq.n	800411e <HAL_TIM_ConfigClockSource+0xfe>
 80040a4:	2b50      	cmp	r3, #80	; 0x50
 80040a6:	d873      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 80040a8:	2b40      	cmp	r3, #64	; 0x40
 80040aa:	d058      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x13e>
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d86f      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 80040b0:	2b30      	cmp	r3, #48	; 0x30
 80040b2:	d064      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15e>
 80040b4:	2b30      	cmp	r3, #48	; 0x30
 80040b6:	d86b      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d060      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15e>
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d867      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d05c      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15e>
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d05a      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x15e>
 80040c8:	e062      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040da:	f000 f9a7 	bl	800442c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	609a      	str	r2, [r3, #8]
      break;
 80040f6:	e04f      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004108:	f000 f990 	bl	800442c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800411a:	609a      	str	r2, [r3, #8]
      break;
 800411c:	e03c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800412a:	461a      	mov	r2, r3
 800412c:	f000 f904 	bl	8004338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2150      	movs	r1, #80	; 0x50
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f95d 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 800413c:	e02c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800414a:	461a      	mov	r2, r3
 800414c:	f000 f923 	bl	8004396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2160      	movs	r1, #96	; 0x60
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f94d 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 800415c:	e01c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416a:	461a      	mov	r2, r3
 800416c:	f000 f8e4 	bl	8004338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2140      	movs	r1, #64	; 0x40
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f93d 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 800417c:	e00c      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f000 f934 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 800418e:	e003      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e000      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a40      	ldr	r2, [pc, #256]	; (8004318 <TIM_Base_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004222:	d00f      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3d      	ldr	r2, [pc, #244]	; (800431c <TIM_Base_SetConfig+0x118>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <TIM_Base_SetConfig+0x11c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <TIM_Base_SetConfig+0x120>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0x40>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <TIM_Base_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d108      	bne.n	8004256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2f      	ldr	r2, [pc, #188]	; (8004318 <TIM_Base_SetConfig+0x114>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2c      	ldr	r2, [pc, #176]	; (800431c <TIM_Base_SetConfig+0x118>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <TIM_Base_SetConfig+0x11c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <TIM_Base_SetConfig+0x120>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a29      	ldr	r2, [pc, #164]	; (8004328 <TIM_Base_SetConfig+0x124>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a28      	ldr	r2, [pc, #160]	; (800432c <TIM_Base_SetConfig+0x128>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <TIM_Base_SetConfig+0x12c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0x9a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <TIM_Base_SetConfig+0x130>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <TIM_Base_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00f      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <TIM_Base_SetConfig+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a11      	ldr	r2, [pc, #68]	; (800432c <TIM_Base_SetConfig+0x128>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <TIM_Base_SetConfig+0x12c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0xf8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a0f      	ldr	r2, [pc, #60]	; (8004334 <TIM_Base_SetConfig+0x130>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40000400 	.word	0x40000400
 8004320:	40000800 	.word	0x40000800
 8004324:	40000c00 	.word	0x40000c00
 8004328:	40013400 	.word	0x40013400
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0201 	bic.w	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 030a 	bic.w	r3, r3, #10
 8004374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004396:	b480      	push	{r7}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f023 0210 	bic.w	r2, r3, #16
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	031b      	lsls	r3, r3, #12
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	f043 0307 	orr.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	021a      	lsls	r2, r3, #8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	431a      	orrs	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4313      	orrs	r3, r2
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	609a      	str	r2, [r3, #8]
}
 8004460:	bf00      	nop
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004480:	2302      	movs	r3, #2
 8004482:	e068      	b.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2e      	ldr	r2, [pc, #184]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2d      	ldr	r2, [pc, #180]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d108      	bne.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1e      	ldr	r2, [pc, #120]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01d      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f6:	d018      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1b      	ldr	r2, [pc, #108]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1a      	ldr	r2, [pc, #104]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d009      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a13      	ldr	r2, [pc, #76]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a14      	ldr	r2, [pc, #80]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10c      	bne.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	4313      	orrs	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40013400 	.word	0x40013400
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40014000 	.word	0x40014000

0800457c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e040      	b.n	800464c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fc36 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2224      	movs	r2, #36	; 0x24
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fdea 	bl	80051d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fb2f 	bl	8004c68 <UART_SetConfig>
 800460a:	4603      	mov	r3, r0
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e01b      	b.n	800464c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fe69 	bl	800531c <UART_CheckIdleState>
 800464a:	4603      	mov	r3, r0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b0ba      	sub	sp, #232	; 0xe8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800467a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800467e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004682:	4013      	ands	r3, r2
 8004684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d115      	bne.n	80046bc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00f      	beq.n	80046bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d009      	beq.n	80046bc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 82ae 	beq.w	8004c0e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
      }
      return;
 80046ba:	e2a8      	b.n	8004c0e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80046bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8117 	beq.w	80048f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046d6:	4b85      	ldr	r3, [pc, #532]	; (80048ec <HAL_UART_IRQHandler+0x298>)
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 810a 	beq.w	80048f4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d011      	beq.n	8004710 <HAL_UART_IRQHandler+0xbc>
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2201      	movs	r2, #1
 80046fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004706:	f043 0201 	orr.w	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d011      	beq.n	8004740 <HAL_UART_IRQHandler+0xec>
 800471c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2202      	movs	r2, #2
 800472e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004736:	f043 0204 	orr.w	r2, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d011      	beq.n	8004770 <HAL_UART_IRQHandler+0x11c>
 800474c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2204      	movs	r2, #4
 800475e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004766:	f043 0202 	orr.w	r2, r3, #2
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d017      	beq.n	80047ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2208      	movs	r2, #8
 800479a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a2:	f043 0208 	orr.w	r2, r3, #8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d012      	beq.n	80047de <HAL_UART_IRQHandler+0x18a>
 80047b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00c      	beq.n	80047de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d4:	f043 0220 	orr.w	r2, r3, #32
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8214 	beq.w	8004c12 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00d      	beq.n	8004812 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d005      	beq.n	8004836 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800482a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800482e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04f      	beq.n	80048d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fe7f 	bl	800553a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b40      	cmp	r3, #64	; 0x40
 8004848:	d141      	bne.n	80048ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3308      	adds	r3, #8
 8004850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3308      	adds	r3, #8
 8004872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800487a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800488e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1d9      	bne.n	800484a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489a:	2b00      	cmp	r3, #0
 800489c:	d013      	beq.n	80048c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a2:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <HAL_UART_IRQHandler+0x29c>)
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd fb80 	bl	8001fb0 <HAL_DMA_Abort_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048c0:	4610      	mov	r0, r2
 80048c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	e00f      	b.n	80048e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9b8 	bl	8004c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	e00b      	b.n	80048e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f9b4 	bl	8004c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d4:	e007      	b.n	80048e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f9b0 	bl	8004c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80048e4:	e195      	b.n	8004c12 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e6:	bf00      	nop
    return;
 80048e8:	e193      	b.n	8004c12 <HAL_UART_IRQHandler+0x5be>
 80048ea:	bf00      	nop
 80048ec:	04000120 	.word	0x04000120
 80048f0:	08005603 	.word	0x08005603

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	f040 814e 	bne.w	8004b9a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8147 	beq.w	8004b9a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8140 	beq.w	8004b9a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2210      	movs	r2, #16
 8004920:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	f040 80b8 	bne.w	8004aa2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800493e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8167 	beq.w	8004c16 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800494e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004952:	429a      	cmp	r2, r3
 8004954:	f080 815f 	bcs.w	8004c16 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800495e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	f040 8086 	bne.w	8004a80 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800498c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800499e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1da      	bne.n	8004974 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3308      	adds	r3, #8
 80049c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e1      	bne.n	80049be <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3308      	adds	r3, #8
 8004a00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e3      	bne.n	80049fa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a50:	f023 0310 	bic.w	r3, r3, #16
 8004a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a62:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e4      	bne.n	8004a40 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fd fa5a 	bl	8001f34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8d8 	bl	8004c50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aa0:	e0b9      	b.n	8004c16 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80ab 	beq.w	8004c1a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80a6 	beq.w	8004c1a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004af0:	647b      	str	r3, [r7, #68]	; 0x44
 8004af2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e4      	bne.n	8004ace <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	623b      	str	r3, [r7, #32]
   return(result);
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3308      	adds	r3, #8
 8004b24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b28:	633a      	str	r2, [r7, #48]	; 0x30
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e3      	bne.n	8004b04 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f023 0310 	bic.w	r3, r3, #16
 8004b64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	69b9      	ldr	r1, [r7, #24]
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e4      	bne.n	8004b50 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f85c 	bl	8004c50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b98:	e03f      	b.n	8004c1a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x570>
 8004ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fd60 	bl	8005682 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bc2:	e02d      	b.n	8004c20 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00e      	beq.n	8004bee <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01c      	beq.n	8004c1e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
    }
    return;
 8004bec:	e017      	b.n	8004c1e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d012      	beq.n	8004c20 <HAL_UART_IRQHandler+0x5cc>
 8004bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00c      	beq.n	8004c20 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fd11 	bl	800562e <UART_EndTransmit_IT>
    return;
 8004c0c:	e008      	b.n	8004c20 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004c0e:	bf00      	nop
 8004c10:	e006      	b.n	8004c20 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004c12:	bf00      	nop
 8004c14:	e004      	b.n	8004c20 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004c16:	bf00      	nop
 8004c18:	e002      	b.n	8004c20 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004c1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c20:	37e8      	adds	r7, #232	; 0xe8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop

08004c28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c6c:	b08a      	sub	sp, #40	; 0x28
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4ba4      	ldr	r3, [pc, #656]	; (8004f28 <UART_SetConfig+0x2c0>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	6812      	ldr	r2, [r2, #0]
 8004c9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a99      	ldr	r2, [pc, #612]	; (8004f2c <UART_SetConfig+0x2c4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d004      	beq.n	8004cd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a90      	ldr	r2, [pc, #576]	; (8004f30 <UART_SetConfig+0x2c8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d126      	bne.n	8004d40 <UART_SetConfig+0xd8>
 8004cf2:	4b90      	ldr	r3, [pc, #576]	; (8004f34 <UART_SetConfig+0x2cc>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d81b      	bhi.n	8004d38 <UART_SetConfig+0xd0>
 8004d00:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <UART_SetConfig+0xa0>)
 8004d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d06:	bf00      	nop
 8004d08:	08004d19 	.word	0x08004d19
 8004d0c:	08004d29 	.word	0x08004d29
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004d31 	.word	0x08004d31
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e116      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004d20:	2302      	movs	r3, #2
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d26:	e112      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e10e      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004d30:	2308      	movs	r3, #8
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	e10a      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004d38:	2310      	movs	r3, #16
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e106      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a7c      	ldr	r2, [pc, #496]	; (8004f38 <UART_SetConfig+0x2d0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d138      	bne.n	8004dbc <UART_SetConfig+0x154>
 8004d4a:	4b7a      	ldr	r3, [pc, #488]	; (8004f34 <UART_SetConfig+0x2cc>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f003 030c 	and.w	r3, r3, #12
 8004d54:	2b0c      	cmp	r3, #12
 8004d56:	d82d      	bhi.n	8004db4 <UART_SetConfig+0x14c>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0xf8>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004db5 	.word	0x08004db5
 8004d68:	08004db5 	.word	0x08004db5
 8004d6c:	08004db5 	.word	0x08004db5
 8004d70:	08004da5 	.word	0x08004da5
 8004d74:	08004db5 	.word	0x08004db5
 8004d78:	08004db5 	.word	0x08004db5
 8004d7c:	08004db5 	.word	0x08004db5
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	08004db5 	.word	0x08004db5
 8004d88:	08004db5 	.word	0x08004db5
 8004d8c:	08004db5 	.word	0x08004db5
 8004d90:	08004dad 	.word	0x08004dad
 8004d94:	2300      	movs	r3, #0
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e0d8      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e0d4      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004da4:	2304      	movs	r3, #4
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e0d0      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004dac:	2308      	movs	r3, #8
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db2:	e0cc      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004db4:	2310      	movs	r3, #16
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dba:	e0c8      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5e      	ldr	r2, [pc, #376]	; (8004f3c <UART_SetConfig+0x2d4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d125      	bne.n	8004e12 <UART_SetConfig+0x1aa>
 8004dc6:	4b5b      	ldr	r3, [pc, #364]	; (8004f34 <UART_SetConfig+0x2cc>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dd0:	2b30      	cmp	r3, #48	; 0x30
 8004dd2:	d016      	beq.n	8004e02 <UART_SetConfig+0x19a>
 8004dd4:	2b30      	cmp	r3, #48	; 0x30
 8004dd6:	d818      	bhi.n	8004e0a <UART_SetConfig+0x1a2>
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d00a      	beq.n	8004df2 <UART_SetConfig+0x18a>
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d814      	bhi.n	8004e0a <UART_SetConfig+0x1a2>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <UART_SetConfig+0x182>
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d008      	beq.n	8004dfa <UART_SetConfig+0x192>
 8004de8:	e00f      	b.n	8004e0a <UART_SetConfig+0x1a2>
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df0:	e0ad      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004df2:	2302      	movs	r3, #2
 8004df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df8:	e0a9      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e00:	e0a5      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004e02:	2308      	movs	r3, #8
 8004e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e08:	e0a1      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004e0a:	2310      	movs	r3, #16
 8004e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e10:	e09d      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a4a      	ldr	r2, [pc, #296]	; (8004f40 <UART_SetConfig+0x2d8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d125      	bne.n	8004e68 <UART_SetConfig+0x200>
 8004e1c:	4b45      	ldr	r3, [pc, #276]	; (8004f34 <UART_SetConfig+0x2cc>)
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e26:	2bc0      	cmp	r3, #192	; 0xc0
 8004e28:	d016      	beq.n	8004e58 <UART_SetConfig+0x1f0>
 8004e2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e2c:	d818      	bhi.n	8004e60 <UART_SetConfig+0x1f8>
 8004e2e:	2b80      	cmp	r3, #128	; 0x80
 8004e30:	d00a      	beq.n	8004e48 <UART_SetConfig+0x1e0>
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d814      	bhi.n	8004e60 <UART_SetConfig+0x1f8>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <UART_SetConfig+0x1d8>
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d008      	beq.n	8004e50 <UART_SetConfig+0x1e8>
 8004e3e:	e00f      	b.n	8004e60 <UART_SetConfig+0x1f8>
 8004e40:	2300      	movs	r3, #0
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e082      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e07e      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004e50:	2304      	movs	r3, #4
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e07a      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004e58:	2308      	movs	r3, #8
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e076      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004e60:	2310      	movs	r3, #16
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e66:	e072      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a35      	ldr	r2, [pc, #212]	; (8004f44 <UART_SetConfig+0x2dc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d12a      	bne.n	8004ec8 <UART_SetConfig+0x260>
 8004e72:	4b30      	ldr	r3, [pc, #192]	; (8004f34 <UART_SetConfig+0x2cc>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e80:	d01a      	beq.n	8004eb8 <UART_SetConfig+0x250>
 8004e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e86:	d81b      	bhi.n	8004ec0 <UART_SetConfig+0x258>
 8004e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8c:	d00c      	beq.n	8004ea8 <UART_SetConfig+0x240>
 8004e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e92:	d815      	bhi.n	8004ec0 <UART_SetConfig+0x258>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <UART_SetConfig+0x238>
 8004e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e9c:	d008      	beq.n	8004eb0 <UART_SetConfig+0x248>
 8004e9e:	e00f      	b.n	8004ec0 <UART_SetConfig+0x258>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea6:	e052      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eae:	e04e      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eb6:	e04a      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004eb8:	2308      	movs	r3, #8
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ebe:	e046      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec6:	e042      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <UART_SetConfig+0x2c4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d13a      	bne.n	8004f48 <UART_SetConfig+0x2e0>
 8004ed2:	4b18      	ldr	r3, [pc, #96]	; (8004f34 <UART_SetConfig+0x2cc>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee0:	d01a      	beq.n	8004f18 <UART_SetConfig+0x2b0>
 8004ee2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee6:	d81b      	bhi.n	8004f20 <UART_SetConfig+0x2b8>
 8004ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eec:	d00c      	beq.n	8004f08 <UART_SetConfig+0x2a0>
 8004eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef2:	d815      	bhi.n	8004f20 <UART_SetConfig+0x2b8>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <UART_SetConfig+0x298>
 8004ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efc:	d008      	beq.n	8004f10 <UART_SetConfig+0x2a8>
 8004efe:	e00f      	b.n	8004f20 <UART_SetConfig+0x2b8>
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f06:	e022      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0e:	e01e      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004f10:	2304      	movs	r3, #4
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f16:	e01a      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1e:	e016      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004f20:	2310      	movs	r3, #16
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f26:	e012      	b.n	8004f4e <UART_SetConfig+0x2e6>
 8004f28:	efff69f3 	.word	0xefff69f3
 8004f2c:	40008000 	.word	0x40008000
 8004f30:	40013800 	.word	0x40013800
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40004400 	.word	0x40004400
 8004f3c:	40004800 	.word	0x40004800
 8004f40:	40004c00 	.word	0x40004c00
 8004f44:	40005000 	.word	0x40005000
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a9f      	ldr	r2, [pc, #636]	; (80051d0 <UART_SetConfig+0x568>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d17a      	bne.n	800504e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d824      	bhi.n	8004faa <UART_SetConfig+0x342>
 8004f60:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <UART_SetConfig+0x300>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004fab 	.word	0x08004fab
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004fab 	.word	0x08004fab
 8004f78:	08004f9b 	.word	0x08004f9b
 8004f7c:	08004fab 	.word	0x08004fab
 8004f80:	08004fab 	.word	0x08004fab
 8004f84:	08004fab 	.word	0x08004fab
 8004f88:	08004fa3 	.word	0x08004fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f8c:	f7fe f936 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8004f90:	61f8      	str	r0, [r7, #28]
        break;
 8004f92:	e010      	b.n	8004fb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f94:	4b8f      	ldr	r3, [pc, #572]	; (80051d4 <UART_SetConfig+0x56c>)
 8004f96:	61fb      	str	r3, [r7, #28]
        break;
 8004f98:	e00d      	b.n	8004fb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9a:	f7fe f897 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8004f9e:	61f8      	str	r0, [r7, #28]
        break;
 8004fa0:	e009      	b.n	8004fb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa6:	61fb      	str	r3, [r7, #28]
        break;
 8004fa8:	e005      	b.n	8004fb6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80fb 	beq.w	80051b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d305      	bcc.n	8004fda <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d903      	bls.n	8004fe2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fe0:	e0e8      	b.n	80051b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	461c      	mov	r4, r3
 8004fe8:	4615      	mov	r5, r2
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	022b      	lsls	r3, r5, #8
 8004ff4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ff8:	0222      	lsls	r2, r4, #8
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	6849      	ldr	r1, [r1, #4]
 8004ffe:	0849      	lsrs	r1, r1, #1
 8005000:	2000      	movs	r0, #0
 8005002:	4688      	mov	r8, r1
 8005004:	4681      	mov	r9, r0
 8005006:	eb12 0a08 	adds.w	sl, r2, r8
 800500a:	eb43 0b09 	adc.w	fp, r3, r9
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800501c:	4650      	mov	r0, sl
 800501e:	4659      	mov	r1, fp
 8005020:	f7fb f8d2 	bl	80001c8 <__aeabi_uldivmod>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4613      	mov	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005032:	d308      	bcc.n	8005046 <UART_SetConfig+0x3de>
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800503a:	d204      	bcs.n	8005046 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	60da      	str	r2, [r3, #12]
 8005044:	e0b6      	b.n	80051b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800504c:	e0b2      	b.n	80051b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005056:	d15e      	bne.n	8005116 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005058:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800505c:	2b08      	cmp	r3, #8
 800505e:	d828      	bhi.n	80050b2 <UART_SetConfig+0x44a>
 8005060:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <UART_SetConfig+0x400>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	0800508d 	.word	0x0800508d
 800506c:	08005095 	.word	0x08005095
 8005070:	0800509d 	.word	0x0800509d
 8005074:	080050b3 	.word	0x080050b3
 8005078:	080050a3 	.word	0x080050a3
 800507c:	080050b3 	.word	0x080050b3
 8005080:	080050b3 	.word	0x080050b3
 8005084:	080050b3 	.word	0x080050b3
 8005088:	080050ab 	.word	0x080050ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fe f8b6 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8005090:	61f8      	str	r0, [r7, #28]
        break;
 8005092:	e014      	b.n	80050be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005094:	f7fe f8c8 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 8005098:	61f8      	str	r0, [r7, #28]
        break;
 800509a:	e010      	b.n	80050be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800509c:	4b4d      	ldr	r3, [pc, #308]	; (80051d4 <UART_SetConfig+0x56c>)
 800509e:	61fb      	str	r3, [r7, #28]
        break;
 80050a0:	e00d      	b.n	80050be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a2:	f7fe f813 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 80050a6:	61f8      	str	r0, [r7, #28]
        break;
 80050a8:	e009      	b.n	80050be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ae:	61fb      	str	r3, [r7, #28]
        break;
 80050b0:	e005      	b.n	80050be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d077      	beq.n	80051b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	005a      	lsls	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b0f      	cmp	r3, #15
 80050de:	d916      	bls.n	800510e <UART_SetConfig+0x4a6>
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e6:	d212      	bcs.n	800510e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f023 030f 	bic.w	r3, r3, #15
 80050f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	8afb      	ldrh	r3, [r7, #22]
 8005100:	4313      	orrs	r3, r2
 8005102:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	8afa      	ldrh	r2, [r7, #22]
 800510a:	60da      	str	r2, [r3, #12]
 800510c:	e052      	b.n	80051b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005114:	e04e      	b.n	80051b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005116:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800511a:	2b08      	cmp	r3, #8
 800511c:	d827      	bhi.n	800516e <UART_SetConfig+0x506>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x4bc>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005149 	.word	0x08005149
 8005128:	08005151 	.word	0x08005151
 800512c:	08005159 	.word	0x08005159
 8005130:	0800516f 	.word	0x0800516f
 8005134:	0800515f 	.word	0x0800515f
 8005138:	0800516f 	.word	0x0800516f
 800513c:	0800516f 	.word	0x0800516f
 8005140:	0800516f 	.word	0x0800516f
 8005144:	08005167 	.word	0x08005167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fe f858 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 800514c:	61f8      	str	r0, [r7, #28]
        break;
 800514e:	e014      	b.n	800517a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005150:	f7fe f86a 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 8005154:	61f8      	str	r0, [r7, #28]
        break;
 8005156:	e010      	b.n	800517a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005158:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <UART_SetConfig+0x56c>)
 800515a:	61fb      	str	r3, [r7, #28]
        break;
 800515c:	e00d      	b.n	800517a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515e:	f7fd ffb5 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8005162:	61f8      	str	r0, [r7, #28]
        break;
 8005164:	e009      	b.n	800517a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516a:	61fb      	str	r3, [r7, #28]
        break;
 800516c:	e005      	b.n	800517a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005178:	bf00      	nop
    }

    if (pclk != 0U)
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d019      	beq.n	80051b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	085a      	lsrs	r2, r3, #1
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	441a      	add	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005192:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	2b0f      	cmp	r3, #15
 8005198:	d909      	bls.n	80051ae <UART_SetConfig+0x546>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a0:	d205      	bcs.n	80051ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	e002      	b.n	80051b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80051c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3728      	adds	r7, #40	; 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ce:	bf00      	nop
 80051d0:	40008000 	.word	0x40008000
 80051d4:	00f42400 	.word	0x00f42400

080051d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01a      	beq.n	80052ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d6:	d10a      	bne.n	80052ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b098      	sub	sp, #96	; 0x60
 8005320:	af02      	add	r7, sp, #8
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800532c:	f7fc fa98 	bl	8001860 <HAL_GetTick>
 8005330:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b08      	cmp	r3, #8
 800533e:	d12e      	bne.n	800539e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005348:	2200      	movs	r2, #0
 800534a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f88c 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d021      	beq.n	800539e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800536e:	653b      	str	r3, [r7, #80]	; 0x50
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005378:	647b      	str	r3, [r7, #68]	; 0x44
 800537a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800537e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e6      	bne.n	800535a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2220      	movs	r2, #32
 8005390:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e062      	b.n	8005464 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d149      	bne.n	8005440 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053b4:	2200      	movs	r2, #0
 80053b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f856 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d03c      	beq.n	8005440 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	623b      	str	r3, [r7, #32]
   return(result);
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e4:	633b      	str	r3, [r7, #48]	; 0x30
 80053e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ec:	e841 2300 	strex	r3, r2, [r1]
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e6      	bne.n	80053c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3308      	adds	r3, #8
 80053fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	60fb      	str	r3, [r7, #12]
   return(result);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0301 	bic.w	r3, r3, #1
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3308      	adds	r3, #8
 8005416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005418:	61fa      	str	r2, [r7, #28]
 800541a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	69b9      	ldr	r1, [r7, #24]
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	617b      	str	r3, [r7, #20]
   return(result);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e5      	bne.n	80053f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e011      	b.n	8005464 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3758      	adds	r7, #88	; 0x58
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547c:	e049      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d045      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fc f9eb 	bl	8001860 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <UART_WaitOnFlagUntilTimeout+0x30>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e048      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d031      	beq.n	8005512 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d110      	bne.n	80054de <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2208      	movs	r2, #8
 80054c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f838 	bl	800553a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2208      	movs	r2, #8
 80054ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e029      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ec:	d111      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f81e 	bl	800553a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e00f      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4013      	ands	r3, r2
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	429a      	cmp	r2, r3
 800552e:	d0a6      	beq.n	800547e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800553a:	b480      	push	{r7}
 800553c:	b095      	sub	sp, #84	; 0x54
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005560:	643b      	str	r3, [r7, #64]	; 0x40
 8005562:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	61fb      	str	r3, [r7, #28]
   return(result);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	64bb      	str	r3, [r7, #72]	; 0x48
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800559a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d118      	bne.n	80055e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 0310 	bic.w	r3, r3, #16
 80055c4:	647b      	str	r3, [r7, #68]	; 0x44
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6979      	ldr	r1, [r7, #20]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	613b      	str	r3, [r7, #16]
   return(result);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055f6:	bf00      	nop
 80055f8:	3754      	adds	r7, #84	; 0x54
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fb0b 	bl	8004c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b088      	sub	sp, #32
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	60bb      	str	r3, [r7, #8]
   return(result);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	613b      	str	r3, [r7, #16]
   return(result);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e6      	bne.n	8005636 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fad7 	bl	8004c28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567a:	bf00      	nop
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <memset>:
 8005696:	4402      	add	r2, r0
 8005698:	4603      	mov	r3, r0
 800569a:	4293      	cmp	r3, r2
 800569c:	d100      	bne.n	80056a0 <memset+0xa>
 800569e:	4770      	bx	lr
 80056a0:	f803 1b01 	strb.w	r1, [r3], #1
 80056a4:	e7f9      	b.n	800569a <memset+0x4>
	...

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	4d0d      	ldr	r5, [pc, #52]	; (80056e0 <__libc_init_array+0x38>)
 80056ac:	4c0d      	ldr	r4, [pc, #52]	; (80056e4 <__libc_init_array+0x3c>)
 80056ae:	1b64      	subs	r4, r4, r5
 80056b0:	10a4      	asrs	r4, r4, #2
 80056b2:	2600      	movs	r6, #0
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	4d0b      	ldr	r5, [pc, #44]	; (80056e8 <__libc_init_array+0x40>)
 80056ba:	4c0c      	ldr	r4, [pc, #48]	; (80056ec <__libc_init_array+0x44>)
 80056bc:	f000 f818 	bl	80056f0 <_init>
 80056c0:	1b64      	subs	r4, r4, r5
 80056c2:	10a4      	asrs	r4, r4, #2
 80056c4:	2600      	movs	r6, #0
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d0:	4798      	blx	r3
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056da:	4798      	blx	r3
 80056dc:	3601      	adds	r6, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	0803cd14 	.word	0x0803cd14
 80056e4:	0803cd14 	.word	0x0803cd14
 80056e8:	0803cd14 	.word	0x0803cd14
 80056ec:	0803cd18 	.word	0x0803cd18

080056f0 <_init>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr

080056fc <_fini>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr
