
ECEN-361-Laser-Harp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006954  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00034f70  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803ba54  0803ba54  00050214  2**0
                  CONTENTS
  4 .ARM          00000008  0803ba54  0803ba54  0004ba54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803ba5c  0803ba5c  00050214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803ba5c  0803ba5c  0004ba5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803ba60  0803ba60  0004ba60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0803ba64  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000214  0803bc78  00050214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  0803bc78  00050524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050214  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00050244  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001800d  00000000  00000000  00050287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003180  00000000  00000000  00068294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0006b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103d  00000000  00000000  0006c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284de  00000000  00000000  0006d925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019eed  00000000  00000000  00095e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8609  00000000  00000000  000afcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c64  00000000  00000000  001a82fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001adf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006acc 	.word	0x08006acc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	08006acc 	.word	0x08006acc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f001 fb3e 	bl	8001bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f820 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f96c 	bl	8000854 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f93a 	bl	80007f4 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000580:	f000 f86c 	bl	800065c <MX_DAC1_Init>
  MX_TIM15_Init();
 8000584:	f000 f8e6 	bl	8000754 <MX_TIM15_Init>
  MX_I2C1_Init();
 8000588:	f000 f8a4 	bl	80006d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim15); // Start the Music Interrupt Timer
 800058c:	4808      	ldr	r0, [pc, #32]	; (80005b0 <main+0x44>)
 800058e:	f004 f937 	bl	8004800 <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Start one of the dac channels
 8000592:	2110      	movs	r1, #16
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <main+0x48>)
 8000596:	f001 fcfe 	bl	8001f96 <HAL_DAC_Start>

  menu_init();
 800059a:	f000 fb37 	bl	8000c0c <menu_init>
  lcd_init();
 800059e:	f000 fd02 	bl	8000fa6 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pull_buttons();
 80005a2:	f000 fc1f 	bl	8000de4 <pull_buttons>
	  HAL_Delay(50);
 80005a6:	2032      	movs	r0, #50	; 0x32
 80005a8:	f001 fb9e 	bl	8001ce8 <HAL_Delay>
	  pull_buttons();
 80005ac:	e7f9      	b.n	80005a2 <main+0x36>
 80005ae:	bf00      	nop
 80005b0:	20000298 	.word	0x20000298
 80005b4:	20000230 	.word	0x20000230

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	; 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	; 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fdfc 	bl	80061c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005de:	f002 fda5 	bl	800312c <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f000 fb0a 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f6:	2310      	movs	r3, #16
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fe:	2302      	movs	r3, #2
 8000600:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000606:	230a      	movs	r3, #10
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fddc 	bl	80031d8 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000626:	f000 faeb 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2303      	movs	r3, #3
 8000630:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f003 f9a4 	bl	8003990 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064e:	f000 fad7 	bl	8000c00 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3758      	adds	r7, #88	; 0x58
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2224      	movs	r2, #36	; 0x24
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f005 fdab 	bl	80061c4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_DAC1_Init+0x70>)
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <MX_DAC1_Init+0x74>)
 8000672:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000674:	4815      	ldr	r0, [pc, #84]	; (80006cc <MX_DAC1_Init+0x70>)
 8000676:	f001 fc6c 	bl	8001f52 <HAL_DAC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000680:	f000 fabe 	bl	8000c00 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2200      	movs	r2, #0
 800069c:	4619      	mov	r1, r3
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <MX_DAC1_Init+0x70>)
 80006a0:	f001 fd4f 	bl	8002142 <HAL_DAC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006aa:	f000 faa9 	bl	8000c00 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2210      	movs	r2, #16
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_DAC1_Init+0x70>)
 80006b6:	f001 fd44 	bl	8002142 <HAL_DAC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80006c0:	f000 fa9e 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000230 	.word	0x20000230
 80006d0:	40007400 	.word	0x40007400

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <MX_I2C1_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_I2C1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_I2C1_Init+0x74>)
 8000710:	f002 f8a2 	bl	8002858 <HAL_I2C_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 fa71 	bl	8000c00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C1_Init+0x74>)
 8000722:	f002 fc5d 	bl	8002fe0 <HAL_I2CEx_ConfigAnalogFilter>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 fa68 	bl	8000c00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_I2C1_Init+0x74>)
 8000734:	f002 fc9f 	bl	8003076 <HAL_I2CEx_ConfigDigitalFilter>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 fa5f 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000244 	.word	0x20000244
 800074c:	40005400 	.word	0x40005400
 8000750:	10909cec 	.word	0x10909cec

08000754 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_TIM15_Init+0x98>)
 8000774:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <MX_TIM15_Init+0x9c>)
 8000776:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_TIM15_Init+0x98>)
 800077a:	224f      	movs	r2, #79	; 0x4f
 800077c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_TIM15_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9;
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_TIM15_Init+0x98>)
 8000786:	2209      	movs	r2, #9
 8000788:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_TIM15_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_TIM15_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_TIM15_Init+0x98>)
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800079c:	4813      	ldr	r0, [pc, #76]	; (80007ec <MX_TIM15_Init+0x98>)
 800079e:	f003 ffd7 	bl	8004750 <HAL_TIM_Base_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80007a8:	f000 fa2a 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_TIM15_Init+0x98>)
 80007ba:	f004 f993 	bl	8004ae4 <HAL_TIM_ConfigClockSource>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 80007c4:	f000 fa1c 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_TIM15_Init+0x98>)
 80007d6:	f004 fbab 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80007e0:	f000 fa0e 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000298 	.word	0x20000298
 80007f0:	40014000 	.word	0x40014000

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_USART2_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	; (8000850 <MX_USART2_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART2_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000838:	f004 fc20 	bl	800507c <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f9dd 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002e4 	.word	0x200002e4
 8000850:	40004400 	.word	0x40004400

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b51      	ldr	r3, [pc, #324]	; (80009b0 <MX_GPIO_Init+0x15c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a50      	ldr	r2, [pc, #320]	; (80009b0 <MX_GPIO_Init+0x15c>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b4e      	ldr	r3, [pc, #312]	; (80009b0 <MX_GPIO_Init+0x15c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b4b      	ldr	r3, [pc, #300]	; (80009b0 <MX_GPIO_Init+0x15c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a4a      	ldr	r2, [pc, #296]	; (80009b0 <MX_GPIO_Init+0x15c>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b48      	ldr	r3, [pc, #288]	; (80009b0 <MX_GPIO_Init+0x15c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <MX_GPIO_Init+0x15c>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a44      	ldr	r2, [pc, #272]	; (80009b0 <MX_GPIO_Init+0x15c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b42      	ldr	r3, [pc, #264]	; (80009b0 <MX_GPIO_Init+0x15c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <MX_GPIO_Init+0x15c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a3e      	ldr	r2, [pc, #248]	; (80009b0 <MX_GPIO_Init+0x15c>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <MX_GPIO_Init+0x15c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4834      	ldr	r0, [pc, #208]	; (80009b4 <MX_GPIO_Init+0x160>)
 80008e2:	f001 fddf 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOTE_1_Pin NOTE_2_Pin NOTE_3_Pin NOTE_4_Pin
                           NOTE_5_Pin NOTE_6_Pin NOTE_7_Pin NOTE_8_Pin
                           NOTE_10_Pin NOTE_11_Pin */
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_4_Pin
 80008e6:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80008ea:	617b      	str	r3, [r7, #20]
                          |NOTE_5_Pin|NOTE_6_Pin|NOTE_7_Pin|NOTE_8_Pin
                          |NOTE_10_Pin|NOTE_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	482d      	ldr	r0, [pc, #180]	; (80009b4 <MX_GPIO_Init+0x160>)
 80008fe:	f001 fdd1 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOTE_9_Pin NOTE_12_Pin */
  GPIO_InitStruct.Pin = NOTE_9_Pin|NOTE_12_Pin;
 8000902:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000908:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800090e:	2302      	movs	r3, #2
 8000910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4826      	ldr	r0, [pc, #152]	; (80009b4 <MX_GPIO_Init+0x160>)
 800091a:	f001 fdc3 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_BTN_Pin LEFT_BTN_Pin BOTTOM_BTN_Pin TOP_BTN_Pin */
  GPIO_InitStruct.Pin = RIGHT_BTN_Pin|LEFT_BTN_Pin|BOTTOM_BTN_Pin|TOP_BTN_Pin;
 800091e:	23f0      	movs	r3, #240	; 0xf0
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4821      	ldr	r0, [pc, #132]	; (80009b8 <MX_GPIO_Init+0x164>)
 8000932:	f001 fdb7 	bl	80024a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2006      	movs	r0, #6
 800093c:	f001 fad3 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000940:	2006      	movs	r0, #6
 8000942:	f001 faec 	bl	8001f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	2007      	movs	r0, #7
 800094c:	f001 facb 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000950:	2007      	movs	r0, #7
 8000952:	f001 fae4 	bl	8001f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	2008      	movs	r0, #8
 800095c:	f001 fac3 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000960:	2008      	movs	r0, #8
 8000962:	f001 fadc 	bl	8001f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2009      	movs	r0, #9
 800096c:	f001 fabb 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000970:	2009      	movs	r0, #9
 8000972:	f001 fad4 	bl	8001f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	200a      	movs	r0, #10
 800097c:	f001 fab3 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000980:	200a      	movs	r0, #10
 8000982:	f001 facc 	bl	8001f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2017      	movs	r0, #23
 800098c:	f001 faab 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000990:	2017      	movs	r0, #23
 8000992:	f001 fac4 	bl	8001f1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2028      	movs	r0, #40	; 0x28
 800099c:	f001 faa3 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009a0:	2028      	movs	r0, #40	; 0x28
 80009a2:	f001 fabc 	bl	8001f1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000800 	.word	0x48000800
 80009b8:	48000400 	.word	0x48000400

080009bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009cc:	f000 80ea 	beq.w	8000ba4 <HAL_GPIO_EXTI_Callback+0x1e8>
 80009d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009d4:	f300 80f1 	bgt.w	8000bba <HAL_GPIO_EXTI_Callback+0x1fe>
 80009d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009dc:	f000 80d7 	beq.w	8000b8e <HAL_GPIO_EXTI_Callback+0x1d2>
 80009e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009e4:	f300 80e9 	bgt.w	8000bba <HAL_GPIO_EXTI_Callback+0x1fe>
 80009e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009ec:	f000 80c4 	beq.w	8000b78 <HAL_GPIO_EXTI_Callback+0x1bc>
 80009f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009f4:	f300 80e1 	bgt.w	8000bba <HAL_GPIO_EXTI_Callback+0x1fe>
 80009f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009fc:	f000 80b1 	beq.w	8000b62 <HAL_GPIO_EXTI_Callback+0x1a6>
 8000a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a04:	f300 80d9 	bgt.w	8000bba <HAL_GPIO_EXTI_Callback+0x1fe>
 8000a08:	2b80      	cmp	r3, #128	; 0x80
 8000a0a:	f000 809f 	beq.w	8000b4c <HAL_GPIO_EXTI_Callback+0x190>
 8000a0e:	2b80      	cmp	r3, #128	; 0x80
 8000a10:	f300 80d3 	bgt.w	8000bba <HAL_GPIO_EXTI_Callback+0x1fe>
 8000a14:	2b20      	cmp	r3, #32
 8000a16:	dc49      	bgt.n	8000aac <HAL_GPIO_EXTI_Callback+0xf0>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f340 80ce 	ble.w	8000bba <HAL_GPIO_EXTI_Callback+0x1fe>
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	f200 80ca 	bhi.w	8000bba <HAL_GPIO_EXTI_Callback+0x1fe>
 8000a26:	a201      	add	r2, pc, #4	; (adr r2, 8000a2c <HAL_GPIO_EXTI_Callback+0x70>)
 8000a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2c:	08000ab3 	.word	0x08000ab3
 8000a30:	08000ac9 	.word	0x08000ac9
 8000a34:	08000bbb 	.word	0x08000bbb
 8000a38:	08000adf 	.word	0x08000adf
 8000a3c:	08000bbb 	.word	0x08000bbb
 8000a40:	08000bbb 	.word	0x08000bbb
 8000a44:	08000bbb 	.word	0x08000bbb
 8000a48:	08000af5 	.word	0x08000af5
 8000a4c:	08000bbb 	.word	0x08000bbb
 8000a50:	08000bbb 	.word	0x08000bbb
 8000a54:	08000bbb 	.word	0x08000bbb
 8000a58:	08000bbb 	.word	0x08000bbb
 8000a5c:	08000bbb 	.word	0x08000bbb
 8000a60:	08000bbb 	.word	0x08000bbb
 8000a64:	08000bbb 	.word	0x08000bbb
 8000a68:	08000b0b 	.word	0x08000b0b
 8000a6c:	08000bbb 	.word	0x08000bbb
 8000a70:	08000bbb 	.word	0x08000bbb
 8000a74:	08000bbb 	.word	0x08000bbb
 8000a78:	08000bbb 	.word	0x08000bbb
 8000a7c:	08000bbb 	.word	0x08000bbb
 8000a80:	08000bbb 	.word	0x08000bbb
 8000a84:	08000bbb 	.word	0x08000bbb
 8000a88:	08000bbb 	.word	0x08000bbb
 8000a8c:	08000bbb 	.word	0x08000bbb
 8000a90:	08000bbb 	.word	0x08000bbb
 8000a94:	08000bbb 	.word	0x08000bbb
 8000a98:	08000bbb 	.word	0x08000bbb
 8000a9c:	08000bbb 	.word	0x08000bbb
 8000aa0:	08000bbb 	.word	0x08000bbb
 8000aa4:	08000bbb 	.word	0x08000bbb
 8000aa8:	08000b21 	.word	0x08000b21
 8000aac:	2b40      	cmp	r3, #64	; 0x40
 8000aae:	d042      	beq.n	8000b36 <HAL_GPIO_EXTI_Callback+0x17a>
	case NOTE_12_Pin:
		active[NOTE_B] = !active[NOTE_B];
		break;

	default:
		break;
 8000ab0:	e083      	b.n	8000bba <HAL_GPIO_EXTI_Callback+0x1fe>
		active[NOTE_C] = !active[NOTE_C];
 8000ab2:	4b45      	ldr	r3, [pc, #276]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bf0c      	ite	eq
 8000aba:	2301      	moveq	r3, #1
 8000abc:	2300      	movne	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000ac4:	601a      	str	r2, [r3, #0]
		break;
 8000ac6:	e079      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Cs] = !active[NOTE_Cs];
 8000ac8:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bf0c      	ite	eq
 8000ad0:	2301      	moveq	r3, #1
 8000ad2:	2300      	movne	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000ada:	605a      	str	r2, [r3, #4]
		break;
 8000adc:	e06e      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_D] = !active[NOTE_D];
 8000ade:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2301      	moveq	r3, #1
 8000ae8:	2300      	movne	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000af0:	609a      	str	r2, [r3, #8]
		break;
 8000af2:	e063      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Ds] = !active[NOTE_Ds];
 8000af4:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf0c      	ite	eq
 8000afc:	2301      	moveq	r3, #1
 8000afe:	2300      	movne	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b06:	60da      	str	r2, [r3, #12]
		break;
 8000b08:	e058      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_E] = !active[NOTE_E];
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf0c      	ite	eq
 8000b12:	2301      	moveq	r3, #1
 8000b14:	2300      	movne	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b1c:	611a      	str	r2, [r3, #16]
		break;
 8000b1e:	e04d      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_F] = !active[NOTE_F];
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b32:	615a      	str	r2, [r3, #20]
		break;
 8000b34:	e042      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Fs] = !active[NOTE_Fs];
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf0c      	ite	eq
 8000b3e:	2301      	moveq	r3, #1
 8000b40:	2300      	movne	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b48:	619a      	str	r2, [r3, #24]
		break;
 8000b4a:	e037      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_G] = !active[NOTE_G];
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf0c      	ite	eq
 8000b54:	2301      	moveq	r3, #1
 8000b56:	2300      	movne	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b5e:	61da      	str	r2, [r3, #28]
		break;
 8000b60:	e02c      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Gs] = !active[NOTE_Gs];
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bf0c      	ite	eq
 8000b6a:	2301      	moveq	r3, #1
 8000b6c:	2300      	movne	r3, #0
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b74:	621a      	str	r2, [r3, #32]
		break;
 8000b76:	e021      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_A] = !active[NOTE_A];
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	bf0c      	ite	eq
 8000b80:	2301      	moveq	r3, #1
 8000b82:	2300      	movne	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000b8c:	e016      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_As] = !active[NOTE_As];
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf0c      	ite	eq
 8000b96:	2301      	moveq	r3, #1
 8000b98:	2300      	movne	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000ba2:	e00b      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_B] = !active[NOTE_B];
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bf0c      	ite	eq
 8000bac:	2301      	moveq	r3, #1
 8000bae:	2300      	movne	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8000bb8:	e000      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x200>
		break;
 8000bba:	bf00      	nop
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	20000030 	.word	0x20000030

08000bcc <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if (htim == &htim15 )
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d109      	bne.n	8000bf0 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  //Disable the IRQ
	  //HAL_TIM_Base_Stop(htim);
	  int wave = tranposition__note_update(&htim15);
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bde:	f000 fe17 	bl	8001810 <tranposition__note_update>
 8000be2:	60f8      	str	r0, [r7, #12]
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, wave);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bec:	f001 fa7a 	bl	80020e4 <HAL_DAC_SetValue>
	  //HAL_TIM_Base_Start_IT(&htim15);
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000298 	.word	0x20000298
 8000bfc:	20000230 	.word	0x20000230

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <menu_init>:
#include <stdio.h>

static MenuItem current_menu_item = MENU_ITEM_OCTAVE;
static int current_setting_value = 0;

void menu_init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    current_menu_item = MENU_ITEM_OCTAVE;
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <menu_init+0x1c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
    current_setting_value = 0;
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <menu_init+0x20>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
    lcd_init();  // Assuming lcd_init() initializes your LCD display
 8000c1c:	f000 f9c3 	bl	8000fa6 <lcd_init>
    menu_update_display();
 8000c20:	f000 f86e 	bl	8000d00 <menu_update_display>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000036c 	.word	0x2000036c
 8000c2c:	20000370 	.word	0x20000370

08000c30 <menu_handle_button_left>:

void menu_handle_button_left(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    if (current_menu_item > 0) {
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <menu_handle_button_left+0x28>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d006      	beq.n	8000c4a <menu_handle_button_left+0x1a>
        current_menu_item--;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <menu_handle_button_left+0x28>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <menu_handle_button_left+0x28>)
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e002      	b.n	8000c50 <menu_handle_button_left+0x20>
    } else {
        current_menu_item = MENU_ITEM_COUNT - 1;
 8000c4a:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <menu_handle_button_left+0x28>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	701a      	strb	r2, [r3, #0]
    }
    menu_update_display();
 8000c50:	f000 f856 	bl	8000d00 <menu_update_display>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000036c 	.word	0x2000036c

08000c5c <menu_handle_button_right>:

void menu_handle_button_right(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    if (current_menu_item < MENU_ITEM_COUNT - 1) {
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <menu_handle_button_right+0x28>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d806      	bhi.n	8000c76 <menu_handle_button_right+0x1a>
        current_menu_item++;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <menu_handle_button_right+0x28>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <menu_handle_button_right+0x28>)
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e002      	b.n	8000c7c <menu_handle_button_right+0x20>
    } else {
        current_menu_item = 0;
 8000c76:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <menu_handle_button_right+0x28>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
    }
    menu_update_display();
 8000c7c:	f000 f840 	bl	8000d00 <menu_update_display>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000036c 	.word	0x2000036c

08000c88 <menu_handle_button_up>:

void menu_handle_button_up(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    switch (current_menu_item) {
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <menu_handle_button_up+0x38>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d810      	bhi.n	8000cb6 <menu_handle_button_up+0x2e>
 8000c94:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <menu_handle_button_up+0x14>)
 8000c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9a:	bf00      	nop
 8000c9c:	08000cb7 	.word	0x08000cb7
 8000ca0:	08000cb7 	.word	0x08000cb7
 8000ca4:	08000cb7 	.word	0x08000cb7
 8000ca8:	08000cb7 	.word	0x08000cb7
 8000cac:	08000cb1 	.word	0x08000cb1
            break;
        case MENU_ITEM_SUSTAIN:
            // Handle up button for sustain
            break;
        case MENU_ITEM_TRANSPOSITION:
            tranposition__increment_octave();
 8000cb0:	f000 fc14 	bl	80014dc <tranposition__increment_octave>
            break;
 8000cb4:	e000      	b.n	8000cb8 <menu_handle_button_up+0x30>
        default:
            break;
 8000cb6:	bf00      	nop
    }
    menu_update_display();
 8000cb8:	f000 f822 	bl	8000d00 <menu_update_display>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000036c 	.word	0x2000036c

08000cc4 <menu_handle_button_down>:


void menu_handle_button_down(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    switch (current_menu_item) {
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <menu_handle_button_down+0x38>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d810      	bhi.n	8000cf2 <menu_handle_button_down+0x2e>
 8000cd0:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <menu_handle_button_down+0x14>)
 8000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd6:	bf00      	nop
 8000cd8:	08000cf3 	.word	0x08000cf3
 8000cdc:	08000cf3 	.word	0x08000cf3
 8000ce0:	08000cf3 	.word	0x08000cf3
 8000ce4:	08000cf3 	.word	0x08000cf3
 8000ce8:	08000ced 	.word	0x08000ced
            break;
        case MENU_ITEM_SUSTAIN:
            // Handle down button for sustain
            break;
        case MENU_ITEM_TRANSPOSITION:
            tranposition__decrement_octave();
 8000cec:	f000 fc2e 	bl	800154c <tranposition__decrement_octave>
            break;
 8000cf0:	e000      	b.n	8000cf4 <menu_handle_button_down+0x30>
        default:
            break;
 8000cf2:	bf00      	nop
    }
    menu_update_display();
 8000cf4:	f000 f804 	bl	8000d00 <menu_update_display>
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000036c 	.word	0x2000036c

08000d00 <menu_update_display>:

void menu_update_display(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
    char buffer[32];
    lcd_clear();  // Assuming lcd_clear() clears the LCD display
 8000d06:	f000 f9b7 	bl	8001078 <lcd_clear>
    switch (current_menu_item) {
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <menu_update_display+0xcc>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	d857      	bhi.n	8000dc2 <menu_update_display+0xc2>
 8000d12:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <menu_update_display+0x18>)
 8000d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d18:	08000d2d 	.word	0x08000d2d
 8000d1c:	08000d4b 	.word	0x08000d4b
 8000d20:	08000d69 	.word	0x08000d69
 8000d24:	08000d87 	.word	0x08000d87
 8000d28:	08000da5 	.word	0x08000da5
        case MENU_ITEM_OCTAVE:
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4a28      	ldr	r2, [pc, #160]	; (8000dd0 <menu_update_display+0xd0>)
 8000d30:	2120      	movs	r1, #32
 8000d32:	4618      	mov	r0, r3
 8000d34:	f005 fa12 	bl	800615c <sniprintf>
            lcd_set_cursor(0, 0);  // Assuming lcd_set_cursor(row, col) sets LCD cursor position
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f977 	bl	800102e <lcd_set_cursor>
            lcd_write_string(buffer);  // Assuming lcd_write_string(str) writes string to LCD
 8000d40:	463b      	mov	r3, r7
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f95e 	bl	8001004 <lcd_write_string>
            break;
 8000d48:	e03c      	b.n	8000dc4 <menu_update_display+0xc4>
        case MENU_ITEM_INSTRUMENT:
            snprintf(buffer, sizeof(buffer), "Instrument: ");
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <menu_update_display+0xd4>)
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4618      	mov	r0, r3
 8000d52:	f005 fa03 	bl	800615c <sniprintf>
            lcd_set_cursor(0, 0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 f968 	bl	800102e <lcd_set_cursor>
            lcd_write_string(buffer);
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f94f 	bl	8001004 <lcd_write_string>
            break;
 8000d66:	e02d      	b.n	8000dc4 <menu_update_display+0xc4>
        case MENU_ITEM_ECHO_DELAY:
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <menu_update_display+0xd8>)
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f005 f9f4 	bl	800615c <sniprintf>
            lcd_set_cursor(0, 0);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f959 	bl	800102e <lcd_set_cursor>
            lcd_write_string(buffer);
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f940 	bl	8001004 <lcd_write_string>
            break;
 8000d84:	e01e      	b.n	8000dc4 <menu_update_display+0xc4>
        case MENU_ITEM_SUSTAIN:
            snprintf(buffer, sizeof(buffer), "Sustain: ");
 8000d86:	463b      	mov	r3, r7
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <menu_update_display+0xdc>)
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f005 f9e5 	bl	800615c <sniprintf>
            lcd_set_cursor(0, 0);
 8000d92:	2100      	movs	r1, #0
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 f94a 	bl	800102e <lcd_set_cursor>
            lcd_write_string(buffer);
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f931 	bl	8001004 <lcd_write_string>
            break;
 8000da2:	e00f      	b.n	8000dc4 <menu_update_display+0xc4>
        case MENU_ITEM_TRANSPOSITION:
            snprintf(buffer, sizeof(buffer), "Transposition: ");
 8000da4:	463b      	mov	r3, r7
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <menu_update_display+0xe0>)
 8000da8:	2120      	movs	r1, #32
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 f9d6 	bl	800615c <sniprintf>
            lcd_set_cursor(0, 0);
 8000db0:	2100      	movs	r1, #0
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f93b 	bl	800102e <lcd_set_cursor>
            lcd_write_string(buffer);
 8000db8:	463b      	mov	r3, r7
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f922 	bl	8001004 <lcd_write_string>
            break;
 8000dc0:	e000      	b.n	8000dc4 <menu_update_display+0xc4>
        default:
            break;
 8000dc2:	bf00      	nop
    }
}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000036c 	.word	0x2000036c
 8000dd0:	08006ae4 	.word	0x08006ae4
 8000dd4:	08006af0 	.word	0x08006af0
 8000dd8:	08006b00 	.word	0x08006b00
 8000ddc:	08006b10 	.word	0x08006b10
 8000de0:	08006b1c 	.word	0x08006b1c

08000de4 <pull_buttons>:

void pull_buttons(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	482e      	ldr	r0, [pc, #184]	; (8000ea4 <pull_buttons+0xc0>)
 8000dec:	f001 fd04 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10f      	bne.n	8000e16 <pull_buttons+0x32>
        menu_handle_button_up();
 8000df6:	f7ff ff47 	bl	8000c88 <menu_handle_button_up>
        HAL_Delay(100);
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f000 ff74 	bl	8001ce8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000e00:	e002      	b.n	8000e08 <pull_buttons+0x24>
            HAL_Delay(100); // Debounce delay
 8000e02:	2064      	movs	r0, #100	; 0x64
 8000e04:	f000 ff70 	bl	8001ce8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	4826      	ldr	r0, [pc, #152]	; (8000ea4 <pull_buttons+0xc0>)
 8000e0c:	f001 fcf4 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f5      	beq.n	8000e02 <pull_buttons+0x1e>
        }
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000e16:	2140      	movs	r1, #64	; 0x40
 8000e18:	4822      	ldr	r0, [pc, #136]	; (8000ea4 <pull_buttons+0xc0>)
 8000e1a:	f001 fced 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10f      	bne.n	8000e44 <pull_buttons+0x60>
        menu_handle_button_down();
 8000e24:	f7ff ff4e 	bl	8000cc4 <menu_handle_button_down>
        HAL_Delay(100);
 8000e28:	2064      	movs	r0, #100	; 0x64
 8000e2a:	f000 ff5d 	bl	8001ce8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000e2e:	e002      	b.n	8000e36 <pull_buttons+0x52>
            HAL_Delay(100); // Debounce delay
 8000e30:	2064      	movs	r0, #100	; 0x64
 8000e32:	f000 ff59 	bl	8001ce8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000e36:	2140      	movs	r1, #64	; 0x40
 8000e38:	481a      	ldr	r0, [pc, #104]	; (8000ea4 <pull_buttons+0xc0>)
 8000e3a:	f001 fcdd 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f5      	beq.n	8000e30 <pull_buttons+0x4c>
        }
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000e44:	2120      	movs	r1, #32
 8000e46:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <pull_buttons+0xc0>)
 8000e48:	f001 fcd6 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10f      	bne.n	8000e72 <pull_buttons+0x8e>
        menu_handle_button_left();
 8000e52:	f7ff feed 	bl	8000c30 <menu_handle_button_left>
        HAL_Delay(100);
 8000e56:	2064      	movs	r0, #100	; 0x64
 8000e58:	f000 ff46 	bl	8001ce8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000e5c:	e002      	b.n	8000e64 <pull_buttons+0x80>
            HAL_Delay(100); // Debounce delay
 8000e5e:	2064      	movs	r0, #100	; 0x64
 8000e60:	f000 ff42 	bl	8001ce8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000e64:	2120      	movs	r1, #32
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <pull_buttons+0xc0>)
 8000e68:	f001 fcc6 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f5      	beq.n	8000e5e <pull_buttons+0x7a>
        }
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000e72:	2110      	movs	r1, #16
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <pull_buttons+0xc0>)
 8000e76:	f001 fcbf 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10f      	bne.n	8000ea0 <pull_buttons+0xbc>
        menu_handle_button_right();
 8000e80:	f7ff feec 	bl	8000c5c <menu_handle_button_right>
        HAL_Delay(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f000 ff2f 	bl	8001ce8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000e8a:	e002      	b.n	8000e92 <pull_buttons+0xae>
            HAL_Delay(100); // Debounce delay
 8000e8c:	2064      	movs	r0, #100	; 0x64
 8000e8e:	f000 ff2b 	bl	8001ce8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000e92:	2110      	movs	r1, #16
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <pull_buttons+0xc0>)
 8000e96:	f001 fcaf 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f5      	beq.n	8000e8c <pull_buttons+0xa8>
        }
    }
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <lcd_write_nibble>:
#include "screen.h"

uint8_t backlight_state = 1; // initialize backlight_state

void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
    uint8_t data = nibble << D4_BIT;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	73fb      	strb	r3, [r7, #15]
    data |= rs << RS_BIT;
 8000ec0:	7bfa      	ldrb	r2, [r7, #15]
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	73fb      	strb	r3, [r7, #15]
    data |= backlight_state << BL_BIT;
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <lcd_write_nibble+0x7c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	b25a      	sxtb	r2, r3
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	73fb      	strb	r3, [r7, #15]

    data |= 1 << EN_BIT;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ee8:	f107 020f 	add.w	r2, r7, #15
 8000eec:	2364      	movs	r3, #100	; 0x64
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	214e      	movs	r1, #78	; 0x4e
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <lcd_write_nibble+0x80>)
 8000ef6:	f001 fd4b 	bl	8002990 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 fef4 	bl	8001ce8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	f023 0304 	bic.w	r3, r3, #4
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f0a:	f107 020f 	add.w	r2, r7, #15
 8000f0e:	2364      	movs	r3, #100	; 0x64
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	214e      	movs	r1, #78	; 0x4e
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <lcd_write_nibble+0x80>)
 8000f18:	f001 fd3a 	bl	8002990 <HAL_I2C_Master_Transmit>
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000060 	.word	0x20000060
 8000f28:	20000244 	.word	0x20000244

08000f2c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = cmd >> 4;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = cmd & 0x0F;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	73bb      	strb	r3, [r7, #14]
    lcd_write_nibble(upper_nibble, 0);
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ffad 	bl	8000ea8 <lcd_write_nibble>
    lcd_write_nibble(lower_nibble, 0);
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa8 	bl	8000ea8 <lcd_write_nibble>
    if (cmd == 0x01 || cmd == 0x02)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d002      	beq.n	8000f64 <lcd_send_cmd+0x38>
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d102      	bne.n	8000f6a <lcd_send_cmd+0x3e>
    {
        HAL_Delay(2);
 8000f64:	2002      	movs	r0, #2
 8000f66:	f000 febf 	bl	8001ce8 <HAL_Delay>
    }
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = data >> 4;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = data & 0x0F;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	73bb      	strb	r3, [r7, #14]
    lcd_write_nibble(upper_nibble, 1);
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff8a 	bl	8000ea8 <lcd_write_nibble>
    lcd_write_nibble(lower_nibble, 1);
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff85 	bl	8000ea8 <lcd_write_nibble>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <lcd_init>:

void lcd_init()
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8000faa:	2032      	movs	r0, #50	; 0x32
 8000fac:	f000 fe9c 	bl	8001ce8 <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	f7ff ff78 	bl	8000ea8 <lcd_write_nibble>
    HAL_Delay(5);
 8000fb8:	2005      	movs	r0, #5
 8000fba:	f000 fe95 	bl	8001ce8 <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f7ff ff71 	bl	8000ea8 <lcd_write_nibble>
    HAL_Delay(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f000 fe8e 	bl	8001ce8 <HAL_Delay>
    lcd_write_nibble(0x03, 0);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f7ff ff6a 	bl	8000ea8 <lcd_write_nibble>
    HAL_Delay(1);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f000 fe87 	bl	8001ce8 <HAL_Delay>
    lcd_write_nibble(0x02, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f7ff ff63 	bl	8000ea8 <lcd_write_nibble>
    lcd_send_cmd(0x28);
 8000fe2:	2028      	movs	r0, #40	; 0x28
 8000fe4:	f7ff ffa2 	bl	8000f2c <lcd_send_cmd>
    lcd_send_cmd(0x0C);
 8000fe8:	200c      	movs	r0, #12
 8000fea:	f7ff ff9f 	bl	8000f2c <lcd_send_cmd>
    lcd_send_cmd(0x06);
 8000fee:	2006      	movs	r0, #6
 8000ff0:	f7ff ff9c 	bl	8000f2c <lcd_send_cmd>
    lcd_send_cmd(0x01);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff ff99 	bl	8000f2c <lcd_send_cmd>
    HAL_Delay(2);
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f000 fe74 	bl	8001ce8 <HAL_Delay>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    while (*str)
 800100c:	e006      	b.n	800101c <lcd_write_string+0x18>
    {
        lcd_send_data(*str++);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffab 	bl	8000f72 <lcd_send_data>
    while (*str)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f4      	bne.n	800100e <lcd_write_string+0xa>
    }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	460a      	mov	r2, r1
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	4613      	mov	r3, r2
 800103c:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <lcd_set_cursor+0x1c>
 8001044:	2b01      	cmp	r3, #1
 8001046:	d003      	beq.n	8001050 <lcd_set_cursor+0x22>
 8001048:	e005      	b.n	8001056 <lcd_set_cursor+0x28>
    {
        case 0:
            address = 0x00;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
            break;
 800104e:	e004      	b.n	800105a <lcd_set_cursor+0x2c>
        case 1:
            address = 0x40;
 8001050:	2340      	movs	r3, #64	; 0x40
 8001052:	73fb      	strb	r3, [r7, #15]
            break;
 8001054:	e001      	b.n	800105a <lcd_set_cursor+0x2c>
        default:
            address = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	4413      	add	r3, r2
 8001060:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff5e 	bl	8000f2c <lcd_send_cmd>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <lcd_clear>:

void lcd_clear(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff ff55 	bl	8000f2c <lcd_send_cmd>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x44>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_MspInit+0x44>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6613      	str	r3, [r2, #96]	; 0x60
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_MspInit+0x44>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_MspInit+0x44>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_MspInit+0x44>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6593      	str	r3, [r2, #88]	; 0x58
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_MspInit+0x44>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <HAL_DAC_MspInit+0x84>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d12c      	bne.n	800114c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HAL_DAC_MspInit+0x88>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <HAL_DAC_MspInit+0x88>)
 80010f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010fc:	6593      	str	r3, [r2, #88]	; 0x58
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_DAC_MspInit+0x88>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_DAC_MspInit+0x88>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <HAL_DAC_MspInit+0x88>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_DAC_MspInit+0x88>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001122:	2330      	movs	r3, #48	; 0x30
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f001 f9b4 	bl	80024a4 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2036      	movs	r0, #54	; 0x36
 8001142:	f000 fed0 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001146:	2036      	movs	r0, #54	; 0x36
 8001148:	f000 fee9 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40007400 	.word	0x40007400
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0ac      	sub	sp, #176	; 0xb0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2288      	movs	r2, #136	; 0x88
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f005 f821 	bl	80061c4 <memset>
  if(hi2c->Instance==I2C1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <HAL_I2C_MspInit+0xb0>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d13b      	bne.n	8001204 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fe1d 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011a4:	f7ff fd2c 	bl	8000c00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_I2C_MspInit+0xb4>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	4a18      	ldr	r2, [pc, #96]	; (8001210 <HAL_I2C_MspInit+0xb4>)
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_I2C_MspInit+0xb4>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c8:	2312      	movs	r3, #18
 80011ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011da:	2304      	movs	r3, #4
 80011dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e4:	4619      	mov	r1, r3
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <HAL_I2C_MspInit+0xb8>)
 80011e8:	f001 f95c 	bl	80024a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_I2C_MspInit+0xb4>)
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_I2C_MspInit+0xb4>)
 80011f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f6:	6593      	str	r3, [r2, #88]	; 0x58
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_I2C_MspInit+0xb4>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	37b0      	adds	r7, #176	; 0xb0
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40005400 	.word	0x40005400
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400

08001218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_TIM_Base_MspInit+0x44>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d113      	bne.n	8001252 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_TIM_Base_MspInit+0x48>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <HAL_TIM_Base_MspInit+0x48>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6613      	str	r3, [r2, #96]	; 0x60
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_TIM_Base_MspInit+0x48>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2018      	movs	r0, #24
 8001248:	f000 fe4d 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800124c:	2018      	movs	r0, #24
 800124e:	f000 fe66 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40014000 	.word	0x40014000
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0ac      	sub	sp, #176	; 0xb0
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2288      	movs	r2, #136	; 0x88
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f004 ff9d 	bl	80061c4 <memset>
  if(huart->Instance==USART2)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a25      	ldr	r2, [pc, #148]	; (8001324 <HAL_UART_MspInit+0xc0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d143      	bne.n	800131c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001294:	2302      	movs	r3, #2
 8001296:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001298:	2300      	movs	r3, #0
 800129a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fd99 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012ac:	f7ff fca8 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_UART_MspInit+0xc4>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <HAL_UART_MspInit+0xc4>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	6593      	str	r3, [r2, #88]	; 0x58
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_UART_MspInit+0xc4>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_UART_MspInit+0xc4>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	4a16      	ldr	r2, [pc, #88]	; (8001328 <HAL_UART_MspInit+0xc4>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_UART_MspInit+0xc4>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012e0:	230c      	movs	r3, #12
 80012e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f8:	2307      	movs	r3, #7
 80012fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f001 f8cc 	bl	80024a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2026      	movs	r0, #38	; 0x26
 8001312:	f000 fde8 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001316:	2026      	movs	r0, #38	; 0x26
 8001318:	f000 fe01 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	37b0      	adds	r7, #176	; 0xb0
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40004400 	.word	0x40004400
 8001328:	40021000 	.word	0x40021000

0800132c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001330:	e7fe      	b.n	8001330 <NMI_Handler+0x4>

08001332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler+0x4>

0800133e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <UsageFault_Handler+0x4>

0800134a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001378:	f000 fc96 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_1_Pin);
 8001384:	2001      	movs	r0, #1
 8001386:	f001 fa4f 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}

0800138e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_2_Pin);
 8001392:	2002      	movs	r0, #2
 8001394:	f001 fa48 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_3_Pin);
 80013a0:	2004      	movs	r0, #4
 80013a2:	f001 fa41 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}

080013aa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_4_Pin);
 80013ae:	2008      	movs	r0, #8
 80013b0:	f001 fa3a 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_5_Pin);
 80013bc:	2010      	movs	r0, #16
 80013be:	f001 fa33 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_6_Pin);
 80013ca:	2020      	movs	r0, #32
 80013cc:	f001 fa2c 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_7_Pin);
 80013d0:	2040      	movs	r0, #64	; 0x40
 80013d2:	f001 fa29 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_8_Pin);
 80013d6:	2080      	movs	r0, #128	; 0x80
 80013d8:	f001 fa26 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_9_Pin);
 80013dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013e0:	f001 fa22 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_10_Pin);
 80013e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013e8:	f001 fa1e 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80013f6:	f003 fa73 	bl	80048e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000298 	.word	0x20000298

08001404 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <USART2_IRQHandler+0x10>)
 800140a:	f003 fe85 	bl	8005118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200002e4 	.word	0x200002e4

08001418 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_11_Pin);
 800141c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001420:	f001 fa02 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_12_Pin);
 8001424:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001428:	f001 f9fe 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800142c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001430:	f001 f9fa 	bl	8002828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <TIM6_DAC_IRQHandler+0x10>)
 800143e:	f000 fdf7 	bl	8002030 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000230 	.word	0x20000230

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f004 feaa 	bl	80061d4 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20018000 	.word	0x20018000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	20000374 	.word	0x20000374
 80014b4:	20000528 	.word	0x20000528

080014b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <tranposition__increment_octave>:


void update_note_tables();


void tranposition__increment_octave() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	/*
	 * This is a simple state machine to increase the octave.
	 * After the switch case we need to update the values for
	 * the notes and indexes.
	 */
	switch (activeOctave) {
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <tranposition__increment_octave+0x6c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d827      	bhi.n	8001538 <tranposition__increment_octave+0x5c>
 80014e8:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <tranposition__increment_octave+0x14>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001509 	.word	0x08001509
 80014f4:	08001511 	.word	0x08001511
 80014f8:	08001519 	.word	0x08001519
 80014fc:	08001521 	.word	0x08001521
 8001500:	08001529 	.word	0x08001529
 8001504:	08001531 	.word	0x08001531
	case OCTAVE_1:
		activeOctave = OCTAVE_2;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <tranposition__increment_octave+0x6c>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
		break;
 800150e:	e017      	b.n	8001540 <tranposition__increment_octave+0x64>
	case OCTAVE_2:
		activeOctave = OCTAVE_3;
 8001510:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <tranposition__increment_octave+0x6c>)
 8001512:	2202      	movs	r2, #2
 8001514:	701a      	strb	r2, [r3, #0]
		break;
 8001516:	e013      	b.n	8001540 <tranposition__increment_octave+0x64>
	case OCTAVE_3:
		activeOctave = OCTAVE_4;
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <tranposition__increment_octave+0x6c>)
 800151a:	2203      	movs	r2, #3
 800151c:	701a      	strb	r2, [r3, #0]
		break;
 800151e:	e00f      	b.n	8001540 <tranposition__increment_octave+0x64>
	case OCTAVE_4:
		activeOctave = OCTAVE_5;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <tranposition__increment_octave+0x6c>)
 8001522:	2204      	movs	r2, #4
 8001524:	701a      	strb	r2, [r3, #0]
		break;
 8001526:	e00b      	b.n	8001540 <tranposition__increment_octave+0x64>
	case OCTAVE_5:
		activeOctave = OCTAVE_6;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <tranposition__increment_octave+0x6c>)
 800152a:	2205      	movs	r2, #5
 800152c:	701a      	strb	r2, [r3, #0]
		break;
 800152e:	e007      	b.n	8001540 <tranposition__increment_octave+0x64>
	case OCTAVE_6:
		activeOctave = OCTAVE_7;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <tranposition__increment_octave+0x6c>)
 8001532:	2206      	movs	r2, #6
 8001534:	701a      	strb	r2, [r3, #0]
		break;
 8001536:	e003      	b.n	8001540 <tranposition__increment_octave+0x64>
	default:
	case OCTAVE_7:
		activeOctave = OCTAVE_1;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <tranposition__increment_octave+0x6c>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		break;
 800153e:	bf00      	nop

	}

	update_note_tables();
 8001540:	f000 f83c 	bl	80015bc <update_note_tables>

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200001b8 	.word	0x200001b8

0800154c <tranposition__decrement_octave>:

void tranposition__decrement_octave() {
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	 * This is a simple state machine to decrement the octave.
	 * After the switch case we need to update the values for
	 * the notes and indexes.
	 */

	switch (activeOctave) {
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <tranposition__decrement_octave+0x6c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d827      	bhi.n	80015a8 <tranposition__decrement_octave+0x5c>
 8001558:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <tranposition__decrement_octave+0x14>)
 800155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155e:	bf00      	nop
 8001560:	08001579 	.word	0x08001579
 8001564:	08001581 	.word	0x08001581
 8001568:	08001589 	.word	0x08001589
 800156c:	08001591 	.word	0x08001591
 8001570:	08001599 	.word	0x08001599
 8001574:	080015a1 	.word	0x080015a1
	case OCTAVE_1:
		activeOctave = OCTAVE_7;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <tranposition__decrement_octave+0x6c>)
 800157a:	2206      	movs	r2, #6
 800157c:	701a      	strb	r2, [r3, #0]
		break;
 800157e:	e017      	b.n	80015b0 <tranposition__decrement_octave+0x64>
	case OCTAVE_2:
		activeOctave = OCTAVE_1;
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <tranposition__decrement_octave+0x6c>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
		break;
 8001586:	e013      	b.n	80015b0 <tranposition__decrement_octave+0x64>
	case OCTAVE_3:
		activeOctave = OCTAVE_2;
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <tranposition__decrement_octave+0x6c>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
		break;
 800158e:	e00f      	b.n	80015b0 <tranposition__decrement_octave+0x64>
	case OCTAVE_4:
		activeOctave = OCTAVE_3;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <tranposition__decrement_octave+0x6c>)
 8001592:	2202      	movs	r2, #2
 8001594:	701a      	strb	r2, [r3, #0]
		break;
 8001596:	e00b      	b.n	80015b0 <tranposition__decrement_octave+0x64>
	case OCTAVE_5:
		activeOctave = OCTAVE_4;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <tranposition__decrement_octave+0x6c>)
 800159a:	2203      	movs	r2, #3
 800159c:	701a      	strb	r2, [r3, #0]
		break;
 800159e:	e007      	b.n	80015b0 <tranposition__decrement_octave+0x64>
	case OCTAVE_6:
		activeOctave = OCTAVE_5;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <tranposition__decrement_octave+0x6c>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	701a      	strb	r2, [r3, #0]
		break;
 80015a6:	e003      	b.n	80015b0 <tranposition__decrement_octave+0x64>
	default:
	case OCTAVE_7:
		activeOctave = OCTAVE_6;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <tranposition__decrement_octave+0x6c>)
 80015aa:	2205      	movs	r2, #5
 80015ac:	701a      	strb	r2, [r3, #0]
		break;
 80015ae:	bf00      	nop

	}

	update_note_tables();
 80015b0:	f000 f804 	bl	80015bc <update_note_tables>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200001b8 	.word	0x200001b8

080015bc <update_note_tables>:

void update_note_tables(){
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
	 * This function takes the current octave and uses it to update our current
	 * note and sample information.
	 * The NOTE_TABLES are found in sine_tables.h
	 *
	 */
	current_C_TABLE = C_TABLES[activeOctave];
 80015c0:	4b62      	ldr	r3, [pc, #392]	; (800174c <update_note_tables+0x190>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b62      	ldr	r3, [pc, #392]	; (8001750 <update_note_tables+0x194>)
 80015c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015cc:	4a61      	ldr	r2, [pc, #388]	; (8001754 <update_note_tables+0x198>)
 80015ce:	6013      	str	r3, [r2, #0]
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 80015d0:	4b5e      	ldr	r3, [pc, #376]	; (800174c <update_note_tables+0x190>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b60      	ldr	r3, [pc, #384]	; (8001758 <update_note_tables+0x19c>)
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	4a5f      	ldr	r2, [pc, #380]	; (800175c <update_note_tables+0x1a0>)
 80015de:	6013      	str	r3, [r2, #0]
	current_D_TABLE = D_TABLES[activeOctave];
 80015e0:	4b5a      	ldr	r3, [pc, #360]	; (800174c <update_note_tables+0x190>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <update_note_tables+0x1a4>)
 80015e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ec:	4a5d      	ldr	r2, [pc, #372]	; (8001764 <update_note_tables+0x1a8>)
 80015ee:	6013      	str	r3, [r2, #0]
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 80015f0:	4b56      	ldr	r3, [pc, #344]	; (800174c <update_note_tables+0x190>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <update_note_tables+0x1ac>)
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	4a5b      	ldr	r2, [pc, #364]	; (800176c <update_note_tables+0x1b0>)
 80015fe:	6013      	str	r3, [r2, #0]
	current_E_TABLE = E_TABLES[activeOctave];
 8001600:	4b52      	ldr	r3, [pc, #328]	; (800174c <update_note_tables+0x190>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b5a      	ldr	r3, [pc, #360]	; (8001770 <update_note_tables+0x1b4>)
 8001608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160c:	4a59      	ldr	r2, [pc, #356]	; (8001774 <update_note_tables+0x1b8>)
 800160e:	6013      	str	r3, [r2, #0]
	current_F_TABLE = F_TABLES[activeOctave];
 8001610:	4b4e      	ldr	r3, [pc, #312]	; (800174c <update_note_tables+0x190>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b58      	ldr	r3, [pc, #352]	; (8001778 <update_note_tables+0x1bc>)
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	4a57      	ldr	r2, [pc, #348]	; (800177c <update_note_tables+0x1c0>)
 800161e:	6013      	str	r3, [r2, #0]
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 8001620:	4b4a      	ldr	r3, [pc, #296]	; (800174c <update_note_tables+0x190>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b56      	ldr	r3, [pc, #344]	; (8001780 <update_note_tables+0x1c4>)
 8001628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162c:	4a55      	ldr	r2, [pc, #340]	; (8001784 <update_note_tables+0x1c8>)
 800162e:	6013      	str	r3, [r2, #0]
	current_G_TABLE = G_TABLES[activeOctave];
 8001630:	4b46      	ldr	r3, [pc, #280]	; (800174c <update_note_tables+0x190>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b54      	ldr	r3, [pc, #336]	; (8001788 <update_note_tables+0x1cc>)
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	4a53      	ldr	r2, [pc, #332]	; (800178c <update_note_tables+0x1d0>)
 800163e:	6013      	str	r3, [r2, #0]
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 8001640:	4b42      	ldr	r3, [pc, #264]	; (800174c <update_note_tables+0x190>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <update_note_tables+0x1d4>)
 8001648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164c:	4a51      	ldr	r2, [pc, #324]	; (8001794 <update_note_tables+0x1d8>)
 800164e:	6013      	str	r3, [r2, #0]
	current_A_TABLE = A_TABLES[activeOctave];
 8001650:	4b3e      	ldr	r3, [pc, #248]	; (800174c <update_note_tables+0x190>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b50      	ldr	r3, [pc, #320]	; (8001798 <update_note_tables+0x1dc>)
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	4a4f      	ldr	r2, [pc, #316]	; (800179c <update_note_tables+0x1e0>)
 800165e:	6013      	str	r3, [r2, #0]
	current_As_TABLE = As_TABLES[activeOctave];
 8001660:	4b3a      	ldr	r3, [pc, #232]	; (800174c <update_note_tables+0x190>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <update_note_tables+0x1e4>)
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	4a4d      	ldr	r2, [pc, #308]	; (80017a4 <update_note_tables+0x1e8>)
 800166e:	6013      	str	r3, [r2, #0]
	current_B_TABLE = B_TABLES[activeOctave];
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <update_note_tables+0x190>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <update_note_tables+0x1ec>)
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	4a4b      	ldr	r2, [pc, #300]	; (80017ac <update_note_tables+0x1f0>)
 800167e:	6013      	str	r3, [r2, #0]

	current_C_SAMPLES = C_SAMPLES[activeOctave];
 8001680:	4b32      	ldr	r3, [pc, #200]	; (800174c <update_note_tables+0x190>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <update_note_tables+0x1f4>)
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	4a49      	ldr	r2, [pc, #292]	; (80017b4 <update_note_tables+0x1f8>)
 800168e:	6013      	str	r3, [r2, #0]
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <update_note_tables+0x190>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b48      	ldr	r3, [pc, #288]	; (80017b8 <update_note_tables+0x1fc>)
 8001698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169c:	4a47      	ldr	r2, [pc, #284]	; (80017bc <update_note_tables+0x200>)
 800169e:	6013      	str	r3, [r2, #0]
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 80016a0:	4b2a      	ldr	r3, [pc, #168]	; (800174c <update_note_tables+0x190>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <update_note_tables+0x204>)
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	4a45      	ldr	r2, [pc, #276]	; (80017c4 <update_note_tables+0x208>)
 80016ae:	6013      	str	r3, [r2, #0]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <update_note_tables+0x190>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b44      	ldr	r3, [pc, #272]	; (80017c8 <update_note_tables+0x20c>)
 80016b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016bc:	4a43      	ldr	r2, [pc, #268]	; (80017cc <update_note_tables+0x210>)
 80016be:	6013      	str	r3, [r2, #0]
	current_E_SAMPLES = E_SAMPLES[activeOctave];
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <update_note_tables+0x190>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <update_note_tables+0x214>)
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	4a41      	ldr	r2, [pc, #260]	; (80017d4 <update_note_tables+0x218>)
 80016ce:	6013      	str	r3, [r2, #0]
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <update_note_tables+0x190>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b40      	ldr	r3, [pc, #256]	; (80017d8 <update_note_tables+0x21c>)
 80016d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016dc:	4a3f      	ldr	r2, [pc, #252]	; (80017dc <update_note_tables+0x220>)
 80016de:	6013      	str	r3, [r2, #0]
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <update_note_tables+0x190>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <update_note_tables+0x224>)
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	4a3d      	ldr	r2, [pc, #244]	; (80017e4 <update_note_tables+0x228>)
 80016ee:	6013      	str	r3, [r2, #0]
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <update_note_tables+0x190>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <update_note_tables+0x22c>)
 80016f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fc:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <update_note_tables+0x230>)
 80016fe:	6013      	str	r3, [r2, #0]
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <update_note_tables+0x190>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <update_note_tables+0x234>)
 8001708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170c:	4a39      	ldr	r2, [pc, #228]	; (80017f4 <update_note_tables+0x238>)
 800170e:	6013      	str	r3, [r2, #0]
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <update_note_tables+0x190>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <update_note_tables+0x23c>)
 8001718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171c:	4a37      	ldr	r2, [pc, #220]	; (80017fc <update_note_tables+0x240>)
 800171e:	6013      	str	r3, [r2, #0]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <update_note_tables+0x190>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b36      	ldr	r3, [pc, #216]	; (8001800 <update_note_tables+0x244>)
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	4a35      	ldr	r2, [pc, #212]	; (8001804 <update_note_tables+0x248>)
 800172e:	6013      	str	r3, [r2, #0]
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <update_note_tables+0x190>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <update_note_tables+0x24c>)
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	4a33      	ldr	r2, [pc, #204]	; (800180c <update_note_tables+0x250>)
 800173e:	6013      	str	r3, [r2, #0]

}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200001b8 	.word	0x200001b8
 8001750:	20000068 	.word	0x20000068
 8001754:	20000378 	.word	0x20000378
 8001758:	20000084 	.word	0x20000084
 800175c:	2000037c 	.word	0x2000037c
 8001760:	200000a0 	.word	0x200000a0
 8001764:	20000380 	.word	0x20000380
 8001768:	200000bc 	.word	0x200000bc
 800176c:	20000384 	.word	0x20000384
 8001770:	200000d8 	.word	0x200000d8
 8001774:	20000388 	.word	0x20000388
 8001778:	200000f4 	.word	0x200000f4
 800177c:	2000038c 	.word	0x2000038c
 8001780:	20000110 	.word	0x20000110
 8001784:	20000390 	.word	0x20000390
 8001788:	2000012c 	.word	0x2000012c
 800178c:	20000394 	.word	0x20000394
 8001790:	20000148 	.word	0x20000148
 8001794:	20000398 	.word	0x20000398
 8001798:	20000164 	.word	0x20000164
 800179c:	2000039c 	.word	0x2000039c
 80017a0:	20000180 	.word	0x20000180
 80017a4:	200003a0 	.word	0x200003a0
 80017a8:	2000019c 	.word	0x2000019c
 80017ac:	200003a4 	.word	0x200003a4
 80017b0:	0803b8d0 	.word	0x0803b8d0
 80017b4:	200003a8 	.word	0x200003a8
 80017b8:	0803b8ec 	.word	0x0803b8ec
 80017bc:	200003ac 	.word	0x200003ac
 80017c0:	0803b908 	.word	0x0803b908
 80017c4:	200003b0 	.word	0x200003b0
 80017c8:	0803b924 	.word	0x0803b924
 80017cc:	200003b4 	.word	0x200003b4
 80017d0:	0803b940 	.word	0x0803b940
 80017d4:	200003b8 	.word	0x200003b8
 80017d8:	0803b95c 	.word	0x0803b95c
 80017dc:	200003bc 	.word	0x200003bc
 80017e0:	0803b978 	.word	0x0803b978
 80017e4:	200003c0 	.word	0x200003c0
 80017e8:	0803b994 	.word	0x0803b994
 80017ec:	200003c4 	.word	0x200003c4
 80017f0:	0803b9b0 	.word	0x0803b9b0
 80017f4:	200003c8 	.word	0x200003c8
 80017f8:	0803b9cc 	.word	0x0803b9cc
 80017fc:	200003cc 	.word	0x200003cc
 8001800:	0803b9e8 	.word	0x0803b9e8
 8001804:	200003d0 	.word	0x200003d0
 8001808:	0803ba04 	.word	0x0803ba04
 800180c:	200003d4 	.word	0x200003d4

08001810 <tranposition__note_update>:

int tranposition__note_update() {
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
	/****************************************************************
		 This first section of Code is to handle the reseting of each index.
		 Normally this would be done at the end, but since we might be switching octaves
		 we need to make sure that our indexes are restarted.
	*********************************************************************/
		if (index[NOTE_C] > current_C_SAMPLES)
 8001816:	4b85      	ldr	r3, [pc, #532]	; (8001a2c <tranposition__note_update+0x21c>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b85      	ldr	r3, [pc, #532]	; (8001a30 <tranposition__note_update+0x220>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	dd02      	ble.n	8001828 <tranposition__note_update+0x18>
			index[NOTE_C] = 0;
 8001822:	4b82      	ldr	r3, [pc, #520]	; (8001a2c <tranposition__note_update+0x21c>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
		if (index[NOTE_Cs] > current_Cs_SAMPLES)
 8001828:	4b80      	ldr	r3, [pc, #512]	; (8001a2c <tranposition__note_update+0x21c>)
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4b81      	ldr	r3, [pc, #516]	; (8001a34 <tranposition__note_update+0x224>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	dd02      	ble.n	800183a <tranposition__note_update+0x2a>
			index[NOTE_Cs] = 0;
 8001834:	4b7d      	ldr	r3, [pc, #500]	; (8001a2c <tranposition__note_update+0x21c>)
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
		if (index[NOTE_D] > current_D_SAMPLES)
 800183a:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <tranposition__note_update+0x21c>)
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	4b7e      	ldr	r3, [pc, #504]	; (8001a38 <tranposition__note_update+0x228>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	dd02      	ble.n	800184c <tranposition__note_update+0x3c>
			index[NOTE_D] = 0;
 8001846:	4b79      	ldr	r3, [pc, #484]	; (8001a2c <tranposition__note_update+0x21c>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
		if (index[NOTE_Ds] > current_Ds_SAMPLES)
 800184c:	4b77      	ldr	r3, [pc, #476]	; (8001a2c <tranposition__note_update+0x21c>)
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	4b7a      	ldr	r3, [pc, #488]	; (8001a3c <tranposition__note_update+0x22c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	dd02      	ble.n	800185e <tranposition__note_update+0x4e>
			index[NOTE_Ds] = 0;
 8001858:	4b74      	ldr	r3, [pc, #464]	; (8001a2c <tranposition__note_update+0x21c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
		if (index[NOTE_E] > current_E_SAMPLES)
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <tranposition__note_update+0x21c>)
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	4b77      	ldr	r3, [pc, #476]	; (8001a40 <tranposition__note_update+0x230>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	dd02      	ble.n	8001870 <tranposition__note_update+0x60>
			index[NOTE_E] = 0;
 800186a:	4b70      	ldr	r3, [pc, #448]	; (8001a2c <tranposition__note_update+0x21c>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
		if (index[NOTE_F] > current_F_SAMPLES)
 8001870:	4b6e      	ldr	r3, [pc, #440]	; (8001a2c <tranposition__note_update+0x21c>)
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <tranposition__note_update+0x234>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	dd02      	ble.n	8001882 <tranposition__note_update+0x72>
			index[NOTE_F] = 0;
 800187c:	4b6b      	ldr	r3, [pc, #428]	; (8001a2c <tranposition__note_update+0x21c>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
		if (index[NOTE_Fs] > current_Fs_SAMPLES)
 8001882:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <tranposition__note_update+0x21c>)
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <tranposition__note_update+0x238>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	dd02      	ble.n	8001894 <tranposition__note_update+0x84>
			index[NOTE_Fs] = 0;
 800188e:	4b67      	ldr	r3, [pc, #412]	; (8001a2c <tranposition__note_update+0x21c>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
		if (index[NOTE_G] > current_G_SAMPLES)
 8001894:	4b65      	ldr	r3, [pc, #404]	; (8001a2c <tranposition__note_update+0x21c>)
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <tranposition__note_update+0x23c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	dd02      	ble.n	80018a6 <tranposition__note_update+0x96>
			index[NOTE_G] = 0;
 80018a0:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <tranposition__note_update+0x21c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
		if (index[NOTE_Gs] > current_Gs_SAMPLES)
 80018a6:	4b61      	ldr	r3, [pc, #388]	; (8001a2c <tranposition__note_update+0x21c>)
 80018a8:	6a1a      	ldr	r2, [r3, #32]
 80018aa:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <tranposition__note_update+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dd02      	ble.n	80018b8 <tranposition__note_update+0xa8>
			index[NOTE_Gs] = 0;
 80018b2:	4b5e      	ldr	r3, [pc, #376]	; (8001a2c <tranposition__note_update+0x21c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
		if (index[NOTE_A] > current_A_SAMPLES)
 80018b8:	4b5c      	ldr	r3, [pc, #368]	; (8001a2c <tranposition__note_update+0x21c>)
 80018ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018bc:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <tranposition__note_update+0x244>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dd02      	ble.n	80018ca <tranposition__note_update+0xba>
			index[NOTE_A] = 0;
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <tranposition__note_update+0x21c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
		if (index[NOTE_As] > current_As_SAMPLES)
 80018ca:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <tranposition__note_update+0x21c>)
 80018cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <tranposition__note_update+0x248>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dd02      	ble.n	80018dc <tranposition__note_update+0xcc>
			index[NOTE_As] = 0;
 80018d6:	4b55      	ldr	r3, [pc, #340]	; (8001a2c <tranposition__note_update+0x21c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
		if (index[NOTE_B] > current_B_SAMPLES)
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <tranposition__note_update+0x21c>)
 80018de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <tranposition__note_update+0x24c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dd02      	ble.n	80018ee <tranposition__note_update+0xde>
			index[NOTE_B] = 0;
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <tranposition__note_update+0x21c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
	/* ***************************************************************
	 * This first batch of values is to look update the value for each Note.
	 * By using a list and different indexes we can speed up the program with good spatial locality
	 * If the note is active then we update the value. Otherwise we return a zero.
	 ***************************************************************************/
	int wave_out =0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
	wave_out	+= active[NOTE_C] ? current_C_TABLE[index[NOTE_C]] : 0;
 80018f2:	4b5b      	ldr	r3, [pc, #364]	; (8001a60 <tranposition__note_update+0x250>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <tranposition__note_update+0xfa>
 80018fa:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <tranposition__note_update+0x254>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <tranposition__note_update+0x21c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	e000      	b.n	800190c <tranposition__note_update+0xfc>
 800190a:	2300      	movs	r3, #0
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	607b      	str	r3, [r7, #4]
	wave_out	+= active[NOTE_Cs] ? current_Cs_TABLE[index[NOTE_Cs]] : 0;
 8001912:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <tranposition__note_update+0x250>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <tranposition__note_update+0x11a>
 800191a:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <tranposition__note_update+0x258>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <tranposition__note_update+0x21c>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	e000      	b.n	800192c <tranposition__note_update+0x11c>
 800192a:	2300      	movs	r3, #0
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_D] ? current_D_TABLE[index[NOTE_D]] : 0;
 8001932:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <tranposition__note_update+0x250>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <tranposition__note_update+0x13a>
 800193a:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <tranposition__note_update+0x25c>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <tranposition__note_update+0x21c>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e000      	b.n	800194c <tranposition__note_update+0x13c>
 800194a:	2300      	movs	r3, #0
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4413      	add	r3, r2
 8001950:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_Ds] ? current_Ds_TABLE[index[NOTE_Ds]] : 0;
 8001952:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <tranposition__note_update+0x250>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <tranposition__note_update+0x15a>
 800195a:	4b45      	ldr	r3, [pc, #276]	; (8001a70 <tranposition__note_update+0x260>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <tranposition__note_update+0x21c>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	e000      	b.n	800196c <tranposition__note_update+0x15c>
 800196a:	2300      	movs	r3, #0
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_E] ? current_E_TABLE[index[NOTE_E]] : 0;
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <tranposition__note_update+0x250>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <tranposition__note_update+0x17a>
 800197a:	4b3e      	ldr	r3, [pc, #248]	; (8001a74 <tranposition__note_update+0x264>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <tranposition__note_update+0x21c>)
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e000      	b.n	800198c <tranposition__note_update+0x17c>
 800198a:	2300      	movs	r3, #0
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_F] ? current_F_TABLE[index[NOTE_F]] : 0;
 8001992:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <tranposition__note_update+0x250>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <tranposition__note_update+0x19a>
 800199a:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <tranposition__note_update+0x268>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <tranposition__note_update+0x21c>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	e000      	b.n	80019ac <tranposition__note_update+0x19c>
 80019aa:	2300      	movs	r3, #0
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_Fs] ? current_Fs_TABLE[index[NOTE_Fs]] : 0;
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <tranposition__note_update+0x250>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <tranposition__note_update+0x1ba>
 80019ba:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <tranposition__note_update+0x26c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <tranposition__note_update+0x21c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	e000      	b.n	80019cc <tranposition__note_update+0x1bc>
 80019ca:	2300      	movs	r3, #0
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_G] ? current_G_TABLE[index[NOTE_G]] : 0;
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <tranposition__note_update+0x250>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <tranposition__note_update+0x1da>
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <tranposition__note_update+0x270>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <tranposition__note_update+0x21c>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e000      	b.n	80019ec <tranposition__note_update+0x1dc>
 80019ea:	2300      	movs	r3, #0
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_Gs] ? current_Gs_TABLE[index[NOTE_Gs]] : 0;
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <tranposition__note_update+0x250>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <tranposition__note_update+0x1fa>
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <tranposition__note_update+0x274>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <tranposition__note_update+0x21c>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	e000      	b.n	8001a0c <tranposition__note_update+0x1fc>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_A] ? current_A_TABLE[index[NOTE_A]] : 0;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <tranposition__note_update+0x250>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d038      	beq.n	8001a8c <tranposition__note_update+0x27c>
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <tranposition__note_update+0x278>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <tranposition__note_update+0x21c>)
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	e031      	b.n	8001a8e <tranposition__note_update+0x27e>
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	200003a8 	.word	0x200003a8
 8001a34:	200003ac 	.word	0x200003ac
 8001a38:	200003b0 	.word	0x200003b0
 8001a3c:	200003b4 	.word	0x200003b4
 8001a40:	200003b8 	.word	0x200003b8
 8001a44:	200003bc 	.word	0x200003bc
 8001a48:	200003c0 	.word	0x200003c0
 8001a4c:	200003c4 	.word	0x200003c4
 8001a50:	200003c8 	.word	0x200003c8
 8001a54:	200003cc 	.word	0x200003cc
 8001a58:	200003d0 	.word	0x200003d0
 8001a5c:	200003d4 	.word	0x200003d4
 8001a60:	20000030 	.word	0x20000030
 8001a64:	20000378 	.word	0x20000378
 8001a68:	2000037c 	.word	0x2000037c
 8001a6c:	20000380 	.word	0x20000380
 8001a70:	20000384 	.word	0x20000384
 8001a74:	20000388 	.word	0x20000388
 8001a78:	2000038c 	.word	0x2000038c
 8001a7c:	20000390 	.word	0x20000390
 8001a80:	20000394 	.word	0x20000394
 8001a84:	20000398 	.word	0x20000398
 8001a88:	2000039c 	.word	0x2000039c
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_As] ? current_As_TABLE[index[NOTE_As]] : 0;
 8001a94:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <tranposition__note_update+0x37c>)
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <tranposition__note_update+0x29c>
 8001a9c:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <tranposition__note_update+0x380>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <tranposition__note_update+0x384>)
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	e000      	b.n	8001aae <tranposition__note_update+0x29e>
 8001aac:	2300      	movs	r3, #0
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	607b      	str	r3, [r7, #4]
	wave_out 	+= active[NOTE_B] ? current_B_TABLE[index[NOTE_B]] : 0;
 8001ab4:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <tranposition__note_update+0x37c>)
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <tranposition__note_update+0x2bc>
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <tranposition__note_update+0x388>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <tranposition__note_update+0x384>)
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e000      	b.n	8001ace <tranposition__note_update+0x2be>
 8001acc:	2300      	movs	r3, #0
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	607b      	str	r3, [r7, #4]

	/* ***************************************************************
	 This batch of code is to just update the index if the note is active.
	 Since the active list should only ever hold a 0 or a 1, this code works. Avoid if statements
	 ***************************************************************************/
	index[NOTE_C] += active[NOTE_C];
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <tranposition__note_update+0x384>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <tranposition__note_update+0x37c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a2d      	ldr	r2, [pc, #180]	; (8001b94 <tranposition__note_update+0x384>)
 8001ae0:	6013      	str	r3, [r2, #0]
	index[NOTE_Cs] += active[NOTE_Cs];
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <tranposition__note_update+0x384>)
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <tranposition__note_update+0x37c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a29      	ldr	r2, [pc, #164]	; (8001b94 <tranposition__note_update+0x384>)
 8001aee:	6053      	str	r3, [r2, #4]
	index[NOTE_D] += active[NOTE_D];
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <tranposition__note_update+0x384>)
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <tranposition__note_update+0x37c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <tranposition__note_update+0x384>)
 8001afc:	6093      	str	r3, [r2, #8]
	index[NOTE_Ds] += active[NOTE_Ds];
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <tranposition__note_update+0x384>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <tranposition__note_update+0x37c>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <tranposition__note_update+0x384>)
 8001b0a:	60d3      	str	r3, [r2, #12]
	index[NOTE_E] += active[NOTE_E];
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <tranposition__note_update+0x384>)
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <tranposition__note_update+0x37c>)
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <tranposition__note_update+0x384>)
 8001b18:	6113      	str	r3, [r2, #16]
	index[NOTE_F] += active[NOTE_F];
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <tranposition__note_update+0x384>)
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <tranposition__note_update+0x37c>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <tranposition__note_update+0x384>)
 8001b26:	6153      	str	r3, [r2, #20]
	index[NOTE_Fs] += active[NOTE_Fs];
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <tranposition__note_update+0x384>)
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <tranposition__note_update+0x37c>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a18      	ldr	r2, [pc, #96]	; (8001b94 <tranposition__note_update+0x384>)
 8001b34:	6193      	str	r3, [r2, #24]
	index[NOTE_G] += active[NOTE_G];
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <tranposition__note_update+0x384>)
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <tranposition__note_update+0x37c>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <tranposition__note_update+0x384>)
 8001b42:	61d3      	str	r3, [r2, #28]
	index[NOTE_Gs] += active[NOTE_Gs];
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <tranposition__note_update+0x384>)
 8001b46:	6a1a      	ldr	r2, [r3, #32]
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <tranposition__note_update+0x37c>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <tranposition__note_update+0x384>)
 8001b50:	6213      	str	r3, [r2, #32]
	index[NOTE_A] += active[NOTE_A];
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <tranposition__note_update+0x384>)
 8001b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <tranposition__note_update+0x37c>)
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <tranposition__note_update+0x384>)
 8001b5e:	6253      	str	r3, [r2, #36]	; 0x24
	index[NOTE_As] += active[NOTE_As];
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <tranposition__note_update+0x384>)
 8001b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <tranposition__note_update+0x37c>)
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <tranposition__note_update+0x384>)
 8001b6c:	6293      	str	r3, [r2, #40]	; 0x28
	index[NOTE_B] += active[NOTE_B];
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <tranposition__note_update+0x384>)
 8001b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <tranposition__note_update+0x37c>)
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	4413      	add	r3, r2
 8001b78:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <tranposition__note_update+0x384>)
 8001b7a:	62d3      	str	r3, [r2, #44]	; 0x2c



	return	wave_out;
 8001b7c:	687b      	ldr	r3, [r7, #4]

}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000030 	.word	0x20000030
 8001b90:	200003a0 	.word	0x200003a0
 8001b94:	20000000 	.word	0x20000000
 8001b98:	200003a4 	.word	0x200003a4

08001b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba0:	f7ff fc8a 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	; (8001bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <LoopForever+0xe>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	; (8001be8 <LoopForever+0x16>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bca:	f004 fb09 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bce:	f7fe fccd 	bl	800056c <main>

08001bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd2:	e7fe      	b.n	8001bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001be0:	0803ba64 	.word	0x0803ba64
  ldr r2, =_sbss
 8001be4:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8001be8:	20000524 	.word	0x20000524

08001bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC1_2_IRQHandler>
	...

08001bf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_Init+0x3c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_Init+0x3c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f000 f962 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f000 f80f 	bl	8001c30 <HAL_InitTick>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	e001      	b.n	8001c22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c1e:	f7ff fa33 	bl	8001088 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c22:	79fb      	ldrb	r3, [r7, #7]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_InitTick+0x6c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d023      	beq.n	8001c8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_InitTick+0x70>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_InitTick+0x6c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f96d 	bl	8001f3a <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10f      	bne.n	8001c86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d809      	bhi.n	8001c80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f937 	bl	8001ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_InitTick+0x74>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e007      	b.n	8001c90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e004      	b.n	8001c90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	e001      	b.n	8001c90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200001c0 	.word	0x200001c0
 8001ca0:	20000064 	.word	0x20000064
 8001ca4:	200001bc 	.word	0x200001bc

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	200001c0 	.word	0x200001c0
 8001ccc:	200003d8 	.word	0x200003d8

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	200003d8 	.word	0x200003d8

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ffee 	bl	8001cd0 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_Delay+0x44>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffde 	bl	8001cd0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200001c0 	.word	0x200001c0

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <__NVIC_EnableIRQ+0x38>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	; (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff29 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff3e 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff8e 	bl	8001e24 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5d 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff31 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e014      	b.n	8001f8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	791b      	ldrb	r3, [r3, #4]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff f8ab 	bl	80010d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	795b      	ldrb	r3, [r3, #5]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_DAC_Start+0x16>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e03b      	b.n	8002024 <HAL_DAC_Start+0x8e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d118      	bne.n	8002016 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	e00f      	b.n	8002016 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002000:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002004:	d107      	bne.n	8002016 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0202 	orr.w	r2, r2, #2
 8002014:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002046:	d120      	bne.n	800208a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002056:	d118      	bne.n	800208a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2204      	movs	r2, #4
 800205c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002072:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002082:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f852 	bl	800212e <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002098:	d120      	bne.n	80020dc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020a8:	d118      	bne.n	80020dc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2204      	movs	r2, #4
 80020ae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f043 0202 	orr.w	r2, r3, #2
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80020d4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f95a 	bl	8002390 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	3308      	adds	r3, #8
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e004      	b.n	8002118 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	3314      	adds	r3, #20
 8002116:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	461a      	mov	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	371c      	adds	r7, #28
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b088      	sub	sp, #32
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	795b      	ldrb	r3, [r3, #5]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_DAC_ConfigChannel+0x1c>
 800215a:	2302      	movs	r3, #2
 800215c:	e114      	b.n	8002388 <HAL_DAC_ConfigChannel+0x246>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2202      	movs	r2, #2
 8002168:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b04      	cmp	r3, #4
 8002170:	f040 8081 	bne.w	8002276 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002174:	f7ff fdac 	bl	8001cd0 <HAL_GetTick>
 8002178:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d140      	bne.n	8002202 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002180:	e018      	b.n	80021b4 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002182:	f7ff fda5 	bl	8001cd0 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d911      	bls.n	80021b4 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f043 0208 	orr.w	r2, r3, #8
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2203      	movs	r2, #3
 80021ae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0e9      	b.n	8002388 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1df      	bne.n	8002182 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7ff fd90 	bl	8001ce8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	6992      	ldr	r2, [r2, #24]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
 80021d2:	e023      	b.n	800221c <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80021d4:	f7ff fd7c 	bl	8001cd0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d90f      	bls.n	8002202 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da0a      	bge.n	8002202 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f043 0208 	orr.w	r2, r3, #8
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2203      	movs	r2, #3
 80021fc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0c2      	b.n	8002388 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002208:	2b00      	cmp	r3, #0
 800220a:	dbe3      	blt.n	80021d4 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800220c:	2001      	movs	r0, #1
 800220e:	f7ff fd6b 	bl	8001ce8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	6992      	ldr	r2, [r2, #24]
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	ea02 0103 	and.w	r1, r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	409a      	lsls	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	21ff      	movs	r1, #255	; 0xff
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	ea02 0103 	and.w	r1, r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	6a1a      	ldr	r2, [r3, #32]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	409a      	lsls	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d11d      	bne.n	80022ba <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	221f      	movs	r2, #31
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2207      	movs	r2, #7
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	431a      	orrs	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	400a      	ands	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6819      	ldr	r1, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	22c0      	movs	r2, #192	; 0xc0
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43da      	mvns	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	400a      	ands	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d008      	beq.n	80023ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2204      	movs	r2, #4
 80023c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e022      	b.n	8002414 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 020e 	bic.w	r2, r2, #14
 80023dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f003 021c 	and.w	r2, r3, #28
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2101      	movs	r1, #1
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d005      	beq.n	8002444 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2204      	movs	r2, #4
 800243c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	e029      	b.n	8002498 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 020e 	bic.w	r2, r2, #14
 8002452:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f003 021c 	and.w	r2, r3, #28
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
    }
  }
  return status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b2:	e17f      	b.n	80027b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8171 	beq.w	80027ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d005      	beq.n	80024e4 <HAL_GPIO_Init+0x40>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d130      	bne.n	8002546 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800251a:	2201      	movs	r2, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 0201 	and.w	r2, r3, #1
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b03      	cmp	r3, #3
 8002550:	d118      	bne.n	8002584 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002558:	2201      	movs	r2, #1
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	08db      	lsrs	r3, r3, #3
 800256e:	f003 0201 	and.w	r2, r3, #1
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b03      	cmp	r3, #3
 800258e:	d017      	beq.n	80025c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d123      	bne.n	8002614 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	08da      	lsrs	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3208      	adds	r2, #8
 800260e:	6939      	ldr	r1, [r7, #16]
 8002610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80ac 	beq.w	80027ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <HAL_GPIO_Init+0x330>)
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	4a5e      	ldr	r2, [pc, #376]	; (80027d4 <HAL_GPIO_Init+0x330>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6613      	str	r3, [r2, #96]	; 0x60
 8002662:	4b5c      	ldr	r3, [pc, #368]	; (80027d4 <HAL_GPIO_Init+0x330>)
 8002664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800266e:	4a5a      	ldr	r2, [pc, #360]	; (80027d8 <HAL_GPIO_Init+0x334>)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	220f      	movs	r2, #15
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002698:	d025      	beq.n	80026e6 <HAL_GPIO_Init+0x242>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4f      	ldr	r2, [pc, #316]	; (80027dc <HAL_GPIO_Init+0x338>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <HAL_GPIO_Init+0x23e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4e      	ldr	r2, [pc, #312]	; (80027e0 <HAL_GPIO_Init+0x33c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_Init+0x23a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4d      	ldr	r2, [pc, #308]	; (80027e4 <HAL_GPIO_Init+0x340>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0x236>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4c      	ldr	r2, [pc, #304]	; (80027e8 <HAL_GPIO_Init+0x344>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_Init+0x232>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4b      	ldr	r2, [pc, #300]	; (80027ec <HAL_GPIO_Init+0x348>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_Init+0x22e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4a      	ldr	r2, [pc, #296]	; (80027f0 <HAL_GPIO_Init+0x34c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_Init+0x22a>
 80026ca:	2306      	movs	r3, #6
 80026cc:	e00c      	b.n	80026e8 <HAL_GPIO_Init+0x244>
 80026ce:	2307      	movs	r3, #7
 80026d0:	e00a      	b.n	80026e8 <HAL_GPIO_Init+0x244>
 80026d2:	2305      	movs	r3, #5
 80026d4:	e008      	b.n	80026e8 <HAL_GPIO_Init+0x244>
 80026d6:	2304      	movs	r3, #4
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x244>
 80026da:	2303      	movs	r3, #3
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x244>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x244>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x244>
 80026e6:	2300      	movs	r3, #0
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	f002 0203 	and.w	r2, r2, #3
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026f8:	4937      	ldr	r1, [pc, #220]	; (80027d8 <HAL_GPIO_Init+0x334>)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002706:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <HAL_GPIO_Init+0x350>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800272a:	4a32      	ldr	r2, [pc, #200]	; (80027f4 <HAL_GPIO_Init+0x350>)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_GPIO_Init+0x350>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <HAL_GPIO_Init+0x350>)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <HAL_GPIO_Init+0x350>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800277e:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_GPIO_Init+0x350>)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_GPIO_Init+0x350>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027a8:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <HAL_GPIO_Init+0x350>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3301      	adds	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f47f ae78 	bne.w	80024b4 <HAL_GPIO_Init+0x10>
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010000 	.word	0x40010000
 80027dc:	48000400 	.word	0x48000400
 80027e0:	48000800 	.word	0x48000800
 80027e4:	48000c00 	.word	0x48000c00
 80027e8:	48001000 	.word	0x48001000
 80027ec:	48001400 	.word	0x48001400
 80027f0:	48001800 	.word	0x48001800
 80027f4:	40010400 	.word	0x40010400

080027f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	887b      	ldrh	r3, [r7, #2]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	e001      	b.n	800281a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d006      	beq.n	800284c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800283e:	4a05      	ldr	r2, [pc, #20]	; (8002854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe f8b8 	bl	80009bc <HAL_GPIO_EXTI_Callback>
  }
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40010400 	.word	0x40010400

08002858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e08d      	b.n	8002986 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fc6c 	bl	800115c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	; 0x24
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e006      	b.n	80028e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d108      	bne.n	80028fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	e007      	b.n	800290a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002908:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800292c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69d9      	ldr	r1, [r3, #28]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1a      	ldr	r2, [r3, #32]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	461a      	mov	r2, r3
 800299c:	460b      	mov	r3, r1
 800299e:	817b      	strh	r3, [r7, #10]
 80029a0:	4613      	mov	r3, r2
 80029a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	f040 80fd 	bne.w	8002bac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_I2C_Master_Transmit+0x30>
 80029bc:	2302      	movs	r3, #2
 80029be:	e0f6      	b.n	8002bae <HAL_I2C_Master_Transmit+0x21e>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029c8:	f7ff f982 	bl	8001cd0 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2319      	movs	r3, #25
 80029d4:	2201      	movs	r2, #1
 80029d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f914 	bl	8002c08 <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0e1      	b.n	8002bae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2221      	movs	r2, #33	; 0x21
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2210      	movs	r2, #16
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	893a      	ldrh	r2, [r7, #8]
 8002a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2bff      	cmp	r3, #255	; 0xff
 8002a1a:	d906      	bls.n	8002a2a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	22ff      	movs	r2, #255	; 0xff
 8002a20:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e007      	b.n	8002a3a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a38:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d024      	beq.n	8002a8c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	4b4e      	ldr	r3, [pc, #312]	; (8002bb8 <HAL_I2C_Master_Transmit+0x228>)
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fa79 	bl	8002f7c <I2C_TransferConfig>
 8002a8a:	e066      	b.n	8002b5a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	8979      	ldrh	r1, [r7, #10]
 8002a94:	4b48      	ldr	r3, [pc, #288]	; (8002bb8 <HAL_I2C_Master_Transmit+0x228>)
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fa6e 	bl	8002f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002aa0:	e05b      	b.n	8002b5a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	6a39      	ldr	r1, [r7, #32]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8fd 	bl	8002ca6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e07b      	b.n	8002bae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	781a      	ldrb	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d034      	beq.n	8002b5a <HAL_I2C_Master_Transmit+0x1ca>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d130      	bne.n	8002b5a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	2200      	movs	r2, #0
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f880 	bl	8002c08 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e04d      	b.n	8002bae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2bff      	cmp	r3, #255	; 0xff
 8002b1a:	d90e      	bls.n	8002b3a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	22ff      	movs	r2, #255	; 0xff
 8002b20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	8979      	ldrh	r1, [r7, #10]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fa22 	bl	8002f7c <I2C_TransferConfig>
 8002b38:	e00f      	b.n	8002b5a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	8979      	ldrh	r1, [r7, #10]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fa11 	bl	8002f7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d19e      	bne.n	8002aa2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	6a39      	ldr	r1, [r7, #32]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f8e3 	bl	8002d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e01a      	b.n	8002bae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_I2C_Master_Transmit+0x22c>)
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002bac:	2302      	movs	r3, #2
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	80002000 	.word	0x80002000
 8002bbc:	fe00e800 	.word	0xfe00e800

08002bc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d103      	bne.n	8002bde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d007      	beq.n	8002bfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	619a      	str	r2, [r3, #24]
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c18:	e031      	b.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d02d      	beq.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c22:	f7ff f855 	bl	8001cd0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d302      	bcc.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d122      	bne.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4013      	ands	r3, r2
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d113      	bne.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f043 0220 	orr.w	r2, r3, #32
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4013      	ands	r3, r2
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d0be      	beq.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cb2:	e033      	b.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f87f 	bl	8002dbc <I2C_IsErrorOccurred>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e031      	b.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cce:	d025      	beq.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd0:	f7fe fffe 	bl	8001cd0 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d302      	bcc.n	8002ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d11a      	bne.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d013      	beq.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	f043 0220 	orr.w	r2, r3, #32
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e007      	b.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d1c4      	bne.n	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d40:	e02f      	b.n	8002da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f838 	bl	8002dbc <I2C_IsErrorOccurred>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e02d      	b.n	8002db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe ffbb 	bl	8001cd0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11a      	bne.n	8002da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d013      	beq.n	8002da2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e007      	b.n	8002db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d1c8      	bne.n	8002d42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d068      	beq.n	8002eba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2210      	movs	r2, #16
 8002dee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002df0:	e049      	b.n	8002e86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d045      	beq.n	8002e86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7fe ff69 	bl	8001cd0 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_IsErrorOccurred+0x54>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d13a      	bne.n	8002e86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e32:	d121      	bne.n	8002e78 <I2C_IsErrorOccurred+0xbc>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e3a:	d01d      	beq.n	8002e78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d01a      	beq.n	8002e78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e52:	f7fe ff3d 	bl	8001cd0 <HAL_GetTick>
 8002e56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e58:	e00e      	b.n	8002e78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e5a:	f7fe ff39 	bl	8001cd0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b19      	cmp	r3, #25
 8002e66:	d907      	bls.n	8002e78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f043 0320 	orr.w	r3, r3, #32
 8002e6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e76:	e006      	b.n	8002e86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d1e9      	bne.n	8002e5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d003      	beq.n	8002e9c <I2C_IsErrorOccurred+0xe0>
 8002e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0aa      	beq.n	8002df2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	f043 0308 	orr.w	r3, r3, #8
 8002ef4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002efe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01c      	beq.n	8002f6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff fe45 	bl	8002bc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <I2C_IsErrorOccurred+0x1bc>)
 8002f42:	400b      	ands	r3, r1
 8002f44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3728      	adds	r7, #40	; 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	fe00e800 	.word	0xfe00e800

08002f7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f94:	7a7b      	ldrb	r3, [r7, #9]
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002faa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	0d5b      	lsrs	r3, r3, #21
 8002fb6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <I2C_TransferConfig+0x60>)
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	ea02 0103 	and.w	r1, r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	03ff63ff 	.word	0x03ff63ff

08002fe0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d138      	bne.n	8003068 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003000:	2302      	movs	r3, #2
 8003002:	e032      	b.n	800306a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	; 0x24
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003032:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6819      	ldr	r1, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	e000      	b.n	800306a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003068:	2302      	movs	r3, #2
  }
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b20      	cmp	r3, #32
 800308a:	d139      	bne.n	8003100 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003096:	2302      	movs	r3, #2
 8003098:	e033      	b.n	8003102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2224      	movs	r2, #36	; 0x24
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e000      	b.n	8003102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
  }
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <HAL_PWREx_GetVoltageRange+0x18>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40007000 	.word	0x40007000

0800312c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800313a:	d130      	bne.n	800319e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800313c:	4b23      	ldr	r3, [pc, #140]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003148:	d038      	beq.n	80031bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003152:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003158:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2232      	movs	r2, #50	; 0x32
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0c9b      	lsrs	r3, r3, #18
 800316c:	3301      	adds	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003170:	e002      	b.n	8003178 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3b01      	subs	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003178:	4b14      	ldr	r3, [pc, #80]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003184:	d102      	bne.n	800318c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f2      	bne.n	8003172 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003198:	d110      	bne.n	80031bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e00f      	b.n	80031be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031aa:	d007      	beq.n	80031bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031b4:	4a05      	ldr	r2, [pc, #20]	; (80031cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40007000 	.word	0x40007000
 80031d0:	20000064 	.word	0x20000064
 80031d4:	431bde83 	.word	0x431bde83

080031d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e3ca      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ea:	4b97      	ldr	r3, [pc, #604]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031f4:	4b94      	ldr	r3, [pc, #592]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80e4 	beq.w	80033d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_RCC_OscConfig+0x4a>
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b0c      	cmp	r3, #12
 8003216:	f040 808b 	bne.w	8003330 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b01      	cmp	r3, #1
 800321e:	f040 8087 	bne.w	8003330 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003222:	4b89      	ldr	r3, [pc, #548]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_RCC_OscConfig+0x62>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e3a2      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1a      	ldr	r2, [r3, #32]
 800323e:	4b82      	ldr	r3, [pc, #520]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_RCC_OscConfig+0x7c>
 800324a:	4b7f      	ldr	r3, [pc, #508]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003252:	e005      	b.n	8003260 <HAL_RCC_OscConfig+0x88>
 8003254:	4b7c      	ldr	r3, [pc, #496]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003260:	4293      	cmp	r3, r2
 8003262:	d223      	bcs.n	80032ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fd55 	bl	8003d18 <RCC_SetFlashLatencyFromMSIRange>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e383      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003278:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a72      	ldr	r2, [pc, #456]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800327e:	f043 0308 	orr.w	r3, r3, #8
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b70      	ldr	r3, [pc, #448]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	496d      	ldr	r1, [pc, #436]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003296:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	4968      	ldr	r1, [pc, #416]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
 80032aa:	e025      	b.n	80032f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ac:	4b66      	ldr	r3, [pc, #408]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a65      	ldr	r2, [pc, #404]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80032b2:	f043 0308 	orr.w	r3, r3, #8
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4960      	ldr	r1, [pc, #384]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ca:	4b5f      	ldr	r3, [pc, #380]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	495b      	ldr	r1, [pc, #364]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d109      	bne.n	80032f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fd15 	bl	8003d18 <RCC_SetFlashLatencyFromMSIRange>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e343      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032f8:	f000 fc4a 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b52      	ldr	r3, [pc, #328]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	4950      	ldr	r1, [pc, #320]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
 8003314:	4a4e      	ldr	r2, [pc, #312]	; (8003450 <HAL_RCC_OscConfig+0x278>)
 8003316:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003318:	4b4e      	ldr	r3, [pc, #312]	; (8003454 <HAL_RCC_OscConfig+0x27c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fc87 	bl	8001c30 <HAL_InitTick>
 8003322:	4603      	mov	r3, r0
 8003324:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d052      	beq.n	80033d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	e327      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d032      	beq.n	800339e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003338:	4b43      	ldr	r3, [pc, #268]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a42      	ldr	r2, [pc, #264]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003344:	f7fe fcc4 	bl	8001cd0 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800334c:	f7fe fcc0 	bl	8001cd0 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e310      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800335e:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800336a:	4b37      	ldr	r3, [pc, #220]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a36      	ldr	r2, [pc, #216]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003370:	f043 0308 	orr.w	r3, r3, #8
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b34      	ldr	r3, [pc, #208]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4931      	ldr	r1, [pc, #196]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003388:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	492c      	ldr	r1, [pc, #176]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
 800339c:	e01a      	b.n	80033d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800339e:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a29      	ldr	r2, [pc, #164]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033aa:	f7fe fc91 	bl	8001cd0 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033b2:	f7fe fc8d 	bl	8001cd0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e2dd      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033c4:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f0      	bne.n	80033b2 <HAL_RCC_OscConfig+0x1da>
 80033d0:	e000      	b.n	80033d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d074      	beq.n	80034ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x21a>
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d10e      	bne.n	800340a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d10b      	bne.n	800340a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d064      	beq.n	80034c8 <HAL_RCC_OscConfig+0x2f0>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d160      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e2ba      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x24a>
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800341a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	e026      	b.n	8003470 <HAL_RCC_OscConfig+0x298>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800342a:	d115      	bne.n	8003458 <HAL_RCC_OscConfig+0x280>
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a05      	ldr	r2, [pc, #20]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 8003432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a02      	ldr	r2, [pc, #8]	; (8003448 <HAL_RCC_OscConfig+0x270>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e014      	b.n	8003470 <HAL_RCC_OscConfig+0x298>
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	08006b2c 	.word	0x08006b2c
 8003450:	20000064 	.word	0x20000064
 8003454:	200001bc 	.word	0x200001bc
 8003458:	4ba0      	ldr	r3, [pc, #640]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a9f      	ldr	r2, [pc, #636]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 800345e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b9d      	ldr	r3, [pc, #628]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a9c      	ldr	r2, [pc, #624]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 800346a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d013      	beq.n	80034a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fe fc2a 	bl	8001cd0 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003480:	f7fe fc26 	bl	8001cd0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e276      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003492:	4b92      	ldr	r3, [pc, #584]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x2a8>
 800349e:	e014      	b.n	80034ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe fc16 	bl	8001cd0 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a8:	f7fe fc12 	bl	8001cd0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	; 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e262      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ba:	4b88      	ldr	r3, [pc, #544]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x2d0>
 80034c6:	e000      	b.n	80034ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d060      	beq.n	8003598 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_OscConfig+0x310>
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d119      	bne.n	8003516 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d116      	bne.n	8003516 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034e8:	4b7c      	ldr	r3, [pc, #496]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_OscConfig+0x328>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e23f      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b76      	ldr	r3, [pc, #472]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	4973      	ldr	r1, [pc, #460]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003514:	e040      	b.n	8003598 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d023      	beq.n	8003566 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800351e:	4b6f      	ldr	r3, [pc, #444]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a6e      	ldr	r2, [pc, #440]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fe fbd1 	bl	8001cd0 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003532:	f7fe fbcd 	bl	8001cd0 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e21d      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003544:	4b65      	ldr	r3, [pc, #404]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	4b62      	ldr	r3, [pc, #392]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	495f      	ldr	r1, [pc, #380]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
 8003564:	e018      	b.n	8003598 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003566:	4b5d      	ldr	r3, [pc, #372]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5c      	ldr	r2, [pc, #368]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 800356c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003572:	f7fe fbad 	bl	8001cd0 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357a:	f7fe fba9 	bl	8001cd0 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e1f9      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800358c:	4b53      	ldr	r3, [pc, #332]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d03c      	beq.n	800361e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01c      	beq.n	80035e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ac:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	4a4a      	ldr	r2, [pc, #296]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fe fb88 	bl	8001cd0 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fe fb84 	bl	8001cd0 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e1d4      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035d6:	4b41      	ldr	r3, [pc, #260]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80035d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ef      	beq.n	80035c4 <HAL_RCC_OscConfig+0x3ec>
 80035e4:	e01b      	b.n	800361e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e6:	4b3d      	ldr	r3, [pc, #244]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80035e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ec:	4a3b      	ldr	r2, [pc, #236]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fe fb6b 	bl	8001cd0 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fe fb67 	bl	8001cd0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1b7      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003610:	4b32      	ldr	r3, [pc, #200]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ef      	bne.n	80035fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80a6 	beq.w	8003778 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362c:	2300      	movs	r3, #0
 800362e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003630:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10d      	bne.n	8003658 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363c:	4b27      	ldr	r3, [pc, #156]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 8003642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003646:	6593      	str	r3, [r2, #88]	; 0x58
 8003648:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003654:	2301      	movs	r3, #1
 8003656:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003658:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_RCC_OscConfig+0x508>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d118      	bne.n	8003696 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003664:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_RCC_OscConfig+0x508>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <HAL_RCC_OscConfig+0x508>)
 800366a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003670:	f7fe fb2e 	bl	8001cd0 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003678:	f7fe fb2a 	bl	8001cd0 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e17a      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_RCC_OscConfig+0x508>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d108      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4d8>
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	4a0d      	ldr	r2, [pc, #52]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ae:	e029      	b.n	8003704 <HAL_RCC_OscConfig+0x52c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d115      	bne.n	80036e4 <HAL_RCC_OscConfig+0x50c>
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	4a07      	ldr	r2, [pc, #28]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	4a03      	ldr	r2, [pc, #12]	; (80036dc <HAL_RCC_OscConfig+0x504>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036d8:	e014      	b.n	8003704 <HAL_RCC_OscConfig+0x52c>
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40007000 	.word	0x40007000
 80036e4:	4b9c      	ldr	r3, [pc, #624]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	4a9b      	ldr	r2, [pc, #620]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036f4:	4b98      	ldr	r3, [pc, #608]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	4a97      	ldr	r2, [pc, #604]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80036fc:	f023 0304 	bic.w	r3, r3, #4
 8003700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d016      	beq.n	800373a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fe fae0 	bl	8001cd0 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003712:	e00a      	b.n	800372a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003714:	f7fe fadc 	bl	8001cd0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e12a      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800372a:	4b8b      	ldr	r3, [pc, #556]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ed      	beq.n	8003714 <HAL_RCC_OscConfig+0x53c>
 8003738:	e015      	b.n	8003766 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7fe fac9 	bl	8001cd0 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003740:	e00a      	b.n	8003758 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe fac5 	bl	8001cd0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e113      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003758:	4b7f      	ldr	r3, [pc, #508]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ed      	bne.n	8003742 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003766:	7ffb      	ldrb	r3, [r7, #31]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376c:	4b7a      	ldr	r3, [pc, #488]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	4a79      	ldr	r2, [pc, #484]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 8003772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003776:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80fe 	beq.w	800397e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	2b02      	cmp	r3, #2
 8003788:	f040 80d0 	bne.w	800392c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800378c:	4b72      	ldr	r3, [pc, #456]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0203 	and.w	r2, r3, #3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	429a      	cmp	r2, r3
 800379e:	d130      	bne.n	8003802 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	3b01      	subs	r3, #1
 80037ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d127      	bne.n	8003802 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d11f      	bne.n	8003802 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037cc:	2a07      	cmp	r2, #7
 80037ce:	bf14      	ite	ne
 80037d0:	2201      	movne	r2, #1
 80037d2:	2200      	moveq	r2, #0
 80037d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d113      	bne.n	8003802 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	3b01      	subs	r3, #1
 80037e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d109      	bne.n	8003802 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	3b01      	subs	r3, #1
 80037fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d06e      	beq.n	80038e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b0c      	cmp	r3, #12
 8003806:	d069      	beq.n	80038dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003808:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003814:	4b50      	ldr	r3, [pc, #320]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0ad      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003824:	4b4c      	ldr	r3, [pc, #304]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 800382a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003830:	f7fe fa4e 	bl	8001cd0 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe fa4a 	bl	8001cd0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e09a      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384a:	4b43      	ldr	r3, [pc, #268]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003856:	4b40      	ldr	r3, [pc, #256]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	4b40      	ldr	r3, [pc, #256]	; (800395c <HAL_RCC_OscConfig+0x784>)
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003866:	3a01      	subs	r2, #1
 8003868:	0112      	lsls	r2, r2, #4
 800386a:	4311      	orrs	r1, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003870:	0212      	lsls	r2, r2, #8
 8003872:	4311      	orrs	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003878:	0852      	lsrs	r2, r2, #1
 800387a:	3a01      	subs	r2, #1
 800387c:	0552      	lsls	r2, r2, #21
 800387e:	4311      	orrs	r1, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003884:	0852      	lsrs	r2, r2, #1
 8003886:	3a01      	subs	r2, #1
 8003888:	0652      	lsls	r2, r2, #25
 800388a:	4311      	orrs	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003890:	0912      	lsrs	r2, r2, #4
 8003892:	0452      	lsls	r2, r2, #17
 8003894:	430a      	orrs	r2, r1
 8003896:	4930      	ldr	r1, [pc, #192]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800389c:	4b2e      	ldr	r3, [pc, #184]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2d      	ldr	r2, [pc, #180]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a8:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a2a      	ldr	r2, [pc, #168]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b4:	f7fe fa0c 	bl	8001cd0 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe fa08 	bl	8001cd0 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e058      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ce:	4b22      	ldr	r3, [pc, #136]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038da:	e050      	b.n	800397e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e04f      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d148      	bne.n	800397e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038ec:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a19      	ldr	r2, [pc, #100]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80038f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f8:	4b17      	ldr	r3, [pc, #92]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4a16      	ldr	r2, [pc, #88]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 80038fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003902:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003904:	f7fe f9e4 	bl	8001cd0 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390c:	f7fe f9e0 	bl	8001cd0 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e030      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x734>
 800392a:	e028      	b.n	800397e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d023      	beq.n	800397a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a08      	ldr	r2, [pc, #32]	; (8003958 <HAL_RCC_OscConfig+0x780>)
 8003938:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800393c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7fe f9c7 	bl	8001cd0 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003944:	e00c      	b.n	8003960 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003946:	f7fe f9c3 	bl	8001cd0 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d905      	bls.n	8003960 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e013      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
 8003958:	40021000 	.word	0x40021000
 800395c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCC_OscConfig+0x7b0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ec      	bne.n	8003946 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_OscConfig+0x7b0>)
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	4905      	ldr	r1, [pc, #20]	; (8003988 <HAL_RCC_OscConfig+0x7b0>)
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_RCC_OscConfig+0x7b4>)
 8003974:	4013      	ands	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
 8003978:	e001      	b.n	800397e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	feeefffc 	.word	0xfeeefffc

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0e7      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b75      	ldr	r3, [pc, #468]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b72      	ldr	r3, [pc, #456]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	4970      	ldr	r1, [pc, #448]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b6e      	ldr	r3, [pc, #440]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0cf      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4b66      	ldr	r3, [pc, #408]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d908      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b63      	ldr	r3, [pc, #396]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4960      	ldr	r1, [pc, #384]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d04c      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	4b5a      	ldr	r3, [pc, #360]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d121      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0a6      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d115      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e09a      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a46:	4b4e      	ldr	r3, [pc, #312]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e08e      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a56:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e086      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b46      	ldr	r3, [pc, #280]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4943      	ldr	r1, [pc, #268]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fe f92a 	bl	8001cd0 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fe f926 	bl	8001cd0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e06e      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d208      	bcs.n	8003ad6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	492b      	ldr	r1, [pc, #172]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad6:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d210      	bcs.n	8003b06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae4:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 0207 	bic.w	r2, r3, #7
 8003aec:	4923      	ldr	r1, [pc, #140]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af4:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e036      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4918      	ldr	r1, [pc, #96]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b30:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4910      	ldr	r1, [pc, #64]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b44:	f000 f824 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	490b      	ldr	r1, [pc, #44]	; (8003b84 <HAL_RCC_ClockConfig+0x1f4>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1f8>)
 8003b62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_ClockConfig+0x1fc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe f861 	bl	8001c30 <HAL_InitTick>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b72:	7afb      	ldrb	r3, [r7, #11]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08006b2c 	.word	0x08006b2c
 8003b88:	20000064 	.word	0x20000064
 8003b8c:	200001bc 	.word	0x200001bc

08003b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba8:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d121      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d11e      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bc4:	4b34      	ldr	r3, [pc, #208]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bd0:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e005      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003be0:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bec:	4a2b      	ldr	r2, [pc, #172]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d102      	bne.n	8003c0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e004      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d134      	bne.n	8003c88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d003      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0xac>
 8003c34:	e005      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c38:	617b      	str	r3, [r7, #20]
      break;
 8003c3a:	e005      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c3c:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c3e:	617b      	str	r3, [r7, #20]
      break;
 8003c40:	e002      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	617b      	str	r3, [r7, #20]
      break;
 8003c46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	3301      	adds	r3, #1
 8003c54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	fb03 f202 	mul.w	r2, r3, r2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	0e5b      	lsrs	r3, r3, #25
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c88:	69bb      	ldr	r3, [r7, #24]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	08006b44 	.word	0x08006b44
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000064 	.word	0x20000064

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4904      	ldr	r1, [pc, #16]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	08006b3c 	.word	0x08006b3c

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cf0:	f7ff ffda 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0adb      	lsrs	r3, r3, #11
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4904      	ldr	r1, [pc, #16]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	08006b3c 	.word	0x08006b3c

08003d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d24:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d30:	f7ff f9ee 	bl	8003110 <HAL_PWREx_GetVoltageRange>
 8003d34:	6178      	str	r0, [r7, #20]
 8003d36:	e014      	b.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3c:	4a24      	ldr	r2, [pc, #144]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d42:	6593      	str	r3, [r2, #88]	; 0x58
 8003d44:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d50:	f7ff f9de 	bl	8003110 <HAL_PWREx_GetVoltageRange>
 8003d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d68:	d10b      	bne.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d919      	bls.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2ba0      	cmp	r3, #160	; 0xa0
 8003d74:	d902      	bls.n	8003d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d76:	2302      	movs	r3, #2
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e013      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	e010      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b80      	cmp	r3, #128	; 0x80
 8003d86:	d902      	bls.n	8003d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d88:	2303      	movs	r3, #3
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	e00a      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d102      	bne.n	8003d9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d94:	2302      	movs	r3, #2
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	e004      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b70      	cmp	r3, #112	; 0x70
 8003d9e:	d101      	bne.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da0:	2301      	movs	r3, #1
 8003da2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 0207 	bic.w	r2, r3, #7
 8003dac:	4909      	ldr	r1, [pc, #36]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d001      	beq.n	8003dc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40022000 	.word	0x40022000

08003dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de0:	2300      	movs	r3, #0
 8003de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de4:	2300      	movs	r3, #0
 8003de6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d041      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dfc:	d02a      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003dfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e02:	d824      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e08:	d008      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e0e:	d81e      	bhi.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e18:	d010      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e1a:	e018      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1c:	4b86      	ldr	r3, [pc, #536]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a85      	ldr	r2, [pc, #532]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e28:	e015      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fabb 	bl	80043ac <RCCEx_PLLSAI1_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e3a:	e00c      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3320      	adds	r3, #32
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fba6 	bl	8004594 <RCCEx_PLLSAI2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	74fb      	strb	r3, [r7, #19]
      break;
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e5c:	4b76      	ldr	r3, [pc, #472]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6a:	4973      	ldr	r1, [pc, #460]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e72:	e001      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d041      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e8c:	d02a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e92:	d824      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e98:	d008      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e9e:	d81e      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea8:	d010      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eaa:	e018      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003eac:	4b62      	ldr	r3, [pc, #392]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a61      	ldr	r2, [pc, #388]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fa73 	bl	80043ac <RCCEx_PLLSAI1_Config>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eca:	e00c      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3320      	adds	r3, #32
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fb5e 	bl	8004594 <RCCEx_PLLSAI2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee6:	7cfb      	ldrb	r3, [r7, #19]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eec:	4b52      	ldr	r3, [pc, #328]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003efa:	494f      	ldr	r1, [pc, #316]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f02:	e001      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	7cfb      	ldrb	r3, [r7, #19]
 8003f06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80a0 	beq.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f1a:	4b47      	ldr	r3, [pc, #284]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f30:	4b41      	ldr	r3, [pc, #260]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	4a40      	ldr	r2, [pc, #256]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f3c:	4b3e      	ldr	r3, [pc, #248]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a3a      	ldr	r2, [pc, #232]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f58:	f7fd feba 	bl	8001cd0 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f5e:	e009      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fd feb6 	bl	8001cd0 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d902      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	74fb      	strb	r3, [r7, #19]
        break;
 8003f72:	e005      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f74:	4b31      	ldr	r3, [pc, #196]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0ef      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d15c      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f86:	4b2c      	ldr	r3, [pc, #176]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01f      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d019      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fa4:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fb0:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	4a20      	ldr	r2, [pc, #128]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fd0:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d016      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fd fe75 	bl	8001cd0 <HAL_GetTick>
 8003fe6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fe8:	e00b      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fd fe71 	bl	8001cd0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d902      	bls.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	74fb      	strb	r3, [r7, #19]
            break;
 8004000:	e006      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0ec      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10c      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004026:	4904      	ldr	r1, [pc, #16]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800402e:	e009      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
 8004034:	e006      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004044:	7c7b      	ldrb	r3, [r7, #17]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d105      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404a:	4b9e      	ldr	r3, [pc, #632]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	4a9d      	ldr	r2, [pc, #628]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004054:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004062:	4b98      	ldr	r3, [pc, #608]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f023 0203 	bic.w	r2, r3, #3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	4994      	ldr	r1, [pc, #592]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004084:	4b8f      	ldr	r3, [pc, #572]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 020c 	bic.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	498c      	ldr	r1, [pc, #560]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040a6:	4b87      	ldr	r3, [pc, #540]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	4983      	ldr	r1, [pc, #524]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040c8:	4b7e      	ldr	r3, [pc, #504]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	497b      	ldr	r1, [pc, #492]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ea:	4b76      	ldr	r3, [pc, #472]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f8:	4972      	ldr	r1, [pc, #456]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410c:	4b6d      	ldr	r3, [pc, #436]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411a:	496a      	ldr	r1, [pc, #424]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800412e:	4b65      	ldr	r3, [pc, #404]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	4961      	ldr	r1, [pc, #388]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004150:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415e:	4959      	ldr	r1, [pc, #356]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004172:	4b54      	ldr	r3, [pc, #336]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	4950      	ldr	r1, [pc, #320]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004194:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	4948      	ldr	r1, [pc, #288]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b6:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	493f      	ldr	r1, [pc, #252]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d028      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041d8:	4b3a      	ldr	r3, [pc, #232]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e6:	4937      	ldr	r1, [pc, #220]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f6:	d106      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f8:	4b32      	ldr	r3, [pc, #200]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a31      	ldr	r2, [pc, #196]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004202:	60d3      	str	r3, [r2, #12]
 8004204:	e011      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800420e:	d10c      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3304      	adds	r3, #4
 8004214:	2101      	movs	r1, #1
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f8c8 	bl	80043ac <RCCEx_PLLSAI1_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004220:	7cfb      	ldrb	r3, [r7, #19]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004226:	7cfb      	ldrb	r3, [r7, #19]
 8004228:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d028      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004236:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	491f      	ldr	r1, [pc, #124]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004254:	d106      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004256:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004260:	60d3      	str	r3, [r2, #12]
 8004262:	e011      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800426c:	d10c      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	2101      	movs	r1, #1
 8004274:	4618      	mov	r0, r3
 8004276:	f000 f899 	bl	80043ac <RCCEx_PLLSAI1_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800427e:	7cfb      	ldrb	r3, [r7, #19]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02b      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a2:	4908      	ldr	r1, [pc, #32]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b2:	d109      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4a02      	ldr	r2, [pc, #8]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042be:	60d3      	str	r3, [r2, #12]
 80042c0:	e014      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042d0:	d10c      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3304      	adds	r3, #4
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f867 	bl	80043ac <RCCEx_PLLSAI1_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d02f      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042f8:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004306:	4928      	ldr	r1, [pc, #160]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004316:	d10d      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f844 	bl	80043ac <RCCEx_PLLSAI1_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004328:	7cfb      	ldrb	r3, [r7, #19]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d014      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	74bb      	strb	r3, [r7, #18]
 8004332:	e011      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800433c:	d10c      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3320      	adds	r3, #32
 8004342:	2102      	movs	r1, #2
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f925 	bl	8004594 <RCCEx_PLLSAI2_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004364:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004372:	490d      	ldr	r1, [pc, #52]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004396:	4904      	ldr	r1, [pc, #16]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800439e:	7cbb      	ldrb	r3, [r7, #18]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000

080043ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043ba:	4b75      	ldr	r3, [pc, #468]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d018      	beq.n	80043f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043c6:	4b72      	ldr	r3, [pc, #456]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0203 	and.w	r2, r3, #3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d10d      	bne.n	80043f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
       ||
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043de:	4b6c      	ldr	r3, [pc, #432]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	091b      	lsrs	r3, r3, #4
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
       ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d047      	beq.n	8004482 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
 80043f6:	e044      	b.n	8004482 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d018      	beq.n	8004432 <RCCEx_PLLSAI1_Config+0x86>
 8004400:	2b03      	cmp	r3, #3
 8004402:	d825      	bhi.n	8004450 <RCCEx_PLLSAI1_Config+0xa4>
 8004404:	2b01      	cmp	r3, #1
 8004406:	d002      	beq.n	800440e <RCCEx_PLLSAI1_Config+0x62>
 8004408:	2b02      	cmp	r3, #2
 800440a:	d009      	beq.n	8004420 <RCCEx_PLLSAI1_Config+0x74>
 800440c:	e020      	b.n	8004450 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800440e:	4b60      	ldr	r3, [pc, #384]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d11d      	bne.n	8004456 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800441e:	e01a      	b.n	8004456 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004420:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d116      	bne.n	800445a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004430:	e013      	b.n	800445a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004432:	4b57      	ldr	r3, [pc, #348]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10f      	bne.n	800445e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800443e:	4b54      	ldr	r3, [pc, #336]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800444e:	e006      	b.n	800445e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
      break;
 8004454:	e004      	b.n	8004460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004456:	bf00      	nop
 8004458:	e002      	b.n	8004460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800445a:	bf00      	nop
 800445c:	e000      	b.n	8004460 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800445e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10d      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004466:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6819      	ldr	r1, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	3b01      	subs	r3, #1
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	430b      	orrs	r3, r1
 800447c:	4944      	ldr	r1, [pc, #272]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d17d      	bne.n	8004584 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004488:	4b41      	ldr	r3, [pc, #260]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a40      	ldr	r2, [pc, #256]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004494:	f7fd fc1c 	bl	8001cd0 <HAL_GetTick>
 8004498:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800449a:	e009      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800449c:	f7fd fc18 	bl	8001cd0 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d902      	bls.n	80044b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	73fb      	strb	r3, [r7, #15]
        break;
 80044ae:	e005      	b.n	80044bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044b0:	4b37      	ldr	r3, [pc, #220]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ef      	bne.n	800449c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d160      	bne.n	8004584 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d111      	bne.n	80044ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044c8:	4b31      	ldr	r3, [pc, #196]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6892      	ldr	r2, [r2, #8]
 80044d8:	0211      	lsls	r1, r2, #8
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68d2      	ldr	r2, [r2, #12]
 80044de:	0912      	lsrs	r2, r2, #4
 80044e0:	0452      	lsls	r2, r2, #17
 80044e2:	430a      	orrs	r2, r1
 80044e4:	492a      	ldr	r1, [pc, #168]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	610b      	str	r3, [r1, #16]
 80044ea:	e027      	b.n	800453c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d112      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044f2:	4b27      	ldr	r3, [pc, #156]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6892      	ldr	r2, [r2, #8]
 8004502:	0211      	lsls	r1, r2, #8
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6912      	ldr	r2, [r2, #16]
 8004508:	0852      	lsrs	r2, r2, #1
 800450a:	3a01      	subs	r2, #1
 800450c:	0552      	lsls	r2, r2, #21
 800450e:	430a      	orrs	r2, r1
 8004510:	491f      	ldr	r1, [pc, #124]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004512:	4313      	orrs	r3, r2
 8004514:	610b      	str	r3, [r1, #16]
 8004516:	e011      	b.n	800453c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004520:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6892      	ldr	r2, [r2, #8]
 8004528:	0211      	lsls	r1, r2, #8
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6952      	ldr	r2, [r2, #20]
 800452e:	0852      	lsrs	r2, r2, #1
 8004530:	3a01      	subs	r2, #1
 8004532:	0652      	lsls	r2, r2, #25
 8004534:	430a      	orrs	r2, r1
 8004536:	4916      	ldr	r1, [pc, #88]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	4313      	orrs	r3, r2
 800453a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800453c:	4b14      	ldr	r3, [pc, #80]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a13      	ldr	r2, [pc, #76]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004542:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004548:	f7fd fbc2 	bl	8001cd0 <HAL_GetTick>
 800454c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800454e:	e009      	b.n	8004564 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004550:	f7fd fbbe 	bl	8001cd0 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d902      	bls.n	8004564 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	73fb      	strb	r3, [r7, #15]
          break;
 8004562:	e005      	b.n	8004570 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ef      	beq.n	8004550 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	4904      	ldr	r1, [pc, #16]	; (8004590 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000

08004594 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045a2:	4b6a      	ldr	r3, [pc, #424]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d018      	beq.n	80045e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045ae:	4b67      	ldr	r3, [pc, #412]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0203 	and.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d10d      	bne.n	80045da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
       ||
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045c6:	4b61      	ldr	r3, [pc, #388]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
       ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d047      	beq.n	800466a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	e044      	b.n	800466a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d018      	beq.n	800461a <RCCEx_PLLSAI2_Config+0x86>
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d825      	bhi.n	8004638 <RCCEx_PLLSAI2_Config+0xa4>
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d002      	beq.n	80045f6 <RCCEx_PLLSAI2_Config+0x62>
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d009      	beq.n	8004608 <RCCEx_PLLSAI2_Config+0x74>
 80045f4:	e020      	b.n	8004638 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045f6:	4b55      	ldr	r3, [pc, #340]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11d      	bne.n	800463e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004606:	e01a      	b.n	800463e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004608:	4b50      	ldr	r3, [pc, #320]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d116      	bne.n	8004642 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004618:	e013      	b.n	8004642 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800461a:	4b4c      	ldr	r3, [pc, #304]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10f      	bne.n	8004646 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004626:	4b49      	ldr	r3, [pc, #292]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004636:	e006      	b.n	8004646 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      break;
 800463c:	e004      	b.n	8004648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800463e:	bf00      	nop
 8004640:	e002      	b.n	8004648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004646:	bf00      	nop
    }

    if(status == HAL_OK)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10d      	bne.n	800466a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800464e:	4b3f      	ldr	r3, [pc, #252]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	3b01      	subs	r3, #1
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	430b      	orrs	r3, r1
 8004664:	4939      	ldr	r1, [pc, #228]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004666:	4313      	orrs	r3, r2
 8004668:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d167      	bne.n	8004740 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004670:	4b36      	ldr	r3, [pc, #216]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a35      	ldr	r2, [pc, #212]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467c:	f7fd fb28 	bl	8001cd0 <HAL_GetTick>
 8004680:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004682:	e009      	b.n	8004698 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004684:	f7fd fb24 	bl	8001cd0 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d902      	bls.n	8004698 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	73fb      	strb	r3, [r7, #15]
        break;
 8004696:	e005      	b.n	80046a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004698:	4b2c      	ldr	r3, [pc, #176]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1ef      	bne.n	8004684 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d14a      	bne.n	8004740 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d111      	bne.n	80046d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046b0:	4b26      	ldr	r3, [pc, #152]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6892      	ldr	r2, [r2, #8]
 80046c0:	0211      	lsls	r1, r2, #8
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68d2      	ldr	r2, [r2, #12]
 80046c6:	0912      	lsrs	r2, r2, #4
 80046c8:	0452      	lsls	r2, r2, #17
 80046ca:	430a      	orrs	r2, r1
 80046cc:	491f      	ldr	r1, [pc, #124]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	614b      	str	r3, [r1, #20]
 80046d2:	e011      	b.n	80046f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6892      	ldr	r2, [r2, #8]
 80046e4:	0211      	lsls	r1, r2, #8
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6912      	ldr	r2, [r2, #16]
 80046ea:	0852      	lsrs	r2, r2, #1
 80046ec:	3a01      	subs	r2, #1
 80046ee:	0652      	lsls	r2, r2, #25
 80046f0:	430a      	orrs	r2, r1
 80046f2:	4916      	ldr	r1, [pc, #88]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fd fae4 	bl	8001cd0 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800470a:	e009      	b.n	8004720 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800470c:	f7fd fae0 	bl	8001cd0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d902      	bls.n	8004720 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	73fb      	strb	r3, [r7, #15]
          break;
 800471e:	e005      	b.n	800472c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ef      	beq.n	800470c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	4904      	ldr	r1, [pc, #16]	; (800474c <RCCEx_PLLSAI2_Config+0x1b8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000

08004750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e049      	b.n	80047f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fc fd4e 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3304      	adds	r3, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f000 fa9a 	bl	8004cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d001      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e04f      	b.n	80048b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a23      	ldr	r2, [pc, #140]	; (80048c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01d      	beq.n	8004876 <HAL_TIM_Base_Start_IT+0x76>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004842:	d018      	beq.n	8004876 <HAL_TIM_Base_Start_IT+0x76>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_TIM_Base_Start_IT+0x76>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1e      	ldr	r2, [pc, #120]	; (80048cc <HAL_TIM_Base_Start_IT+0xcc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00e      	beq.n	8004876 <HAL_TIM_Base_Start_IT+0x76>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1c      	ldr	r2, [pc, #112]	; (80048d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_TIM_Base_Start_IT+0x76>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_TIM_Base_Start_IT+0x76>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d115      	bne.n	80048a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	4b17      	ldr	r3, [pc, #92]	; (80048dc <HAL_TIM_Base_Start_IT+0xdc>)
 800487e:	4013      	ands	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b06      	cmp	r3, #6
 8004886:	d015      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0xb4>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488e:	d011      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	e008      	b.n	80048b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0201 	orr.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e000      	b.n	80048b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40013400 	.word	0x40013400
 80048d8:	40014000 	.word	0x40014000
 80048dc:	00010007 	.word	0x00010007

080048e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d020      	beq.n	8004944 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01b      	beq.n	8004944 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0202 	mvn.w	r2, #2
 8004914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f9ad 	bl	8004c8a <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f99f 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f9b0 	bl	8004c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0204 	mvn.w	r2, #4
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f987 	bl	8004c8a <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f979 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f98a 	bl	8004c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0208 	mvn.w	r2, #8
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2204      	movs	r2, #4
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f961 	bl	8004c8a <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f953 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f964 	bl	8004c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0210 	mvn.w	r2, #16
 80049f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2208      	movs	r2, #8
 80049fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f93b 	bl	8004c8a <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f92d 	bl	8004c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f93e 	bl	8004c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0201 	mvn.w	r2, #1
 8004a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc f8c0 	bl	8000bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 faf2 	bl	8005054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00c      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 faea 	bl	8005068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8fd 	bl	8004cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00c      	beq.n	8004adc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0220 	mvn.w	r2, #32
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fab2 	bl	8005040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_TIM_ConfigClockSource+0x1c>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0b6      	b.n	8004c6e <HAL_TIM_ConfigClockSource+0x18a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3c:	d03e      	beq.n	8004bbc <HAL_TIM_ConfigClockSource+0xd8>
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b42:	f200 8087 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x170>
 8004b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4a:	f000 8086 	beq.w	8004c5a <HAL_TIM_ConfigClockSource+0x176>
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b52:	d87f      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x170>
 8004b54:	2b70      	cmp	r3, #112	; 0x70
 8004b56:	d01a      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0xaa>
 8004b58:	2b70      	cmp	r3, #112	; 0x70
 8004b5a:	d87b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x170>
 8004b5c:	2b60      	cmp	r3, #96	; 0x60
 8004b5e:	d050      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x11e>
 8004b60:	2b60      	cmp	r3, #96	; 0x60
 8004b62:	d877      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x170>
 8004b64:	2b50      	cmp	r3, #80	; 0x50
 8004b66:	d03c      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0xfe>
 8004b68:	2b50      	cmp	r3, #80	; 0x50
 8004b6a:	d873      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x170>
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d058      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x13e>
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d86f      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x170>
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d064      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15e>
 8004b78:	2b30      	cmp	r3, #48	; 0x30
 8004b7a:	d86b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x170>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d060      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15e>
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d867      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x170>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d05c      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15e>
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d05a      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15e>
 8004b8c:	e062      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b9e:	f000 f9a7 	bl	8004ef0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	609a      	str	r2, [r3, #8]
      break;
 8004bba:	e04f      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bcc:	f000 f990 	bl	8004ef0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bde:	609a      	str	r2, [r3, #8]
      break;
 8004be0:	e03c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f000 f904 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2150      	movs	r1, #80	; 0x50
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f95d 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c00:	e02c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f000 f923 	bl	8004e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2160      	movs	r1, #96	; 0x60
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f94d 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c20:	e01c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f000 f8e4 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2140      	movs	r1, #64	; 0x40
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f93d 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c40:	e00c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f000 f934 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c52:	e003      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e000      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a40      	ldr	r2, [pc, #256]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d013      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d00f      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a3d      	ldr	r2, [pc, #244]	; (8004de0 <TIM_Base_SetConfig+0x118>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <TIM_Base_SetConfig+0x11c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a3b      	ldr	r2, [pc, #236]	; (8004de8 <TIM_Base_SetConfig+0x120>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a3a      	ldr	r2, [pc, #232]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d108      	bne.n	8004d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2f      	ldr	r2, [pc, #188]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01f      	beq.n	8004d62 <TIM_Base_SetConfig+0x9a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d28:	d01b      	beq.n	8004d62 <TIM_Base_SetConfig+0x9a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <TIM_Base_SetConfig+0x118>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d017      	beq.n	8004d62 <TIM_Base_SetConfig+0x9a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2b      	ldr	r2, [pc, #172]	; (8004de4 <TIM_Base_SetConfig+0x11c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <TIM_Base_SetConfig+0x9a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <TIM_Base_SetConfig+0x120>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <TIM_Base_SetConfig+0x9a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a29      	ldr	r2, [pc, #164]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <TIM_Base_SetConfig+0x9a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a28      	ldr	r2, [pc, #160]	; (8004df0 <TIM_Base_SetConfig+0x128>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_Base_SetConfig+0x9a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a27      	ldr	r2, [pc, #156]	; (8004df4 <TIM_Base_SetConfig+0x12c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_Base_SetConfig+0x9a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <TIM_Base_SetConfig+0x130>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d108      	bne.n	8004d74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a10      	ldr	r2, [pc, #64]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00f      	beq.n	8004dc0 <TIM_Base_SetConfig+0xf8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a12      	ldr	r2, [pc, #72]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <TIM_Base_SetConfig+0xf8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a11      	ldr	r2, [pc, #68]	; (8004df0 <TIM_Base_SetConfig+0x128>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <TIM_Base_SetConfig+0xf8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a10      	ldr	r2, [pc, #64]	; (8004df4 <TIM_Base_SetConfig+0x12c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_Base_SetConfig+0xf8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <TIM_Base_SetConfig+0x130>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d103      	bne.n	8004dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40013400 	.word	0x40013400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800

08004dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0201 	bic.w	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 030a 	bic.w	r3, r3, #10
 8004e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 0210 	bic.w	r2, r3, #16
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f043 0307 	orr.w	r3, r3, #7
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e068      	b.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2e      	ldr	r2, [pc, #184]	; (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2d      	ldr	r2, [pc, #180]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01d      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d018      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1b      	ldr	r2, [pc, #108]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00e      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a18      	ldr	r2, [pc, #96]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a13      	ldr	r2, [pc, #76]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10c      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40014000 	.word	0x40014000

08005040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e040      	b.n	8005110 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc f8e0 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fdea 	bl	8005c9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fb2f 	bl	800572c <UART_SetConfig>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e01b      	b.n	8005110 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fe69 	bl	8005de0 <UART_CheckIdleState>
 800510e:	4603      	mov	r3, r0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b0ba      	sub	sp, #232	; 0xe8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800513e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005142:	f640 030f 	movw	r3, #2063	; 0x80f
 8005146:	4013      	ands	r3, r2
 8005148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800514c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d115      	bne.n	8005180 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00f      	beq.n	8005180 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d009      	beq.n	8005180 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 82ae 	beq.w	80056d2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	4798      	blx	r3
      }
      return;
 800517e:	e2a8      	b.n	80056d2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8117 	beq.w	80053b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800518a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005196:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800519a:	4b85      	ldr	r3, [pc, #532]	; (80053b0 <HAL_UART_IRQHandler+0x298>)
 800519c:	4013      	ands	r3, r2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 810a 	beq.w	80053b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d011      	beq.n	80051d4 <HAL_UART_IRQHandler+0xbc>
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00b      	beq.n	80051d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2201      	movs	r2, #1
 80051c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ca:	f043 0201 	orr.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d011      	beq.n	8005204 <HAL_UART_IRQHandler+0xec>
 80051e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00b      	beq.n	8005204 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2202      	movs	r2, #2
 80051f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fa:	f043 0204 	orr.w	r2, r3, #4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d011      	beq.n	8005234 <HAL_UART_IRQHandler+0x11c>
 8005210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00b      	beq.n	8005234 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2204      	movs	r2, #4
 8005222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522a:	f043 0202 	orr.w	r2, r3, #2
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d017      	beq.n	8005270 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d105      	bne.n	8005258 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800524c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005250:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2208      	movs	r2, #8
 800525e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005266:	f043 0208 	orr.w	r2, r3, #8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005278:	2b00      	cmp	r3, #0
 800527a:	d012      	beq.n	80052a2 <HAL_UART_IRQHandler+0x18a>
 800527c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005280:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00c      	beq.n	80052a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005298:	f043 0220 	orr.w	r2, r3, #32
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8214 	beq.w	80056d6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b40      	cmp	r3, #64	; 0x40
 80052ec:	d005      	beq.n	80052fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d04f      	beq.n	800539a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fe7f 	bl	8005ffe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530a:	2b40      	cmp	r3, #64	; 0x40
 800530c:	d141      	bne.n	8005392 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3308      	adds	r3, #8
 8005314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005324:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800533a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800533e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1d9      	bne.n	800530e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535e:	2b00      	cmp	r3, #0
 8005360:	d013      	beq.n	800538a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005366:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <HAL_UART_IRQHandler+0x29c>)
 8005368:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800536e:	4618      	mov	r0, r3
 8005370:	f7fd f856 	bl	8002420 <HAL_DMA_Abort_IT>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d017      	beq.n	80053aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	e00f      	b.n	80053aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f9b8 	bl	8005700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	e00b      	b.n	80053aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9b4 	bl	8005700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	e007      	b.n	80053aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f9b0 	bl	8005700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80053a8:	e195      	b.n	80056d6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053aa:	bf00      	nop
    return;
 80053ac:	e193      	b.n	80056d6 <HAL_UART_IRQHandler+0x5be>
 80053ae:	bf00      	nop
 80053b0:	04000120 	.word	0x04000120
 80053b4:	080060c7 	.word	0x080060c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053bc:	2b01      	cmp	r3, #1
 80053be:	f040 814e 	bne.w	800565e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8147 	beq.w	800565e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8140 	beq.w	800565e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2210      	movs	r2, #16
 80053e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	f040 80b8 	bne.w	8005566 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005402:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8167 	beq.w	80056da <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005416:	429a      	cmp	r2, r3
 8005418:	f080 815f 	bcs.w	80056da <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005422:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 8086 	bne.w	8005544 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800544c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005466:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800546e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800547a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1da      	bne.n	8005438 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3308      	adds	r3, #8
 8005488:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005494:	f023 0301 	bic.w	r3, r3, #1
 8005498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3308      	adds	r3, #8
 80054a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e1      	bne.n	8005482 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3308      	adds	r3, #8
 80054c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3308      	adds	r3, #8
 80054de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e3      	bne.n	80054be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005514:	f023 0310 	bic.w	r3, r3, #16
 8005518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005526:	65bb      	str	r3, [r7, #88]	; 0x58
 8005528:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800552c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e4      	bne.n	8005504 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553e:	4618      	mov	r0, r3
 8005540:	f7fc ff30 	bl	80023a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005556:	b29b      	uxth	r3, r3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	b29b      	uxth	r3, r3
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f8d8 	bl	8005714 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005564:	e0b9      	b.n	80056da <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005572:	b29b      	uxth	r3, r3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80ab 	beq.w	80056de <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80a6 	beq.w	80056de <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055b4:	647b      	str	r3, [r7, #68]	; 0x44
 80055b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e4      	bne.n	8005592 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3308      	adds	r3, #8
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	623b      	str	r3, [r7, #32]
   return(result);
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055ec:	633a      	str	r2, [r7, #48]	; 0x30
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e3      	bne.n	80055c8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	60fb      	str	r3, [r7, #12]
   return(result);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 0310 	bic.w	r3, r3, #16
 8005628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	69b9      	ldr	r1, [r7, #24]
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	617b      	str	r3, [r7, #20]
   return(result);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e4      	bne.n	8005614 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2202      	movs	r2, #2
 800564e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f85c 	bl	8005714 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800565c:	e03f      	b.n	80056de <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00e      	beq.n	8005688 <HAL_UART_IRQHandler+0x570>
 800566a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800566e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d008      	beq.n	8005688 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800567e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fd60 	bl	8006146 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005686:	e02d      	b.n	80056e4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00e      	beq.n	80056b2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01c      	beq.n	80056e2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
    }
    return;
 80056b0:	e017      	b.n	80056e2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d012      	beq.n	80056e4 <HAL_UART_IRQHandler+0x5cc>
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fd11 	bl	80060f2 <UART_EndTransmit_IT>
    return;
 80056d0:	e008      	b.n	80056e4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80056d2:	bf00      	nop
 80056d4:	e006      	b.n	80056e4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80056d6:	bf00      	nop
 80056d8:	e004      	b.n	80056e4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80056da:	bf00      	nop
 80056dc:	e002      	b.n	80056e4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80056e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80056e4:	37e8      	adds	r7, #232	; 0xe8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop

080056ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	460b      	mov	r3, r1
 800571e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800572c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005730:	b08a      	sub	sp, #40	; 0x28
 8005732:	af00      	add	r7, sp, #0
 8005734:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	431a      	orrs	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	431a      	orrs	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	4313      	orrs	r3, r2
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4ba4      	ldr	r3, [pc, #656]	; (80059ec <UART_SetConfig+0x2c0>)
 800575c:	4013      	ands	r3, r2
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005764:	430b      	orrs	r3, r1
 8005766:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a99      	ldr	r2, [pc, #612]	; (80059f0 <UART_SetConfig+0x2c4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005794:	4313      	orrs	r3, r2
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a8:	430a      	orrs	r2, r1
 80057aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a90      	ldr	r2, [pc, #576]	; (80059f4 <UART_SetConfig+0x2c8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d126      	bne.n	8005804 <UART_SetConfig+0xd8>
 80057b6:	4b90      	ldr	r3, [pc, #576]	; (80059f8 <UART_SetConfig+0x2cc>)
 80057b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d81b      	bhi.n	80057fc <UART_SetConfig+0xd0>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0xa0>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	080057e5 	.word	0x080057e5
 80057d8:	080057f5 	.word	0x080057f5
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e116      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80057e4:	2302      	movs	r3, #2
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ea:	e112      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80057ec:	2304      	movs	r3, #4
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f2:	e10e      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80057f4:	2308      	movs	r3, #8
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fa:	e10a      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80057fc:	2310      	movs	r3, #16
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005802:	e106      	b.n	8005a12 <UART_SetConfig+0x2e6>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a7c      	ldr	r2, [pc, #496]	; (80059fc <UART_SetConfig+0x2d0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d138      	bne.n	8005880 <UART_SetConfig+0x154>
 800580e:	4b7a      	ldr	r3, [pc, #488]	; (80059f8 <UART_SetConfig+0x2cc>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f003 030c 	and.w	r3, r3, #12
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d82d      	bhi.n	8005878 <UART_SetConfig+0x14c>
 800581c:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <UART_SetConfig+0xf8>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005859 	.word	0x08005859
 8005828:	08005879 	.word	0x08005879
 800582c:	08005879 	.word	0x08005879
 8005830:	08005879 	.word	0x08005879
 8005834:	08005869 	.word	0x08005869
 8005838:	08005879 	.word	0x08005879
 800583c:	08005879 	.word	0x08005879
 8005840:	08005879 	.word	0x08005879
 8005844:	08005861 	.word	0x08005861
 8005848:	08005879 	.word	0x08005879
 800584c:	08005879 	.word	0x08005879
 8005850:	08005879 	.word	0x08005879
 8005854:	08005871 	.word	0x08005871
 8005858:	2300      	movs	r3, #0
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e0d8      	b.n	8005a12 <UART_SetConfig+0x2e6>
 8005860:	2302      	movs	r3, #2
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005866:	e0d4      	b.n	8005a12 <UART_SetConfig+0x2e6>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800586e:	e0d0      	b.n	8005a12 <UART_SetConfig+0x2e6>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005876:	e0cc      	b.n	8005a12 <UART_SetConfig+0x2e6>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800587e:	e0c8      	b.n	8005a12 <UART_SetConfig+0x2e6>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a5e      	ldr	r2, [pc, #376]	; (8005a00 <UART_SetConfig+0x2d4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d125      	bne.n	80058d6 <UART_SetConfig+0x1aa>
 800588a:	4b5b      	ldr	r3, [pc, #364]	; (80059f8 <UART_SetConfig+0x2cc>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005894:	2b30      	cmp	r3, #48	; 0x30
 8005896:	d016      	beq.n	80058c6 <UART_SetConfig+0x19a>
 8005898:	2b30      	cmp	r3, #48	; 0x30
 800589a:	d818      	bhi.n	80058ce <UART_SetConfig+0x1a2>
 800589c:	2b20      	cmp	r3, #32
 800589e:	d00a      	beq.n	80058b6 <UART_SetConfig+0x18a>
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d814      	bhi.n	80058ce <UART_SetConfig+0x1a2>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <UART_SetConfig+0x182>
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d008      	beq.n	80058be <UART_SetConfig+0x192>
 80058ac:	e00f      	b.n	80058ce <UART_SetConfig+0x1a2>
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b4:	e0ad      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80058b6:	2302      	movs	r3, #2
 80058b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058bc:	e0a9      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80058be:	2304      	movs	r3, #4
 80058c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c4:	e0a5      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80058c6:	2308      	movs	r3, #8
 80058c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058cc:	e0a1      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80058ce:	2310      	movs	r3, #16
 80058d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d4:	e09d      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a4a      	ldr	r2, [pc, #296]	; (8005a04 <UART_SetConfig+0x2d8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d125      	bne.n	800592c <UART_SetConfig+0x200>
 80058e0:	4b45      	ldr	r3, [pc, #276]	; (80059f8 <UART_SetConfig+0x2cc>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058ea:	2bc0      	cmp	r3, #192	; 0xc0
 80058ec:	d016      	beq.n	800591c <UART_SetConfig+0x1f0>
 80058ee:	2bc0      	cmp	r3, #192	; 0xc0
 80058f0:	d818      	bhi.n	8005924 <UART_SetConfig+0x1f8>
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d00a      	beq.n	800590c <UART_SetConfig+0x1e0>
 80058f6:	2b80      	cmp	r3, #128	; 0x80
 80058f8:	d814      	bhi.n	8005924 <UART_SetConfig+0x1f8>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <UART_SetConfig+0x1d8>
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d008      	beq.n	8005914 <UART_SetConfig+0x1e8>
 8005902:	e00f      	b.n	8005924 <UART_SetConfig+0x1f8>
 8005904:	2300      	movs	r3, #0
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590a:	e082      	b.n	8005a12 <UART_SetConfig+0x2e6>
 800590c:	2302      	movs	r3, #2
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005912:	e07e      	b.n	8005a12 <UART_SetConfig+0x2e6>
 8005914:	2304      	movs	r3, #4
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591a:	e07a      	b.n	8005a12 <UART_SetConfig+0x2e6>
 800591c:	2308      	movs	r3, #8
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005922:	e076      	b.n	8005a12 <UART_SetConfig+0x2e6>
 8005924:	2310      	movs	r3, #16
 8005926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800592a:	e072      	b.n	8005a12 <UART_SetConfig+0x2e6>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a35      	ldr	r2, [pc, #212]	; (8005a08 <UART_SetConfig+0x2dc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d12a      	bne.n	800598c <UART_SetConfig+0x260>
 8005936:	4b30      	ldr	r3, [pc, #192]	; (80059f8 <UART_SetConfig+0x2cc>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005944:	d01a      	beq.n	800597c <UART_SetConfig+0x250>
 8005946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800594a:	d81b      	bhi.n	8005984 <UART_SetConfig+0x258>
 800594c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005950:	d00c      	beq.n	800596c <UART_SetConfig+0x240>
 8005952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005956:	d815      	bhi.n	8005984 <UART_SetConfig+0x258>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <UART_SetConfig+0x238>
 800595c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005960:	d008      	beq.n	8005974 <UART_SetConfig+0x248>
 8005962:	e00f      	b.n	8005984 <UART_SetConfig+0x258>
 8005964:	2300      	movs	r3, #0
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596a:	e052      	b.n	8005a12 <UART_SetConfig+0x2e6>
 800596c:	2302      	movs	r3, #2
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005972:	e04e      	b.n	8005a12 <UART_SetConfig+0x2e6>
 8005974:	2304      	movs	r3, #4
 8005976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597a:	e04a      	b.n	8005a12 <UART_SetConfig+0x2e6>
 800597c:	2308      	movs	r3, #8
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005982:	e046      	b.n	8005a12 <UART_SetConfig+0x2e6>
 8005984:	2310      	movs	r3, #16
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598a:	e042      	b.n	8005a12 <UART_SetConfig+0x2e6>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a17      	ldr	r2, [pc, #92]	; (80059f0 <UART_SetConfig+0x2c4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d13a      	bne.n	8005a0c <UART_SetConfig+0x2e0>
 8005996:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <UART_SetConfig+0x2cc>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059a4:	d01a      	beq.n	80059dc <UART_SetConfig+0x2b0>
 80059a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059aa:	d81b      	bhi.n	80059e4 <UART_SetConfig+0x2b8>
 80059ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b0:	d00c      	beq.n	80059cc <UART_SetConfig+0x2a0>
 80059b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b6:	d815      	bhi.n	80059e4 <UART_SetConfig+0x2b8>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <UART_SetConfig+0x298>
 80059bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c0:	d008      	beq.n	80059d4 <UART_SetConfig+0x2a8>
 80059c2:	e00f      	b.n	80059e4 <UART_SetConfig+0x2b8>
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ca:	e022      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80059cc:	2302      	movs	r3, #2
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d2:	e01e      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80059d4:	2304      	movs	r3, #4
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059da:	e01a      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80059dc:	2308      	movs	r3, #8
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e2:	e016      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80059e4:	2310      	movs	r3, #16
 80059e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ea:	e012      	b.n	8005a12 <UART_SetConfig+0x2e6>
 80059ec:	efff69f3 	.word	0xefff69f3
 80059f0:	40008000 	.word	0x40008000
 80059f4:	40013800 	.word	0x40013800
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40004400 	.word	0x40004400
 8005a00:	40004800 	.word	0x40004800
 8005a04:	40004c00 	.word	0x40004c00
 8005a08:	40005000 	.word	0x40005000
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a9f      	ldr	r2, [pc, #636]	; (8005c94 <UART_SetConfig+0x568>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d17a      	bne.n	8005b12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d824      	bhi.n	8005a6e <UART_SetConfig+0x342>
 8005a24:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0x300>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a6f 	.word	0x08005a6f
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a6f 	.word	0x08005a6f
 8005a3c:	08005a5f 	.word	0x08005a5f
 8005a40:	08005a6f 	.word	0x08005a6f
 8005a44:	08005a6f 	.word	0x08005a6f
 8005a48:	08005a6f 	.word	0x08005a6f
 8005a4c:	08005a67 	.word	0x08005a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a50:	f7fe f936 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8005a54:	61f8      	str	r0, [r7, #28]
        break;
 8005a56:	e010      	b.n	8005a7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a58:	4b8f      	ldr	r3, [pc, #572]	; (8005c98 <UART_SetConfig+0x56c>)
 8005a5a:	61fb      	str	r3, [r7, #28]
        break;
 8005a5c:	e00d      	b.n	8005a7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5e:	f7fe f897 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8005a62:	61f8      	str	r0, [r7, #28]
        break;
 8005a64:	e009      	b.n	8005a7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a6a:	61fb      	str	r3, [r7, #28]
        break;
 8005a6c:	e005      	b.n	8005a7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80fb 	beq.w	8005c78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d305      	bcc.n	8005a9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d903      	bls.n	8005aa6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005aa4:	e0e8      	b.n	8005c78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	461c      	mov	r4, r3
 8005aac:	4615      	mov	r5, r2
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	022b      	lsls	r3, r5, #8
 8005ab8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005abc:	0222      	lsls	r2, r4, #8
 8005abe:	68f9      	ldr	r1, [r7, #12]
 8005ac0:	6849      	ldr	r1, [r1, #4]
 8005ac2:	0849      	lsrs	r1, r1, #1
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	4688      	mov	r8, r1
 8005ac8:	4681      	mov	r9, r0
 8005aca:	eb12 0a08 	adds.w	sl, r2, r8
 8005ace:	eb43 0b09 	adc.w	fp, r3, r9
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	4659      	mov	r1, fp
 8005ae4:	f7fa fbc4 	bl	8000270 <__aeabi_uldivmod>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4613      	mov	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af6:	d308      	bcc.n	8005b0a <UART_SetConfig+0x3de>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005afe:	d204      	bcs.n	8005b0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	e0b6      	b.n	8005c78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b10:	e0b2      	b.n	8005c78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1a:	d15e      	bne.n	8005bda <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d828      	bhi.n	8005b76 <UART_SetConfig+0x44a>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <UART_SetConfig+0x400>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	08005b77 	.word	0x08005b77
 8005b3c:	08005b67 	.word	0x08005b67
 8005b40:	08005b77 	.word	0x08005b77
 8005b44:	08005b77 	.word	0x08005b77
 8005b48:	08005b77 	.word	0x08005b77
 8005b4c:	08005b6f 	.word	0x08005b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b50:	f7fe f8b6 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8005b54:	61f8      	str	r0, [r7, #28]
        break;
 8005b56:	e014      	b.n	8005b82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b58:	f7fe f8c8 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8005b5c:	61f8      	str	r0, [r7, #28]
        break;
 8005b5e:	e010      	b.n	8005b82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b60:	4b4d      	ldr	r3, [pc, #308]	; (8005c98 <UART_SetConfig+0x56c>)
 8005b62:	61fb      	str	r3, [r7, #28]
        break;
 8005b64:	e00d      	b.n	8005b82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b66:	f7fe f813 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8005b6a:	61f8      	str	r0, [r7, #28]
        break;
 8005b6c:	e009      	b.n	8005b82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b72:	61fb      	str	r3, [r7, #28]
        break;
 8005b74:	e005      	b.n	8005b82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d077      	beq.n	8005c78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	005a      	lsls	r2, r3, #1
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	085b      	lsrs	r3, r3, #1
 8005b92:	441a      	add	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b0f      	cmp	r3, #15
 8005ba2:	d916      	bls.n	8005bd2 <UART_SetConfig+0x4a6>
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005baa:	d212      	bcs.n	8005bd2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f023 030f 	bic.w	r3, r3, #15
 8005bb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	085b      	lsrs	r3, r3, #1
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	8afb      	ldrh	r3, [r7, #22]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	8afa      	ldrh	r2, [r7, #22]
 8005bce:	60da      	str	r2, [r3, #12]
 8005bd0:	e052      	b.n	8005c78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bd8:	e04e      	b.n	8005c78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d827      	bhi.n	8005c32 <UART_SetConfig+0x506>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <UART_SetConfig+0x4bc>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c0d 	.word	0x08005c0d
 8005bec:	08005c15 	.word	0x08005c15
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	08005c33 	.word	0x08005c33
 8005bf8:	08005c23 	.word	0x08005c23
 8005bfc:	08005c33 	.word	0x08005c33
 8005c00:	08005c33 	.word	0x08005c33
 8005c04:	08005c33 	.word	0x08005c33
 8005c08:	08005c2b 	.word	0x08005c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c0c:	f7fe f858 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8005c10:	61f8      	str	r0, [r7, #28]
        break;
 8005c12:	e014      	b.n	8005c3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c14:	f7fe f86a 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8005c18:	61f8      	str	r0, [r7, #28]
        break;
 8005c1a:	e010      	b.n	8005c3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c1c:	4b1e      	ldr	r3, [pc, #120]	; (8005c98 <UART_SetConfig+0x56c>)
 8005c1e:	61fb      	str	r3, [r7, #28]
        break;
 8005c20:	e00d      	b.n	8005c3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c22:	f7fd ffb5 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8005c26:	61f8      	str	r0, [r7, #28]
        break;
 8005c28:	e009      	b.n	8005c3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2e:	61fb      	str	r3, [r7, #28]
        break;
 8005c30:	e005      	b.n	8005c3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c3c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d019      	beq.n	8005c78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	085a      	lsrs	r2, r3, #1
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	441a      	add	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2b0f      	cmp	r3, #15
 8005c5c:	d909      	bls.n	8005c72 <UART_SetConfig+0x546>
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c64:	d205      	bcs.n	8005c72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60da      	str	r2, [r3, #12]
 8005c70:	e002      	b.n	8005c78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3728      	adds	r7, #40	; 0x28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c92:	bf00      	nop
 8005c94:	40008000 	.word	0x40008000
 8005c98:	00f42400 	.word	0x00f42400

08005c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01a      	beq.n	8005db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d9a:	d10a      	bne.n	8005db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	605a      	str	r2, [r3, #4]
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b098      	sub	sp, #96	; 0x60
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005df0:	f7fb ff6e 	bl	8001cd0 <HAL_GetTick>
 8005df4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d12e      	bne.n	8005e62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f88c 	bl	8005f30 <UART_WaitOnFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d021      	beq.n	8005e62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e32:	653b      	str	r3, [r7, #80]	; 0x50
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e6      	bne.n	8005e1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e062      	b.n	8005f28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d149      	bne.n	8005f04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f856 	bl	8005f30 <UART_WaitOnFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d03c      	beq.n	8005f04 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	623b      	str	r3, [r7, #32]
   return(result);
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e6      	bne.n	8005e8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0301 	bic.w	r3, r3, #1
 8005ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005edc:	61fa      	str	r2, [r7, #28]
 8005ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	69b9      	ldr	r1, [r7, #24]
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e5      	bne.n	8005ebc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e011      	b.n	8005f28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3758      	adds	r7, #88	; 0x58
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f40:	e049      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d045      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4a:	f7fb fec1 	bl	8001cd0 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d302      	bcc.n	8005f60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e048      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d031      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d110      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2208      	movs	r2, #8
 8005f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f838 	bl	8005ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2208      	movs	r2, #8
 8005f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e029      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb0:	d111      	bne.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f81e 	bl	8005ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e00f      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69da      	ldr	r2, [r3, #28]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d0a6      	beq.n	8005f42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b095      	sub	sp, #84	; 0x54
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800601a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	643b      	str	r3, [r7, #64]	; 0x40
 8006026:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800602a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e6      	bne.n	8006006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3308      	adds	r3, #8
 800603e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	61fb      	str	r3, [r7, #28]
   return(result);
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3308      	adds	r3, #8
 8006056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006058:	62fa      	str	r2, [r7, #44]	; 0x2c
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800605e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e5      	bne.n	8006038 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006070:	2b01      	cmp	r3, #1
 8006072:	d118      	bne.n	80060a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	60bb      	str	r3, [r7, #8]
   return(result);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f023 0310 	bic.w	r3, r3, #16
 8006088:	647b      	str	r3, [r7, #68]	; 0x44
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6979      	ldr	r1, [r7, #20]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	613b      	str	r3, [r7, #16]
   return(result);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e6      	bne.n	8006074 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80060ba:	bf00      	nop
 80060bc:	3754      	adds	r7, #84	; 0x54
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff fb0b 	bl	8005700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b088      	sub	sp, #32
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	60bb      	str	r3, [r7, #8]
   return(result);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6979      	ldr	r1, [r7, #20]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	613b      	str	r3, [r7, #16]
   return(result);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e6      	bne.n	80060fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff fad7 	bl	80056ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800613e:	bf00      	nop
 8006140:	3720      	adds	r7, #32
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
	...

0800615c <sniprintf>:
 800615c:	b40c      	push	{r2, r3}
 800615e:	b530      	push	{r4, r5, lr}
 8006160:	4b17      	ldr	r3, [pc, #92]	; (80061c0 <sniprintf+0x64>)
 8006162:	1e0c      	subs	r4, r1, #0
 8006164:	681d      	ldr	r5, [r3, #0]
 8006166:	b09d      	sub	sp, #116	; 0x74
 8006168:	da08      	bge.n	800617c <sniprintf+0x20>
 800616a:	238b      	movs	r3, #139	; 0x8b
 800616c:	602b      	str	r3, [r5, #0]
 800616e:	f04f 30ff 	mov.w	r0, #4294967295
 8006172:	b01d      	add	sp, #116	; 0x74
 8006174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006178:	b002      	add	sp, #8
 800617a:	4770      	bx	lr
 800617c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006180:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006184:	bf14      	ite	ne
 8006186:	f104 33ff 	addne.w	r3, r4, #4294967295
 800618a:	4623      	moveq	r3, r4
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	9307      	str	r3, [sp, #28]
 8006190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006194:	9002      	str	r0, [sp, #8]
 8006196:	9006      	str	r0, [sp, #24]
 8006198:	f8ad 3016 	strh.w	r3, [sp, #22]
 800619c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800619e:	ab21      	add	r3, sp, #132	; 0x84
 80061a0:	a902      	add	r1, sp, #8
 80061a2:	4628      	mov	r0, r5
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	f000 f993 	bl	80064d0 <_svfiprintf_r>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	bfbc      	itt	lt
 80061ae:	238b      	movlt	r3, #139	; 0x8b
 80061b0:	602b      	strlt	r3, [r5, #0]
 80061b2:	2c00      	cmp	r4, #0
 80061b4:	d0dd      	beq.n	8006172 <sniprintf+0x16>
 80061b6:	9b02      	ldr	r3, [sp, #8]
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	e7d9      	b.n	8006172 <sniprintf+0x16>
 80061be:	bf00      	nop
 80061c0:	20000210 	.word	0x20000210

080061c4 <memset>:
 80061c4:	4402      	add	r2, r0
 80061c6:	4603      	mov	r3, r0
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d100      	bne.n	80061ce <memset+0xa>
 80061cc:	4770      	bx	lr
 80061ce:	f803 1b01 	strb.w	r1, [r3], #1
 80061d2:	e7f9      	b.n	80061c8 <memset+0x4>

080061d4 <__errno>:
 80061d4:	4b01      	ldr	r3, [pc, #4]	; (80061dc <__errno+0x8>)
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000210 	.word	0x20000210

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4d0d      	ldr	r5, [pc, #52]	; (8006218 <__libc_init_array+0x38>)
 80061e4:	4c0d      	ldr	r4, [pc, #52]	; (800621c <__libc_init_array+0x3c>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	2600      	movs	r6, #0
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	4d0b      	ldr	r5, [pc, #44]	; (8006220 <__libc_init_array+0x40>)
 80061f2:	4c0c      	ldr	r4, [pc, #48]	; (8006224 <__libc_init_array+0x44>)
 80061f4:	f000 fc6a 	bl	8006acc <_init>
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	2600      	movs	r6, #0
 80061fe:	42a6      	cmp	r6, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f855 3b04 	ldr.w	r3, [r5], #4
 8006208:	4798      	blx	r3
 800620a:	3601      	adds	r6, #1
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006212:	4798      	blx	r3
 8006214:	3601      	adds	r6, #1
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	0803ba5c 	.word	0x0803ba5c
 800621c:	0803ba5c 	.word	0x0803ba5c
 8006220:	0803ba5c 	.word	0x0803ba5c
 8006224:	0803ba60 	.word	0x0803ba60

08006228 <__retarget_lock_acquire_recursive>:
 8006228:	4770      	bx	lr

0800622a <__retarget_lock_release_recursive>:
 800622a:	4770      	bx	lr

0800622c <_free_r>:
 800622c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800622e:	2900      	cmp	r1, #0
 8006230:	d044      	beq.n	80062bc <_free_r+0x90>
 8006232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006236:	9001      	str	r0, [sp, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f1a1 0404 	sub.w	r4, r1, #4
 800623e:	bfb8      	it	lt
 8006240:	18e4      	addlt	r4, r4, r3
 8006242:	f000 f8df 	bl	8006404 <__malloc_lock>
 8006246:	4a1e      	ldr	r2, [pc, #120]	; (80062c0 <_free_r+0x94>)
 8006248:	9801      	ldr	r0, [sp, #4]
 800624a:	6813      	ldr	r3, [r2, #0]
 800624c:	b933      	cbnz	r3, 800625c <_free_r+0x30>
 800624e:	6063      	str	r3, [r4, #4]
 8006250:	6014      	str	r4, [r2, #0]
 8006252:	b003      	add	sp, #12
 8006254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006258:	f000 b8da 	b.w	8006410 <__malloc_unlock>
 800625c:	42a3      	cmp	r3, r4
 800625e:	d908      	bls.n	8006272 <_free_r+0x46>
 8006260:	6825      	ldr	r5, [r4, #0]
 8006262:	1961      	adds	r1, r4, r5
 8006264:	428b      	cmp	r3, r1
 8006266:	bf01      	itttt	eq
 8006268:	6819      	ldreq	r1, [r3, #0]
 800626a:	685b      	ldreq	r3, [r3, #4]
 800626c:	1949      	addeq	r1, r1, r5
 800626e:	6021      	streq	r1, [r4, #0]
 8006270:	e7ed      	b.n	800624e <_free_r+0x22>
 8006272:	461a      	mov	r2, r3
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	b10b      	cbz	r3, 800627c <_free_r+0x50>
 8006278:	42a3      	cmp	r3, r4
 800627a:	d9fa      	bls.n	8006272 <_free_r+0x46>
 800627c:	6811      	ldr	r1, [r2, #0]
 800627e:	1855      	adds	r5, r2, r1
 8006280:	42a5      	cmp	r5, r4
 8006282:	d10b      	bne.n	800629c <_free_r+0x70>
 8006284:	6824      	ldr	r4, [r4, #0]
 8006286:	4421      	add	r1, r4
 8006288:	1854      	adds	r4, r2, r1
 800628a:	42a3      	cmp	r3, r4
 800628c:	6011      	str	r1, [r2, #0]
 800628e:	d1e0      	bne.n	8006252 <_free_r+0x26>
 8006290:	681c      	ldr	r4, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	6053      	str	r3, [r2, #4]
 8006296:	440c      	add	r4, r1
 8006298:	6014      	str	r4, [r2, #0]
 800629a:	e7da      	b.n	8006252 <_free_r+0x26>
 800629c:	d902      	bls.n	80062a4 <_free_r+0x78>
 800629e:	230c      	movs	r3, #12
 80062a0:	6003      	str	r3, [r0, #0]
 80062a2:	e7d6      	b.n	8006252 <_free_r+0x26>
 80062a4:	6825      	ldr	r5, [r4, #0]
 80062a6:	1961      	adds	r1, r4, r5
 80062a8:	428b      	cmp	r3, r1
 80062aa:	bf04      	itt	eq
 80062ac:	6819      	ldreq	r1, [r3, #0]
 80062ae:	685b      	ldreq	r3, [r3, #4]
 80062b0:	6063      	str	r3, [r4, #4]
 80062b2:	bf04      	itt	eq
 80062b4:	1949      	addeq	r1, r1, r5
 80062b6:	6021      	streq	r1, [r4, #0]
 80062b8:	6054      	str	r4, [r2, #4]
 80062ba:	e7ca      	b.n	8006252 <_free_r+0x26>
 80062bc:	b003      	add	sp, #12
 80062be:	bd30      	pop	{r4, r5, pc}
 80062c0:	2000051c 	.word	0x2000051c

080062c4 <sbrk_aligned>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	4e0e      	ldr	r6, [pc, #56]	; (8006300 <sbrk_aligned+0x3c>)
 80062c8:	460c      	mov	r4, r1
 80062ca:	6831      	ldr	r1, [r6, #0]
 80062cc:	4605      	mov	r5, r0
 80062ce:	b911      	cbnz	r1, 80062d6 <sbrk_aligned+0x12>
 80062d0:	f000 fba6 	bl	8006a20 <_sbrk_r>
 80062d4:	6030      	str	r0, [r6, #0]
 80062d6:	4621      	mov	r1, r4
 80062d8:	4628      	mov	r0, r5
 80062da:	f000 fba1 	bl	8006a20 <_sbrk_r>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d00a      	beq.n	80062f8 <sbrk_aligned+0x34>
 80062e2:	1cc4      	adds	r4, r0, #3
 80062e4:	f024 0403 	bic.w	r4, r4, #3
 80062e8:	42a0      	cmp	r0, r4
 80062ea:	d007      	beq.n	80062fc <sbrk_aligned+0x38>
 80062ec:	1a21      	subs	r1, r4, r0
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 fb96 	bl	8006a20 <_sbrk_r>
 80062f4:	3001      	adds	r0, #1
 80062f6:	d101      	bne.n	80062fc <sbrk_aligned+0x38>
 80062f8:	f04f 34ff 	mov.w	r4, #4294967295
 80062fc:	4620      	mov	r0, r4
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	20000520 	.word	0x20000520

08006304 <_malloc_r>:
 8006304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006308:	1ccd      	adds	r5, r1, #3
 800630a:	f025 0503 	bic.w	r5, r5, #3
 800630e:	3508      	adds	r5, #8
 8006310:	2d0c      	cmp	r5, #12
 8006312:	bf38      	it	cc
 8006314:	250c      	movcc	r5, #12
 8006316:	2d00      	cmp	r5, #0
 8006318:	4607      	mov	r7, r0
 800631a:	db01      	blt.n	8006320 <_malloc_r+0x1c>
 800631c:	42a9      	cmp	r1, r5
 800631e:	d905      	bls.n	800632c <_malloc_r+0x28>
 8006320:	230c      	movs	r3, #12
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	2600      	movs	r6, #0
 8006326:	4630      	mov	r0, r6
 8006328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006400 <_malloc_r+0xfc>
 8006330:	f000 f868 	bl	8006404 <__malloc_lock>
 8006334:	f8d8 3000 	ldr.w	r3, [r8]
 8006338:	461c      	mov	r4, r3
 800633a:	bb5c      	cbnz	r4, 8006394 <_malloc_r+0x90>
 800633c:	4629      	mov	r1, r5
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ffc0 	bl	80062c4 <sbrk_aligned>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	4604      	mov	r4, r0
 8006348:	d155      	bne.n	80063f6 <_malloc_r+0xf2>
 800634a:	f8d8 4000 	ldr.w	r4, [r8]
 800634e:	4626      	mov	r6, r4
 8006350:	2e00      	cmp	r6, #0
 8006352:	d145      	bne.n	80063e0 <_malloc_r+0xdc>
 8006354:	2c00      	cmp	r4, #0
 8006356:	d048      	beq.n	80063ea <_malloc_r+0xe6>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	4631      	mov	r1, r6
 800635c:	4638      	mov	r0, r7
 800635e:	eb04 0903 	add.w	r9, r4, r3
 8006362:	f000 fb5d 	bl	8006a20 <_sbrk_r>
 8006366:	4581      	cmp	r9, r0
 8006368:	d13f      	bne.n	80063ea <_malloc_r+0xe6>
 800636a:	6821      	ldr	r1, [r4, #0]
 800636c:	1a6d      	subs	r5, r5, r1
 800636e:	4629      	mov	r1, r5
 8006370:	4638      	mov	r0, r7
 8006372:	f7ff ffa7 	bl	80062c4 <sbrk_aligned>
 8006376:	3001      	adds	r0, #1
 8006378:	d037      	beq.n	80063ea <_malloc_r+0xe6>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	442b      	add	r3, r5
 800637e:	6023      	str	r3, [r4, #0]
 8006380:	f8d8 3000 	ldr.w	r3, [r8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d038      	beq.n	80063fa <_malloc_r+0xf6>
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	42a2      	cmp	r2, r4
 800638c:	d12b      	bne.n	80063e6 <_malloc_r+0xe2>
 800638e:	2200      	movs	r2, #0
 8006390:	605a      	str	r2, [r3, #4]
 8006392:	e00f      	b.n	80063b4 <_malloc_r+0xb0>
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	1b52      	subs	r2, r2, r5
 8006398:	d41f      	bmi.n	80063da <_malloc_r+0xd6>
 800639a:	2a0b      	cmp	r2, #11
 800639c:	d917      	bls.n	80063ce <_malloc_r+0xca>
 800639e:	1961      	adds	r1, r4, r5
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	6025      	str	r5, [r4, #0]
 80063a4:	bf18      	it	ne
 80063a6:	6059      	strne	r1, [r3, #4]
 80063a8:	6863      	ldr	r3, [r4, #4]
 80063aa:	bf08      	it	eq
 80063ac:	f8c8 1000 	streq.w	r1, [r8]
 80063b0:	5162      	str	r2, [r4, r5]
 80063b2:	604b      	str	r3, [r1, #4]
 80063b4:	4638      	mov	r0, r7
 80063b6:	f104 060b 	add.w	r6, r4, #11
 80063ba:	f000 f829 	bl	8006410 <__malloc_unlock>
 80063be:	f026 0607 	bic.w	r6, r6, #7
 80063c2:	1d23      	adds	r3, r4, #4
 80063c4:	1af2      	subs	r2, r6, r3
 80063c6:	d0ae      	beq.n	8006326 <_malloc_r+0x22>
 80063c8:	1b9b      	subs	r3, r3, r6
 80063ca:	50a3      	str	r3, [r4, r2]
 80063cc:	e7ab      	b.n	8006326 <_malloc_r+0x22>
 80063ce:	42a3      	cmp	r3, r4
 80063d0:	6862      	ldr	r2, [r4, #4]
 80063d2:	d1dd      	bne.n	8006390 <_malloc_r+0x8c>
 80063d4:	f8c8 2000 	str.w	r2, [r8]
 80063d8:	e7ec      	b.n	80063b4 <_malloc_r+0xb0>
 80063da:	4623      	mov	r3, r4
 80063dc:	6864      	ldr	r4, [r4, #4]
 80063de:	e7ac      	b.n	800633a <_malloc_r+0x36>
 80063e0:	4634      	mov	r4, r6
 80063e2:	6876      	ldr	r6, [r6, #4]
 80063e4:	e7b4      	b.n	8006350 <_malloc_r+0x4c>
 80063e6:	4613      	mov	r3, r2
 80063e8:	e7cc      	b.n	8006384 <_malloc_r+0x80>
 80063ea:	230c      	movs	r3, #12
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	4638      	mov	r0, r7
 80063f0:	f000 f80e 	bl	8006410 <__malloc_unlock>
 80063f4:	e797      	b.n	8006326 <_malloc_r+0x22>
 80063f6:	6025      	str	r5, [r4, #0]
 80063f8:	e7dc      	b.n	80063b4 <_malloc_r+0xb0>
 80063fa:	605b      	str	r3, [r3, #4]
 80063fc:	deff      	udf	#255	; 0xff
 80063fe:	bf00      	nop
 8006400:	2000051c 	.word	0x2000051c

08006404 <__malloc_lock>:
 8006404:	4801      	ldr	r0, [pc, #4]	; (800640c <__malloc_lock+0x8>)
 8006406:	f7ff bf0f 	b.w	8006228 <__retarget_lock_acquire_recursive>
 800640a:	bf00      	nop
 800640c:	20000518 	.word	0x20000518

08006410 <__malloc_unlock>:
 8006410:	4801      	ldr	r0, [pc, #4]	; (8006418 <__malloc_unlock+0x8>)
 8006412:	f7ff bf0a 	b.w	800622a <__retarget_lock_release_recursive>
 8006416:	bf00      	nop
 8006418:	20000518 	.word	0x20000518

0800641c <__ssputs_r>:
 800641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	688e      	ldr	r6, [r1, #8]
 8006422:	461f      	mov	r7, r3
 8006424:	42be      	cmp	r6, r7
 8006426:	680b      	ldr	r3, [r1, #0]
 8006428:	4682      	mov	sl, r0
 800642a:	460c      	mov	r4, r1
 800642c:	4690      	mov	r8, r2
 800642e:	d82c      	bhi.n	800648a <__ssputs_r+0x6e>
 8006430:	898a      	ldrh	r2, [r1, #12]
 8006432:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006436:	d026      	beq.n	8006486 <__ssputs_r+0x6a>
 8006438:	6965      	ldr	r5, [r4, #20]
 800643a:	6909      	ldr	r1, [r1, #16]
 800643c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006440:	eba3 0901 	sub.w	r9, r3, r1
 8006444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006448:	1c7b      	adds	r3, r7, #1
 800644a:	444b      	add	r3, r9
 800644c:	106d      	asrs	r5, r5, #1
 800644e:	429d      	cmp	r5, r3
 8006450:	bf38      	it	cc
 8006452:	461d      	movcc	r5, r3
 8006454:	0553      	lsls	r3, r2, #21
 8006456:	d527      	bpl.n	80064a8 <__ssputs_r+0x8c>
 8006458:	4629      	mov	r1, r5
 800645a:	f7ff ff53 	bl	8006304 <_malloc_r>
 800645e:	4606      	mov	r6, r0
 8006460:	b360      	cbz	r0, 80064bc <__ssputs_r+0xa0>
 8006462:	6921      	ldr	r1, [r4, #16]
 8006464:	464a      	mov	r2, r9
 8006466:	f000 faeb 	bl	8006a40 <memcpy>
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006474:	81a3      	strh	r3, [r4, #12]
 8006476:	6126      	str	r6, [r4, #16]
 8006478:	6165      	str	r5, [r4, #20]
 800647a:	444e      	add	r6, r9
 800647c:	eba5 0509 	sub.w	r5, r5, r9
 8006480:	6026      	str	r6, [r4, #0]
 8006482:	60a5      	str	r5, [r4, #8]
 8006484:	463e      	mov	r6, r7
 8006486:	42be      	cmp	r6, r7
 8006488:	d900      	bls.n	800648c <__ssputs_r+0x70>
 800648a:	463e      	mov	r6, r7
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	4632      	mov	r2, r6
 8006490:	4641      	mov	r1, r8
 8006492:	f000 faab 	bl	80069ec <memmove>
 8006496:	68a3      	ldr	r3, [r4, #8]
 8006498:	1b9b      	subs	r3, r3, r6
 800649a:	60a3      	str	r3, [r4, #8]
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	4433      	add	r3, r6
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	2000      	movs	r0, #0
 80064a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a8:	462a      	mov	r2, r5
 80064aa:	f000 fad7 	bl	8006a5c <_realloc_r>
 80064ae:	4606      	mov	r6, r0
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d1e0      	bne.n	8006476 <__ssputs_r+0x5a>
 80064b4:	6921      	ldr	r1, [r4, #16]
 80064b6:	4650      	mov	r0, sl
 80064b8:	f7ff feb8 	bl	800622c <_free_r>
 80064bc:	230c      	movs	r3, #12
 80064be:	f8ca 3000 	str.w	r3, [sl]
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	f04f 30ff 	mov.w	r0, #4294967295
 80064ce:	e7e9      	b.n	80064a4 <__ssputs_r+0x88>

080064d0 <_svfiprintf_r>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	4698      	mov	r8, r3
 80064d6:	898b      	ldrh	r3, [r1, #12]
 80064d8:	061b      	lsls	r3, r3, #24
 80064da:	b09d      	sub	sp, #116	; 0x74
 80064dc:	4607      	mov	r7, r0
 80064de:	460d      	mov	r5, r1
 80064e0:	4614      	mov	r4, r2
 80064e2:	d50e      	bpl.n	8006502 <_svfiprintf_r+0x32>
 80064e4:	690b      	ldr	r3, [r1, #16]
 80064e6:	b963      	cbnz	r3, 8006502 <_svfiprintf_r+0x32>
 80064e8:	2140      	movs	r1, #64	; 0x40
 80064ea:	f7ff ff0b 	bl	8006304 <_malloc_r>
 80064ee:	6028      	str	r0, [r5, #0]
 80064f0:	6128      	str	r0, [r5, #16]
 80064f2:	b920      	cbnz	r0, 80064fe <_svfiprintf_r+0x2e>
 80064f4:	230c      	movs	r3, #12
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	e0d0      	b.n	80066a0 <_svfiprintf_r+0x1d0>
 80064fe:	2340      	movs	r3, #64	; 0x40
 8006500:	616b      	str	r3, [r5, #20]
 8006502:	2300      	movs	r3, #0
 8006504:	9309      	str	r3, [sp, #36]	; 0x24
 8006506:	2320      	movs	r3, #32
 8006508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800650c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006510:	2330      	movs	r3, #48	; 0x30
 8006512:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80066b8 <_svfiprintf_r+0x1e8>
 8006516:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800651a:	f04f 0901 	mov.w	r9, #1
 800651e:	4623      	mov	r3, r4
 8006520:	469a      	mov	sl, r3
 8006522:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006526:	b10a      	cbz	r2, 800652c <_svfiprintf_r+0x5c>
 8006528:	2a25      	cmp	r2, #37	; 0x25
 800652a:	d1f9      	bne.n	8006520 <_svfiprintf_r+0x50>
 800652c:	ebba 0b04 	subs.w	fp, sl, r4
 8006530:	d00b      	beq.n	800654a <_svfiprintf_r+0x7a>
 8006532:	465b      	mov	r3, fp
 8006534:	4622      	mov	r2, r4
 8006536:	4629      	mov	r1, r5
 8006538:	4638      	mov	r0, r7
 800653a:	f7ff ff6f 	bl	800641c <__ssputs_r>
 800653e:	3001      	adds	r0, #1
 8006540:	f000 80a9 	beq.w	8006696 <_svfiprintf_r+0x1c6>
 8006544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006546:	445a      	add	r2, fp
 8006548:	9209      	str	r2, [sp, #36]	; 0x24
 800654a:	f89a 3000 	ldrb.w	r3, [sl]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 80a1 	beq.w	8006696 <_svfiprintf_r+0x1c6>
 8006554:	2300      	movs	r3, #0
 8006556:	f04f 32ff 	mov.w	r2, #4294967295
 800655a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800655e:	f10a 0a01 	add.w	sl, sl, #1
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	9307      	str	r3, [sp, #28]
 8006566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800656a:	931a      	str	r3, [sp, #104]	; 0x68
 800656c:	4654      	mov	r4, sl
 800656e:	2205      	movs	r2, #5
 8006570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006574:	4850      	ldr	r0, [pc, #320]	; (80066b8 <_svfiprintf_r+0x1e8>)
 8006576:	f7f9 fe2b 	bl	80001d0 <memchr>
 800657a:	9a04      	ldr	r2, [sp, #16]
 800657c:	b9d8      	cbnz	r0, 80065b6 <_svfiprintf_r+0xe6>
 800657e:	06d0      	lsls	r0, r2, #27
 8006580:	bf44      	itt	mi
 8006582:	2320      	movmi	r3, #32
 8006584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006588:	0711      	lsls	r1, r2, #28
 800658a:	bf44      	itt	mi
 800658c:	232b      	movmi	r3, #43	; 0x2b
 800658e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006592:	f89a 3000 	ldrb.w	r3, [sl]
 8006596:	2b2a      	cmp	r3, #42	; 0x2a
 8006598:	d015      	beq.n	80065c6 <_svfiprintf_r+0xf6>
 800659a:	9a07      	ldr	r2, [sp, #28]
 800659c:	4654      	mov	r4, sl
 800659e:	2000      	movs	r0, #0
 80065a0:	f04f 0c0a 	mov.w	ip, #10
 80065a4:	4621      	mov	r1, r4
 80065a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065aa:	3b30      	subs	r3, #48	; 0x30
 80065ac:	2b09      	cmp	r3, #9
 80065ae:	d94d      	bls.n	800664c <_svfiprintf_r+0x17c>
 80065b0:	b1b0      	cbz	r0, 80065e0 <_svfiprintf_r+0x110>
 80065b2:	9207      	str	r2, [sp, #28]
 80065b4:	e014      	b.n	80065e0 <_svfiprintf_r+0x110>
 80065b6:	eba0 0308 	sub.w	r3, r0, r8
 80065ba:	fa09 f303 	lsl.w	r3, r9, r3
 80065be:	4313      	orrs	r3, r2
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	46a2      	mov	sl, r4
 80065c4:	e7d2      	b.n	800656c <_svfiprintf_r+0x9c>
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	1d19      	adds	r1, r3, #4
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	9103      	str	r1, [sp, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	bfbb      	ittet	lt
 80065d2:	425b      	neglt	r3, r3
 80065d4:	f042 0202 	orrlt.w	r2, r2, #2
 80065d8:	9307      	strge	r3, [sp, #28]
 80065da:	9307      	strlt	r3, [sp, #28]
 80065dc:	bfb8      	it	lt
 80065de:	9204      	strlt	r2, [sp, #16]
 80065e0:	7823      	ldrb	r3, [r4, #0]
 80065e2:	2b2e      	cmp	r3, #46	; 0x2e
 80065e4:	d10c      	bne.n	8006600 <_svfiprintf_r+0x130>
 80065e6:	7863      	ldrb	r3, [r4, #1]
 80065e8:	2b2a      	cmp	r3, #42	; 0x2a
 80065ea:	d134      	bne.n	8006656 <_svfiprintf_r+0x186>
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	1d1a      	adds	r2, r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	9203      	str	r2, [sp, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bfb8      	it	lt
 80065f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80065fc:	3402      	adds	r4, #2
 80065fe:	9305      	str	r3, [sp, #20]
 8006600:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80066c8 <_svfiprintf_r+0x1f8>
 8006604:	7821      	ldrb	r1, [r4, #0]
 8006606:	2203      	movs	r2, #3
 8006608:	4650      	mov	r0, sl
 800660a:	f7f9 fde1 	bl	80001d0 <memchr>
 800660e:	b138      	cbz	r0, 8006620 <_svfiprintf_r+0x150>
 8006610:	9b04      	ldr	r3, [sp, #16]
 8006612:	eba0 000a 	sub.w	r0, r0, sl
 8006616:	2240      	movs	r2, #64	; 0x40
 8006618:	4082      	lsls	r2, r0
 800661a:	4313      	orrs	r3, r2
 800661c:	3401      	adds	r4, #1
 800661e:	9304      	str	r3, [sp, #16]
 8006620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006624:	4825      	ldr	r0, [pc, #148]	; (80066bc <_svfiprintf_r+0x1ec>)
 8006626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800662a:	2206      	movs	r2, #6
 800662c:	f7f9 fdd0 	bl	80001d0 <memchr>
 8006630:	2800      	cmp	r0, #0
 8006632:	d038      	beq.n	80066a6 <_svfiprintf_r+0x1d6>
 8006634:	4b22      	ldr	r3, [pc, #136]	; (80066c0 <_svfiprintf_r+0x1f0>)
 8006636:	bb1b      	cbnz	r3, 8006680 <_svfiprintf_r+0x1b0>
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	3307      	adds	r3, #7
 800663c:	f023 0307 	bic.w	r3, r3, #7
 8006640:	3308      	adds	r3, #8
 8006642:	9303      	str	r3, [sp, #12]
 8006644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006646:	4433      	add	r3, r6
 8006648:	9309      	str	r3, [sp, #36]	; 0x24
 800664a:	e768      	b.n	800651e <_svfiprintf_r+0x4e>
 800664c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006650:	460c      	mov	r4, r1
 8006652:	2001      	movs	r0, #1
 8006654:	e7a6      	b.n	80065a4 <_svfiprintf_r+0xd4>
 8006656:	2300      	movs	r3, #0
 8006658:	3401      	adds	r4, #1
 800665a:	9305      	str	r3, [sp, #20]
 800665c:	4619      	mov	r1, r3
 800665e:	f04f 0c0a 	mov.w	ip, #10
 8006662:	4620      	mov	r0, r4
 8006664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006668:	3a30      	subs	r2, #48	; 0x30
 800666a:	2a09      	cmp	r2, #9
 800666c:	d903      	bls.n	8006676 <_svfiprintf_r+0x1a6>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0c6      	beq.n	8006600 <_svfiprintf_r+0x130>
 8006672:	9105      	str	r1, [sp, #20]
 8006674:	e7c4      	b.n	8006600 <_svfiprintf_r+0x130>
 8006676:	fb0c 2101 	mla	r1, ip, r1, r2
 800667a:	4604      	mov	r4, r0
 800667c:	2301      	movs	r3, #1
 800667e:	e7f0      	b.n	8006662 <_svfiprintf_r+0x192>
 8006680:	ab03      	add	r3, sp, #12
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	462a      	mov	r2, r5
 8006686:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <_svfiprintf_r+0x1f4>)
 8006688:	a904      	add	r1, sp, #16
 800668a:	4638      	mov	r0, r7
 800668c:	f3af 8000 	nop.w
 8006690:	1c42      	adds	r2, r0, #1
 8006692:	4606      	mov	r6, r0
 8006694:	d1d6      	bne.n	8006644 <_svfiprintf_r+0x174>
 8006696:	89ab      	ldrh	r3, [r5, #12]
 8006698:	065b      	lsls	r3, r3, #25
 800669a:	f53f af2d 	bmi.w	80064f8 <_svfiprintf_r+0x28>
 800669e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066a0:	b01d      	add	sp, #116	; 0x74
 80066a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a6:	ab03      	add	r3, sp, #12
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	462a      	mov	r2, r5
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <_svfiprintf_r+0x1f4>)
 80066ae:	a904      	add	r1, sp, #16
 80066b0:	4638      	mov	r0, r7
 80066b2:	f000 f879 	bl	80067a8 <_printf_i>
 80066b6:	e7eb      	b.n	8006690 <_svfiprintf_r+0x1c0>
 80066b8:	0803ba20 	.word	0x0803ba20
 80066bc:	0803ba2a 	.word	0x0803ba2a
 80066c0:	00000000 	.word	0x00000000
 80066c4:	0800641d 	.word	0x0800641d
 80066c8:	0803ba26 	.word	0x0803ba26

080066cc <_printf_common>:
 80066cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d0:	4616      	mov	r6, r2
 80066d2:	4699      	mov	r9, r3
 80066d4:	688a      	ldr	r2, [r1, #8]
 80066d6:	690b      	ldr	r3, [r1, #16]
 80066d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066dc:	4293      	cmp	r3, r2
 80066de:	bfb8      	it	lt
 80066e0:	4613      	movlt	r3, r2
 80066e2:	6033      	str	r3, [r6, #0]
 80066e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066e8:	4607      	mov	r7, r0
 80066ea:	460c      	mov	r4, r1
 80066ec:	b10a      	cbz	r2, 80066f2 <_printf_common+0x26>
 80066ee:	3301      	adds	r3, #1
 80066f0:	6033      	str	r3, [r6, #0]
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	0699      	lsls	r1, r3, #26
 80066f6:	bf42      	ittt	mi
 80066f8:	6833      	ldrmi	r3, [r6, #0]
 80066fa:	3302      	addmi	r3, #2
 80066fc:	6033      	strmi	r3, [r6, #0]
 80066fe:	6825      	ldr	r5, [r4, #0]
 8006700:	f015 0506 	ands.w	r5, r5, #6
 8006704:	d106      	bne.n	8006714 <_printf_common+0x48>
 8006706:	f104 0a19 	add.w	sl, r4, #25
 800670a:	68e3      	ldr	r3, [r4, #12]
 800670c:	6832      	ldr	r2, [r6, #0]
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	42ab      	cmp	r3, r5
 8006712:	dc26      	bgt.n	8006762 <_printf_common+0x96>
 8006714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006718:	1e13      	subs	r3, r2, #0
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	bf18      	it	ne
 800671e:	2301      	movne	r3, #1
 8006720:	0692      	lsls	r2, r2, #26
 8006722:	d42b      	bmi.n	800677c <_printf_common+0xb0>
 8006724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006728:	4649      	mov	r1, r9
 800672a:	4638      	mov	r0, r7
 800672c:	47c0      	blx	r8
 800672e:	3001      	adds	r0, #1
 8006730:	d01e      	beq.n	8006770 <_printf_common+0xa4>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	6922      	ldr	r2, [r4, #16]
 8006736:	f003 0306 	and.w	r3, r3, #6
 800673a:	2b04      	cmp	r3, #4
 800673c:	bf02      	ittt	eq
 800673e:	68e5      	ldreq	r5, [r4, #12]
 8006740:	6833      	ldreq	r3, [r6, #0]
 8006742:	1aed      	subeq	r5, r5, r3
 8006744:	68a3      	ldr	r3, [r4, #8]
 8006746:	bf0c      	ite	eq
 8006748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800674c:	2500      	movne	r5, #0
 800674e:	4293      	cmp	r3, r2
 8006750:	bfc4      	itt	gt
 8006752:	1a9b      	subgt	r3, r3, r2
 8006754:	18ed      	addgt	r5, r5, r3
 8006756:	2600      	movs	r6, #0
 8006758:	341a      	adds	r4, #26
 800675a:	42b5      	cmp	r5, r6
 800675c:	d11a      	bne.n	8006794 <_printf_common+0xc8>
 800675e:	2000      	movs	r0, #0
 8006760:	e008      	b.n	8006774 <_printf_common+0xa8>
 8006762:	2301      	movs	r3, #1
 8006764:	4652      	mov	r2, sl
 8006766:	4649      	mov	r1, r9
 8006768:	4638      	mov	r0, r7
 800676a:	47c0      	blx	r8
 800676c:	3001      	adds	r0, #1
 800676e:	d103      	bne.n	8006778 <_printf_common+0xac>
 8006770:	f04f 30ff 	mov.w	r0, #4294967295
 8006774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006778:	3501      	adds	r5, #1
 800677a:	e7c6      	b.n	800670a <_printf_common+0x3e>
 800677c:	18e1      	adds	r1, r4, r3
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	2030      	movs	r0, #48	; 0x30
 8006782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006786:	4422      	add	r2, r4
 8006788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800678c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006790:	3302      	adds	r3, #2
 8006792:	e7c7      	b.n	8006724 <_printf_common+0x58>
 8006794:	2301      	movs	r3, #1
 8006796:	4622      	mov	r2, r4
 8006798:	4649      	mov	r1, r9
 800679a:	4638      	mov	r0, r7
 800679c:	47c0      	blx	r8
 800679e:	3001      	adds	r0, #1
 80067a0:	d0e6      	beq.n	8006770 <_printf_common+0xa4>
 80067a2:	3601      	adds	r6, #1
 80067a4:	e7d9      	b.n	800675a <_printf_common+0x8e>
	...

080067a8 <_printf_i>:
 80067a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067ac:	7e0f      	ldrb	r7, [r1, #24]
 80067ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067b0:	2f78      	cmp	r7, #120	; 0x78
 80067b2:	4691      	mov	r9, r2
 80067b4:	4680      	mov	r8, r0
 80067b6:	460c      	mov	r4, r1
 80067b8:	469a      	mov	sl, r3
 80067ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067be:	d807      	bhi.n	80067d0 <_printf_i+0x28>
 80067c0:	2f62      	cmp	r7, #98	; 0x62
 80067c2:	d80a      	bhi.n	80067da <_printf_i+0x32>
 80067c4:	2f00      	cmp	r7, #0
 80067c6:	f000 80d4 	beq.w	8006972 <_printf_i+0x1ca>
 80067ca:	2f58      	cmp	r7, #88	; 0x58
 80067cc:	f000 80c0 	beq.w	8006950 <_printf_i+0x1a8>
 80067d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067d8:	e03a      	b.n	8006850 <_printf_i+0xa8>
 80067da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067de:	2b15      	cmp	r3, #21
 80067e0:	d8f6      	bhi.n	80067d0 <_printf_i+0x28>
 80067e2:	a101      	add	r1, pc, #4	; (adr r1, 80067e8 <_printf_i+0x40>)
 80067e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067e8:	08006841 	.word	0x08006841
 80067ec:	08006855 	.word	0x08006855
 80067f0:	080067d1 	.word	0x080067d1
 80067f4:	080067d1 	.word	0x080067d1
 80067f8:	080067d1 	.word	0x080067d1
 80067fc:	080067d1 	.word	0x080067d1
 8006800:	08006855 	.word	0x08006855
 8006804:	080067d1 	.word	0x080067d1
 8006808:	080067d1 	.word	0x080067d1
 800680c:	080067d1 	.word	0x080067d1
 8006810:	080067d1 	.word	0x080067d1
 8006814:	08006959 	.word	0x08006959
 8006818:	08006881 	.word	0x08006881
 800681c:	08006913 	.word	0x08006913
 8006820:	080067d1 	.word	0x080067d1
 8006824:	080067d1 	.word	0x080067d1
 8006828:	0800697b 	.word	0x0800697b
 800682c:	080067d1 	.word	0x080067d1
 8006830:	08006881 	.word	0x08006881
 8006834:	080067d1 	.word	0x080067d1
 8006838:	080067d1 	.word	0x080067d1
 800683c:	0800691b 	.word	0x0800691b
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	1d1a      	adds	r2, r3, #4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	602a      	str	r2, [r5, #0]
 8006848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800684c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006850:	2301      	movs	r3, #1
 8006852:	e09f      	b.n	8006994 <_printf_i+0x1ec>
 8006854:	6820      	ldr	r0, [r4, #0]
 8006856:	682b      	ldr	r3, [r5, #0]
 8006858:	0607      	lsls	r7, r0, #24
 800685a:	f103 0104 	add.w	r1, r3, #4
 800685e:	6029      	str	r1, [r5, #0]
 8006860:	d501      	bpl.n	8006866 <_printf_i+0xbe>
 8006862:	681e      	ldr	r6, [r3, #0]
 8006864:	e003      	b.n	800686e <_printf_i+0xc6>
 8006866:	0646      	lsls	r6, r0, #25
 8006868:	d5fb      	bpl.n	8006862 <_printf_i+0xba>
 800686a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800686e:	2e00      	cmp	r6, #0
 8006870:	da03      	bge.n	800687a <_printf_i+0xd2>
 8006872:	232d      	movs	r3, #45	; 0x2d
 8006874:	4276      	negs	r6, r6
 8006876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800687a:	485a      	ldr	r0, [pc, #360]	; (80069e4 <_printf_i+0x23c>)
 800687c:	230a      	movs	r3, #10
 800687e:	e012      	b.n	80068a6 <_printf_i+0xfe>
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	1d19      	adds	r1, r3, #4
 8006886:	6029      	str	r1, [r5, #0]
 8006888:	0605      	lsls	r5, r0, #24
 800688a:	d501      	bpl.n	8006890 <_printf_i+0xe8>
 800688c:	681e      	ldr	r6, [r3, #0]
 800688e:	e002      	b.n	8006896 <_printf_i+0xee>
 8006890:	0641      	lsls	r1, r0, #25
 8006892:	d5fb      	bpl.n	800688c <_printf_i+0xe4>
 8006894:	881e      	ldrh	r6, [r3, #0]
 8006896:	4853      	ldr	r0, [pc, #332]	; (80069e4 <_printf_i+0x23c>)
 8006898:	2f6f      	cmp	r7, #111	; 0x6f
 800689a:	bf0c      	ite	eq
 800689c:	2308      	moveq	r3, #8
 800689e:	230a      	movne	r3, #10
 80068a0:	2100      	movs	r1, #0
 80068a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068a6:	6865      	ldr	r5, [r4, #4]
 80068a8:	60a5      	str	r5, [r4, #8]
 80068aa:	2d00      	cmp	r5, #0
 80068ac:	bfa2      	ittt	ge
 80068ae:	6821      	ldrge	r1, [r4, #0]
 80068b0:	f021 0104 	bicge.w	r1, r1, #4
 80068b4:	6021      	strge	r1, [r4, #0]
 80068b6:	b90e      	cbnz	r6, 80068bc <_printf_i+0x114>
 80068b8:	2d00      	cmp	r5, #0
 80068ba:	d04b      	beq.n	8006954 <_printf_i+0x1ac>
 80068bc:	4615      	mov	r5, r2
 80068be:	fbb6 f1f3 	udiv	r1, r6, r3
 80068c2:	fb03 6711 	mls	r7, r3, r1, r6
 80068c6:	5dc7      	ldrb	r7, [r0, r7]
 80068c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068cc:	4637      	mov	r7, r6
 80068ce:	42bb      	cmp	r3, r7
 80068d0:	460e      	mov	r6, r1
 80068d2:	d9f4      	bls.n	80068be <_printf_i+0x116>
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d10b      	bne.n	80068f0 <_printf_i+0x148>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	07de      	lsls	r6, r3, #31
 80068dc:	d508      	bpl.n	80068f0 <_printf_i+0x148>
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	6861      	ldr	r1, [r4, #4]
 80068e2:	4299      	cmp	r1, r3
 80068e4:	bfde      	ittt	le
 80068e6:	2330      	movle	r3, #48	; 0x30
 80068e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068f0:	1b52      	subs	r2, r2, r5
 80068f2:	6122      	str	r2, [r4, #16]
 80068f4:	f8cd a000 	str.w	sl, [sp]
 80068f8:	464b      	mov	r3, r9
 80068fa:	aa03      	add	r2, sp, #12
 80068fc:	4621      	mov	r1, r4
 80068fe:	4640      	mov	r0, r8
 8006900:	f7ff fee4 	bl	80066cc <_printf_common>
 8006904:	3001      	adds	r0, #1
 8006906:	d14a      	bne.n	800699e <_printf_i+0x1f6>
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	b004      	add	sp, #16
 800690e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	f043 0320 	orr.w	r3, r3, #32
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	4833      	ldr	r0, [pc, #204]	; (80069e8 <_printf_i+0x240>)
 800691c:	2778      	movs	r7, #120	; 0x78
 800691e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	6829      	ldr	r1, [r5, #0]
 8006926:	061f      	lsls	r7, r3, #24
 8006928:	f851 6b04 	ldr.w	r6, [r1], #4
 800692c:	d402      	bmi.n	8006934 <_printf_i+0x18c>
 800692e:	065f      	lsls	r7, r3, #25
 8006930:	bf48      	it	mi
 8006932:	b2b6      	uxthmi	r6, r6
 8006934:	07df      	lsls	r7, r3, #31
 8006936:	bf48      	it	mi
 8006938:	f043 0320 	orrmi.w	r3, r3, #32
 800693c:	6029      	str	r1, [r5, #0]
 800693e:	bf48      	it	mi
 8006940:	6023      	strmi	r3, [r4, #0]
 8006942:	b91e      	cbnz	r6, 800694c <_printf_i+0x1a4>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	f023 0320 	bic.w	r3, r3, #32
 800694a:	6023      	str	r3, [r4, #0]
 800694c:	2310      	movs	r3, #16
 800694e:	e7a7      	b.n	80068a0 <_printf_i+0xf8>
 8006950:	4824      	ldr	r0, [pc, #144]	; (80069e4 <_printf_i+0x23c>)
 8006952:	e7e4      	b.n	800691e <_printf_i+0x176>
 8006954:	4615      	mov	r5, r2
 8006956:	e7bd      	b.n	80068d4 <_printf_i+0x12c>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	6826      	ldr	r6, [r4, #0]
 800695c:	6961      	ldr	r1, [r4, #20]
 800695e:	1d18      	adds	r0, r3, #4
 8006960:	6028      	str	r0, [r5, #0]
 8006962:	0635      	lsls	r5, r6, #24
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	d501      	bpl.n	800696c <_printf_i+0x1c4>
 8006968:	6019      	str	r1, [r3, #0]
 800696a:	e002      	b.n	8006972 <_printf_i+0x1ca>
 800696c:	0670      	lsls	r0, r6, #25
 800696e:	d5fb      	bpl.n	8006968 <_printf_i+0x1c0>
 8006970:	8019      	strh	r1, [r3, #0]
 8006972:	2300      	movs	r3, #0
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	4615      	mov	r5, r2
 8006978:	e7bc      	b.n	80068f4 <_printf_i+0x14c>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	1d1a      	adds	r2, r3, #4
 800697e:	602a      	str	r2, [r5, #0]
 8006980:	681d      	ldr	r5, [r3, #0]
 8006982:	6862      	ldr	r2, [r4, #4]
 8006984:	2100      	movs	r1, #0
 8006986:	4628      	mov	r0, r5
 8006988:	f7f9 fc22 	bl	80001d0 <memchr>
 800698c:	b108      	cbz	r0, 8006992 <_printf_i+0x1ea>
 800698e:	1b40      	subs	r0, r0, r5
 8006990:	6060      	str	r0, [r4, #4]
 8006992:	6863      	ldr	r3, [r4, #4]
 8006994:	6123      	str	r3, [r4, #16]
 8006996:	2300      	movs	r3, #0
 8006998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800699c:	e7aa      	b.n	80068f4 <_printf_i+0x14c>
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	462a      	mov	r2, r5
 80069a2:	4649      	mov	r1, r9
 80069a4:	4640      	mov	r0, r8
 80069a6:	47d0      	blx	sl
 80069a8:	3001      	adds	r0, #1
 80069aa:	d0ad      	beq.n	8006908 <_printf_i+0x160>
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	079b      	lsls	r3, r3, #30
 80069b0:	d413      	bmi.n	80069da <_printf_i+0x232>
 80069b2:	68e0      	ldr	r0, [r4, #12]
 80069b4:	9b03      	ldr	r3, [sp, #12]
 80069b6:	4298      	cmp	r0, r3
 80069b8:	bfb8      	it	lt
 80069ba:	4618      	movlt	r0, r3
 80069bc:	e7a6      	b.n	800690c <_printf_i+0x164>
 80069be:	2301      	movs	r3, #1
 80069c0:	4632      	mov	r2, r6
 80069c2:	4649      	mov	r1, r9
 80069c4:	4640      	mov	r0, r8
 80069c6:	47d0      	blx	sl
 80069c8:	3001      	adds	r0, #1
 80069ca:	d09d      	beq.n	8006908 <_printf_i+0x160>
 80069cc:	3501      	adds	r5, #1
 80069ce:	68e3      	ldr	r3, [r4, #12]
 80069d0:	9903      	ldr	r1, [sp, #12]
 80069d2:	1a5b      	subs	r3, r3, r1
 80069d4:	42ab      	cmp	r3, r5
 80069d6:	dcf2      	bgt.n	80069be <_printf_i+0x216>
 80069d8:	e7eb      	b.n	80069b2 <_printf_i+0x20a>
 80069da:	2500      	movs	r5, #0
 80069dc:	f104 0619 	add.w	r6, r4, #25
 80069e0:	e7f5      	b.n	80069ce <_printf_i+0x226>
 80069e2:	bf00      	nop
 80069e4:	0803ba31 	.word	0x0803ba31
 80069e8:	0803ba42 	.word	0x0803ba42

080069ec <memmove>:
 80069ec:	4288      	cmp	r0, r1
 80069ee:	b510      	push	{r4, lr}
 80069f0:	eb01 0402 	add.w	r4, r1, r2
 80069f4:	d902      	bls.n	80069fc <memmove+0x10>
 80069f6:	4284      	cmp	r4, r0
 80069f8:	4623      	mov	r3, r4
 80069fa:	d807      	bhi.n	8006a0c <memmove+0x20>
 80069fc:	1e43      	subs	r3, r0, #1
 80069fe:	42a1      	cmp	r1, r4
 8006a00:	d008      	beq.n	8006a14 <memmove+0x28>
 8006a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a0a:	e7f8      	b.n	80069fe <memmove+0x12>
 8006a0c:	4402      	add	r2, r0
 8006a0e:	4601      	mov	r1, r0
 8006a10:	428a      	cmp	r2, r1
 8006a12:	d100      	bne.n	8006a16 <memmove+0x2a>
 8006a14:	bd10      	pop	{r4, pc}
 8006a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a1e:	e7f7      	b.n	8006a10 <memmove+0x24>

08006a20 <_sbrk_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4d06      	ldr	r5, [pc, #24]	; (8006a3c <_sbrk_r+0x1c>)
 8006a24:	2300      	movs	r3, #0
 8006a26:	4604      	mov	r4, r0
 8006a28:	4608      	mov	r0, r1
 8006a2a:	602b      	str	r3, [r5, #0]
 8006a2c:	f7fa fd0e 	bl	800144c <_sbrk>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_sbrk_r+0x1a>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_sbrk_r+0x1a>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	20000514 	.word	0x20000514

08006a40 <memcpy>:
 8006a40:	440a      	add	r2, r1
 8006a42:	4291      	cmp	r1, r2
 8006a44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a48:	d100      	bne.n	8006a4c <memcpy+0xc>
 8006a4a:	4770      	bx	lr
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a56:	4291      	cmp	r1, r2
 8006a58:	d1f9      	bne.n	8006a4e <memcpy+0xe>
 8006a5a:	bd10      	pop	{r4, pc}

08006a5c <_realloc_r>:
 8006a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a60:	4680      	mov	r8, r0
 8006a62:	4614      	mov	r4, r2
 8006a64:	460e      	mov	r6, r1
 8006a66:	b921      	cbnz	r1, 8006a72 <_realloc_r+0x16>
 8006a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	f7ff bc49 	b.w	8006304 <_malloc_r>
 8006a72:	b92a      	cbnz	r2, 8006a80 <_realloc_r+0x24>
 8006a74:	f7ff fbda 	bl	800622c <_free_r>
 8006a78:	4625      	mov	r5, r4
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a80:	f000 f81b 	bl	8006aba <_malloc_usable_size_r>
 8006a84:	4284      	cmp	r4, r0
 8006a86:	4607      	mov	r7, r0
 8006a88:	d802      	bhi.n	8006a90 <_realloc_r+0x34>
 8006a8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a8e:	d812      	bhi.n	8006ab6 <_realloc_r+0x5a>
 8006a90:	4621      	mov	r1, r4
 8006a92:	4640      	mov	r0, r8
 8006a94:	f7ff fc36 	bl	8006304 <_malloc_r>
 8006a98:	4605      	mov	r5, r0
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d0ed      	beq.n	8006a7a <_realloc_r+0x1e>
 8006a9e:	42bc      	cmp	r4, r7
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	bf28      	it	cs
 8006aa6:	463a      	movcs	r2, r7
 8006aa8:	f7ff ffca 	bl	8006a40 <memcpy>
 8006aac:	4631      	mov	r1, r6
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f7ff fbbc 	bl	800622c <_free_r>
 8006ab4:	e7e1      	b.n	8006a7a <_realloc_r+0x1e>
 8006ab6:	4635      	mov	r5, r6
 8006ab8:	e7df      	b.n	8006a7a <_realloc_r+0x1e>

08006aba <_malloc_usable_size_r>:
 8006aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006abe:	1f18      	subs	r0, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bfbc      	itt	lt
 8006ac4:	580b      	ldrlt	r3, [r1, r0]
 8006ac6:	18c0      	addlt	r0, r0, r3
 8006ac8:	4770      	bx	lr
	...

08006acc <_init>:
 8006acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ace:	bf00      	nop
 8006ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad2:	bc08      	pop	{r3}
 8006ad4:	469e      	mov	lr, r3
 8006ad6:	4770      	bx	lr

08006ad8 <_fini>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr
