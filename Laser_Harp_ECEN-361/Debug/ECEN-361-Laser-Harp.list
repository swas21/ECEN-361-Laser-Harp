
ECEN-361-Laser-Harp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00037680  08004c70  08004c70  00005c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803c2f0  0803c2f0  0003e194  2**0
                  CONTENTS
  4 .ARM          00000008  0803c2f0  0803c2f0  0003d2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803c2f8  0803c2f8  0003e194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803c2f8  0803c2f8  0003d2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803c2fc  0803c2fc  0003d2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0803c300  0003e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000198  0803c494  0003e198  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0803c494  0003e490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003e194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026090  00000000  00000000  0003e1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e42  00000000  00000000  00064254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00013667  00000000  00000000  00068096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  0007b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000207b  00000000  00000000  0007ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002839f  00000000  00000000  0007eaeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027828  00000000  00000000  000a6e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8504  00000000  00000000  000ce6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c6bb6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038ec  00000000  00000000  001c6bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009b  00000000  00000000  001ca4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000198 	.word	0x20000198
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c58 	.word	0x08004c58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000019c 	.word	0x2000019c
 80001c4:	08004c58 	.word	0x08004c58

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b510      	push	{r4, lr}
 80004ca:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004cc:	2244      	movs	r2, #68	@ 0x44
 80004ce:	2100      	movs	r1, #0
 80004d0:	a806      	add	r0, sp, #24
 80004d2:	f004 fb81 	bl	8004bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80004e0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80004e4:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004e6:	f002 fc91 	bl	8002e0c <HAL_PWREx_ControlVoltageScaling>
 80004ea:	b108      	cbz	r0, 80004f0 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ee:	e7fe      	b.n	80004ee <SystemClock_Config+0x26>
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004f0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8000548 <SystemClock_Config+0x80>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004f8:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fa:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fc:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000500:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000502:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000504:	220a      	movs	r2, #10
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000506:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800050c:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800050e:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000512:	9112      	str	r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000514:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000516:	f002 fd59 	bl	8002fcc <HAL_RCC_OscConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	b108      	cbz	r0, 8000522 <SystemClock_Config+0x5a>
 800051e:	b672      	cpsid	i
  while (1)
 8000520:	e7fe      	b.n	8000520 <SystemClock_Config+0x58>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000522:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000524:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000526:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000528:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052c:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000530:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000534:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000536:	f003 f829 	bl	800358c <HAL_RCC_ClockConfig>
 800053a:	b108      	cbz	r0, 8000540 <SystemClock_Config+0x78>
 800053c:	b672      	cpsid	i
  while (1)
 800053e:	e7fe      	b.n	800053e <SystemClock_Config+0x76>
}
 8000540:	b018      	add	sp, #96	@ 0x60
 8000542:	bd10      	pop	{r4, pc}
 8000544:	f3af 8000 	nop.w
 8000548:	00000007 	.word	0x00000007
 800054c:	00000002 	.word	0x00000002

08000550 <main>:
{
 8000550:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	2400      	movs	r4, #0
{
 8000554:	b093      	sub	sp, #76	@ 0x4c
  HAL_Init();
 8000556:	f001 fe0d 	bl	8002174 <HAL_Init>
  SystemClock_Config();
 800055a:	f7ff ffb5 	bl	80004c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	4b94      	ldr	r3, [pc, #592]	@ (80007b4 <main+0x264>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000568:	4893      	ldr	r0, [pc, #588]	@ (80007b8 <main+0x268>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	f042 0204 	orr.w	r2, r2, #4
 800056e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000570:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000572:	f002 0204 	and.w	r2, r2, #4
 8000576:	9201      	str	r2, [sp, #4]
 8000578:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000580:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000582:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000584:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000588:	9202      	str	r2, [sp, #8]
 800058a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800058e:	f042 0201 	orr.w	r2, r2, #1
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000594:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000596:	f002 0201 	and.w	r2, r2, #1
 800059a:	9203      	str	r2, [sp, #12]
 800059c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005a0:	f042 0202 	orr.w	r2, r2, #2
 80005a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80005a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a8:	f003 0302 	and.w	r3, r3, #2
 80005ac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_4_Pin
 80005ae:	f640 72ff 	movw	r2, #4095	@ 0xfff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_4_Pin
 80005b4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005bc:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f001 fffe 	bl	80025c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TOP_BTN_Pin|BOTTOM_BTN_Pin|LEFT_BTN_Pin|RIGHT_BTN_Pin;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ca:	487c      	ldr	r0, [pc, #496]	@ (80007bc <main+0x26c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005cc:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = TOP_BTN_Pin|BOTTOM_BTN_Pin|LEFT_BTN_Pin|RIGHT_BTN_Pin;
 80005d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	f001 fff4 	bl	80025c0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005d8:	4622      	mov	r2, r4
 80005da:	4621      	mov	r1, r4
 80005dc:	2006      	movs	r0, #6
 80005de:	f001 fe17 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005e2:	2006      	movs	r0, #6
 80005e4:	f001 fe50 	bl	8002288 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80005e8:	4622      	mov	r2, r4
 80005ea:	4621      	mov	r1, r4
 80005ec:	2007      	movs	r0, #7
 80005ee:	f001 fe0f 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005f2:	2007      	movs	r0, #7
 80005f4:	f001 fe48 	bl	8002288 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005f8:	4622      	mov	r2, r4
 80005fa:	4621      	mov	r1, r4
 80005fc:	2008      	movs	r0, #8
 80005fe:	f001 fe07 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000602:	2008      	movs	r0, #8
 8000604:	f001 fe40 	bl	8002288 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000608:	4622      	mov	r2, r4
 800060a:	4621      	mov	r1, r4
 800060c:	2009      	movs	r0, #9
 800060e:	f001 fdff 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000612:	2009      	movs	r0, #9
 8000614:	f001 fe38 	bl	8002288 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000618:	4622      	mov	r2, r4
 800061a:	4621      	mov	r1, r4
 800061c:	200a      	movs	r0, #10
 800061e:	f001 fdf7 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000622:	200a      	movs	r0, #10
 8000624:	f001 fe30 	bl	8002288 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000628:	4622      	mov	r2, r4
 800062a:	4621      	mov	r1, r4
 800062c:	2017      	movs	r0, #23
 800062e:	f001 fdef 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000632:	2017      	movs	r0, #23
 8000634:	f001 fe28 	bl	8002288 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000638:	4622      	mov	r2, r4
 800063a:	4621      	mov	r1, r4
 800063c:	2028      	movs	r0, #40	@ 0x28
 800063e:	f001 fde7 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000642:	2028      	movs	r0, #40	@ 0x28
 8000644:	f001 fe20 	bl	8002288 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8000648:	485d      	ldr	r0, [pc, #372]	@ (80007c0 <main+0x270>)
  huart2.Init.BaudRate = 115200;
 800064a:	4a5e      	ldr	r2, [pc, #376]	@ (80007c4 <main+0x274>)
 800064c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000650:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000656:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800065a:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065e:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000662:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	f004 fa83 	bl	8004b70 <HAL_UART_Init>
 800066a:	b108      	cbz	r0, 8000670 <main+0x120>
 800066c:	b672      	cpsid	i
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0x11e>
  hdac1.Instance = DAC1;
 8000670:	4c55      	ldr	r4, [pc, #340]	@ (80007c8 <main+0x278>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000672:	4601      	mov	r1, r0
 8000674:	2224      	movs	r2, #36	@ 0x24
 8000676:	a808      	add	r0, sp, #32
 8000678:	f004 faae 	bl	8004bd8 <memset>
  hdac1.Instance = DAC1;
 800067c:	4b53      	ldr	r3, [pc, #332]	@ (80007cc <main+0x27c>)
 800067e:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000680:	4620      	mov	r0, r4
 8000682:	f001 fe29 	bl	80022d8 <HAL_DAC_Init>
 8000686:	b108      	cbz	r0, 800068c <main+0x13c>
 8000688:	b672      	cpsid	i
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x13a>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800068c:	e9cd 0008 	strd	r0, r0, [sp, #32]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000690:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000694:	4602      	mov	r2, r0
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000696:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000698:	a908      	add	r1, sp, #32
 800069a:	4620      	mov	r0, r4
 800069c:	f001 feae 	bl	80023fc <HAL_DAC_ConfigChannel>
 80006a0:	b108      	cbz	r0, 80006a6 <main+0x156>
 80006a2:	b672      	cpsid	i
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <main+0x154>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006a6:	2210      	movs	r2, #16
 80006a8:	a908      	add	r1, sp, #32
 80006aa:	4620      	mov	r0, r4
 80006ac:	f001 fea6 	bl	80023fc <HAL_DAC_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	b9c0      	cbnz	r0, 80006e6 <main+0x196>
  htim15.Instance = TIM15;
 80006b4:	4c46      	ldr	r4, [pc, #280]	@ (80007d0 <main+0x280>)
 80006b6:	4a47      	ldr	r2, [pc, #284]	@ (80007d4 <main+0x284>)
 80006b8:	6022      	str	r2, [r4, #0]
  htim15.Init.Prescaler = 80-1;
 80006ba:	224f      	movs	r2, #79	@ 0x4f
 80006bc:	6062      	str	r2, [r4, #4]
  htim15.Init.Period = 9;
 80006be:	2209      	movs	r2, #9
 80006c0:	e9c4 0202 	strd	r0, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c4:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80006c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  htim15.Init.RepetitionCounter = 0;
 80006cc:	e9c4 0004 	strd	r0, r0, [r4, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	9005      	str	r0, [sp, #20]
  htim15.Init.RepetitionCounter = 0;
 80006d2:	2280      	movs	r2, #128	@ 0x80
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80006d4:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d6:	e9cd 3306 	strd	r3, r3, [sp, #24]
  htim15.Init.RepetitionCounter = 0;
 80006da:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80006dc:	f003 fb64 	bl	8003da8 <HAL_TIM_Base_Init>
 80006e0:	b118      	cbz	r0, 80006ea <main+0x19a>
 80006e2:	b672      	cpsid	i
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <main+0x194>
 80006e6:	b672      	cpsid	i
 80006e8:	e7fe      	b.n	80006e8 <main+0x198>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80006ee:	a908      	add	r1, sp, #32
 80006f0:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f2:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80006f4:	f003 fc24 	bl	8003f40 <HAL_TIM_ConfigClockSource>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b108      	cbz	r0, 8000700 <main+0x1b0>
 80006fc:	b672      	cpsid	i
  while (1)
 80006fe:	e7fe      	b.n	80006fe <main+0x1ae>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000700:	a905      	add	r1, sp, #20
 8000702:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000708:	f003 fd78 	bl	80041fc <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	4603      	mov	r3, r0
 800070e:	b108      	cbz	r0, 8000714 <main+0x1c4>
 8000710:	b672      	cpsid	i
  while (1)
 8000712:	e7fe      	b.n	8000712 <main+0x1c2>
  hi2c1.Instance = I2C1;
 8000714:	4c30      	ldr	r4, [pc, #192]	@ (80007d8 <main+0x288>)
  hi2c1.Init.Timing = 0x10909CEC;
 8000716:	4931      	ldr	r1, [pc, #196]	@ (80007dc <main+0x28c>)
 8000718:	4a31      	ldr	r2, [pc, #196]	@ (80007e0 <main+0x290>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x10909CEC;
 800071e:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000722:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072a:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072e:	f002 f92b 	bl	8002988 <HAL_I2C_Init>
 8000732:	4601      	mov	r1, r0
 8000734:	b108      	cbz	r0, 800073a <main+0x1ea>
 8000736:	b672      	cpsid	i
  while (1)
 8000738:	e7fe      	b.n	8000738 <main+0x1e8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073a:	4620      	mov	r0, r4
 800073c:	f002 fb08 	bl	8002d50 <HAL_I2CEx_ConfigAnalogFilter>
 8000740:	4601      	mov	r1, r0
 8000742:	b108      	cbz	r0, 8000748 <main+0x1f8>
 8000744:	b672      	cpsid	i
  while (1)
 8000746:	e7fe      	b.n	8000746 <main+0x1f6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000748:	4620      	mov	r0, r4
 800074a:	f002 fb2b 	bl	8002da4 <HAL_I2CEx_ConfigDigitalFilter>
 800074e:	b108      	cbz	r0, 8000754 <main+0x204>
 8000750:	b672      	cpsid	i
  while (1)
 8000752:	e7fe      	b.n	8000752 <main+0x202>
  htim16.Instance = TIM16;
 8000754:	4c23      	ldr	r4, [pc, #140]	@ (80007e4 <main+0x294>)
 8000756:	4824      	ldr	r0, [pc, #144]	@ (80007e8 <main+0x298>)
  htim16.Init.Prescaler = 3200-1;
 8000758:	f640 427f 	movw	r2, #3199	@ 0xc7f
 800075c:	e9c4 0200 	strd	r0, r2, [r4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	2300      	movs	r3, #0
  htim16.Init.Period = 100-1;
 8000762:	2163      	movs	r1, #99	@ 0x63
  htim16.Init.RepetitionCounter = 0;
 8000764:	2280      	movs	r2, #128	@ 0x80
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000766:	4620      	mov	r0, r4
  htim16.Init.Period = 100-1;
 8000768:	e9c4 3102 	strd	r3, r1, [r4, #8]
  htim16.Init.RepetitionCounter = 0;
 800076c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8000770:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000772:	f003 fb19 	bl	8003da8 <HAL_TIM_Base_Init>
 8000776:	4605      	mov	r5, r0
 8000778:	b108      	cbz	r0, 800077e <main+0x22e>
 800077a:	b672      	cpsid	i
  while (1)
 800077c:	e7fe      	b.n	800077c <main+0x22c>
  HAL_TIM_Base_Start_IT(&htim15); // Start the Music Interrupt Timer
 800077e:	4814      	ldr	r0, [pc, #80]	@ (80007d0 <main+0x280>)
 8000780:	f003 fba0 	bl	8003ec4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16); // Star the Sustain Interrupt Timer
 8000784:	4620      	mov	r0, r4
 8000786:	f003 fb9d 	bl	8003ec4 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Start one of the dac channels
 800078a:	2110      	movs	r1, #16
 800078c:	480e      	ldr	r0, [pc, #56]	@ (80007c8 <main+0x278>)
 800078e:	f001 fdb9 	bl	8002304 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start one of the dac channels
 8000792:	4629      	mov	r1, r5
 8000794:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <main+0x278>)
 8000796:	f001 fdb5 	bl	8002304 <HAL_DAC_Start>
  tranposition__increment_octave();
 800079a:	f001 fa5f 	bl	8001c5c <tranposition__increment_octave>
  menu_init();
 800079e:	f000 f94f 	bl	8000a40 <menu_init>
  lcd_init();
 80007a2:	f000 fac9 	bl	8000d38 <lcd_init>
	  poll_buttons();
 80007a6:	f000 fa27 	bl	8000bf8 <poll_buttons>
	  HAL_Delay(50);
 80007aa:	2032      	movs	r0, #50	@ 0x32
 80007ac:	f001 fd0c 	bl	80021c8 <HAL_Delay>
  while (1)
 80007b0:	e7f9      	b.n	80007a6 <main+0x256>
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000800 	.word	0x48000800
 80007bc:	48000400 	.word	0x48000400
 80007c0:	20000244 	.word	0x20000244
 80007c4:	40004400 	.word	0x40004400
 80007c8:	200003c0 	.word	0x200003c0
 80007cc:	40007400 	.word	0x40007400
 80007d0:	20000320 	.word	0x20000320
 80007d4:	40014000 	.word	0x40014000
 80007d8:	2000036c 	.word	0x2000036c
 80007dc:	40005400 	.word	0x40005400
 80007e0:	10909cec 	.word	0x10909cec
 80007e4:	200002d0 	.word	0x200002d0
 80007e8:	40014400 	.word	0x40014400

080007ec <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin) {
 80007ec:	2840      	cmp	r0, #64	@ 0x40
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007ee:	b508      	push	{r3, lr}
 80007f0:	4601      	mov	r1, r0
	switch (GPIO_Pin) {
 80007f2:	f000 80a0 	beq.w	8000936 <HAL_GPIO_EXTI_Callback+0x14a>
 80007f6:	d817      	bhi.n	8000828 <HAL_GPIO_EXTI_Callback+0x3c>
 80007f8:	1e41      	subs	r1, r0, #1
 80007fa:	b28b      	uxth	r3, r1
 80007fc:	2b1f      	cmp	r3, #31
 80007fe:	d829      	bhi.n	8000854 <HAL_GPIO_EXTI_Callback+0x68>
 8000800:	291f      	cmp	r1, #31
 8000802:	d827      	bhi.n	8000854 <HAL_GPIO_EXTI_Callback+0x68>
 8000804:	e8df f001 	tbb	[pc, r1]
 8000808:	5e265245 	.word	0x5e265245
 800080c:	6a262626 	.word	0x6a262626
 8000810:	26262626 	.word	0x26262626
 8000814:	76262626 	.word	0x76262626
 8000818:	26262626 	.word	0x26262626
 800081c:	26262626 	.word	0x26262626
 8000820:	26262626 	.word	0x26262626
 8000824:	38262626 	.word	0x38262626
 8000828:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800082c:	f000 808d 	beq.w	800094a <HAL_GPIO_EXTI_Callback+0x15e>
 8000830:	d911      	bls.n	8000856 <HAL_GPIO_EXTI_Callback+0x6a>
 8000832:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8000836:	d069      	beq.n	800090c <HAL_GPIO_EXTI_Callback+0x120>
 8000838:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 800083c:	d10a      	bne.n	8000854 <HAL_GPIO_EXTI_Callback+0x68>
		if(HAL_GPIO_ReadPin(NOTE_12_GPIO_Port, NOTE_12_Pin) == 0)
 800083e:	4860      	ldr	r0, [pc, #384]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000840:	f001 ffe2 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_B] = 1;
 8000844:	495f      	ldr	r1, [pc, #380]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_B = 1;
 8000846:	4a60      	ldr	r2, [pc, #384]	@ (80009c8 <HAL_GPIO_EXTI_Callback+0x1dc>)
		if(HAL_GPIO_ReadPin(NOTE_12_GPIO_Port, NOTE_12_Pin) == 0)
 8000848:	2800      	cmp	r0, #0
 800084a:	f040 8098 	bne.w	800097e <HAL_GPIO_EXTI_Callback+0x192>
			active[NOTE_B] = 1;
 800084e:	2301      	movs	r3, #1
 8000850:	62cb      	str	r3, [r1, #44]	@ 0x2c
			sustain_B = 1;
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bd08      	pop	{r3, pc}
	switch (GPIO_Pin) {
 8000856:	2880      	cmp	r0, #128	@ 0x80
 8000858:	d063      	beq.n	8000922 <HAL_GPIO_EXTI_Callback+0x136>
 800085a:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800085e:	d1f9      	bne.n	8000854 <HAL_GPIO_EXTI_Callback+0x68>
		if(HAL_GPIO_ReadPin(NOTE_9_GPIO_Port, NOTE_9_Pin) == 0)
 8000860:	4857      	ldr	r0, [pc, #348]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000862:	f001 ffd1 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_Gs] = 1;
 8000866:	4957      	ldr	r1, [pc, #348]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_Gs = 1;
 8000868:	4a58      	ldr	r2, [pc, #352]	@ (80009cc <HAL_GPIO_EXTI_Callback+0x1e0>)
		if(HAL_GPIO_ReadPin(NOTE_9_GPIO_Port, NOTE_9_Pin) == 0)
 800086a:	2800      	cmp	r0, #0
 800086c:	f040 808b 	bne.w	8000986 <HAL_GPIO_EXTI_Callback+0x19a>
			active[NOTE_Gs] = 1;
 8000870:	2301      	movs	r3, #1
 8000872:	620b      	str	r3, [r1, #32]
			sustain_Gs = 1;
 8000874:	6013      	str	r3, [r2, #0]
}
 8000876:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(NOTE_6_GPIO_Port, NOTE_6_Pin) == 0)
 8000878:	2120      	movs	r1, #32
 800087a:	4851      	ldr	r0, [pc, #324]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800087c:	f001 ffc4 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_F] = 1;
 8000880:	4950      	ldr	r1, [pc, #320]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_F = 1;
 8000882:	4a53      	ldr	r2, [pc, #332]	@ (80009d0 <HAL_GPIO_EXTI_Callback+0x1e4>)
		if(HAL_GPIO_ReadPin(NOTE_6_GPIO_Port, NOTE_6_Pin) == 0)
 8000884:	2800      	cmp	r0, #0
 8000886:	f040 8096 	bne.w	80009b6 <HAL_GPIO_EXTI_Callback+0x1ca>
			active[NOTE_F] = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	614b      	str	r3, [r1, #20]
			sustain_F = 1;
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(NOTE_1_GPIO_Port, NOTE_1_Pin) == 0)
 8000892:	2101      	movs	r1, #1
 8000894:	484a      	ldr	r0, [pc, #296]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000896:	f001 ffb7 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_C] = 1;
 800089a:	494a      	ldr	r1, [pc, #296]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_C = 1; // set flag for sustaining note. flag is reset in the sustain.c file after ~ 10s.
 800089c:	4a4d      	ldr	r2, [pc, #308]	@ (80009d4 <HAL_GPIO_EXTI_Callback+0x1e8>)
		if(HAL_GPIO_ReadPin(NOTE_1_GPIO_Port, NOTE_1_Pin) == 0)
 800089e:	2800      	cmp	r0, #0
 80008a0:	f040 8085 	bne.w	80009ae <HAL_GPIO_EXTI_Callback+0x1c2>
			active[NOTE_C] = 1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	600b      	str	r3, [r1, #0]
			sustain_C = 1; // set flag for sustaining note. flag is reset in the sustain.c file after ~ 10s.
 80008a8:	6013      	str	r3, [r2, #0]
}
 80008aa:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(NOTE_2_GPIO_Port, NOTE_2_Pin) == 0)
 80008ac:	2102      	movs	r1, #2
 80008ae:	4844      	ldr	r0, [pc, #272]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80008b0:	f001 ffaa 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_Cs] = 1;
 80008b4:	4943      	ldr	r1, [pc, #268]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_Cs = 1;
 80008b6:	4a48      	ldr	r2, [pc, #288]	@ (80009d8 <HAL_GPIO_EXTI_Callback+0x1ec>)
		if(HAL_GPIO_ReadPin(NOTE_2_GPIO_Port, NOTE_2_Pin) == 0)
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d174      	bne.n	80009a6 <HAL_GPIO_EXTI_Callback+0x1ba>
			active[NOTE_Cs] = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	604b      	str	r3, [r1, #4]
			sustain_Cs = 1;
 80008c0:	6013      	str	r3, [r2, #0]
}
 80008c2:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(NOTE_3_GPIO_Port, NOTE_3_Pin) == 0)
 80008c4:	2104      	movs	r1, #4
 80008c6:	483e      	ldr	r0, [pc, #248]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80008c8:	f001 ff9e 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_D] = 1;
 80008cc:	493d      	ldr	r1, [pc, #244]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_D = 1;
 80008ce:	4a43      	ldr	r2, [pc, #268]	@ (80009dc <HAL_GPIO_EXTI_Callback+0x1f0>)
		if(HAL_GPIO_ReadPin(NOTE_3_GPIO_Port, NOTE_3_Pin) == 0)
 80008d0:	2800      	cmp	r0, #0
 80008d2:	d164      	bne.n	800099e <HAL_GPIO_EXTI_Callback+0x1b2>
			active[NOTE_D] = 1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	608b      	str	r3, [r1, #8]
			sustain_D = 1;
 80008d8:	6013      	str	r3, [r2, #0]
}
 80008da:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(NOTE_4_GPIO_Port, NOTE_4_Pin) == 0)
 80008dc:	2108      	movs	r1, #8
 80008de:	4838      	ldr	r0, [pc, #224]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80008e0:	f001 ff92 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_Ds] = 1;
 80008e4:	4937      	ldr	r1, [pc, #220]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_Ds = 1;
 80008e6:	4a3e      	ldr	r2, [pc, #248]	@ (80009e0 <HAL_GPIO_EXTI_Callback+0x1f4>)
		if(HAL_GPIO_ReadPin(NOTE_4_GPIO_Port, NOTE_4_Pin) == 0)
 80008e8:	2800      	cmp	r0, #0
 80008ea:	d154      	bne.n	8000996 <HAL_GPIO_EXTI_Callback+0x1aa>
			active[NOTE_Ds] = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	60cb      	str	r3, [r1, #12]
			sustain_Ds = 1;
 80008f0:	6013      	str	r3, [r2, #0]
}
 80008f2:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(NOTE_5_GPIO_Port, NOTE_5_Pin) == 0)
 80008f4:	2110      	movs	r1, #16
 80008f6:	4832      	ldr	r0, [pc, #200]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80008f8:	f001 ff86 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_E] = 1;
 80008fc:	4931      	ldr	r1, [pc, #196]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_E = 1;
 80008fe:	4a39      	ldr	r2, [pc, #228]	@ (80009e4 <HAL_GPIO_EXTI_Callback+0x1f8>)
		if(HAL_GPIO_ReadPin(NOTE_5_GPIO_Port, NOTE_5_Pin) == 0)
 8000900:	2800      	cmp	r0, #0
 8000902:	d144      	bne.n	800098e <HAL_GPIO_EXTI_Callback+0x1a2>
			active[NOTE_E] = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	610b      	str	r3, [r1, #16]
			sustain_E = 1;
 8000908:	6013      	str	r3, [r2, #0]
}
 800090a:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(NOTE_11_GPIO_Port, NOTE_11_Pin) == 0)
 800090c:	482c      	ldr	r0, [pc, #176]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800090e:	f001 ff7b 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_As] = 1;
 8000912:	492c      	ldr	r1, [pc, #176]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_As = 1;
 8000914:	4a34      	ldr	r2, [pc, #208]	@ (80009e8 <HAL_GPIO_EXTI_Callback+0x1fc>)
		if(HAL_GPIO_ReadPin(NOTE_11_GPIO_Port, NOTE_11_Pin) == 0)
 8000916:	2800      	cmp	r0, #0
 8000918:	d12d      	bne.n	8000976 <HAL_GPIO_EXTI_Callback+0x18a>
			active[NOTE_As] = 1;
 800091a:	2301      	movs	r3, #1
 800091c:	628b      	str	r3, [r1, #40]	@ 0x28
			sustain_As = 1;
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(NOTE_8_GPIO_Port, NOTE_8_Pin) == 0)
 8000922:	4827      	ldr	r0, [pc, #156]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000924:	f001 ff70 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_G] = 1;
 8000928:	4926      	ldr	r1, [pc, #152]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_G = 1;
 800092a:	4a30      	ldr	r2, [pc, #192]	@ (80009ec <HAL_GPIO_EXTI_Callback+0x200>)
		if(HAL_GPIO_ReadPin(NOTE_8_GPIO_Port, NOTE_8_Pin) == 0)
 800092c:	b9f8      	cbnz	r0, 800096e <HAL_GPIO_EXTI_Callback+0x182>
			active[NOTE_G] = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	61cb      	str	r3, [r1, #28]
			sustain_G = 1;
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(NOTE_7_GPIO_Port, NOTE_7_Pin) == 0)
 8000936:	4822      	ldr	r0, [pc, #136]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000938:	f001 ff66 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_Fs] = 1;
 800093c:	4921      	ldr	r1, [pc, #132]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_Fs = 1;
 800093e:	4a2c      	ldr	r2, [pc, #176]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x204>)
		if(HAL_GPIO_ReadPin(NOTE_7_GPIO_Port, NOTE_7_Pin) == 0)
 8000940:	b988      	cbnz	r0, 8000966 <HAL_GPIO_EXTI_Callback+0x17a>
			active[NOTE_Fs] = 1;
 8000942:	2301      	movs	r3, #1
 8000944:	618b      	str	r3, [r1, #24]
			sustain_Fs = 1;
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(NOTE_10_GPIO_Port, NOTE_10_Pin) == 0)
 800094a:	481d      	ldr	r0, [pc, #116]	@ (80009c0 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800094c:	f001 ff5c 	bl	8002808 <HAL_GPIO_ReadPin>
			active[NOTE_A] = 1;
 8000950:	491c      	ldr	r1, [pc, #112]	@ (80009c4 <HAL_GPIO_EXTI_Callback+0x1d8>)
			sustain_A = 1;
 8000952:	4a28      	ldr	r2, [pc, #160]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x208>)
		if(HAL_GPIO_ReadPin(NOTE_10_GPIO_Port, NOTE_10_Pin) == 0)
 8000954:	b918      	cbnz	r0, 800095e <HAL_GPIO_EXTI_Callback+0x172>
			active[NOTE_A] = 1;
 8000956:	2301      	movs	r3, #1
 8000958:	624b      	str	r3, [r1, #36]	@ 0x24
			sustain_A = 1;
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bd08      	pop	{r3, pc}
			active[NOTE_A] = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	624b      	str	r3, [r1, #36]	@ 0x24
			sustain_A = 0;
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bd08      	pop	{r3, pc}
			active[NOTE_Fs] = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	618b      	str	r3, [r1, #24]
			sustain_Fs = 0;
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bd08      	pop	{r3, pc}
			active[NOTE_G] = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	61cb      	str	r3, [r1, #28]
			sustain_G = 0;
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bd08      	pop	{r3, pc}
			active[NOTE_As] = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	628b      	str	r3, [r1, #40]	@ 0x28
			sustain_As = 0;
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bd08      	pop	{r3, pc}
			active[NOTE_B] = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	62cb      	str	r3, [r1, #44]	@ 0x2c
			sustain_B = 0;
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bd08      	pop	{r3, pc}
			active[NOTE_Gs] = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	620b      	str	r3, [r1, #32]
			sustain_Gs = 0;
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bd08      	pop	{r3, pc}
			active[NOTE_E] = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	610b      	str	r3, [r1, #16]
			sustain_E = 0;
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bd08      	pop	{r3, pc}
			active[NOTE_Ds] = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	60cb      	str	r3, [r1, #12]
			sustain_Ds = 0;
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bd08      	pop	{r3, pc}
			active[NOTE_D] = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	608b      	str	r3, [r1, #8]
			sustain_D = 0;
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bd08      	pop	{r3, pc}
			active[NOTE_Cs] = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	604b      	str	r3, [r1, #4]
			sustain_Cs = 0;
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bd08      	pop	{r3, pc}
			active[NOTE_C] = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	600b      	str	r3, [r1, #0]
			sustain_C = 0;
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bd08      	pop	{r3, pc}
			active[NOTE_F] = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	614b      	str	r3, [r1, #20]
			sustain_F = 0;
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bd08      	pop	{r3, pc}
 80009be:	bf00      	nop
 80009c0:	48000800 	.word	0x48000800
 80009c4:	200001e4 	.word	0x200001e4
 80009c8:	200001b4 	.word	0x200001b4
 80009cc:	200001c0 	.word	0x200001c0
 80009d0:	200001cc 	.word	0x200001cc
 80009d4:	200001e0 	.word	0x200001e0
 80009d8:	200001dc 	.word	0x200001dc
 80009dc:	200001d8 	.word	0x200001d8
 80009e0:	200001d4 	.word	0x200001d4
 80009e4:	200001d0 	.word	0x200001d0
 80009e8:	200001b8 	.word	0x200001b8
 80009ec:	200001c4 	.word	0x200001c4
 80009f0:	200001c8 	.word	0x200001c8
 80009f4:	200001bc 	.word	0x200001bc

080009f8 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim16 )
 80009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009fa:	4298      	cmp	r0, r3
 80009fc:	d003      	beq.n	8000a06 <HAL_TIM_PeriodElapsedCallback+0xe>
	if (htim == &htim15 )
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a00:	4298      	cmp	r0, r3
 8000a02:	d002      	beq.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x12>
 8000a04:	4770      	bx	lr
		update_decay_values();
 8000a06:	f000 be11 	b.w	800162c <update_decay_values>
{
 8000a0a:	b510      	push	{r4, lr}
		int wave = tranposition__note_update();
 8000a0c:	f001 f972 	bl	8001cf4 <tranposition__note_update>
 8000a10:	4604      	mov	r4, r0
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, wave);
 8000a12:	4623      	mov	r3, r4
 8000a14:	2200      	movs	r2, #0
 8000a16:	2110      	movs	r1, #16
 8000a18:	4807      	ldr	r0, [pc, #28]	@ (8000a38 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a1a:	f001 fca1 	bl	8002360 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, wave);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	4623      	mov	r3, r4
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <HAL_TIM_PeriodElapsedCallback+0x40>)
}
 8000a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, wave);
 8000a28:	4611      	mov	r1, r2
 8000a2a:	f001 bc99 	b.w	8002360 <HAL_DAC_SetValue>
 8000a2e:	bf00      	nop
 8000a30:	200002d0 	.word	0x200002d0
 8000a34:	20000320 	.word	0x20000320
 8000a38:	200003c0 	.word	0x200003c0

08000a3c <Error_Handler>:
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <Error_Handler+0x2>

08000a40 <menu_init>:

char buffer[33];

int sustain_flag = 0;

void menu_init(void) {
 8000a40:	b538      	push	{r3, r4, r5, lr}
    current_menu_item = MENU_ITEM_SUSTAIN;
 8000a42:	4c2e      	ldr	r4, [pc, #184]	@ (8000afc <menu_init+0xbc>)
 8000a44:	2303      	movs	r3, #3
 8000a46:	7023      	strb	r3, [r4, #0]
    current_setting_value = 0;
    lcd_init();
 8000a48:	f000 f976 	bl	8000d38 <lcd_init>
    }
    menu_update_display();
}

void menu_update_display(void) {
    lcd_clear();
 8000a4c:	f000 fc1a 	bl	8001284 <lcd_clear>
    switch (current_menu_item) {
 8000a50:	7823      	ldrb	r3, [r4, #0]
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d851      	bhi.n	8000afa <menu_init+0xba>
 8000a56:	e8df f003 	tbb	[pc, r3]
 8000a5a:	2515      	.short	0x2515
 8000a5c:	3634      	.short	0x3634
 8000a5e:	03          	.byte	0x03
 8000a5f:	00          	.byte	0x00
            }
            lcd_set_cursor(0, 0);
            lcd_write_multiline_string(buffer);
            break;
        case MENU_ITEM_TRANSPOSITION:
            snprintf(buffer, sizeof(buffer), "Transposition:  up inc, down dec");
 8000a60:	4d27      	ldr	r5, [pc, #156]	@ (8000b00 <menu_init+0xc0>)
 8000a62:	4c28      	ldr	r4, [pc, #160]	@ (8000b04 <menu_init+0xc4>)
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            lcd_set_cursor(0, 0);
 8000a6c:	2100      	movs	r1, #0
            snprintf(buffer, sizeof(buffer), "Transposition:  up inc, down dec");
 8000a6e:	682b      	ldr	r3, [r5, #0]
 8000a70:	7023      	strb	r3, [r4, #0]
            lcd_set_cursor(0, 0);
 8000a72:	4608      	mov	r0, r1
 8000a74:	f000 fbb0 	bl	80011d8 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000a78:	f1a4 0020 	sub.w	r0, r4, #32
}
 8000a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000a80:	f000 baec 	b.w	800105c <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000a84:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <menu_init+0xc8>)
 8000a86:	4c1f      	ldr	r4, [pc, #124]	@ (8000b04 <menu_init+0xc4>)
 8000a88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a8c:	c403      	stmia	r4!, {r0, r1}
            lcd_set_cursor(0, 0);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000a92:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000a94:	f000 fba0 	bl	80011d8 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000a98:	f1a4 0008 	sub.w	r0, r4, #8
}
 8000a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000aa0:	f000 badc 	b.w	800105c <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Instrument: ");
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <menu_init+0xcc>)
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000aa6:	4c17      	ldr	r4, [pc, #92]	@ (8000b04 <menu_init+0xc4>)
 8000aa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aaa:	c407      	stmia	r4!, {r0, r1, r2}
            lcd_set_cursor(0, 0);
 8000aac:	2100      	movs	r1, #0
 8000aae:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000ab0:	7023      	strb	r3, [r4, #0]
            lcd_set_cursor(0, 0);
 8000ab2:	f000 fb91 	bl	80011d8 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000ab6:	f1a4 000c 	sub.w	r0, r4, #12
}
 8000aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000abe:	f000 bacd 	b.w	800105c <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <menu_init+0xd0>)
 8000ac4:	e7ef      	b.n	8000aa6 <menu_init+0x66>
            if (sustain_flag) {
 8000ac6:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <menu_init+0xd4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	b183      	cbz	r3, 8000aee <menu_init+0xae>
                snprintf(buffer, sizeof(buffer), "Sustain: ON 10s duration");
 8000acc:	4d12      	ldr	r5, [pc, #72]	@ (8000b18 <menu_init+0xd8>)
 8000ace:	4c0d      	ldr	r4, [pc, #52]	@ (8000b04 <menu_init+0xc4>)
 8000ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ad8:	c403      	stmia	r4!, {r0, r1}
 8000ada:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	4608      	mov	r0, r1
 8000ae0:	f000 fb7a 	bl	80011d8 <lcd_set_cursor>
}
 8000ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000ae8:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <menu_init+0xc4>)
 8000aea:	f000 bab7 	b.w	800105c <lcd_write_multiline_string>
                snprintf(buffer, sizeof(buffer), "Sustain: OFF");
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <menu_init+0xdc>)
 8000af0:	4c04      	ldr	r4, [pc, #16]	@ (8000b04 <menu_init+0xc4>)
 8000af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000af4:	c407      	stmia	r4!, {r0, r1, r2}
 8000af6:	7023      	strb	r3, [r4, #0]
 8000af8:	e7f0      	b.n	8000adc <menu_init+0x9c>
}
 8000afa:	bd38      	pop	{r3, r4, r5, pc}
 8000afc:	200003f9 	.word	0x200003f9
 8000b00:	08004cc8 	.word	0x08004cc8
 8000b04:	200003d8 	.word	0x200003d8
 8000b08:	08004c70 	.word	0x08004c70
 8000b0c:	08004c7c 	.word	0x08004c7c
 8000b10:	08004c8c 	.word	0x08004c8c
 8000b14:	200003d4 	.word	0x200003d4
 8000b18:	08004c9c 	.word	0x08004c9c
 8000b1c:	08004cb8 	.word	0x08004cb8

08000b20 <menu_update_display>:
void menu_update_display(void) {
 8000b20:	b538      	push	{r3, r4, r5, lr}
    lcd_clear();
 8000b22:	f000 fbaf 	bl	8001284 <lcd_clear>
    switch (current_menu_item) {
 8000b26:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd4 <menu_update_display+0xb4>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d851      	bhi.n	8000bd2 <menu_update_display+0xb2>
 8000b2e:	e8df f003 	tbb	[pc, r3]
 8000b32:	2515      	.short	0x2515
 8000b34:	3634      	.short	0x3634
 8000b36:	03          	.byte	0x03
 8000b37:	00          	.byte	0x00
            snprintf(buffer, sizeof(buffer), "Transposition:  up inc, down dec");
 8000b38:	4d27      	ldr	r5, [pc, #156]	@ (8000bd8 <menu_update_display+0xb8>)
 8000b3a:	4c28      	ldr	r4, [pc, #160]	@ (8000bdc <menu_update_display+0xbc>)
 8000b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            lcd_set_cursor(0, 0);
 8000b44:	2100      	movs	r1, #0
            snprintf(buffer, sizeof(buffer), "Transposition:  up inc, down dec");
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	7023      	strb	r3, [r4, #0]
            lcd_set_cursor(0, 0);
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	f000 fb44 	bl	80011d8 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000b50:	f1a4 0020 	sub.w	r0, r4, #32
            break;
        default:
            break;
    }
}
 8000b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000b58:	f000 ba80 	b.w	800105c <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <menu_update_display+0xc0>)
 8000b5e:	4c1f      	ldr	r4, [pc, #124]	@ (8000bdc <menu_update_display+0xbc>)
 8000b60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b64:	c403      	stmia	r4!, {r0, r1}
            lcd_set_cursor(0, 0);
 8000b66:	2100      	movs	r1, #0
 8000b68:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000b6a:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000b6c:	f000 fb34 	bl	80011d8 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000b70:	f1a4 0008 	sub.w	r0, r4, #8
}
 8000b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000b78:	f000 ba70 	b.w	800105c <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Instrument: ");
 8000b7c:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <menu_update_display+0xc4>)
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000b7e:	4c17      	ldr	r4, [pc, #92]	@ (8000bdc <menu_update_display+0xbc>)
 8000b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b82:	c407      	stmia	r4!, {r0, r1, r2}
            lcd_set_cursor(0, 0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000b88:	7023      	strb	r3, [r4, #0]
            lcd_set_cursor(0, 0);
 8000b8a:	f000 fb25 	bl	80011d8 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000b8e:	f1a4 000c 	sub.w	r0, r4, #12
}
 8000b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000b96:	f000 ba61 	b.w	800105c <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <menu_update_display+0xc8>)
 8000b9c:	e7ef      	b.n	8000b7e <menu_update_display+0x5e>
            if (sustain_flag) {
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <menu_update_display+0xcc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	b183      	cbz	r3, 8000bc6 <menu_update_display+0xa6>
                snprintf(buffer, sizeof(buffer), "Sustain: ON 10s duration");
 8000ba4:	4d12      	ldr	r5, [pc, #72]	@ (8000bf0 <menu_update_display+0xd0>)
 8000ba6:	4c0d      	ldr	r4, [pc, #52]	@ (8000bdc <menu_update_display+0xbc>)
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb0:	c403      	stmia	r4!, {r0, r1}
 8000bb2:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4608      	mov	r0, r1
 8000bb8:	f000 fb0e 	bl	80011d8 <lcd_set_cursor>
}
 8000bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000bc0:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <menu_update_display+0xbc>)
 8000bc2:	f000 ba4b 	b.w	800105c <lcd_write_multiline_string>
                snprintf(buffer, sizeof(buffer), "Sustain: OFF");
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <menu_update_display+0xd4>)
 8000bc8:	4c04      	ldr	r4, [pc, #16]	@ (8000bdc <menu_update_display+0xbc>)
 8000bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bcc:	c407      	stmia	r4!, {r0, r1, r2}
 8000bce:	7023      	strb	r3, [r4, #0]
 8000bd0:	e7f0      	b.n	8000bb4 <menu_update_display+0x94>
}
 8000bd2:	bd38      	pop	{r3, r4, r5, pc}
 8000bd4:	200003f9 	.word	0x200003f9
 8000bd8:	08004cc8 	.word	0x08004cc8
 8000bdc:	200003d8 	.word	0x200003d8
 8000be0:	08004c70 	.word	0x08004c70
 8000be4:	08004c7c 	.word	0x08004c7c
 8000be8:	08004c8c 	.word	0x08004c8c
 8000bec:	200003d4 	.word	0x200003d4
 8000bf0:	08004c9c 	.word	0x08004c9c
 8000bf4:	08004cb8 	.word	0x08004cb8

08000bf8 <poll_buttons>:

void poll_buttons(void) {
 8000bf8:	b510      	push	{r4, lr}
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000bfa:	484c      	ldr	r0, [pc, #304]	@ (8000d2c <poll_buttons+0x134>)
 8000bfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c00:	f001 fe02 	bl	8002808 <HAL_GPIO_ReadPin>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d068      	beq.n	8000cda <poll_buttons+0xe2>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
            HAL_Delay(100); // Debounce delay
        }
        menu_update_display();
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000c08:	4848      	ldr	r0, [pc, #288]	@ (8000d2c <poll_buttons+0x134>)
 8000c0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0e:	f001 fdfb 	bl	8002808 <HAL_GPIO_ReadPin>
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d046      	beq.n	8000ca4 <poll_buttons+0xac>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
            HAL_Delay(100); // Debounce delay
        }
        menu_update_display();
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000c16:	4845      	ldr	r0, [pc, #276]	@ (8000d2c <poll_buttons+0x134>)
 8000c18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c1c:	f001 fdf4 	bl	8002808 <HAL_GPIO_ReadPin>
 8000c20:	b9c8      	cbnz	r0, 8000c56 <poll_buttons+0x5e>
    if (current_menu_item > 0) {
 8000c22:	4b43      	ldr	r3, [pc, #268]	@ (8000d30 <poll_buttons+0x138>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	d139      	bne.n	8000c9e <poll_buttons+0xa6>
        current_menu_item = MENU_ITEM_COUNT - 1;
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	701a      	strb	r2, [r3, #0]
    menu_update_display();
 8000c2e:	f7ff ff77 	bl	8000b20 <menu_update_display>
        menu_handle_button_left();
        HAL_Delay(100);
 8000c32:	2064      	movs	r0, #100	@ 0x64
 8000c34:	f001 fac8 	bl	80021c8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000c38:	4c3c      	ldr	r4, [pc, #240]	@ (8000d2c <poll_buttons+0x134>)
 8000c3a:	e001      	b.n	8000c40 <poll_buttons+0x48>
            HAL_Delay(100); // Debounce delay
 8000c3c:	f001 fac4 	bl	80021c8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000c40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c44:	4620      	mov	r0, r4
 8000c46:	f001 fddf 	bl	8002808 <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000c4c:	2064      	movs	r0, #100	@ 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f4      	beq.n	8000c3c <poll_buttons+0x44>
        }
        menu_update_display();
 8000c52:	f7ff ff65 	bl	8000b20 <menu_update_display>
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000c56:	4835      	ldr	r0, [pc, #212]	@ (8000d2c <poll_buttons+0x134>)
 8000c58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c5c:	f001 fdd4 	bl	8002808 <HAL_GPIO_ReadPin>
 8000c60:	b9e0      	cbnz	r0, 8000c9c <poll_buttons+0xa4>
    if (current_menu_item < MENU_ITEM_COUNT - 1) {
 8000c62:	4b33      	ldr	r3, [pc, #204]	@ (8000d30 <poll_buttons+0x138>)
        menu_handle_button_right();
        HAL_Delay(100);
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000c64:	4c31      	ldr	r4, [pc, #196]	@ (8000d2c <poll_buttons+0x134>)
    if (current_menu_item < MENU_ITEM_COUNT - 1) {
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	2a03      	cmp	r2, #3
        current_menu_item++;
 8000c6a:	bf9c      	itt	ls
 8000c6c:	3201      	addls	r2, #1
 8000c6e:	b2d0      	uxtbls	r0, r2
 8000c70:	7018      	strb	r0, [r3, #0]
    menu_update_display();
 8000c72:	f7ff ff55 	bl	8000b20 <menu_update_display>
        HAL_Delay(100);
 8000c76:	2064      	movs	r0, #100	@ 0x64
 8000c78:	f001 faa6 	bl	80021c8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000c7c:	e001      	b.n	8000c82 <poll_buttons+0x8a>
            HAL_Delay(100); // Debounce delay
 8000c7e:	f001 faa3 	bl	80021c8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000c82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c86:	4620      	mov	r0, r4
 8000c88:	f001 fdbe 	bl	8002808 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000c8e:	2064      	movs	r0, #100	@ 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0f4      	beq.n	8000c7e <poll_buttons+0x86>
        }
        menu_update_display();
    }
}
 8000c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        menu_update_display();
 8000c98:	f7ff bf42 	b.w	8000b20 <menu_update_display>
}
 8000c9c:	bd10      	pop	{r4, pc}
        current_menu_item--;
 8000c9e:	3a01      	subs	r2, #1
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	e7c3      	b.n	8000c2c <poll_buttons+0x34>
    switch (current_menu_item) {
 8000ca4:	4b22      	ldr	r3, [pc, #136]	@ (8000d30 <poll_buttons+0x138>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d03b      	beq.n	8000d24 <poll_buttons+0x12c>
 8000cac:	2b04      	cmp	r3, #4
 8000cae:	d032      	beq.n	8000d16 <poll_buttons+0x11e>
    menu_update_display();
 8000cb0:	f7ff ff36 	bl	8000b20 <menu_update_display>
        HAL_Delay(100);
 8000cb4:	2064      	movs	r0, #100	@ 0x64
 8000cb6:	f001 fa87 	bl	80021c8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000cba:	4c1c      	ldr	r4, [pc, #112]	@ (8000d2c <poll_buttons+0x134>)
 8000cbc:	e001      	b.n	8000cc2 <poll_buttons+0xca>
            HAL_Delay(100); // Debounce delay
 8000cbe:	f001 fa83 	bl	80021c8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000cc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f001 fd9e 	bl	8002808 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000cce:	2064      	movs	r0, #100	@ 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f4      	beq.n	8000cbe <poll_buttons+0xc6>
        menu_update_display();
 8000cd4:	f7ff ff24 	bl	8000b20 <menu_update_display>
 8000cd8:	e79d      	b.n	8000c16 <poll_buttons+0x1e>
    switch (current_menu_item) {
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <poll_buttons+0x138>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d01c      	beq.n	8000d1c <poll_buttons+0x124>
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d014      	beq.n	8000d10 <poll_buttons+0x118>
    menu_update_display();
 8000ce6:	f7ff ff1b 	bl	8000b20 <menu_update_display>
        HAL_Delay(100);
 8000cea:	2064      	movs	r0, #100	@ 0x64
 8000cec:	f001 fa6c 	bl	80021c8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000cf0:	4c0e      	ldr	r4, [pc, #56]	@ (8000d2c <poll_buttons+0x134>)
 8000cf2:	e001      	b.n	8000cf8 <poll_buttons+0x100>
            HAL_Delay(100); // Debounce delay
 8000cf4:	f001 fa68 	bl	80021c8 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000cf8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f001 fd83 	bl	8002808 <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000d04:	2064      	movs	r0, #100	@ 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f4      	beq.n	8000cf4 <poll_buttons+0xfc>
        menu_update_display();
 8000d0a:	f7ff ff09 	bl	8000b20 <menu_update_display>
 8000d0e:	e77b      	b.n	8000c08 <poll_buttons+0x10>
            tranposition__increment_octave();
 8000d10:	f000 ffa4 	bl	8001c5c <tranposition__increment_octave>
            break;
 8000d14:	e7e7      	b.n	8000ce6 <poll_buttons+0xee>
            tranposition__decrement_octave();
 8000d16:	f000 ffc7 	bl	8001ca8 <tranposition__decrement_octave>
            break;
 8000d1a:	e7c9      	b.n	8000cb0 <poll_buttons+0xb8>
            sustain_flag = 1;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <poll_buttons+0x13c>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]
            break;
 8000d22:	e7e0      	b.n	8000ce6 <poll_buttons+0xee>
            sustain_flag = 0;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <poll_buttons+0x13c>)
 8000d26:	6018      	str	r0, [r3, #0]
            break;
 8000d28:	e7c2      	b.n	8000cb0 <poll_buttons+0xb8>
 8000d2a:	bf00      	nop
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	200003f9 	.word	0x200003f9
 8000d34:	200003d4 	.word	0x200003d4

08000d38 <lcd_init>:
    lcd_write_nibble(upper_nibble, 1);
    lcd_write_nibble(lower_nibble, 1);
}

void lcd_init()
{
 8000d38:	b570      	push	{r4, r5, r6, lr}
    data |= backlight_state << BL_BIT;
 8000d3a:	4ec6      	ldr	r6, [pc, #792]	@ (8001054 <lcd_init+0x31c>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d3c:	4cc6      	ldr	r4, [pc, #792]	@ (8001058 <lcd_init+0x320>)
{
 8000d3e:	b084      	sub	sp, #16
    HAL_Delay(50);
 8000d40:	2032      	movs	r0, #50	@ 0x32
 8000d42:	f001 fa41 	bl	80021c8 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000d46:	7833      	ldrb	r3, [r6, #0]
 8000d48:	00db      	lsls	r3, r3, #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d4a:	2564      	movs	r5, #100	@ 0x64
    data |= 1 << EN_BIT;
 8000d4c:	f043 0334 	orr.w	r3, r3, #52	@ 0x34
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d50:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000d54:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d58:	214e      	movs	r1, #78	@ 0x4e
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9500      	str	r5, [sp, #0]
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f001 fe6c 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f001 fa2f 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000d6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d6e:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000d70:	f023 0304 	bic.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d74:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000d78:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d7c:	214e      	movs	r1, #78	@ 0x4e
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4620      	mov	r0, r4
 8000d82:	f001 fe5b 	bl	8002a3c <HAL_I2C_Master_Transmit>
    lcd_write_nibble(0x03, 0);
    HAL_Delay(5);
 8000d86:	2005      	movs	r0, #5
 8000d88:	f001 fa1e 	bl	80021c8 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000d8c:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d8e:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000d90:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000d92:	f043 0334 	orr.w	r3, r3, #52	@ 0x34
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d96:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000d9a:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d9e:	214e      	movs	r1, #78	@ 0x4e
 8000da0:	2301      	movs	r3, #1
 8000da2:	4620      	mov	r0, r4
 8000da4:	f001 fe4a 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f001 fa0d 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000dae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000db2:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000db4:	f023 0304 	bic.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000db8:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000dbc:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dc0:	214e      	movs	r1, #78	@ 0x4e
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f001 fe39 	bl	8002a3c <HAL_I2C_Master_Transmit>
    lcd_write_nibble(0x03, 0);
    HAL_Delay(1);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f001 f9fc 	bl	80021c8 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000dd0:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dd2:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000dd4:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000dd6:	f043 0334 	orr.w	r3, r3, #52	@ 0x34
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dda:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000dde:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000de2:	214e      	movs	r1, #78	@ 0x4e
 8000de4:	2301      	movs	r3, #1
 8000de6:	4620      	mov	r0, r4
 8000de8:	f001 fe28 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f001 f9eb 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000df2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000df6:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000df8:	f023 0304 	bic.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dfc:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000e00:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e04:	214e      	movs	r1, #78	@ 0x4e
 8000e06:	2301      	movs	r3, #1
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f001 fe17 	bl	8002a3c <HAL_I2C_Master_Transmit>
    lcd_write_nibble(0x03, 0);
    HAL_Delay(1);
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f001 f9da 	bl	80021c8 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000e14:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e16:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000e18:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000e1a:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e1e:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000e22:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e26:	214e      	movs	r1, #78	@ 0x4e
 8000e28:	2301      	movs	r3, #1
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f001 fe06 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f001 f9c9 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000e36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e3a:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000e3c:	f023 0304 	bic.w	r3, r3, #4
 8000e40:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e44:	f10d 020f 	add.w	r2, sp, #15
 8000e48:	2301      	movs	r3, #1
 8000e4a:	214e      	movs	r1, #78	@ 0x4e
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	f001 fdf5 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000e52:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e54:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000e56:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000e58:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e5c:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000e60:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e64:	214e      	movs	r1, #78	@ 0x4e
 8000e66:	2301      	movs	r3, #1
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f001 fde7 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f001 f9aa 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000e74:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e78:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000e7a:	f023 0304 	bic.w	r3, r3, #4
 8000e7e:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e82:	f10d 020f 	add.w	r2, sp, #15
 8000e86:	2301      	movs	r3, #1
 8000e88:	214e      	movs	r1, #78	@ 0x4e
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f001 fdd6 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000e90:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e92:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000e94:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000e96:	f063 037b 	orn	r3, r3, #123	@ 0x7b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e9a:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000e9e:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ea2:	214e      	movs	r1, #78	@ 0x4e
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f001 fdc8 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f001 f98b 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000eb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000eb6:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ec0:	f10d 020f 	add.w	r2, sp, #15
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	214e      	movs	r1, #78	@ 0x4e
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f001 fdb7 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000ece:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ed0:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000ed2:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ed8:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000edc:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ee0:	214e      	movs	r1, #78	@ 0x4e
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f001 fda9 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f001 f96c 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000ef0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ef4:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000ef6:	f023 0304 	bic.w	r3, r3, #4
 8000efa:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000efe:	f10d 020f 	add.w	r2, sp, #15
 8000f02:	2301      	movs	r3, #1
 8000f04:	214e      	movs	r1, #78	@ 0x4e
 8000f06:	4620      	mov	r0, r4
 8000f08:	f001 fd98 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000f0c:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f0e:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000f10:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000f12:	f063 033b 	orn	r3, r3, #59	@ 0x3b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f16:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000f1a:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f1e:	214e      	movs	r1, #78	@ 0x4e
 8000f20:	2301      	movs	r3, #1
 8000f22:	4620      	mov	r0, r4
 8000f24:	f001 fd8a 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f001 f94d 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000f2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f32:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000f34:	f023 0304 	bic.w	r3, r3, #4
 8000f38:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f3c:	f10d 020f 	add.w	r2, sp, #15
 8000f40:	2301      	movs	r3, #1
 8000f42:	214e      	movs	r1, #78	@ 0x4e
 8000f44:	4620      	mov	r0, r4
 8000f46:	f001 fd79 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000f4a:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f4c:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000f4e:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000f50:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f54:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000f58:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f5c:	214e      	movs	r1, #78	@ 0x4e
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4620      	mov	r0, r4
 8000f62:	f001 fd6b 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f001 f92e 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000f6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f70:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000f72:	f023 0304 	bic.w	r3, r3, #4
 8000f76:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f7a:	f10d 020f 	add.w	r2, sp, #15
 8000f7e:	2301      	movs	r3, #1
 8000f80:	214e      	movs	r1, #78	@ 0x4e
 8000f82:	4620      	mov	r0, r4
 8000f84:	f001 fd5a 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000f88:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f8a:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000f8c:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000f8e:	432b      	orrs	r3, r5
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f90:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000f94:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f98:	214e      	movs	r1, #78	@ 0x4e
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f001 fd4d 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f001 f910 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000fa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fac:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000fae:	f023 0304 	bic.w	r3, r3, #4
 8000fb2:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fb6:	f10d 020f 	add.w	r2, sp, #15
 8000fba:	2301      	movs	r3, #1
 8000fbc:	214e      	movs	r1, #78	@ 0x4e
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f001 fd3c 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000fc4:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fc6:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000fc8:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000fca:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fce:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000fd2:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fd6:	214e      	movs	r1, #78	@ 0x4e
 8000fd8:	2301      	movs	r3, #1
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f001 fd2e 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f001 f8f1 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000fe6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fea:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ff4:	f10d 020f 	add.w	r2, sp, #15
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	214e      	movs	r1, #78	@ 0x4e
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f001 fd1d 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8001002:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001004:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8001006:	00d2      	lsls	r2, r2, #3
    data |= 1 << EN_BIT;
 8001008:	f042 0214 	orr.w	r2, r2, #20
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800100c:	2301      	movs	r3, #1
    data |= 1 << EN_BIT;
 800100e:	f88d 200f 	strb.w	r2, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001012:	214e      	movs	r1, #78	@ 0x4e
 8001014:	f10d 020f 	add.w	r2, sp, #15
 8001018:	4620      	mov	r0, r4
 800101a:	f001 fd0f 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f001 f8d2 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8001024:	f89d 100f 	ldrb.w	r1, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001028:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 800102a:	f021 0104 	bic.w	r1, r1, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800102e:	2301      	movs	r3, #1
 8001030:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8001034:	f88d 100f 	strb.w	r1, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001038:	4620      	mov	r0, r4
 800103a:	214e      	movs	r1, #78	@ 0x4e
 800103c:	f001 fcfe 	bl	8002a3c <HAL_I2C_Master_Transmit>
        HAL_Delay(2);
 8001040:	2002      	movs	r0, #2
 8001042:	f001 f8c1 	bl	80021c8 <HAL_Delay>
    lcd_write_nibble(0x02, 0);
    lcd_send_cmd(0x28);
    lcd_send_cmd(0x0C);
    lcd_send_cmd(0x06);
    lcd_send_cmd(0x01);
    HAL_Delay(2);
 8001046:	2002      	movs	r0, #2
}
 8001048:	b004      	add	sp, #16
 800104a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(2);
 800104e:	f001 b8bb 	b.w	80021c8 <HAL_Delay>
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000
 8001058:	2000036c 	.word	0x2000036c

0800105c <lcd_write_multiline_string>:
        lcd_send_data(*str++);
    }
}

void lcd_write_multiline_string(char *str)
{
 800105c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001060:	b08b      	sub	sp, #44	@ 0x2c
 8001062:	4683      	mov	fp, r0
    int line = 0;
    int len = strlen(str);
 8001064:	f7ff f8b0 	bl	80001c8 <strlen>
    int pos = 0;

    while (pos < len && line < 2) {
 8001068:	2800      	cmp	r0, #0
 800106a:	f000 80ae 	beq.w	80011ca <lcd_write_multiline_string+0x16e>
    int line = 0;
 800106e:	2500      	movs	r5, #0
 8001070:	4f57      	ldr	r7, [pc, #348]	@ (80011d0 <lcd_write_multiline_string+0x174>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001072:	4e58      	ldr	r6, [pc, #352]	@ (80011d4 <lcd_write_multiline_string+0x178>)
 8001074:	4681      	mov	r9, r0
 8001076:	46aa      	mov	sl, r5
        char buffer[LCD_WIDTH + 1];
        strncpy(buffer, str + pos, LCD_WIDTH);
 8001078:	2210      	movs	r2, #16
 800107a:	eb0b 110a 	add.w	r1, fp, sl, lsl #4
 800107e:	a805      	add	r0, sp, #20
 8001080:	f003 fdb2 	bl	8004be8 <strncpy>
        buffer[LCD_WIDTH] = '\0';
 8001084:	2300      	movs	r3, #0
 8001086:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    data |= backlight_state << BL_BIT;
 800108a:	783b      	ldrb	r3, [r7, #0]
 800108c:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 800108e:	ea43 138a 	orr.w	r3, r3, sl, lsl #6
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001092:	2464      	movs	r4, #100	@ 0x64
    data |= 1 << EN_BIT;
 8001094:	f063 037b 	orn	r3, r3, #123	@ 0x7b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001098:	f10d 0213 	add.w	r2, sp, #19
 800109c:	214e      	movs	r1, #78	@ 0x4e
    data |= 1 << EN_BIT;
 800109e:	f88d 3013 	strb.w	r3, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010a2:	9400      	str	r4, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	4630      	mov	r0, r6
 80010a8:	f001 fcc8 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f001 f88b 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 80010b2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010b6:	9400      	str	r4, [sp, #0]
    data &= ~(1 << EN_BIT);
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	f88d 3013 	strb.w	r3, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010c0:	f10d 0213 	add.w	r2, sp, #19
 80010c4:	2301      	movs	r3, #1
 80010c6:	214e      	movs	r1, #78	@ 0x4e
 80010c8:	4630      	mov	r0, r6
 80010ca:	f001 fcb7 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010ce:	9400      	str	r4, [sp, #0]
    data |= backlight_state << BL_BIT;
 80010d0:	783b      	ldrb	r3, [r7, #0]
 80010d2:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 80010d4:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010d8:	f10d 0213 	add.w	r2, sp, #19
 80010dc:	214e      	movs	r1, #78	@ 0x4e
    data |= 1 << EN_BIT;
 80010de:	f88d 3013 	strb.w	r3, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010e2:	4630      	mov	r0, r6
 80010e4:	2301      	movs	r3, #1
 80010e6:	f001 fca9 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f001 f86c 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 80010f0:	f89d 2013 	ldrb.w	r2, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010f4:	9400      	str	r4, [sp, #0]
    data &= ~(1 << EN_BIT);
 80010f6:	f022 0204 	bic.w	r2, r2, #4
 80010fa:	f88d 2013 	strb.w	r2, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010fe:	2301      	movs	r3, #1
 8001100:	f10d 0213 	add.w	r2, sp, #19
 8001104:	214e      	movs	r1, #78	@ 0x4e
 8001106:	4630      	mov	r0, r6
 8001108:	f001 fc98 	bl	8002a3c <HAL_I2C_Master_Transmit>
    while (*str)
 800110c:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8001110:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8001114:	2c00      	cmp	r4, #0
 8001116:	d04f      	beq.n	80011b8 <lcd_write_multiline_string+0x15c>
 8001118:	f8cd a00c 	str.w	sl, [sp, #12]
 800111c:	f10d 0814 	add.w	r8, sp, #20
 8001120:	46aa      	mov	sl, r5
    data |= backlight_state << BL_BIT;
 8001122:	783a      	ldrb	r2, [r7, #0]
    uint8_t data = nibble << D4_BIT;
 8001124:	f004 03f0 	and.w	r3, r4, #240	@ 0xf0
    data |= 1 << EN_BIT;
 8001128:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800112c:	2564      	movs	r5, #100	@ 0x64
    data |= 1 << EN_BIT;
 800112e:	f043 0305 	orr.w	r3, r3, #5
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001132:	f10d 0213 	add.w	r2, sp, #19
 8001136:	214e      	movs	r1, #78	@ 0x4e
    data |= 1 << EN_BIT;
 8001138:	f88d 3013 	strb.w	r3, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800113c:	9500      	str	r5, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	4630      	mov	r0, r6
 8001142:	f001 fc7b 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f001 f83e 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 800114c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001150:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8001152:	f022 0204 	bic.w	r2, r2, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001156:	2301      	movs	r3, #1
    data &= ~(1 << EN_BIT);
 8001158:	f88d 2013 	strb.w	r2, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800115c:	214e      	movs	r1, #78	@ 0x4e
 800115e:	f10d 0213 	add.w	r2, sp, #19
 8001162:	4630      	mov	r0, r6
 8001164:	f001 fc6a 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8001168:	783b      	ldrb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800116a:	9500      	str	r5, [sp, #0]
    data |= 1 << EN_BIT;
 800116c:	0124      	lsls	r4, r4, #4
 800116e:	ea44 04c3 	orr.w	r4, r4, r3, lsl #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001172:	f10d 0213 	add.w	r2, sp, #19
 8001176:	2301      	movs	r3, #1
 8001178:	214e      	movs	r1, #78	@ 0x4e
    data |= 1 << EN_BIT;
 800117a:	f044 0405 	orr.w	r4, r4, #5
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800117e:	4630      	mov	r0, r6
    data |= 1 << EN_BIT;
 8001180:	f88d 4013 	strb.w	r4, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001184:	f001 fc5a 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8001188:	2001      	movs	r0, #1
 800118a:	f001 f81d 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 800118e:	f89d 0013 	ldrb.w	r0, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001192:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8001194:	f020 0004 	bic.w	r0, r0, #4
 8001198:	f88d 0013 	strb.w	r0, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800119c:	2301      	movs	r3, #1
 800119e:	f10d 0213 	add.w	r2, sp, #19
 80011a2:	214e      	movs	r1, #78	@ 0x4e
 80011a4:	4630      	mov	r0, r6
 80011a6:	f001 fc49 	bl	8002a3c <HAL_I2C_Master_Transmit>
    while (*str)
 80011aa:	f818 4f01 	ldrb.w	r4, [r8, #1]!
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d1b7      	bne.n	8001122 <lcd_write_multiline_string+0xc6>
 80011b2:	4655      	mov	r5, sl
 80011b4:	f8dd a00c 	ldr.w	sl, [sp, #12]
    while (pos < len && line < 2) {
 80011b8:	3510      	adds	r5, #16
 80011ba:	45a9      	cmp	r9, r5
 80011bc:	dd05      	ble.n	80011ca <lcd_write_multiline_string+0x16e>
 80011be:	f1ba 0f00 	cmp.w	sl, #0
 80011c2:	d102      	bne.n	80011ca <lcd_write_multiline_string+0x16e>
        lcd_set_cursor(line, 0);
        lcd_write_string(buffer);
        pos += LCD_WIDTH;
        line++;
 80011c4:	f04f 0a01 	mov.w	sl, #1
 80011c8:	e756      	b.n	8001078 <lcd_write_multiline_string+0x1c>
    }
}
 80011ca:	b00b      	add	sp, #44	@ 0x2c
 80011cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	2000036c 	.word	0x2000036c

080011d8 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t address;
    switch (row)
 80011da:	f1a0 0001 	sub.w	r0, r0, #1
    data |= backlight_state << BL_BIT;
 80011de:	4e27      	ldr	r6, [pc, #156]	@ (800127c <lcd_set_cursor+0xa4>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011e0:	4d27      	ldr	r5, [pc, #156]	@ (8001280 <lcd_set_cursor+0xa8>)
    data |= backlight_state << BL_BIT;
 80011e2:	7832      	ldrb	r2, [r6, #0]
    switch (row)
 80011e4:	fab0 f080 	clz	r0, r0
 80011e8:	0940      	lsrs	r0, r0, #5
            address = 0x40;
            break;
        default:
            address = 0x00;
    }
    address += column;
 80011ea:	eb01 1180 	add.w	r1, r1, r0, lsl #6
    data |= 1 << EN_BIT;
 80011ee:	f001 03f0 	and.w	r3, r1, #240	@ 0xf0
{
 80011f2:	b085      	sub	sp, #20
    data |= 1 << EN_BIT;
 80011f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011f8:	2764      	movs	r7, #100	@ 0x64
    data |= 1 << EN_BIT;
 80011fa:	f063 037b 	orn	r3, r3, #123	@ 0x7b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011fe:	f10d 020f 	add.w	r2, sp, #15
    address += column;
 8001202:	b2cc      	uxtb	r4, r1
    data |= 1 << EN_BIT;
 8001204:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001208:	214e      	movs	r1, #78	@ 0x4e
 800120a:	2301      	movs	r3, #1
 800120c:	9700      	str	r7, [sp, #0]
 800120e:	4628      	mov	r0, r5
 8001210:	f001 fc14 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f000 ffd7 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 800121a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800121e:	9700      	str	r7, [sp, #0]
    data &= ~(1 << EN_BIT);
 8001220:	f023 0304 	bic.w	r3, r3, #4
 8001224:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001228:	f10d 020f 	add.w	r2, sp, #15
 800122c:	2301      	movs	r3, #1
 800122e:	214e      	movs	r1, #78	@ 0x4e
 8001230:	4628      	mov	r0, r5
 8001232:	f001 fc03 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8001236:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001238:	9700      	str	r7, [sp, #0]
    data |= backlight_state << BL_BIT;
 800123a:	0121      	lsls	r1, r4, #4
 800123c:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
    data |= 1 << EN_BIT;
 8001240:	f041 0104 	orr.w	r1, r1, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001244:	f10d 020f 	add.w	r2, sp, #15
 8001248:	2301      	movs	r3, #1
    data |= 1 << EN_BIT;
 800124a:	f88d 100f 	strb.w	r1, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800124e:	4628      	mov	r0, r5
 8001250:	214e      	movs	r1, #78	@ 0x4e
 8001252:	f001 fbf3 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 ffb6 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 800125c:	f89d 400f 	ldrb.w	r4, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001260:	9700      	str	r7, [sp, #0]
    data &= ~(1 << EN_BIT);
 8001262:	f024 0404 	bic.w	r4, r4, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001266:	2301      	movs	r3, #1
 8001268:	f10d 020f 	add.w	r2, sp, #15
 800126c:	214e      	movs	r1, #78	@ 0x4e
 800126e:	4628      	mov	r0, r5
    data &= ~(1 << EN_BIT);
 8001270:	f88d 400f 	strb.w	r4, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001274:	f001 fbe2 	bl	8002a3c <HAL_I2C_Master_Transmit>
    lcd_send_cmd(0x80 | address);
}
 8001278:	b005      	add	sp, #20
 800127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127c:	20000000 	.word	0x20000000
 8001280:	2000036c 	.word	0x2000036c

08001284 <lcd_clear>:

void lcd_clear(void)
{
 8001284:	b570      	push	{r4, r5, r6, lr}
    data |= backlight_state << BL_BIT;
 8001286:	4e24      	ldr	r6, [pc, #144]	@ (8001318 <lcd_clear+0x94>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001288:	4c24      	ldr	r4, [pc, #144]	@ (800131c <lcd_clear+0x98>)
    data |= backlight_state << BL_BIT;
 800128a:	7833      	ldrb	r3, [r6, #0]
{
 800128c:	b084      	sub	sp, #16
    data |= backlight_state << BL_BIT;
 800128e:	00db      	lsls	r3, r3, #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001290:	2564      	movs	r5, #100	@ 0x64
    data |= 1 << EN_BIT;
 8001292:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001296:	f10d 020f 	add.w	r2, sp, #15
 800129a:	9500      	str	r5, [sp, #0]
    data |= 1 << EN_BIT;
 800129c:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80012a0:	214e      	movs	r1, #78	@ 0x4e
 80012a2:	2301      	movs	r3, #1
 80012a4:	4620      	mov	r0, r4
 80012a6:	f001 fbc9 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 ff8c 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 80012b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80012b4:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 80012b6:	f023 0304 	bic.w	r3, r3, #4
 80012ba:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80012be:	f10d 020f 	add.w	r2, sp, #15
 80012c2:	2301      	movs	r3, #1
 80012c4:	214e      	movs	r1, #78	@ 0x4e
 80012c6:	4620      	mov	r0, r4
 80012c8:	f001 fbb8 	bl	8002a3c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 80012cc:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80012ce:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 80012d0:	00d2      	lsls	r2, r2, #3
    data |= 1 << EN_BIT;
 80012d2:	f042 0214 	orr.w	r2, r2, #20
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80012d6:	2301      	movs	r3, #1
    data |= 1 << EN_BIT;
 80012d8:	f88d 200f 	strb.w	r2, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80012dc:	214e      	movs	r1, #78	@ 0x4e
 80012de:	f10d 020f 	add.w	r2, sp, #15
 80012e2:	4620      	mov	r0, r4
 80012e4:	f001 fbaa 	bl	8002a3c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f000 ff6d 	bl	80021c8 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 80012ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80012f2:	9500      	str	r5, [sp, #0]
 80012f4:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 80012f8:	f023 0504 	bic.w	r5, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80012fc:	214e      	movs	r1, #78	@ 0x4e
 80012fe:	2301      	movs	r3, #1
 8001300:	4620      	mov	r0, r4
    data &= ~(1 << EN_BIT);
 8001302:	f88d 500f 	strb.w	r5, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001306:	f001 fb99 	bl	8002a3c <HAL_I2C_Master_Transmit>
        HAL_Delay(2);
 800130a:	2002      	movs	r0, #2
    lcd_send_cmd(0x01);
}
 800130c:	b004      	add	sp, #16
 800130e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_Delay(2);
 8001312:	f000 bf59 	b.w	80021c8 <HAL_Delay>
 8001316:	bf00      	nop
 8001318:	20000000 	.word	0x20000000
 800131c:	2000036c 	.word	0x2000036c

08001320 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_MspInit+0x2c>)
 8001322:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001324:	f042 0201 	orr.w	r2, r2, #1
 8001328:	661a      	str	r2, [r3, #96]	@ 0x60
 800132a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 800132c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	f002 0201 	and.w	r2, r2, #1
 8001332:	9200      	str	r2, [sp, #0]
 8001334:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001338:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800133c:	659a      	str	r2, [r3, #88]	@ 0x58
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001348:	b002      	add	sp, #8
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001350:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8001352:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <HAL_DAC_MspInit+0x6c>)
 8001354:	6802      	ldr	r2, [r0, #0]
{
 8001356:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	2400      	movs	r4, #0
  if(hdac->Instance==DAC1)
 800135a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001360:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001364:	9406      	str	r4, [sp, #24]
  if(hdac->Instance==DAC1)
 8001366:	d001      	beq.n	800136c <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001368:	b008      	add	sp, #32
 800136a:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 800136c:	f503 33ce 	add.w	r3, r3, #105472	@ 0x19c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001372:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001374:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001378:	659a      	str	r2, [r3, #88]	@ 0x58
 800137a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800137c:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001380:	9200      	str	r2, [sp, #0]
 8001382:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001386:	f042 0201 	orr.w	r2, r2, #1
 800138a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001394:	2230      	movs	r2, #48	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800139a:	2303      	movs	r3, #3
 800139c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f001 f90d 	bl	80025c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013a6:	4622      	mov	r2, r4
 80013a8:	4621      	mov	r1, r4
 80013aa:	2036      	movs	r0, #54	@ 0x36
 80013ac:	f000 ff30 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013b0:	2036      	movs	r0, #54	@ 0x36
 80013b2:	f000 ff69 	bl	8002288 <HAL_NVIC_EnableIRQ>
}
 80013b6:	b008      	add	sp, #32
 80013b8:	bd10      	pop	{r4, pc}
 80013ba:	bf00      	nop
 80013bc:	40007400 	.word	0x40007400

080013c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c0:	b510      	push	{r4, lr}
 80013c2:	4604      	mov	r4, r0
 80013c4:	b0aa      	sub	sp, #168	@ 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	2288      	movs	r2, #136	@ 0x88
 80013ca:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80013d0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80013d4:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d6:	f003 fbff 	bl	8004bd8 <memset>
  if(hi2c->Instance==I2C1)
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_I2C_MspInit+0x80>)
 80013dc:	6822      	ldr	r2, [r4, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013e2:	b02a      	add	sp, #168	@ 0xa8
 80013e4:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e6:	2340      	movs	r3, #64	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e8:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013ea:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ec:	f002 fab6 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 80013f0:	bb18      	cbnz	r0, 800143a <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4c14      	ldr	r4, [pc, #80]	@ (8001444 <HAL_I2C_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	4814      	ldr	r0, [pc, #80]	@ (8001448 <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80013fe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001406:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800140a:	2312      	movs	r3, #18
 800140c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001410:	2200      	movs	r2, #0
 8001412:	2303      	movs	r3, #3
 8001414:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141a:	2304      	movs	r3, #4
 800141c:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f001 f8ce 	bl	80025c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001424:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001426:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800142a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800142c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800142e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	9b01      	ldr	r3, [sp, #4]
}
 8001436:	b02a      	add	sp, #168	@ 0xa8
 8001438:	bd10      	pop	{r4, pc}
      Error_Handler();
 800143a:	f7ff faff 	bl	8000a3c <Error_Handler>
 800143e:	e7d8      	b.n	80013f2 <HAL_I2C_MspInit+0x32>
 8001440:	40005400 	.word	0x40005400
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400

0800144c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b500      	push	{lr}
  if(htim_base->Instance==TIM15)
 800144e:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <HAL_TIM_Base_MspInit+0x6c>)
 8001450:	6803      	ldr	r3, [r0, #0]
 8001452:	4293      	cmp	r3, r2
{
 8001454:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM15)
 8001456:	d005      	beq.n	8001464 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8001458:	4a18      	ldr	r2, [pc, #96]	@ (80014bc <HAL_TIM_Base_MspInit+0x70>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d017      	beq.n	800148e <HAL_TIM_Base_MspInit+0x42>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800145e:	b003      	add	sp, #12
 8001460:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <HAL_TIM_Base_MspInit+0x74>)
 8001466:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8001468:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800146c:	6619      	str	r1, [r3, #96]	@ 0x60
 800146e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001476:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001478:	2018      	movs	r0, #24
 800147a:	4611      	mov	r1, r2
    __HAL_RCC_TIM15_CLK_ENABLE();
 800147c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800147e:	f000 fec7 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001482:	2018      	movs	r0, #24
}
 8001484:	b003      	add	sp, #12
 8001486:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800148a:	f000 befd 	b.w	8002288 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <HAL_TIM_Base_MspInit+0x74>)
 8001490:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8001492:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8001496:	6619      	str	r1, [r3, #96]	@ 0x60
 8001498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 800149c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80014a2:	2019      	movs	r0, #25
 80014a4:	4611      	mov	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014a6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80014a8:	f000 feb2 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014ac:	2019      	movs	r0, #25
}
 80014ae:	b003      	add	sp, #12
 80014b0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014b4:	f000 bee8 	b.w	8002288 <HAL_NVIC_EnableIRQ>
 80014b8:	40014000 	.word	0x40014000
 80014bc:	40014400 	.word	0x40014400
 80014c0:	40021000 	.word	0x40021000
 80014c4:	00000000 	.word	0x00000000

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b510      	push	{r4, lr}
 80014ca:	4604      	mov	r4, r0
 80014cc:	b0aa      	sub	sp, #168	@ 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d0:	2288      	movs	r2, #136	@ 0x88
 80014d2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80014d8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80014dc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014de:	f003 fb7b 	bl	8004bd8 <memset>
  if(huart->Instance==USART2)
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <HAL_UART_MspInit+0xa0>)
 80014e4:	6822      	ldr	r2, [r4, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ea:	b02a      	add	sp, #168	@ 0xa8
 80014ec:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014ee:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f0:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	f002 fa32 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	bb58      	cbnz	r0, 8001552 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <HAL_UART_MspInit+0xa4>)
 80014fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80014fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001502:	659a      	str	r2, [r3, #88]	@ 0x58
 8001504:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001506:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800150a:	9200      	str	r2, [sp, #0]
 800150c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001510:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8001558 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	64da      	str	r2, [r3, #76]	@ 0x4c
 800151a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800151c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001520:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8001560 <HAL_UART_MspInit+0x98>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800152c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001532:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001536:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f001 f841 	bl	80025c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	4611      	mov	r1, r2
 8001542:	2026      	movs	r0, #38	@ 0x26
 8001544:	f000 fe64 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001548:	2026      	movs	r0, #38	@ 0x26
 800154a:	f000 fe9d 	bl	8002288 <HAL_NVIC_EnableIRQ>
}
 800154e:	b02a      	add	sp, #168	@ 0xa8
 8001550:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001552:	f7ff fa73 	bl	8000a3c <Error_Handler>
 8001556:	e7d0      	b.n	80014fa <HAL_UART_MspInit+0x32>
 8001558:	0000000c 	.word	0x0000000c
 800155c:	00000002 	.word	0x00000002
 8001560:	00000000 	.word	0x00000000
 8001564:	00000003 	.word	0x00000003
 8001568:	40004400 	.word	0x40004400
 800156c:	40021000 	.word	0x40021000

08001570 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler>
 8001572:	bf00      	nop

08001574 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <HardFault_Handler>
 8001576:	bf00      	nop

08001578 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler>
 800157a:	bf00      	nop

0800157c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <BusFault_Handler>
 800157e:	bf00      	nop

08001580 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler>
 8001582:	bf00      	nop

08001584 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop

08001590 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 be08 	b.w	80021a4 <HAL_IncTick>

08001594 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_1_Pin);
 8001594:	2001      	movs	r0, #1
 8001596:	f001 b93d 	b.w	8002814 <HAL_GPIO_EXTI_IRQHandler>
 800159a:	bf00      	nop

0800159c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_2_Pin);
 800159c:	2002      	movs	r0, #2
 800159e:	f001 b939 	b.w	8002814 <HAL_GPIO_EXTI_IRQHandler>
 80015a2:	bf00      	nop

080015a4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_3_Pin);
 80015a4:	2004      	movs	r0, #4
 80015a6:	f001 b935 	b.w	8002814 <HAL_GPIO_EXTI_IRQHandler>
 80015aa:	bf00      	nop

080015ac <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_4_Pin);
 80015ac:	2008      	movs	r0, #8
 80015ae:	f001 b931 	b.w	8002814 <HAL_GPIO_EXTI_IRQHandler>
 80015b2:	bf00      	nop

080015b4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_5_Pin);
 80015b4:	2010      	movs	r0, #16
 80015b6:	f001 b92d 	b.w	8002814 <HAL_GPIO_EXTI_IRQHandler>
 80015ba:	bf00      	nop

080015bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_6_Pin);
 80015be:	2020      	movs	r0, #32
 80015c0:	f001 f928 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_7_Pin);
 80015c4:	2040      	movs	r0, #64	@ 0x40
 80015c6:	f001 f925 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_8_Pin);
 80015ca:	2080      	movs	r0, #128	@ 0x80
 80015cc:	f001 f922 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_9_Pin);
 80015d0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015d4:	f001 f91e 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_10_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(NOTE_10_Pin);
 80015dc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015e0:	f001 b918 	b.w	8002814 <HAL_GPIO_EXTI_IRQHandler>

080015e4 <TIM1_BRK_TIM15_IRQHandler>:
void TIM1_BRK_TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80015e4:	4801      	ldr	r0, [pc, #4]	@ (80015ec <TIM1_BRK_TIM15_IRQHandler+0x8>)
 80015e6:	f002 bd5d 	b.w	80040a4 <HAL_TIM_IRQHandler>
 80015ea:	bf00      	nop
 80015ec:	20000320 	.word	0x20000320

080015f0 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80015f0:	4801      	ldr	r0, [pc, #4]	@ (80015f8 <TIM1_UP_TIM16_IRQHandler+0x8>)
 80015f2:	f002 bd57 	b.w	80040a4 <HAL_TIM_IRQHandler>
 80015f6:	bf00      	nop
 80015f8:	200002d0 	.word	0x200002d0

080015fc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015fc:	4801      	ldr	r0, [pc, #4]	@ (8001604 <USART2_IRQHandler+0x8>)
 80015fe:	f002 be63 	b.w	80042c8 <HAL_UART_IRQHandler>
 8001602:	bf00      	nop
 8001604:	20000244 	.word	0x20000244

08001608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001608:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_11_Pin);
 800160a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800160e:	f001 f901 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_12_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(NOTE_12_Pin);
 8001616:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800161a:	f001 b8fb 	b.w	8002814 <HAL_GPIO_EXTI_IRQHandler>
 800161e:	bf00      	nop

08001620 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001620:	4801      	ldr	r0, [pc, #4]	@ (8001628 <TIM6_DAC_IRQHandler+0x8>)
 8001622:	f000 beb7 	b.w	8002394 <HAL_DAC_IRQHandler>
 8001626:	bf00      	nop
 8001628:	200003c0 	.word	0x200003c0

0800162c <update_decay_values>:
int decay_index_A = 0;
int decay_index_As = 0;
int decay_index_B = 0;

void update_decay_values()
{
 800162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// sustain_flag is the on/off switch. up button sets it true(on) and down button sets it false(off)
	if(sustain_flag)
 8001630:	4b6b      	ldr	r3, [pc, #428]	@ (80017e0 <update_decay_values+0x1b4>)
			decay_index_As++;
		}

		if(sustain_B)
		{
			decay_value_B = decay_table[decay_index_B];
 8001632:	f8df b230 	ldr.w	fp, [pc, #560]	@ 8001864 <update_decay_values+0x238>
	if(sustain_flag)
 8001636:	681b      	ldr	r3, [r3, #0]
			decay_value_B = decay_table[decay_index_B];
 8001638:	f8db a000 	ldr.w	sl, [fp]
{
 800163c:	b083      	sub	sp, #12
	if(sustain_flag)
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 8118 	bne.w	8001874 <update_decay_values+0x248>
 8001644:	4b67      	ldr	r3, [pc, #412]	@ (80017e4 <update_decay_values+0x1b8>)
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	f8df 821c 	ldr.w	r8, [pc, #540]	@ 8001868 <update_decay_values+0x23c>
 800164c:	f8df e21c 	ldr.w	lr, [pc, #540]	@ 800186c <update_decay_values+0x240>
 8001650:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 8001870 <update_decay_values+0x244>
 8001654:	4f64      	ldr	r7, [pc, #400]	@ (80017e8 <update_decay_values+0x1bc>)
 8001656:	4e65      	ldr	r6, [pc, #404]	@ (80017ec <update_decay_values+0x1c0>)
 8001658:	4d65      	ldr	r5, [pc, #404]	@ (80017f0 <update_decay_values+0x1c4>)
 800165a:	4c66      	ldr	r4, [pc, #408]	@ (80017f4 <update_decay_values+0x1c8>)
 800165c:	4866      	ldr	r0, [pc, #408]	@ (80017f8 <update_decay_values+0x1cc>)
 800165e:	4967      	ldr	r1, [pc, #412]	@ (80017fc <update_decay_values+0x1d0>)
 8001660:	4b67      	ldr	r3, [pc, #412]	@ (8001800 <update_decay_values+0x1d4>)

	}


	// if the index has reached the end of the decay table then the note should not be sustained anymore
	if(decay_index_C > 2500-1)
 8001662:	f8d8 2000 	ldr.w	r2, [r8]
 8001666:	f640 19c3 	movw	r9, #2499	@ 0x9c3
 800166a:	454a      	cmp	r2, r9
 800166c:	dd0b      	ble.n	8001686 <update_decay_values+0x5a>
	{
		sustain_C = 0;
 800166e:	4a65      	ldr	r2, [pc, #404]	@ (8001804 <update_decay_values+0x1d8>)
 8001670:	f04f 0900 	mov.w	r9, #0
 8001674:	f8c2 9000 	str.w	r9, [r2]
		decay_index_C = 0; //  reset index for repeat of sustain when note is played.
		decay_value_C = 1; // reset decay value afterwards
 8001678:	4a63      	ldr	r2, [pc, #396]	@ (8001808 <update_decay_values+0x1dc>)
		decay_index_C = 0; //  reset index for repeat of sustain when note is played.
 800167a:	f8c8 9000 	str.w	r9, [r8]
		decay_value_C = 1; // reset decay value afterwards
 800167e:	f04f 587e 	mov.w	r8, #1065353216	@ 0x3f800000
 8001682:	f8c2 8000 	str.w	r8, [r2]
	}

	if(decay_index_Cs > 2500-1)
 8001686:	f8de 2000 	ldr.w	r2, [lr]
 800168a:	f640 18c3 	movw	r8, #2499	@ 0x9c3
 800168e:	4542      	cmp	r2, r8
 8001690:	dd0c      	ble.n	80016ac <update_decay_values+0x80>
	{
		sustain_Cs = 0;
 8001692:	f04f 0800 	mov.w	r8, #0
		decay_index_Cs = 0;
		decay_value_Cs = 1;
 8001696:	f8df 91ac 	ldr.w	r9, [pc, #428]	@ 8001844 <update_decay_values+0x218>
		sustain_Cs = 0;
 800169a:	4a5c      	ldr	r2, [pc, #368]	@ (800180c <update_decay_values+0x1e0>)
		decay_index_Cs = 0;
 800169c:	f8ce 8000 	str.w	r8, [lr]
		decay_value_Cs = 1;
 80016a0:	f04f 5e7e 	mov.w	lr, #1065353216	@ 0x3f800000
		sustain_Cs = 0;
 80016a4:	f8c2 8000 	str.w	r8, [r2]
		decay_value_Cs = 1;
 80016a8:	f8c9 e000 	str.w	lr, [r9]
	}

	if(decay_index_D > 2500-1)
 80016ac:	f8dc 2000 	ldr.w	r2, [ip]
 80016b0:	f640 1ec3 	movw	lr, #2499	@ 0x9c3
 80016b4:	4572      	cmp	r2, lr
 80016b6:	dd0d      	ble.n	80016d4 <update_decay_values+0xa8>
	{
		sustain_D = 0;
 80016b8:	f04f 0e00 	mov.w	lr, #0
 80016bc:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8001848 <update_decay_values+0x21c>
		decay_index_D = 0;
		decay_value_D = 1;
 80016c0:	f8df 8188 	ldr.w	r8, [pc, #392]	@ 800184c <update_decay_values+0x220>
		decay_index_D = 0;
 80016c4:	f8cc e000 	str.w	lr, [ip]
		decay_value_D = 1;
 80016c8:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
		sustain_D = 0;
 80016cc:	f8c9 e000 	str.w	lr, [r9]
		decay_value_D = 1;
 80016d0:	f8c8 c000 	str.w	ip, [r8]
	}

	if(decay_index_Ds > 2500-1)
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	f640 1cc3 	movw	ip, #2499	@ 0x9c3
 80016da:	4562      	cmp	r2, ip
 80016dc:	dd0d      	ble.n	80016fa <update_decay_values+0xce>
	{
		sustain_Ds = 0;
 80016de:	f04f 0c00 	mov.w	ip, #0
 80016e2:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 8001850 <update_decay_values+0x224>
		decay_index_Ds = 0;
		decay_value_Ds = 1;
 80016e6:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8001854 <update_decay_values+0x228>
		decay_index_Ds = 0;
 80016ea:	f8c7 c000 	str.w	ip, [r7]
		decay_value_Ds = 1;
 80016ee:	f04f 577e 	mov.w	r7, #1065353216	@ 0x3f800000
		sustain_Ds = 0;
 80016f2:	f8c8 c000 	str.w	ip, [r8]
		decay_value_Ds = 1;
 80016f6:	f8ce 7000 	str.w	r7, [lr]
	}

	if(decay_index_E > 2500-1)
 80016fa:	6837      	ldr	r7, [r6, #0]
 80016fc:	f640 1cc3 	movw	ip, #2499	@ 0x9c3
 8001700:	4567      	cmp	r7, ip
 8001702:	dd0b      	ble.n	800171c <update_decay_values+0xf0>
	{
		sustain_E = 0;
 8001704:	2700      	movs	r7, #0
 8001706:	f8df e150 	ldr.w	lr, [pc, #336]	@ 8001858 <update_decay_values+0x22c>
		decay_index_E = 0;
		decay_value_E = 1;
 800170a:	f8df c150 	ldr.w	ip, [pc, #336]	@ 800185c <update_decay_values+0x230>
		decay_index_E = 0;
 800170e:	6037      	str	r7, [r6, #0]
		decay_value_E = 1;
 8001710:	f04f 567e 	mov.w	r6, #1065353216	@ 0x3f800000
		sustain_E = 0;
 8001714:	f8ce 7000 	str.w	r7, [lr]
		decay_value_E = 1;
 8001718:	f8cc 6000 	str.w	r6, [ip]
	}

	if(decay_index_F > 2500-1)
 800171c:	682e      	ldr	r6, [r5, #0]
 800171e:	f640 17c3 	movw	r7, #2499	@ 0x9c3
 8001722:	42be      	cmp	r6, r7
 8001724:	dd09      	ble.n	800173a <update_decay_values+0x10e>
	{
		sustain_F = 0;
 8001726:	2600      	movs	r6, #0
 8001728:	f8df c134 	ldr.w	ip, [pc, #308]	@ 8001860 <update_decay_values+0x234>
		decay_index_F = 0;
		decay_value_F = 1;
 800172c:	4f38      	ldr	r7, [pc, #224]	@ (8001810 <update_decay_values+0x1e4>)
		decay_index_F = 0;
 800172e:	602e      	str	r6, [r5, #0]
		decay_value_F = 1;
 8001730:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
		sustain_F = 0;
 8001734:	f8cc 6000 	str.w	r6, [ip]
		decay_value_F = 1;
 8001738:	603d      	str	r5, [r7, #0]
	}

	if(decay_index_Fs > 2500-1)
 800173a:	6825      	ldr	r5, [r4, #0]
 800173c:	f640 16c3 	movw	r6, #2499	@ 0x9c3
 8001740:	42b5      	cmp	r5, r6
 8001742:	dd07      	ble.n	8001754 <update_decay_values+0x128>
	{
		sustain_Fs = 0;
 8001744:	2500      	movs	r5, #0
 8001746:	4f33      	ldr	r7, [pc, #204]	@ (8001814 <update_decay_values+0x1e8>)
		decay_index_Fs = 0;
		decay_value_Fs = 1;
 8001748:	4e33      	ldr	r6, [pc, #204]	@ (8001818 <update_decay_values+0x1ec>)
		decay_index_Fs = 0;
 800174a:	6025      	str	r5, [r4, #0]
		decay_value_Fs = 1;
 800174c:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
		sustain_Fs = 0;
 8001750:	603d      	str	r5, [r7, #0]
		decay_value_Fs = 1;
 8001752:	6034      	str	r4, [r6, #0]
	}

	if(decay_index_G > 2500-1)
 8001754:	6805      	ldr	r5, [r0, #0]
 8001756:	f640 14c3 	movw	r4, #2499	@ 0x9c3
 800175a:	42a5      	cmp	r5, r4
 800175c:	dd07      	ble.n	800176e <update_decay_values+0x142>
	{
		sustain_G = 0;
 800175e:	2400      	movs	r4, #0
 8001760:	4e2e      	ldr	r6, [pc, #184]	@ (800181c <update_decay_values+0x1f0>)
		decay_index_G = 0;
		decay_value_G = 1;
 8001762:	4d2f      	ldr	r5, [pc, #188]	@ (8001820 <update_decay_values+0x1f4>)
		decay_index_G = 0;
 8001764:	6004      	str	r4, [r0, #0]
		decay_value_G = 1;
 8001766:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
		sustain_G = 0;
 800176a:	6034      	str	r4, [r6, #0]
		decay_value_G = 1;
 800176c:	6028      	str	r0, [r5, #0]
	}

	if(decay_index_Gs > 2500-1)
 800176e:	680c      	ldr	r4, [r1, #0]
 8001770:	f640 10c3 	movw	r0, #2499	@ 0x9c3
 8001774:	4284      	cmp	r4, r0
 8001776:	dd07      	ble.n	8001788 <update_decay_values+0x15c>
	{
		sustain_Gs = 0;
 8001778:	2000      	movs	r0, #0
 800177a:	4d2a      	ldr	r5, [pc, #168]	@ (8001824 <update_decay_values+0x1f8>)
		decay_index_Gs = 0;
		decay_value_Gs = 1;
 800177c:	4c2a      	ldr	r4, [pc, #168]	@ (8001828 <update_decay_values+0x1fc>)
		decay_index_Gs = 0;
 800177e:	6008      	str	r0, [r1, #0]
		decay_value_Gs = 1;
 8001780:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
		sustain_Gs = 0;
 8001784:	6028      	str	r0, [r5, #0]
		decay_value_Gs = 1;
 8001786:	6021      	str	r1, [r4, #0]
	}

	if(decay_index_A > 2500-1)
 8001788:	9a01      	ldr	r2, [sp, #4]
 800178a:	6810      	ldr	r0, [r2, #0]
 800178c:	f640 11c3 	movw	r1, #2499	@ 0x9c3
 8001790:	4288      	cmp	r0, r1
 8001792:	dd07      	ble.n	80017a4 <update_decay_values+0x178>
	{
		sustain_A = 0;
 8001794:	2100      	movs	r1, #0
 8001796:	4c25      	ldr	r4, [pc, #148]	@ (800182c <update_decay_values+0x200>)
		decay_index_A = 0;
		decay_value_A = 1;
 8001798:	4825      	ldr	r0, [pc, #148]	@ (8001830 <update_decay_values+0x204>)
		decay_index_A = 0;
 800179a:	6011      	str	r1, [r2, #0]
		decay_value_A = 1;
 800179c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
		sustain_A = 0;
 80017a0:	6021      	str	r1, [r4, #0]
		decay_value_A = 1;
 80017a2:	6002      	str	r2, [r0, #0]
	}

	if(decay_index_As > 2500-1)
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80017aa:	4291      	cmp	r1, r2
 80017ac:	dd07      	ble.n	80017be <update_decay_values+0x192>
	{
		sustain_As = 0;
 80017ae:	4921      	ldr	r1, [pc, #132]	@ (8001834 <update_decay_values+0x208>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	600a      	str	r2, [r1, #0]
		decay_index_As = 0;
		decay_value_As = 1;
 80017b4:	4920      	ldr	r1, [pc, #128]	@ (8001838 <update_decay_values+0x20c>)
		decay_index_As = 0;
 80017b6:	601a      	str	r2, [r3, #0]
		decay_value_As = 1;
 80017b8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80017bc:	600b      	str	r3, [r1, #0]
	}

	if(decay_index_B > 2500-1)
 80017be:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80017c2:	459a      	cmp	sl, r3
 80017c4:	dd08      	ble.n	80017d8 <update_decay_values+0x1ac>
	{
		sustain_B = 0;
 80017c6:	481d      	ldr	r0, [pc, #116]	@ (800183c <update_decay_values+0x210>)
		decay_index_B = 0;
		decay_value_B = 1;
 80017c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001840 <update_decay_values+0x214>)
		sustain_B = 0;
 80017ca:	2300      	movs	r3, #0
		decay_value_B = 1;
 80017cc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
		sustain_B = 0;
 80017d0:	6003      	str	r3, [r0, #0]
		decay_index_B = 0;
 80017d2:	f8cb 3000 	str.w	r3, [fp]
		decay_value_B = 1;
 80017d6:	6011      	str	r1, [r2, #0]
	}



}
 80017d8:	b003      	add	sp, #12
 80017da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017de:	bf00      	nop
 80017e0:	200003d4 	.word	0x200003d4
 80017e4:	20000404 	.word	0x20000404
 80017e8:	2000041c 	.word	0x2000041c
 80017ec:	20000418 	.word	0x20000418
 80017f0:	20000414 	.word	0x20000414
 80017f4:	20000410 	.word	0x20000410
 80017f8:	2000040c 	.word	0x2000040c
 80017fc:	20000408 	.word	0x20000408
 8001800:	20000400 	.word	0x20000400
 8001804:	200001e0 	.word	0x200001e0
 8001808:	20000030 	.word	0x20000030
 800180c:	200001dc 	.word	0x200001dc
 8001810:	2000001c 	.word	0x2000001c
 8001814:	200001c8 	.word	0x200001c8
 8001818:	20000018 	.word	0x20000018
 800181c:	200001c4 	.word	0x200001c4
 8001820:	20000014 	.word	0x20000014
 8001824:	200001c0 	.word	0x200001c0
 8001828:	20000010 	.word	0x20000010
 800182c:	200001bc 	.word	0x200001bc
 8001830:	2000000c 	.word	0x2000000c
 8001834:	200001b8 	.word	0x200001b8
 8001838:	20000008 	.word	0x20000008
 800183c:	200001b4 	.word	0x200001b4
 8001840:	20000004 	.word	0x20000004
 8001844:	2000002c 	.word	0x2000002c
 8001848:	200001d8 	.word	0x200001d8
 800184c:	20000028 	.word	0x20000028
 8001850:	200001d4 	.word	0x200001d4
 8001854:	20000024 	.word	0x20000024
 8001858:	200001d0 	.word	0x200001d0
 800185c:	20000020 	.word	0x20000020
 8001860:	200001cc 	.word	0x200001cc
 8001864:	200003fc 	.word	0x200003fc
 8001868:	20000428 	.word	0x20000428
 800186c:	20000424 	.word	0x20000424
 8001870:	20000420 	.word	0x20000420
		if(sustain_C)
 8001874:	4b60      	ldr	r3, [pc, #384]	@ (80019f8 <update_decay_values+0x3cc>)
			decay_value_C = decay_table[decay_index_C];
 8001876:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ 8001a70 <update_decay_values+0x444>
		if(sustain_C)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	b153      	cbz	r3, 8001894 <update_decay_values+0x268>
			decay_value_C = decay_table[decay_index_C];
 800187e:	f8d8 3000 	ldr.w	r3, [r8]
 8001882:	4a5e      	ldr	r2, [pc, #376]	@ (80019fc <update_decay_values+0x3d0>)
 8001884:	495e      	ldr	r1, [pc, #376]	@ (8001a00 <update_decay_values+0x3d4>)
 8001886:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			decay_index_C++;
 800188a:	3301      	adds	r3, #1
			decay_value_C = decay_table[decay_index_C];
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	600a      	str	r2, [r1, #0]
			decay_index_C++;
 8001890:	f8c8 3000 	str.w	r3, [r8]
		if(sustain_Cs)
 8001894:	4b5b      	ldr	r3, [pc, #364]	@ (8001a04 <update_decay_values+0x3d8>)
			decay_value_Cs = decay_table[decay_index_Cs];
 8001896:	f8df e1dc 	ldr.w	lr, [pc, #476]	@ 8001a74 <update_decay_values+0x448>
		if(sustain_Cs)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b153      	cbz	r3, 80018b4 <update_decay_values+0x288>
			decay_value_Cs = decay_table[decay_index_Cs];
 800189e:	f8de 3000 	ldr.w	r3, [lr]
 80018a2:	4a56      	ldr	r2, [pc, #344]	@ (80019fc <update_decay_values+0x3d0>)
 80018a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			decay_index_Cs++;
 80018a8:	3301      	adds	r3, #1
 80018aa:	f8ce 3000 	str.w	r3, [lr]
			decay_value_Cs = decay_table[decay_index_Cs];
 80018ae:	4b56      	ldr	r3, [pc, #344]	@ (8001a08 <update_decay_values+0x3dc>)
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	601a      	str	r2, [r3, #0]
		if(sustain_D)
 80018b4:	4b55      	ldr	r3, [pc, #340]	@ (8001a0c <update_decay_values+0x3e0>)
			decay_value_D = decay_table[decay_index_D];
 80018b6:	f8df c1c0 	ldr.w	ip, [pc, #448]	@ 8001a78 <update_decay_values+0x44c>
		if(sustain_D)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	b153      	cbz	r3, 80018d4 <update_decay_values+0x2a8>
			decay_value_D = decay_table[decay_index_D];
 80018be:	f8dc 3000 	ldr.w	r3, [ip]
 80018c2:	4a4e      	ldr	r2, [pc, #312]	@ (80019fc <update_decay_values+0x3d0>)
 80018c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			decay_index_D++;
 80018c8:	3301      	adds	r3, #1
 80018ca:	f8cc 3000 	str.w	r3, [ip]
			decay_value_D = decay_table[decay_index_D];
 80018ce:	4b50      	ldr	r3, [pc, #320]	@ (8001a10 <update_decay_values+0x3e4>)
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	601a      	str	r2, [r3, #0]
		if(sustain_Ds)
 80018d4:	4b4f      	ldr	r3, [pc, #316]	@ (8001a14 <update_decay_values+0x3e8>)
			decay_value_Ds = decay_table[decay_index_Ds];
 80018d6:	4f50      	ldr	r7, [pc, #320]	@ (8001a18 <update_decay_values+0x3ec>)
		if(sustain_Ds)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	b143      	cbz	r3, 80018ee <update_decay_values+0x2c2>
			decay_value_Ds = decay_table[decay_index_Ds];
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4a47      	ldr	r2, [pc, #284]	@ (80019fc <update_decay_values+0x3d0>)
 80018e0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			decay_index_Ds++;
 80018e4:	3301      	adds	r3, #1
 80018e6:	603b      	str	r3, [r7, #0]
			decay_value_Ds = decay_table[decay_index_Ds];
 80018e8:	4b4c      	ldr	r3, [pc, #304]	@ (8001a1c <update_decay_values+0x3f0>)
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	601a      	str	r2, [r3, #0]
		if(sustain_E)
 80018ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001a20 <update_decay_values+0x3f4>)
			decay_value_E = decay_table[decay_index_E];
 80018f0:	4e4c      	ldr	r6, [pc, #304]	@ (8001a24 <update_decay_values+0x3f8>)
		if(sustain_E)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b143      	cbz	r3, 8001908 <update_decay_values+0x2dc>
			decay_value_E = decay_table[decay_index_E];
 80018f6:	6833      	ldr	r3, [r6, #0]
 80018f8:	4a40      	ldr	r2, [pc, #256]	@ (80019fc <update_decay_values+0x3d0>)
 80018fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			decay_index_E++;
 80018fe:	3301      	adds	r3, #1
 8001900:	6033      	str	r3, [r6, #0]
			decay_value_E = decay_table[decay_index_E];
 8001902:	4b49      	ldr	r3, [pc, #292]	@ (8001a28 <update_decay_values+0x3fc>)
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	601a      	str	r2, [r3, #0]
		if(sustain_F)
 8001908:	4b48      	ldr	r3, [pc, #288]	@ (8001a2c <update_decay_values+0x400>)
			decay_value_F = decay_table[decay_index_F];
 800190a:	4d49      	ldr	r5, [pc, #292]	@ (8001a30 <update_decay_values+0x404>)
		if(sustain_F)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b143      	cbz	r3, 8001922 <update_decay_values+0x2f6>
			decay_value_F = decay_table[decay_index_F];
 8001910:	682b      	ldr	r3, [r5, #0]
 8001912:	4a3a      	ldr	r2, [pc, #232]	@ (80019fc <update_decay_values+0x3d0>)
 8001914:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			decay_index_F++;
 8001918:	3301      	adds	r3, #1
 800191a:	602b      	str	r3, [r5, #0]
			decay_value_F = decay_table[decay_index_F];
 800191c:	4b45      	ldr	r3, [pc, #276]	@ (8001a34 <update_decay_values+0x408>)
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	601a      	str	r2, [r3, #0]
		if(sustain_Fs)
 8001922:	4b45      	ldr	r3, [pc, #276]	@ (8001a38 <update_decay_values+0x40c>)
			decay_value_Fs = decay_table[decay_index_Fs];
 8001924:	4c45      	ldr	r4, [pc, #276]	@ (8001a3c <update_decay_values+0x410>)
		if(sustain_Fs)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	b143      	cbz	r3, 800193c <update_decay_values+0x310>
			decay_value_Fs = decay_table[decay_index_Fs];
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	4a33      	ldr	r2, [pc, #204]	@ (80019fc <update_decay_values+0x3d0>)
 800192e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			decay_index_Fs++;
 8001932:	3301      	adds	r3, #1
 8001934:	6023      	str	r3, [r4, #0]
			decay_value_Fs = decay_table[decay_index_Fs];
 8001936:	4b42      	ldr	r3, [pc, #264]	@ (8001a40 <update_decay_values+0x414>)
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	601a      	str	r2, [r3, #0]
		if(sustain_G)
 800193c:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <update_decay_values+0x418>)
			decay_value_G = decay_table[decay_index_G];
 800193e:	4842      	ldr	r0, [pc, #264]	@ (8001a48 <update_decay_values+0x41c>)
		if(sustain_G)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b143      	cbz	r3, 8001956 <update_decay_values+0x32a>
			decay_value_G = decay_table[decay_index_G];
 8001944:	6803      	ldr	r3, [r0, #0]
 8001946:	4a2d      	ldr	r2, [pc, #180]	@ (80019fc <update_decay_values+0x3d0>)
 8001948:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			decay_index_G++;
 800194c:	3301      	adds	r3, #1
 800194e:	6003      	str	r3, [r0, #0]
			decay_value_G = decay_table[decay_index_G];
 8001950:	4b3e      	ldr	r3, [pc, #248]	@ (8001a4c <update_decay_values+0x420>)
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	601a      	str	r2, [r3, #0]
		if(sustain_Gs)
 8001956:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <update_decay_values+0x424>)
			decay_value_Gs = decay_table[decay_index_Gs];
 8001958:	493e      	ldr	r1, [pc, #248]	@ (8001a54 <update_decay_values+0x428>)
		if(sustain_Gs)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b143      	cbz	r3, 8001970 <update_decay_values+0x344>
			decay_value_Gs = decay_table[decay_index_Gs];
 800195e:	680b      	ldr	r3, [r1, #0]
 8001960:	4a26      	ldr	r2, [pc, #152]	@ (80019fc <update_decay_values+0x3d0>)
 8001962:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			decay_index_Gs++;
 8001966:	3301      	adds	r3, #1
 8001968:	600b      	str	r3, [r1, #0]
			decay_value_Gs = decay_table[decay_index_Gs];
 800196a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a58 <update_decay_values+0x42c>)
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	601a      	str	r2, [r3, #0]
		if(sustain_A)
 8001970:	4b3a      	ldr	r3, [pc, #232]	@ (8001a5c <update_decay_values+0x430>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b9e3      	cbnz	r3, 80019b0 <update_decay_values+0x384>
		if(sustain_As)
 8001976:	4b3a      	ldr	r3, [pc, #232]	@ (8001a60 <update_decay_values+0x434>)
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a64 <update_decay_values+0x438>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	bb4b      	cbnz	r3, 80019d4 <update_decay_values+0x3a8>
 8001980:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <update_decay_values+0x43c>)
		if(sustain_B)
 8001982:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 8001a7c <update_decay_values+0x450>
 8001986:	f8d9 9000 	ldr.w	r9, [r9]
 800198a:	f1b9 0f00 	cmp.w	r9, #0
 800198e:	f43f ae68 	beq.w	8001662 <update_decay_values+0x36>
			decay_value_B = decay_table[decay_index_B];
 8001992:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 80019fc <update_decay_values+0x3d0>
 8001996:	eb09 098a 	add.w	r9, r9, sl, lsl #2
 800199a:	edd9 7a00 	vldr	s15, [r9]
 800199e:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8001a80 <update_decay_values+0x454>
			decay_index_B++;
 80019a2:	f10a 0a01 	add.w	sl, sl, #1
 80019a6:	f8cb a000 	str.w	sl, [fp]
			decay_value_B = decay_table[decay_index_B];
 80019aa:	edc9 7a00 	vstr	s15, [r9]
			decay_index_B++;
 80019ae:	e658      	b.n	8001662 <update_decay_values+0x36>
			decay_value_A = decay_table[decay_index_A];
 80019b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a60 <update_decay_values+0x434>)
 80019b2:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 80019fc <update_decay_values+0x3d0>
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	9201      	str	r2, [sp, #4]
 80019ba:	eb09 0983 	add.w	r9, r9, r3, lsl #2
			decay_index_A++;
 80019be:	3301      	adds	r3, #1
 80019c0:	6013      	str	r3, [r2, #0]
			decay_value_A = decay_table[decay_index_A];
 80019c2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <update_decay_values+0x440>)
 80019c4:	f8d9 9000 	ldr.w	r9, [r9]
 80019c8:	f8c3 9000 	str.w	r9, [r3]
		if(sustain_As)
 80019cc:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <update_decay_values+0x438>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0d5      	beq.n	8001980 <update_decay_values+0x354>
			decay_value_As = decay_table[decay_index_As];
 80019d4:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <update_decay_values+0x43c>)
 80019d6:	f8df 9024 	ldr.w	r9, [pc, #36]	@ 80019fc <update_decay_values+0x3d0>
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80019e0:	edd9 7a00 	vldr	s15, [r9]
			decay_index_As++;
 80019e4:	f102 0901 	add.w	r9, r2, #1
 80019e8:	f8c3 9000 	str.w	r9, [r3]
			decay_value_As = decay_table[decay_index_As];
 80019ec:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8001a84 <update_decay_values+0x458>
 80019f0:	edc9 7a00 	vstr	s15, [r9]
			decay_index_As++;
 80019f4:	e7c5      	b.n	8001982 <update_decay_values+0x356>
 80019f6:	bf00      	nop
 80019f8:	200001e0 	.word	0x200001e0
 80019fc:	08004cec 	.word	0x08004cec
 8001a00:	20000030 	.word	0x20000030
 8001a04:	200001dc 	.word	0x200001dc
 8001a08:	2000002c 	.word	0x2000002c
 8001a0c:	200001d8 	.word	0x200001d8
 8001a10:	20000028 	.word	0x20000028
 8001a14:	200001d4 	.word	0x200001d4
 8001a18:	2000041c 	.word	0x2000041c
 8001a1c:	20000024 	.word	0x20000024
 8001a20:	200001d0 	.word	0x200001d0
 8001a24:	20000418 	.word	0x20000418
 8001a28:	20000020 	.word	0x20000020
 8001a2c:	200001cc 	.word	0x200001cc
 8001a30:	20000414 	.word	0x20000414
 8001a34:	2000001c 	.word	0x2000001c
 8001a38:	200001c8 	.word	0x200001c8
 8001a3c:	20000410 	.word	0x20000410
 8001a40:	20000018 	.word	0x20000018
 8001a44:	200001c4 	.word	0x200001c4
 8001a48:	2000040c 	.word	0x2000040c
 8001a4c:	20000014 	.word	0x20000014
 8001a50:	200001c0 	.word	0x200001c0
 8001a54:	20000408 	.word	0x20000408
 8001a58:	20000010 	.word	0x20000010
 8001a5c:	200001bc 	.word	0x200001bc
 8001a60:	20000404 	.word	0x20000404
 8001a64:	200001b8 	.word	0x200001b8
 8001a68:	20000400 	.word	0x20000400
 8001a6c:	2000000c 	.word	0x2000000c
 8001a70:	20000428 	.word	0x20000428
 8001a74:	20000424 	.word	0x20000424
 8001a78:	20000420 	.word	0x20000420
 8001a7c:	200001b4 	.word	0x200001b4
 8001a80:	20000004 	.word	0x20000004
 8001a84:	20000008 	.word	0x20000008

08001a88 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a88:	4a03      	ldr	r2, [pc, #12]	@ (8001a98 <SystemInit+0x10>)
 8001a8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001a8e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <update_note_tables>:
	}

	update_note_tables();
}

void update_note_tables(){
 8001a9c:	b430      	push	{r4, r5}
	 * This function takes the current octave and uses it to update our current
	 * note and sample information.
	 * The NOTE_TABLES are found in sine_tables.h
	 *
	 */
	current_C_TABLE = C_TABLES[activeOctave];
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b98 <update_note_tables+0xfc>)
 8001aa0:	4d3e      	ldr	r5, [pc, #248]	@ (8001b9c <update_note_tables+0x100>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba0 <update_note_tables+0x104>)
 8001aa6:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 8001aaa:	483e      	ldr	r0, [pc, #248]	@ (8001ba4 <update_note_tables+0x108>)
	current_C_TABLE = C_TABLES[activeOctave];
 8001aac:	6015      	str	r5, [r2, #0]
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 8001aae:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba8 <update_note_tables+0x10c>)
 8001ab0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_D_TABLE = D_TABLES[activeOctave];
 8001ab4:	493d      	ldr	r1, [pc, #244]	@ (8001bac <update_note_tables+0x110>)
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 8001ab6:	6010      	str	r0, [r2, #0]
	current_D_TABLE = D_TABLES[activeOctave];
 8001ab8:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb0 <update_note_tables+0x114>)
 8001aba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 8001abe:	4c3d      	ldr	r4, [pc, #244]	@ (8001bb4 <update_note_tables+0x118>)
	current_D_TABLE = D_TABLES[activeOctave];
 8001ac0:	6011      	str	r1, [r2, #0]
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 8001ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb8 <update_note_tables+0x11c>)
 8001ac4:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_E_TABLE = E_TABLES[activeOctave];
 8001ac8:	483c      	ldr	r0, [pc, #240]	@ (8001bbc <update_note_tables+0x120>)
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 8001aca:	6015      	str	r5, [r2, #0]
	current_E_TABLE = E_TABLES[activeOctave];
 8001acc:	4a3c      	ldr	r2, [pc, #240]	@ (8001bc0 <update_note_tables+0x124>)
 8001ace:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_F_TABLE = F_TABLES[activeOctave];
 8001ad2:	493c      	ldr	r1, [pc, #240]	@ (8001bc4 <update_note_tables+0x128>)
	current_E_TABLE = E_TABLES[activeOctave];
 8001ad4:	6010      	str	r0, [r2, #0]
	current_F_TABLE = F_TABLES[activeOctave];
 8001ad6:	4a3c      	ldr	r2, [pc, #240]	@ (8001bc8 <update_note_tables+0x12c>)
 8001ad8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 8001adc:	4c3b      	ldr	r4, [pc, #236]	@ (8001bcc <update_note_tables+0x130>)
	current_F_TABLE = F_TABLES[activeOctave];
 8001ade:	6011      	str	r1, [r2, #0]
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 8001ae0:	4a3b      	ldr	r2, [pc, #236]	@ (8001bd0 <update_note_tables+0x134>)
 8001ae2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_G_TABLE = G_TABLES[activeOctave];
 8001ae6:	483b      	ldr	r0, [pc, #236]	@ (8001bd4 <update_note_tables+0x138>)
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 8001ae8:	6015      	str	r5, [r2, #0]
	current_G_TABLE = G_TABLES[activeOctave];
 8001aea:	4a3b      	ldr	r2, [pc, #236]	@ (8001bd8 <update_note_tables+0x13c>)
 8001aec:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 8001af0:	493a      	ldr	r1, [pc, #232]	@ (8001bdc <update_note_tables+0x140>)
	current_G_TABLE = G_TABLES[activeOctave];
 8001af2:	6010      	str	r0, [r2, #0]
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 8001af4:	4a3a      	ldr	r2, [pc, #232]	@ (8001be0 <update_note_tables+0x144>)
 8001af6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_A_TABLE = A_TABLES[activeOctave];
 8001afa:	4c3a      	ldr	r4, [pc, #232]	@ (8001be4 <update_note_tables+0x148>)
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 8001afc:	6011      	str	r1, [r2, #0]
	current_A_TABLE = A_TABLES[activeOctave];
 8001afe:	4a3a      	ldr	r2, [pc, #232]	@ (8001be8 <update_note_tables+0x14c>)
 8001b00:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_As_TABLE = As_TABLES[activeOctave];
 8001b04:	4839      	ldr	r0, [pc, #228]	@ (8001bec <update_note_tables+0x150>)
	current_A_TABLE = A_TABLES[activeOctave];
 8001b06:	6015      	str	r5, [r2, #0]
	current_As_TABLE = As_TABLES[activeOctave];
 8001b08:	4a39      	ldr	r2, [pc, #228]	@ (8001bf0 <update_note_tables+0x154>)
 8001b0a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_B_TABLE = B_TABLES[activeOctave];
 8001b0e:	4939      	ldr	r1, [pc, #228]	@ (8001bf4 <update_note_tables+0x158>)
	current_As_TABLE = As_TABLES[activeOctave];
 8001b10:	6010      	str	r0, [r2, #0]
	current_B_TABLE = B_TABLES[activeOctave];
 8001b12:	4a39      	ldr	r2, [pc, #228]	@ (8001bf8 <update_note_tables+0x15c>)
 8001b14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]

	current_C_SAMPLES = C_SAMPLES[activeOctave];
 8001b18:	4c38      	ldr	r4, [pc, #224]	@ (8001bfc <update_note_tables+0x160>)
	current_B_TABLE = B_TABLES[activeOctave];
 8001b1a:	6011      	str	r1, [r2, #0]
	current_C_SAMPLES = C_SAMPLES[activeOctave];
 8001b1c:	4a38      	ldr	r2, [pc, #224]	@ (8001c00 <update_note_tables+0x164>)
 8001b1e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 8001b22:	4838      	ldr	r0, [pc, #224]	@ (8001c04 <update_note_tables+0x168>)
	current_C_SAMPLES = C_SAMPLES[activeOctave];
 8001b24:	6015      	str	r5, [r2, #0]
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 8001b26:	4a38      	ldr	r2, [pc, #224]	@ (8001c08 <update_note_tables+0x16c>)
 8001b28:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 8001b2c:	4937      	ldr	r1, [pc, #220]	@ (8001c0c <update_note_tables+0x170>)
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 8001b2e:	6010      	str	r0, [r2, #0]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 8001b30:	4c37      	ldr	r4, [pc, #220]	@ (8001c10 <update_note_tables+0x174>)
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 8001b32:	4a38      	ldr	r2, [pc, #224]	@ (8001c14 <update_note_tables+0x178>)
 8001b34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 8001b38:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 8001b3c:	6011      	str	r1, [r2, #0]
	current_E_SAMPLES = E_SAMPLES[activeOctave];
 8001b3e:	4936      	ldr	r1, [pc, #216]	@ (8001c18 <update_note_tables+0x17c>)
 8001b40:	4a36      	ldr	r2, [pc, #216]	@ (8001c1c <update_note_tables+0x180>)
 8001b42:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 8001b46:	4836      	ldr	r0, [pc, #216]	@ (8001c20 <update_note_tables+0x184>)
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 8001b48:	4d36      	ldr	r5, [pc, #216]	@ (8001c24 <update_note_tables+0x188>)
	current_E_SAMPLES = E_SAMPLES[activeOctave];
 8001b4a:	6011      	str	r1, [r2, #0]
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 8001b4c:	4a36      	ldr	r2, [pc, #216]	@ (8001c28 <update_note_tables+0x18c>)
 8001b4e:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 8001b52:	6004      	str	r4, [r0, #0]
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 8001b54:	4835      	ldr	r0, [pc, #212]	@ (8001c2c <update_note_tables+0x190>)
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 8001b56:	6015      	str	r5, [r2, #0]
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 8001b58:	4a35      	ldr	r2, [pc, #212]	@ (8001c30 <update_note_tables+0x194>)
 8001b5a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 8001b5e:	4935      	ldr	r1, [pc, #212]	@ (8001c34 <update_note_tables+0x198>)
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 8001b60:	6010      	str	r0, [r2, #0]
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 8001b62:	4a35      	ldr	r2, [pc, #212]	@ (8001c38 <update_note_tables+0x19c>)
 8001b64:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 8001b68:	4c34      	ldr	r4, [pc, #208]	@ (8001c3c <update_note_tables+0x1a0>)
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 8001b6a:	6011      	str	r1, [r2, #0]
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 8001b6c:	4934      	ldr	r1, [pc, #208]	@ (8001c40 <update_note_tables+0x1a4>)
 8001b6e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 8001b72:	4c34      	ldr	r4, [pc, #208]	@ (8001c44 <update_note_tables+0x1a8>)
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 8001b74:	600d      	str	r5, [r1, #0]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 8001b76:	4834      	ldr	r0, [pc, #208]	@ (8001c48 <update_note_tables+0x1ac>)
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 8001b78:	4934      	ldr	r1, [pc, #208]	@ (8001c4c <update_note_tables+0x1b0>)
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 8001b7a:	4a35      	ldr	r2, [pc, #212]	@ (8001c50 <update_note_tables+0x1b4>)
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 8001b7c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8001b80:	600c      	str	r4, [r1, #0]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 8001b82:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 8001b86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 8001b8a:	4932      	ldr	r1, [pc, #200]	@ (8001c54 <update_note_tables+0x1b8>)
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 8001b8c:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <update_note_tables+0x1bc>)
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 8001b8e:	6008      	str	r0, [r1, #0]

}
 8001b90:	bc30      	pop	{r4, r5}
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 8001b92:	601a      	str	r2, [r3, #0]
}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000038 	.word	0x20000038
 8001b9c:	20000170 	.word	0x20000170
 8001ba0:	20000488 	.word	0x20000488
 8001ba4:	20000154 	.word	0x20000154
 8001ba8:	20000484 	.word	0x20000484
 8001bac:	20000138 	.word	0x20000138
 8001bb0:	20000480 	.word	0x20000480
 8001bb4:	2000011c 	.word	0x2000011c
 8001bb8:	2000047c 	.word	0x2000047c
 8001bbc:	20000100 	.word	0x20000100
 8001bc0:	20000478 	.word	0x20000478
 8001bc4:	200000e4 	.word	0x200000e4
 8001bc8:	20000474 	.word	0x20000474
 8001bcc:	200000c8 	.word	0x200000c8
 8001bd0:	20000470 	.word	0x20000470
 8001bd4:	200000ac 	.word	0x200000ac
 8001bd8:	2000046c 	.word	0x2000046c
 8001bdc:	20000090 	.word	0x20000090
 8001be0:	20000468 	.word	0x20000468
 8001be4:	20000074 	.word	0x20000074
 8001be8:	20000464 	.word	0x20000464
 8001bec:	20000058 	.word	0x20000058
 8001bf0:	20000460 	.word	0x20000460
 8001bf4:	2000003c 	.word	0x2000003c
 8001bf8:	2000045c 	.word	0x2000045c
 8001bfc:	08007578 	.word	0x08007578
 8001c00:	20000458 	.word	0x20000458
 8001c04:	0800755c 	.word	0x0800755c
 8001c08:	20000454 	.word	0x20000454
 8001c0c:	08007540 	.word	0x08007540
 8001c10:	08007524 	.word	0x08007524
 8001c14:	20000450 	.word	0x20000450
 8001c18:	08007508 	.word	0x08007508
 8001c1c:	20000448 	.word	0x20000448
 8001c20:	2000044c 	.word	0x2000044c
 8001c24:	080074ec 	.word	0x080074ec
 8001c28:	20000444 	.word	0x20000444
 8001c2c:	080074d0 	.word	0x080074d0
 8001c30:	20000440 	.word	0x20000440
 8001c34:	080074b4 	.word	0x080074b4
 8001c38:	2000043c 	.word	0x2000043c
 8001c3c:	08007498 	.word	0x08007498
 8001c40:	20000438 	.word	0x20000438
 8001c44:	0800747c 	.word	0x0800747c
 8001c48:	08007460 	.word	0x08007460
 8001c4c:	20000434 	.word	0x20000434
 8001c50:	08007444 	.word	0x08007444
 8001c54:	20000430 	.word	0x20000430
 8001c58:	2000042c 	.word	0x2000042c

08001c5c <tranposition__increment_octave>:
	switch (activeOctave) {
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <tranposition__increment_octave+0x48>)
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	2a05      	cmp	r2, #5
 8001c62:	d81c      	bhi.n	8001c9e <tranposition__increment_octave+0x42>
 8001c64:	e8df f002 	tbb	[pc, r2]
 8001c68:	130f0307 	.word	0x130f0307
 8001c6c:	0b17      	.short	0x0b17
 8001c6e:	2202      	movs	r2, #2
		activeOctave = OCTAVE_2;
 8001c70:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001c72:	f7ff bf13 	b.w	8001a9c <update_note_tables>
	switch (activeOctave) {
 8001c76:	2201      	movs	r2, #1
		activeOctave = OCTAVE_2;
 8001c78:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001c7a:	f7ff bf0f 	b.w	8001a9c <update_note_tables>
		break;
 8001c7e:	2206      	movs	r2, #6
		activeOctave = OCTAVE_2;
 8001c80:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001c82:	f7ff bf0b 	b.w	8001a9c <update_note_tables>
		break;
 8001c86:	2203      	movs	r2, #3
		activeOctave = OCTAVE_2;
 8001c88:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001c8a:	f7ff bf07 	b.w	8001a9c <update_note_tables>
		break;
 8001c8e:	2204      	movs	r2, #4
		activeOctave = OCTAVE_2;
 8001c90:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001c92:	f7ff bf03 	b.w	8001a9c <update_note_tables>
		break;
 8001c96:	2205      	movs	r2, #5
		activeOctave = OCTAVE_2;
 8001c98:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001c9a:	f7ff beff 	b.w	8001a9c <update_note_tables>
		break;
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	e7e6      	b.n	8001c70 <tranposition__increment_octave+0x14>
 8001ca2:	bf00      	nop
 8001ca4:	20000038 	.word	0x20000038

08001ca8 <tranposition__decrement_octave>:
	switch (activeOctave) {
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <tranposition__decrement_octave+0x48>)
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	2a05      	cmp	r2, #5
 8001cae:	d81c      	bhi.n	8001cea <tranposition__decrement_octave+0x42>
 8001cb0:	e8df f002 	tbb	[pc, r2]
 8001cb4:	130f0307 	.word	0x130f0307
 8001cb8:	0b17      	.short	0x0b17
 8001cba:	2200      	movs	r2, #0
		activeOctave = OCTAVE_7;
 8001cbc:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001cbe:	f7ff beed 	b.w	8001a9c <update_note_tables>
	switch (activeOctave) {
 8001cc2:	2206      	movs	r2, #6
		activeOctave = OCTAVE_7;
 8001cc4:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001cc6:	f7ff bee9 	b.w	8001a9c <update_note_tables>
		break;
 8001cca:	2204      	movs	r2, #4
		activeOctave = OCTAVE_7;
 8001ccc:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001cce:	f7ff bee5 	b.w	8001a9c <update_note_tables>
		break;
 8001cd2:	2201      	movs	r2, #1
		activeOctave = OCTAVE_7;
 8001cd4:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001cd6:	f7ff bee1 	b.w	8001a9c <update_note_tables>
		break;
 8001cda:	2202      	movs	r2, #2
		activeOctave = OCTAVE_7;
 8001cdc:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001cde:	f7ff bedd 	b.w	8001a9c <update_note_tables>
		break;
 8001ce2:	2203      	movs	r2, #3
		activeOctave = OCTAVE_7;
 8001ce4:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001ce6:	f7ff bed9 	b.w	8001a9c <update_note_tables>
		break;
 8001cea:	2205      	movs	r2, #5
 8001cec:	e7e6      	b.n	8001cbc <tranposition__decrement_octave+0x14>
 8001cee:	bf00      	nop
 8001cf0:	20000038 	.word	0x20000038

08001cf4 <tranposition__note_update>:
	/****************************************************************
		 This first section of Code is to handle the reseting of each index.
		 Normally this would be done at the end, but since we might be switching octaves
		 we need to make sure that our indexes are restarted.
	*********************************************************************/
		if (my_index[NOTE_C] > current_C_SAMPLES)
 8001cf4:	4bad      	ldr	r3, [pc, #692]	@ (8001fac <tranposition__note_update+0x2b8>)
 8001cf6:	4aae      	ldr	r2, [pc, #696]	@ (8001fb0 <tranposition__note_update+0x2bc>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	6812      	ldr	r2, [r2, #0]
			my_index[NOTE_C] = 0;
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001cfc:	6859      	ldr	r1, [r3, #4]
		if (my_index[NOTE_C] > current_C_SAMPLES)
 8001cfe:	4290      	cmp	r0, r2
			my_index[NOTE_C] = 0;
 8001d00:	bfc8      	it	gt
 8001d02:	2000      	movgt	r0, #0
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001d04:	4aab      	ldr	r2, [pc, #684]	@ (8001fb4 <tranposition__note_update+0x2c0>)
int tranposition__note_update() {
 8001d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			my_index[NOTE_C] = 0;
 8001d0a:	bfc8      	it	gt
 8001d0c:	6018      	strgt	r0, [r3, #0]
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001d0e:	6812      	ldr	r2, [r2, #0]
			my_index[NOTE_Cs] = 0;
		if (my_index[NOTE_D] > current_D_SAMPLES)
 8001d10:	689c      	ldr	r4, [r3, #8]
			my_index[NOTE_D] = 0;
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001d12:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001d16:	4291      	cmp	r1, r2
			my_index[NOTE_Cs] = 0;
 8001d18:	bfc8      	it	gt
 8001d1a:	2100      	movgt	r1, #0
		if (my_index[NOTE_D] > current_D_SAMPLES)
 8001d1c:	4aa6      	ldr	r2, [pc, #664]	@ (8001fb8 <tranposition__note_update+0x2c4>)
			my_index[NOTE_Cs] = 0;
 8001d1e:	bfc8      	it	gt
 8001d20:	6059      	strgt	r1, [r3, #4]
		if (my_index[NOTE_D] > current_D_SAMPLES)
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	4294      	cmp	r4, r2
			my_index[NOTE_D] = 0;
 8001d26:	bfc8      	it	gt
 8001d28:	2400      	movgt	r4, #0
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001d2a:	4aa4      	ldr	r2, [pc, #656]	@ (8001fbc <tranposition__note_update+0x2c8>)
			my_index[NOTE_D] = 0;
 8001d2c:	bfc8      	it	gt
 8001d2e:	609c      	strgt	r4, [r3, #8]
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	4592      	cmp	sl, r2
int tranposition__note_update() {
 8001d34:	b08f      	sub	sp, #60	@ 0x3c
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001d36:	dd02      	ble.n	8001d3e <tranposition__note_update+0x4a>
			my_index[NOTE_Ds] = 0;
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	4692      	mov	sl, r2
		if (my_index[NOTE_E] > current_E_SAMPLES)
 8001d3e:	4aa0      	ldr	r2, [pc, #640]	@ (8001fc0 <tranposition__note_update+0x2cc>)
 8001d40:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	4591      	cmp	r9, r2
 8001d48:	dd02      	ble.n	8001d50 <tranposition__note_update+0x5c>
			my_index[NOTE_E] = 0;
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
 8001d4e:	4691      	mov	r9, r2
		if (my_index[NOTE_F] > current_F_SAMPLES)
 8001d50:	4a9c      	ldr	r2, [pc, #624]	@ (8001fc4 <tranposition__note_update+0x2d0>)
 8001d52:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	4590      	cmp	r8, r2
 8001d5a:	dd02      	ble.n	8001d62 <tranposition__note_update+0x6e>
			my_index[NOTE_F] = 0;
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
 8001d60:	4690      	mov	r8, r2
		if (my_index[NOTE_Fs] > current_Fs_SAMPLES)
 8001d62:	4a99      	ldr	r2, [pc, #612]	@ (8001fc8 <tranposition__note_update+0x2d4>)
 8001d64:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	4596      	cmp	lr, r2
 8001d6c:	dd02      	ble.n	8001d74 <tranposition__note_update+0x80>
			my_index[NOTE_Fs] = 0;
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	4696      	mov	lr, r2
		if (my_index[NOTE_G] > current_G_SAMPLES)
 8001d74:	4a95      	ldr	r2, [pc, #596]	@ (8001fcc <tranposition__note_update+0x2d8>)
 8001d76:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	4594      	cmp	ip, r2
 8001d7e:	dd02      	ble.n	8001d86 <tranposition__note_update+0x92>
			my_index[NOTE_G] = 0;
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
 8001d84:	4694      	mov	ip, r2
		if (my_index[NOTE_Gs] > current_Gs_SAMPLES)
 8001d86:	4a92      	ldr	r2, [pc, #584]	@ (8001fd0 <tranposition__note_update+0x2dc>)
 8001d88:	6a1f      	ldr	r7, [r3, #32]
 8001d8a:	6812      	ldr	r2, [r2, #0]
			my_index[NOTE_Gs] = 0;
		if (my_index[NOTE_A] > current_A_SAMPLES)
 8001d8c:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
			my_index[NOTE_A] = 0;
		if (my_index[NOTE_As] > current_As_SAMPLES)
 8001d8e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
		if (my_index[NOTE_Gs] > current_Gs_SAMPLES)
 8001d90:	4297      	cmp	r7, r2
			my_index[NOTE_Gs] = 0;
 8001d92:	bfc8      	it	gt
 8001d94:	2700      	movgt	r7, #0
		if (my_index[NOTE_A] > current_A_SAMPLES)
 8001d96:	4a8f      	ldr	r2, [pc, #572]	@ (8001fd4 <tranposition__note_update+0x2e0>)
			my_index[NOTE_Gs] = 0;
 8001d98:	bfc8      	it	gt
 8001d9a:	621f      	strgt	r7, [r3, #32]
		if (my_index[NOTE_A] > current_A_SAMPLES)
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	4296      	cmp	r6, r2
			my_index[NOTE_A] = 0;
 8001da0:	bfc8      	it	gt
 8001da2:	2600      	movgt	r6, #0
		if (my_index[NOTE_As] > current_As_SAMPLES)
 8001da4:	4a8c      	ldr	r2, [pc, #560]	@ (8001fd8 <tranposition__note_update+0x2e4>)
			my_index[NOTE_A] = 0;
 8001da6:	bfc8      	it	gt
 8001da8:	625e      	strgt	r6, [r3, #36]	@ 0x24
		if (my_index[NOTE_As] > current_As_SAMPLES)
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	9500      	str	r5, [sp, #0]
 8001dae:	4295      	cmp	r5, r2
 8001db0:	dd02      	ble.n	8001db8 <tranposition__note_update+0xc4>
			my_index[NOTE_As] = 0;
 8001db2:	2200      	movs	r2, #0
 8001db4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001db6:	9200      	str	r2, [sp, #0]
		if (my_index[NOTE_B] > current_B_SAMPLES)
 8001db8:	4a88      	ldr	r2, [pc, #544]	@ (8001fdc <tranposition__note_update+0x2e8>)
 8001dba:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	9501      	str	r5, [sp, #4]
 8001dc0:	4295      	cmp	r5, r2
 8001dc2:	dd02      	ble.n	8001dca <tranposition__note_update+0xd6>
			my_index[NOTE_B] = 0;
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dc8:	9201      	str	r2, [sp, #4]
	 * This first batch of values is to look update the value for each Note.
	 * By using a list and different indexes we can speed up the program with good spatial locality
	 * If the note is active then we update the value. Otherwise we return a zero.
	 ***************************************************************************/
	int wave_out =0;
	wave_out	+= active[NOTE_C] ? (current_C_TABLE[my_index[NOTE_C]] * decay_value_C) : 0;
 8001dca:	4a85      	ldr	r2, [pc, #532]	@ (8001fe0 <tranposition__note_update+0x2ec>)
 8001dcc:	6815      	ldr	r5, [r2, #0]
 8001dce:	9502      	str	r5, [sp, #8]
 8001dd0:	2d00      	cmp	r5, #0
 8001dd2:	f000 8177 	beq.w	80020c4 <tranposition__note_update+0x3d0>
 8001dd6:	4d83      	ldr	r5, [pc, #524]	@ (8001fe4 <tranposition__note_update+0x2f0>)
 8001dd8:	682d      	ldr	r5, [r5, #0]
 8001dda:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8001dde:	edd5 7a00 	vldr	s15, [r5]
 8001de2:	4d81      	ldr	r5, [pc, #516]	@ (8001fe8 <tranposition__note_update+0x2f4>)
 8001de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de8:	ed95 7a00 	vldr	s14, [r5]
 8001dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out	+= active[NOTE_Cs] ? (current_Cs_TABLE[my_index[NOTE_Cs]] * decay_value_Cs) : 0;
 8001df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df8:	6855      	ldr	r5, [r2, #4]
 8001dfa:	9503      	str	r5, [sp, #12]
 8001dfc:	b165      	cbz	r5, 8001e18 <tranposition__note_update+0x124>
 8001dfe:	4d7b      	ldr	r5, [pc, #492]	@ (8001fec <tranposition__note_update+0x2f8>)
 8001e00:	682d      	ldr	r5, [r5, #0]
 8001e02:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8001e06:	ed95 7a00 	vldr	s14, [r5]
 8001e0a:	4d79      	ldr	r5, [pc, #484]	@ (8001ff0 <tranposition__note_update+0x2fc>)
 8001e0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e10:	edd5 6a00 	vldr	s13, [r5]
 8001e14:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_D] ? (current_D_TABLE[my_index[NOTE_D]] * decay_value_D) : 0;
 8001e18:	6895      	ldr	r5, [r2, #8]
 8001e1a:	9504      	str	r5, [sp, #16]
	wave_out	+= active[NOTE_Cs] ? (current_Cs_TABLE[my_index[NOTE_Cs]] * decay_value_Cs) : 0;
 8001e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_D] ? (current_D_TABLE[my_index[NOTE_D]] * decay_value_D) : 0;
 8001e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e24:	b165      	cbz	r5, 8001e40 <tranposition__note_update+0x14c>
 8001e26:	4d73      	ldr	r5, [pc, #460]	@ (8001ff4 <tranposition__note_update+0x300>)
 8001e28:	682d      	ldr	r5, [r5, #0]
 8001e2a:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8001e2e:	ed95 7a00 	vldr	s14, [r5]
 8001e32:	4d71      	ldr	r5, [pc, #452]	@ (8001ff8 <tranposition__note_update+0x304>)
 8001e34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e38:	edd5 6a00 	vldr	s13, [r5]
 8001e3c:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_Ds] ? (current_Ds_TABLE[my_index[NOTE_Ds]] *decay_value_Ds) : 0;
 8001e40:	68d5      	ldr	r5, [r2, #12]
 8001e42:	9505      	str	r5, [sp, #20]
	wave_out 	+= active[NOTE_D] ? (current_D_TABLE[my_index[NOTE_D]] * decay_value_D) : 0;
 8001e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_Ds] ? (current_Ds_TABLE[my_index[NOTE_Ds]] *decay_value_Ds) : 0;
 8001e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4c:	b165      	cbz	r5, 8001e68 <tranposition__note_update+0x174>
 8001e4e:	4d6b      	ldr	r5, [pc, #428]	@ (8001ffc <tranposition__note_update+0x308>)
 8001e50:	682d      	ldr	r5, [r5, #0]
 8001e52:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 8001e56:	ed95 7a00 	vldr	s14, [r5]
 8001e5a:	4d69      	ldr	r5, [pc, #420]	@ (8002000 <tranposition__note_update+0x30c>)
 8001e5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e60:	edd5 6a00 	vldr	s13, [r5]
 8001e64:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_E] ? (current_E_TABLE[my_index[NOTE_E]] * decay_value_E) : 0;
 8001e68:	6915      	ldr	r5, [r2, #16]
 8001e6a:	9506      	str	r5, [sp, #24]
	wave_out 	+= active[NOTE_Ds] ? (current_Ds_TABLE[my_index[NOTE_Ds]] *decay_value_Ds) : 0;
 8001e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_E] ? (current_E_TABLE[my_index[NOTE_E]] * decay_value_E) : 0;
 8001e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e74:	b165      	cbz	r5, 8001e90 <tranposition__note_update+0x19c>
 8001e76:	4d63      	ldr	r5, [pc, #396]	@ (8002004 <tranposition__note_update+0x310>)
 8001e78:	682d      	ldr	r5, [r5, #0]
 8001e7a:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001e7e:	ed95 7a00 	vldr	s14, [r5]
 8001e82:	4d61      	ldr	r5, [pc, #388]	@ (8002008 <tranposition__note_update+0x314>)
 8001e84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e88:	edd5 6a00 	vldr	s13, [r5]
 8001e8c:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_F] ? (current_F_TABLE[my_index[NOTE_F]] * decay_value_F) : 0;
 8001e90:	6955      	ldr	r5, [r2, #20]
 8001e92:	9507      	str	r5, [sp, #28]
	wave_out 	+= active[NOTE_E] ? (current_E_TABLE[my_index[NOTE_E]] * decay_value_E) : 0;
 8001e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_F] ? (current_F_TABLE[my_index[NOTE_F]] * decay_value_F) : 0;
 8001e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9c:	b165      	cbz	r5, 8001eb8 <tranposition__note_update+0x1c4>
 8001e9e:	4d5b      	ldr	r5, [pc, #364]	@ (800200c <tranposition__note_update+0x318>)
 8001ea0:	682d      	ldr	r5, [r5, #0]
 8001ea2:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 8001ea6:	ed95 7a00 	vldr	s14, [r5]
 8001eaa:	4d59      	ldr	r5, [pc, #356]	@ (8002010 <tranposition__note_update+0x31c>)
 8001eac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001eb0:	edd5 6a00 	vldr	s13, [r5]
 8001eb4:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_Fs] ? (current_Fs_TABLE[my_index[NOTE_Fs]] * decay_value_Fs) : 0;
 8001eb8:	6995      	ldr	r5, [r2, #24]
 8001eba:	9508      	str	r5, [sp, #32]
	wave_out 	+= active[NOTE_F] ? (current_F_TABLE[my_index[NOTE_F]] * decay_value_F) : 0;
 8001ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_Fs] ? (current_Fs_TABLE[my_index[NOTE_Fs]] * decay_value_Fs) : 0;
 8001ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec4:	b165      	cbz	r5, 8001ee0 <tranposition__note_update+0x1ec>
 8001ec6:	4d53      	ldr	r5, [pc, #332]	@ (8002014 <tranposition__note_update+0x320>)
 8001ec8:	682d      	ldr	r5, [r5, #0]
 8001eca:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8001ece:	ed95 7a00 	vldr	s14, [r5]
 8001ed2:	4d51      	ldr	r5, [pc, #324]	@ (8002018 <tranposition__note_update+0x324>)
 8001ed4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ed8:	edd5 6a00 	vldr	s13, [r5]
 8001edc:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_G] ? (current_G_TABLE[my_index[NOTE_G]] * decay_value_G) : 0;
 8001ee0:	69d5      	ldr	r5, [r2, #28]
 8001ee2:	9509      	str	r5, [sp, #36]	@ 0x24
	wave_out 	+= active[NOTE_Fs] ? (current_Fs_TABLE[my_index[NOTE_Fs]] * decay_value_Fs) : 0;
 8001ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_G] ? (current_G_TABLE[my_index[NOTE_G]] * decay_value_G) : 0;
 8001ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eec:	b165      	cbz	r5, 8001f08 <tranposition__note_update+0x214>
 8001eee:	4d4b      	ldr	r5, [pc, #300]	@ (800201c <tranposition__note_update+0x328>)
 8001ef0:	682d      	ldr	r5, [r5, #0]
 8001ef2:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8001ef6:	ed95 7a00 	vldr	s14, [r5]
 8001efa:	4d49      	ldr	r5, [pc, #292]	@ (8002020 <tranposition__note_update+0x32c>)
 8001efc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f00:	edd5 6a00 	vldr	s13, [r5]
 8001f04:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_Gs] ? (current_Gs_TABLE[my_index[NOTE_Gs]] * decay_value_Gs): 0;
 8001f08:	6a15      	ldr	r5, [r2, #32]
 8001f0a:	950a      	str	r5, [sp, #40]	@ 0x28
	wave_out 	+= active[NOTE_G] ? (current_G_TABLE[my_index[NOTE_G]] * decay_value_G) : 0;
 8001f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_Gs] ? (current_Gs_TABLE[my_index[NOTE_Gs]] * decay_value_Gs): 0;
 8001f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f14:	b165      	cbz	r5, 8001f30 <tranposition__note_update+0x23c>
 8001f16:	4d43      	ldr	r5, [pc, #268]	@ (8002024 <tranposition__note_update+0x330>)
 8001f18:	682d      	ldr	r5, [r5, #0]
 8001f1a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8001f1e:	ed95 7a00 	vldr	s14, [r5]
 8001f22:	4d41      	ldr	r5, [pc, #260]	@ (8002028 <tranposition__note_update+0x334>)
 8001f24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f28:	edd5 6a00 	vldr	s13, [r5]
 8001f2c:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_A] ? (current_A_TABLE[my_index[NOTE_A]] * decay_value_A) : 0;
 8001f30:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8001f32:	950b      	str	r5, [sp, #44]	@ 0x2c
	wave_out 	+= active[NOTE_Gs] ? (current_Gs_TABLE[my_index[NOTE_Gs]] * decay_value_Gs): 0;
 8001f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_A] ? (current_A_TABLE[my_index[NOTE_A]] * decay_value_A) : 0;
 8001f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3c:	b165      	cbz	r5, 8001f58 <tranposition__note_update+0x264>
 8001f3e:	4d3b      	ldr	r5, [pc, #236]	@ (800202c <tranposition__note_update+0x338>)
 8001f40:	682d      	ldr	r5, [r5, #0]
 8001f42:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8001f46:	ed95 7a00 	vldr	s14, [r5]
 8001f4a:	4d39      	ldr	r5, [pc, #228]	@ (8002030 <tranposition__note_update+0x33c>)
 8001f4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f50:	edd5 6a00 	vldr	s13, [r5]
 8001f54:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_As] ? (current_As_TABLE[my_index[NOTE_As]] * decay_value_As) : 0;
 8001f58:	6a95      	ldr	r5, [r2, #40]	@ 0x28
 8001f5a:	950c      	str	r5, [sp, #48]	@ 0x30
	wave_out 	+= active[NOTE_A] ? (current_A_TABLE[my_index[NOTE_A]] * decay_value_A) : 0;
 8001f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_As] ? (current_As_TABLE[my_index[NOTE_As]] * decay_value_As) : 0;
 8001f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f64:	b185      	cbz	r5, 8001f88 <tranposition__note_update+0x294>
 8001f66:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8002034 <tranposition__note_update+0x340>
 8001f6a:	9d00      	ldr	r5, [sp, #0]
 8001f6c:	f8db b000 	ldr.w	fp, [fp]
 8001f70:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8001f74:	ed95 7a00 	vldr	s14, [r5]
 8001f78:	f8df b0bc 	ldr.w	fp, [pc, #188]	@ 8002038 <tranposition__note_update+0x344>
 8001f7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f80:	eddb 6a00 	vldr	s13, [fp]
 8001f84:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8001f88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f8a:	920d      	str	r2, [sp, #52]	@ 0x34
	wave_out 	+= active[NOTE_As] ? (current_As_TABLE[my_index[NOTE_As]] * decay_value_As) : 0;
 8001f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8001f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	d05b      	beq.n	8002050 <tranposition__note_update+0x35c>
 8001f98:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 800203c <tranposition__note_update+0x348>
 8001f9c:	9a01      	ldr	r2, [sp, #4]
 8001f9e:	f8db b000 	ldr.w	fp, [fp]
 8001fa2:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8001fa6:	ed92 7a00 	vldr	s14, [r2]
 8001faa:	e049      	b.n	8002040 <tranposition__note_update+0x34c>
 8001fac:	20000214 	.word	0x20000214
 8001fb0:	20000458 	.word	0x20000458
 8001fb4:	20000454 	.word	0x20000454
 8001fb8:	20000450 	.word	0x20000450
 8001fbc:	2000044c 	.word	0x2000044c
 8001fc0:	20000448 	.word	0x20000448
 8001fc4:	20000444 	.word	0x20000444
 8001fc8:	20000440 	.word	0x20000440
 8001fcc:	2000043c 	.word	0x2000043c
 8001fd0:	20000438 	.word	0x20000438
 8001fd4:	20000434 	.word	0x20000434
 8001fd8:	20000430 	.word	0x20000430
 8001fdc:	2000042c 	.word	0x2000042c
 8001fe0:	200001e4 	.word	0x200001e4
 8001fe4:	20000488 	.word	0x20000488
 8001fe8:	20000030 	.word	0x20000030
 8001fec:	20000484 	.word	0x20000484
 8001ff0:	2000002c 	.word	0x2000002c
 8001ff4:	20000480 	.word	0x20000480
 8001ff8:	20000028 	.word	0x20000028
 8001ffc:	2000047c 	.word	0x2000047c
 8002000:	20000024 	.word	0x20000024
 8002004:	20000478 	.word	0x20000478
 8002008:	20000020 	.word	0x20000020
 800200c:	20000474 	.word	0x20000474
 8002010:	2000001c 	.word	0x2000001c
 8002014:	20000470 	.word	0x20000470
 8002018:	20000018 	.word	0x20000018
 800201c:	2000046c 	.word	0x2000046c
 8002020:	20000014 	.word	0x20000014
 8002024:	20000468 	.word	0x20000468
 8002028:	20000010 	.word	0x20000010
 800202c:	20000464 	.word	0x20000464
 8002030:	2000000c 	.word	0x2000000c
 8002034:	20000460 	.word	0x20000460
 8002038:	20000008 	.word	0x20000008
 800203c:	2000045c 	.word	0x2000045c
 8002040:	f8df b08c 	ldr.w	fp, [pc, #140]	@ 80020d0 <tranposition__note_update+0x3dc>
 8002044:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002048:	eddb 6a00 	vldr	s13, [fp]
 800204c:	eee7 7a26 	vfma.f32	s15, s14, s13

	/* ***************************************************************
	 This batch of code is to just update the index if the note is active.
	 Since the active list should only ever hold a 0 or a 1, this code works. Avoid if statements
	 ***************************************************************************/
	my_index[NOTE_C] += active[NOTE_C];
 8002050:	9a02      	ldr	r2, [sp, #8]
	my_index[NOTE_F] += active[NOTE_F];
	my_index[NOTE_Fs] += active[NOTE_Fs];
	my_index[NOTE_G] += active[NOTE_G];
	my_index[NOTE_Gs] += active[NOTE_Gs];
	my_index[NOTE_A] += active[NOTE_A];
	my_index[NOTE_As] += active[NOTE_As];
 8002052:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
	my_index[NOTE_C] += active[NOTE_C];
 8002054:	4402      	add	r2, r0
 8002056:	4610      	mov	r0, r2
	my_index[NOTE_Cs] += active[NOTE_Cs];
 8002058:	9a03      	ldr	r2, [sp, #12]
 800205a:	440a      	add	r2, r1
 800205c:	4693      	mov	fp, r2
	my_index[NOTE_D] += active[NOTE_D];
 800205e:	9a04      	ldr	r2, [sp, #16]
	my_index[NOTE_B] += active[NOTE_B];
 8002060:	990d      	ldr	r1, [sp, #52]	@ 0x34
	my_index[NOTE_D] += active[NOTE_D];
 8002062:	4422      	add	r2, r4
 8002064:	4614      	mov	r4, r2
	my_index[NOTE_Ds] += active[NOTE_Ds];
 8002066:	9a05      	ldr	r2, [sp, #20]
 8002068:	4452      	add	r2, sl
 800206a:	4692      	mov	sl, r2
	my_index[NOTE_E] += active[NOTE_E];
 800206c:	9a06      	ldr	r2, [sp, #24]
 800206e:	444a      	add	r2, r9
 8002070:	4691      	mov	r9, r2
	my_index[NOTE_F] += active[NOTE_F];
 8002072:	9a07      	ldr	r2, [sp, #28]
 8002074:	4442      	add	r2, r8
 8002076:	4690      	mov	r8, r2
	my_index[NOTE_Fs] += active[NOTE_Fs];
 8002078:	9a08      	ldr	r2, [sp, #32]
 800207a:	4472      	add	r2, lr
 800207c:	4696      	mov	lr, r2
	my_index[NOTE_G] += active[NOTE_G];
 800207e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002080:	4462      	add	r2, ip
 8002082:	4694      	mov	ip, r2
	my_index[NOTE_Gs] += active[NOTE_Gs];
 8002084:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002086:	443a      	add	r2, r7
 8002088:	4617      	mov	r7, r2
	my_index[NOTE_A] += active[NOTE_A];
 800208a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800208c:	4432      	add	r2, r6
 800208e:	4616      	mov	r6, r2
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8002090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	my_index[NOTE_As] += active[NOTE_As];
 8002094:	9a00      	ldr	r2, [sp, #0]
 8002096:	4415      	add	r5, r2
	my_index[NOTE_B] += active[NOTE_B];
 8002098:	9a01      	ldr	r2, [sp, #4]
	my_index[NOTE_Gs] += active[NOTE_Gs];
 800209a:	621f      	str	r7, [r3, #32]
	my_index[NOTE_Cs] += active[NOTE_Cs];
 800209c:	e9c3 0b00 	strd	r0, fp, [r3]
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 80020a0:	ee17 0a90 	vmov	r0, s15



	return	wave_out * 12/2;
 80020a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	my_index[NOTE_B] += active[NOTE_B];
 80020a8:	4411      	add	r1, r2

}
 80020aa:	0040      	lsls	r0, r0, #1
	my_index[NOTE_Ds] += active[NOTE_Ds];
 80020ac:	e9c3 4a02 	strd	r4, sl, [r3, #8]
	my_index[NOTE_F] += active[NOTE_F];
 80020b0:	e9c3 9804 	strd	r9, r8, [r3, #16]
	my_index[NOTE_G] += active[NOTE_G];
 80020b4:	e9c3 ec06 	strd	lr, ip, [r3, #24]
	my_index[NOTE_B] += active[NOTE_B];
 80020b8:	e9c3 510a 	strd	r5, r1, [r3, #40]	@ 0x28
	my_index[NOTE_A] += active[NOTE_A];
 80020bc:	625e      	str	r6, [r3, #36]	@ 0x24
}
 80020be:	b00f      	add	sp, #60	@ 0x3c
 80020c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020c4:	eddf 7a01 	vldr	s15, [pc, #4]	@ 80020cc <tranposition__note_update+0x3d8>
 80020c8:	e696      	b.n	8001df8 <tranposition__note_update+0x104>
 80020ca:	bf00      	nop
 80020cc:	00000000 	.word	0x00000000
 80020d0:	20000004 	.word	0x20000004

080020d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack    /* Set stack pointer */
 80020d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800210c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d8:	f7ff fcd6 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <LoopForever+0x6>)
  ldr r1, =_edata
 80020de:	490d      	ldr	r1, [pc, #52]	@ (8002114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002118 <LoopForever+0xe>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <LoopForever+0x12>)
  ldr r4, =_ebss
 80020f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002120 <LoopForever+0x16>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002102:	f002 fd85 	bl	8004c10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002106:	f7fe fa23 	bl	8000550 <main>

0800210a <LoopForever>:

LoopForever:
    b LoopForever
 800210a:	e7fe      	b.n	800210a <LoopForever>
ldr   sp, =_estack    /* Set stack pointer */
 800210c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002118:	0803c300 	.word	0x0803c300
  ldr r2, =_sbss
 800211c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002120:	20000490 	.word	0x20000490

08002124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC1_2_IRQHandler>
	...

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800212a:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <HAL_InitTick+0x40>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b90b      	cbnz	r3, 8002134 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002130:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002132:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002134:	490d      	ldr	r1, [pc, #52]	@ (800216c <HAL_InitTick+0x44>)
 8002136:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800213a:	4605      	mov	r5, r0
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	6808      	ldr	r0, [r1, #0]
 8002142:	fbb0 f0f3 	udiv	r0, r0, r3
 8002146:	f000 f8ad 	bl	80022a4 <HAL_SYSTICK_Config>
 800214a:	4604      	mov	r4, r0
 800214c:	2800      	cmp	r0, #0
 800214e:	d1ef      	bne.n	8002130 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002150:	2d0f      	cmp	r5, #15
 8002152:	d8ed      	bhi.n	8002130 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002154:	4602      	mov	r2, r0
 8002156:	4629      	mov	r1, r5
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f000 f858 	bl	8002210 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <HAL_InitTick+0x48>)
 8002162:	4620      	mov	r0, r4
 8002164:	601d      	str	r5, [r3, #0]
}
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	2000018c 	.word	0x2000018c
 800216c:	20000034 	.word	0x20000034
 8002170:	20000190 	.word	0x20000190

08002174 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002174:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <HAL_Init+0x2c>)
 8002176:	6813      	ldr	r3, [r2, #0]
 8002178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 800217c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002182:	f000 f833 	bl	80021ec <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002186:	2000      	movs	r0, #0
 8002188:	f7ff ffce 	bl	8002128 <HAL_InitTick>
 800218c:	b110      	cbz	r0, 8002194 <HAL_Init+0x20>
    status = HAL_ERROR;
 800218e:	2401      	movs	r4, #1
}
 8002190:	4620      	mov	r0, r4
 8002192:	bd10      	pop	{r4, pc}
 8002194:	4604      	mov	r4, r0
    HAL_MspInit();
 8002196:	f7ff f8c3 	bl	8001320 <HAL_MspInit>
}
 800219a:	4620      	mov	r0, r4
 800219c:	bd10      	pop	{r4, pc}
 800219e:	bf00      	nop
 80021a0:	40022000 	.word	0x40022000

080021a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80021a4:	4a03      	ldr	r2, [pc, #12]	@ (80021b4 <HAL_IncTick+0x10>)
 80021a6:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <HAL_IncTick+0x14>)
 80021a8:	6811      	ldr	r1, [r2, #0]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	440b      	add	r3, r1
 80021ae:	6013      	str	r3, [r2, #0]
}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	2000048c 	.word	0x2000048c
 80021b8:	2000018c 	.word	0x2000018c

080021bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021bc:	4b01      	ldr	r3, [pc, #4]	@ (80021c4 <HAL_GetTick+0x8>)
 80021be:	6818      	ldr	r0, [r3, #0]
}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	2000048c 	.word	0x2000048c

080021c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b538      	push	{r3, r4, r5, lr}
 80021ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff fff6 	bl	80021bc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80021d2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80021d4:	d002      	beq.n	80021dc <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <HAL_Delay+0x20>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021dc:	f7ff ffee 	bl	80021bc <HAL_GetTick>
 80021e0:	1b40      	subs	r0, r0, r5
 80021e2:	42a0      	cmp	r0, r4
 80021e4:	d3fa      	bcc.n	80021dc <HAL_Delay+0x14>
  {
  }
}
 80021e6:	bd38      	pop	{r3, r4, r5, pc}
 80021e8:	2000018c 	.word	0x2000018c

080021ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4907      	ldr	r1, [pc, #28]	@ (800220c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80021ee:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021fe:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002206:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_NVIC_SetPriority+0x70>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221a:	f1c3 0e07 	rsb	lr, r3, #7
 800221e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002226:	bf28      	it	cs
 8002228:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222c:	f1bc 0f06 	cmp.w	ip, #6
 8002230:	d91c      	bls.n	800226c <HAL_NVIC_SetPriority+0x5c>
 8002232:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	fa03 f30c 	lsl.w	r3, r3, ip
 800223e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	fa03 f30e 	lsl.w	r3, r3, lr
 800224a:	ea21 0303 	bic.w	r3, r1, r3
 800224e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002252:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002256:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800225a:	db0a      	blt.n	8002272 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002260:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002264:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002268:	f85d fb04 	ldr.w	pc, [sp], #4
 800226c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	4694      	mov	ip, r2
 8002270:	e7e7      	b.n	8002242 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002272:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_NVIC_SetPriority+0x74>)
 8002274:	f000 000f 	and.w	r0, r0, #15
 8002278:	4402      	add	r2, r0
 800227a:	7613      	strb	r3, [r2, #24]
 800227c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002280:	e000ed00 	.word	0xe000ed00
 8002284:	e000ecfc 	.word	0xe000ecfc

08002288 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002288:	2800      	cmp	r0, #0
 800228a:	db07      	blt.n	800229c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228c:	4a04      	ldr	r2, [pc, #16]	@ (80022a0 <HAL_NVIC_EnableIRQ+0x18>)
 800228e:	0941      	lsrs	r1, r0, #5
 8002290:	2301      	movs	r3, #1
 8002292:	f000 001f 	and.w	r0, r0, #31
 8002296:	4083      	lsls	r3, r0
 8002298:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	3801      	subs	r0, #1
 80022a6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80022aa:	d301      	bcc.n	80022b0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80022ae:	4770      	bx	lr
{
 80022b0:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b6:	4c07      	ldr	r4, [pc, #28]	@ (80022d4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80022be:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	619a      	str	r2, [r3, #24]
}
 80022ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	6119      	str	r1, [r3, #16]
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80022d8:	b188      	cbz	r0, 80022fe <HAL_DAC_Init+0x26>
{
 80022da:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022dc:	7903      	ldrb	r3, [r0, #4]
 80022de:	4604      	mov	r4, r0
 80022e0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80022e4:	b13b      	cbz	r3, 80022f6 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022e6:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80022e8:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022ea:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80022ec:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022ee:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80022f0:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80022f2:	4618      	mov	r0, r3
}
 80022f4:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80022f6:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80022f8:	f7ff f82a 	bl	8001350 <HAL_DAC_MspInit>
 80022fc:	e7f3      	b.n	80022e6 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 80022fe:	2001      	movs	r0, #1
}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop

08002304 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002304:	7942      	ldrb	r2, [r0, #5]
 8002306:	2a01      	cmp	r2, #1
 8002308:	d027      	beq.n	800235a <HAL_DAC_Start+0x56>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800230a:	4603      	mov	r3, r0
 800230c:	2202      	movs	r2, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800230e:	6800      	ldr	r0, [r0, #0]
{
 8002310:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 8002312:	711a      	strb	r2, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8002314:	6804      	ldr	r4, [r0, #0]
 8002316:	f001 0c10 	and.w	ip, r1, #16
 800231a:	2201      	movs	r2, #1
 800231c:	fa02 f20c 	lsl.w	r2, r2, ip
 8002320:	4322      	orrs	r2, r4
 8002322:	6002      	str	r2, [r0, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002324:	6802      	ldr	r2, [r0, #0]
  if(Channel == DAC_CHANNEL_1)
 8002326:	b971      	cbnz	r1, 8002346 <HAL_DAC_Start+0x42>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002328:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 800232c:	2a04      	cmp	r2, #4
 800232e:	d103      	bne.n	8002338 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002330:	6842      	ldr	r2, [r0, #4]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	6042      	str	r2, [r0, #4]
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002338:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 800233a:	2201      	movs	r2, #1
 800233c:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 800233e:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 8002340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002344:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002346:	f402 1270 	and.w	r2, r2, #3932160	@ 0x3c0000
 800234a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800234e:	d1f3      	bne.n	8002338 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002350:	6842      	ldr	r2, [r0, #4]
 8002352:	f042 0202 	orr.w	r2, r2, #2
 8002356:	6042      	str	r2, [r0, #4]
 8002358:	e7ee      	b.n	8002338 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 800235a:	2002      	movs	r0, #2
}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop

08002360 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002360:	b410      	push	{r4}
 8002362:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002364:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0;
 8002366:	2400      	movs	r4, #0
 8002368:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 800236a:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 800236c:	b951      	cbnz	r1, 8002384 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800236e:	9901      	ldr	r1, [sp, #4]
 8002370:	3108      	adds	r1, #8
 8002372:	440a      	add	r2, r1
 8002374:	9201      	str	r2, [sp, #4]
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002376:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8002378:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	b003      	add	sp, #12
 800237e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002382:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002384:	9901      	ldr	r1, [sp, #4]
 8002386:	3114      	adds	r1, #20
 8002388:	440a      	add	r2, r1
 800238a:	9201      	str	r2, [sp, #4]
 800238c:	e7f3      	b.n	8002376 <HAL_DAC_SetValue+0x16>
 800238e:	bf00      	nop

08002390 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @brief  DMA underrun DAC callback for channel1.
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop

08002394 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002394:	6803      	ldr	r3, [r0, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	0491      	lsls	r1, r2, #18
{
 800239a:	b510      	push	{r4, lr}
 800239c:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800239e:	d502      	bpl.n	80023a6 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80023a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023a2:	0492      	lsls	r2, r2, #18
 80023a4:	d418      	bmi.n	80023d8 <HAL_DAC_IRQHandler+0x44>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	0091      	lsls	r1, r2, #2
 80023aa:	d502      	bpl.n	80023b2 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80023ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	d400      	bmi.n	80023b4 <HAL_DAC_IRQHandler+0x20>
}
 80023b2:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80023b4:	2204      	movs	r2, #4
 80023b6:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80023b8:	6922      	ldr	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80023ba:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80023be:	f042 0202 	orr.w	r2, r2, #2
 80023c2:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80023c4:	6359      	str	r1, [r3, #52]	@ 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80023cc:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80023d4:	f000 b8a8 	b.w	8002528 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 80023d8:	2204      	movs	r2, #4
 80023da:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80023dc:	6902      	ldr	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80023de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80023e8:	6359      	str	r1, [r3, #52]	@ 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023f0:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80023f2:	f7ff ffcd 	bl	8002390 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	e7d5      	b.n	80023a6 <HAL_DAC_IRQHandler+0x12>
 80023fa:	bf00      	nop

080023fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023fe:	7943      	ldrb	r3, [r0, #5]
 8002400:	2b01      	cmp	r3, #1
{
 8002402:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002404:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8002406:	f000 8085 	beq.w	8002514 <HAL_DAC_ConfigChannel+0x118>
 800240a:	2301      	movs	r3, #1
 800240c:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800240e:	2904      	cmp	r1, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8002410:	f04f 0302 	mov.w	r3, #2
 8002414:	4605      	mov	r5, r0
 8002416:	4614      	mov	r4, r2
 8002418:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800241a:	d038      	beq.n	800248e <HAL_DAC_ConfigChannel+0x92>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800241c:	6800      	ldr	r0, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800241e:	f002 0210 	and.w	r2, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002422:	6933      	ldr	r3, [r6, #16]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d108      	bne.n	800243a <HAL_DAC_ConfigChannel+0x3e>
    tmpreg1 = hdac->Instance->CCR;
 8002428:	6b84      	ldr	r4, [r0, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800242a:	6973      	ldr	r3, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800242c:	271f      	movs	r7, #31
 800242e:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002430:	4093      	lsls	r3, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002432:	ea24 0407 	bic.w	r4, r4, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002436:	4323      	orrs	r3, r4
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002438:	6383      	str	r3, [r0, #56]	@ 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800243a:	e9d6 3402 	ldrd	r3, r4, [r6, #8]
 800243e:	4323      	orrs	r3, r4
 8002440:	430b      	orrs	r3, r1
  tmpreg1 = hdac->Instance->MCR;
 8002442:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002444:	6871      	ldr	r1, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002446:	2607      	movs	r6, #7
 8002448:	4096      	lsls	r6, r2
 800244a:	ea24 0406 	bic.w	r4, r4, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800244e:	4093      	lsls	r3, r2
 8002450:	4323      	orrs	r3, r4
  hdac->Instance->MCR = tmpreg1;
 8002452:	63c3      	str	r3, [r0, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002454:	6803      	ldr	r3, [r0, #0]
 8002456:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 800245a:	4094      	lsls	r4, r2
 800245c:	ea23 0304 	bic.w	r3, r3, r4
 8002460:	6003      	str	r3, [r0, #0]
  tmpreg1 = hdac->Instance->CR;
 8002462:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002464:	f640 74fc 	movw	r4, #4092	@ 0xffc
 8002468:	4094      	lsls	r4, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800246a:	4091      	lsls	r1, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800246c:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002470:	430b      	orrs	r3, r1
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002472:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002474:	6803      	ldr	r3, [r0, #0]
 8002476:	21c0      	movs	r1, #192	@ 0xc0
 8002478:	fa01 f202 	lsl.w	r2, r1, r2
 800247c:	ea23 0302 	bic.w	r3, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002480:	2100      	movs	r1, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002482:	2201      	movs	r2, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002484:	6003      	str	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002486:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 8002488:	7169      	strb	r1, [r5, #5]

  /* Return function status */
  return HAL_OK;
 800248a:	4608      	mov	r0, r1
}
 800248c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 800248e:	f7ff fe95 	bl	80021bc <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002492:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002494:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 8002498:	b154      	cbz	r4, 80024b0 <HAL_DAC_ConfigChannel+0xb4>
 800249a:	e01c      	b.n	80024d6 <HAL_DAC_ConfigChannel+0xda>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800249c:	f7ff fe8e 	bl	80021bc <HAL_GetTick>
 80024a0:	1bc0      	subs	r0, r0, r7
 80024a2:	2801      	cmp	r0, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024a4:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024a6:	d902      	bls.n	80024ae <HAL_DAC_ConfigChannel+0xb2>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024aa:	0412      	lsls	r2, r2, #16
 80024ac:	d434      	bmi.n	8002518 <HAL_DAC_ConfigChannel+0x11c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	d4f3      	bmi.n	800249c <HAL_DAC_ConfigChannel+0xa0>
      HAL_Delay(1);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7ff fe87 	bl	80021c8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024ba:	6828      	ldr	r0, [r5, #0]
 80024bc:	69b3      	ldr	r3, [r6, #24]
 80024be:	6403      	str	r3, [r0, #64]	@ 0x40
 80024c0:	e011      	b.n	80024e6 <HAL_DAC_ConfigChannel+0xea>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024c2:	f7ff fe7b 	bl	80021bc <HAL_GetTick>
 80024c6:	1bc0      	subs	r0, r0, r7
 80024c8:	2801      	cmp	r0, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80024ca:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024cc:	d902      	bls.n	80024d4 <HAL_DAC_ConfigChannel+0xd8>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80024ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024d0:	2a00      	cmp	r2, #0
 80024d2:	db21      	blt.n	8002518 <HAL_DAC_ConfigChannel+0x11c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80024d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	dbf3      	blt.n	80024c2 <HAL_DAC_ConfigChannel+0xc6>
      HAL_Delay(1U);
 80024da:	2001      	movs	r0, #1
 80024dc:	f7ff fe74 	bl	80021c8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024e0:	6828      	ldr	r0, [r5, #0]
 80024e2:	69b3      	ldr	r3, [r6, #24]
 80024e4:	6443      	str	r3, [r0, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80024e6:	f004 0210 	and.w	r2, r4, #16
 80024ea:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80024ec:	69f1      	ldr	r1, [r6, #28]
 80024ee:	f240 34ff 	movw	r4, #1023	@ 0x3ff
 80024f2:	4094      	lsls	r4, r2
 80024f4:	4091      	lsls	r1, r2
 80024f6:	ea23 0304 	bic.w	r3, r3, r4
 80024fa:	430b      	orrs	r3, r1
 80024fc:	6483      	str	r3, [r0, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80024fe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002500:	6a31      	ldr	r1, [r6, #32]
 8002502:	24ff      	movs	r4, #255	@ 0xff
 8002504:	4094      	lsls	r4, r2
 8002506:	4091      	lsls	r1, r2
 8002508:	ea23 0304 	bic.w	r3, r3, r4
 800250c:	430b      	orrs	r3, r1
 800250e:	64c3      	str	r3, [r0, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002510:	6831      	ldr	r1, [r6, #0]
 8002512:	e786      	b.n	8002422 <HAL_DAC_ConfigChannel+0x26>
  __HAL_LOCK(hdac);
 8002514:	2002      	movs	r0, #2
}
 8002516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002518:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800251a:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002522:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
}
 8002526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002528 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @brief  DMA underrun DAC callback for Channel2.
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800252c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002530:	2a02      	cmp	r2, #2
{
 8002532:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002534:	d006      	beq.n	8002544 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002536:	2204      	movs	r2, #4
 8002538:	63c2      	str	r2, [r0, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253a:	2200      	movs	r2, #0

    return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800253e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8002542:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002544:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002546:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002548:	6808      	ldr	r0, [r1, #0]
 800254a:	f020 000e 	bic.w	r0, r0, #14
 800254e:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002550:	6808      	ldr	r0, [r1, #0]
 8002552:	f020 0001 	bic.w	r0, r0, #1
 8002556:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002558:	f04f 0c01 	mov.w	ip, #1
 800255c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800255e:	f002 021c 	and.w	r2, r2, #28
 8002562:	fa0c f202 	lsl.w	r2, ip, r2
 8002566:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002568:	2200      	movs	r2, #0
    return status;
 800256a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800256c:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002570:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop

08002578 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002578:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800257c:	2a02      	cmp	r2, #2
 800257e:	d003      	beq.n	8002588 <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002580:	2204      	movs	r2, #4
 8002582:	63c2      	str	r2, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 8002584:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8002586:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002588:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800258a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 800258c:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800258e:	680c      	ldr	r4, [r1, #0]
 8002590:	f024 040e 	bic.w	r4, r4, #14
 8002594:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002596:	680c      	ldr	r4, [r1, #0]
 8002598:	f024 0401 	bic.w	r4, r4, #1
 800259c:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800259e:	f002 021c 	and.w	r2, r2, #28
 80025a2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f202 	lsl.w	r2, r1, r2
 80025aa:	6062      	str	r2, [r4, #4]
    if (hdma->XferAbortCallback != NULL)
 80025ac:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80025ae:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80025b2:	2400      	movs	r4, #0
 80025b4:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 80025b8:	b102      	cbz	r2, 80025bc <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80025ba:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2000      	movs	r0, #0
}
 80025be:	bd10      	pop	{r4, pc}

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c4:	680c      	ldr	r4, [r1, #0]
{
 80025c6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c8:	2c00      	cmp	r4, #0
 80025ca:	f000 809c 	beq.w	8002706 <HAL_GPIO_Init+0x146>
  uint32_t position = 0x00u;
 80025ce:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025d0:	f04f 0b01 	mov.w	fp, #1
 80025d4:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 80025d8:	ea1e 0a04 	ands.w	sl, lr, r4
 80025dc:	f000 808e 	beq.w	80026fc <HAL_GPIO_Init+0x13c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e0:	684d      	ldr	r5, [r1, #4]
 80025e2:	f005 0203 	and.w	r2, r5, #3
 80025e6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ea:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025ec:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025f0:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f4:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025f8:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025fc:	f240 8086 	bls.w	800270c <HAL_GPIO_Init+0x14c>
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002600:	2a03      	cmp	r2, #3
 8002602:	f040 80c1 	bne.w	8002788 <HAL_GPIO_Init+0x1c8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002606:	f8d0 802c 	ldr.w	r8, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800260a:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800260e:	f3c5 0ec0 	ubfx	lr, r5, #3, #1
 8002612:	fa0e fe03 	lsl.w	lr, lr, r3
 8002616:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->ASCR = temp;
 800261a:	f8c0 e02c 	str.w	lr, [r0, #44]	@ 0x2c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800261e:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8002622:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002626:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800262a:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002630:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002632:	d063      	beq.n	80026fc <HAL_GPIO_Init+0x13c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002634:	4f6c      	ldr	r7, [pc, #432]	@ (80027e8 <HAL_GPIO_Init+0x228>)
 8002636:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	663a      	str	r2, [r7, #96]	@ 0x60
 800263e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002640:	f002 0201 	and.w	r2, r2, #1
 8002644:	9203      	str	r2, [sp, #12]
 8002646:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002648:	f023 0203 	bic.w	r2, r3, #3
 800264c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8002650:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002654:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002658:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800265a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800265e:	260f      	movs	r6, #15
 8002660:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002664:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002668:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800266c:	d022      	beq.n	80026b4 <HAL_GPIO_Init+0xf4>
 800266e:	4e5f      	ldr	r6, [pc, #380]	@ (80027ec <HAL_GPIO_Init+0x22c>)
 8002670:	42b0      	cmp	r0, r6
 8002672:	f000 809c 	beq.w	80027ae <HAL_GPIO_Init+0x1ee>
 8002676:	4e5e      	ldr	r6, [pc, #376]	@ (80027f0 <HAL_GPIO_Init+0x230>)
 8002678:	42b0      	cmp	r0, r6
 800267a:	f000 809f 	beq.w	80027bc <HAL_GPIO_Init+0x1fc>
 800267e:	f8df e178 	ldr.w	lr, [pc, #376]	@ 80027f8 <HAL_GPIO_Init+0x238>
 8002682:	4570      	cmp	r0, lr
 8002684:	f000 808c 	beq.w	80027a0 <HAL_GPIO_Init+0x1e0>
 8002688:	f8df e170 	ldr.w	lr, [pc, #368]	@ 80027fc <HAL_GPIO_Init+0x23c>
 800268c:	4570      	cmp	r0, lr
 800268e:	f000 809c 	beq.w	80027ca <HAL_GPIO_Init+0x20a>
 8002692:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8002800 <HAL_GPIO_Init+0x240>
 8002696:	4570      	cmp	r0, lr
 8002698:	f000 809e 	beq.w	80027d8 <HAL_GPIO_Init+0x218>
 800269c:	f8df e164 	ldr.w	lr, [pc, #356]	@ 8002804 <HAL_GPIO_Init+0x244>
 80026a0:	4570      	cmp	r0, lr
 80026a2:	bf0c      	ite	eq
 80026a4:	f04f 0e06 	moveq.w	lr, #6
 80026a8:	f04f 0e07 	movne.w	lr, #7
 80026ac:	fa0e fc0c 	lsl.w	ip, lr, ip
 80026b0:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b4:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026b6:	4a4f      	ldr	r2, [pc, #316]	@ (80027f4 <HAL_GPIO_Init+0x234>)
 80026b8:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ba:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80026bc:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80026c0:	4e4c      	ldr	r6, [pc, #304]	@ (80027f4 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 80026c2:	bf54      	ite	pl
 80026c4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80026c6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 80026ca:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 80026cc:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ce:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80026d0:	4e48      	ldr	r6, [pc, #288]	@ (80027f4 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 80026d2:	bf54      	ite	pl
 80026d4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80026d6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 80026da:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026dc:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026de:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80026e0:	4e44      	ldr	r6, [pc, #272]	@ (80027f4 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 80026e2:	bf54      	ite	pl
 80026e4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80026e6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 80026ea:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 80026ec:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ee:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80026f0:	4d40      	ldr	r5, [pc, #256]	@ (80027f4 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 80026f2:	bf54      	ite	pl
 80026f4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80026f6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80026fa:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 80026fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fe:	fa34 f203 	lsrs.w	r2, r4, r3
 8002702:	f47f af67 	bne.w	80025d4 <HAL_GPIO_Init+0x14>
  }
}
 8002706:	b005      	add	sp, #20
 8002708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800270c:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002710:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002712:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002716:	fa06 f80c 	lsl.w	r8, r6, ip
 800271a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800271e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8002722:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002726:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002728:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800272c:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8002730:	fa0e fe03 	lsl.w	lr, lr, r3
 8002734:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8002738:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800273c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002740:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002744:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002748:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800274e:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002752:	f47f af64 	bne.w	800261e <HAL_GPIO_Init+0x5e>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002756:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8002758:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800275c:	f003 0e07 	and.w	lr, r3, #7
 8002760:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002764:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002768:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 800276c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002770:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002772:	260f      	movs	r6, #15
 8002774:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002778:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800277a:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800277e:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8002782:	f8c8 e020 	str.w	lr, [r8, #32]
 8002786:	e74a      	b.n	800261e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->PUPDR;
 8002788:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800278c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800278e:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002792:	fa06 fe0c 	lsl.w	lr, r6, ip
 8002796:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 800279a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	e73e      	b.n	800261e <HAL_GPIO_Init+0x5e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027a0:	f04f 0e03 	mov.w	lr, #3
 80027a4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80027a8:	ea47 070c 	orr.w	r7, r7, ip
 80027ac:	e782      	b.n	80026b4 <HAL_GPIO_Init+0xf4>
 80027ae:	f04f 0e01 	mov.w	lr, #1
 80027b2:	fa0e fc0c 	lsl.w	ip, lr, ip
 80027b6:	ea47 070c 	orr.w	r7, r7, ip
 80027ba:	e77b      	b.n	80026b4 <HAL_GPIO_Init+0xf4>
 80027bc:	f04f 0e02 	mov.w	lr, #2
 80027c0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80027c4:	ea47 070c 	orr.w	r7, r7, ip
 80027c8:	e774      	b.n	80026b4 <HAL_GPIO_Init+0xf4>
 80027ca:	f04f 0e04 	mov.w	lr, #4
 80027ce:	fa0e fc0c 	lsl.w	ip, lr, ip
 80027d2:	ea47 070c 	orr.w	r7, r7, ip
 80027d6:	e76d      	b.n	80026b4 <HAL_GPIO_Init+0xf4>
 80027d8:	f04f 0e05 	mov.w	lr, #5
 80027dc:	fa0e fc0c 	lsl.w	ip, lr, ip
 80027e0:	ea47 070c 	orr.w	r7, r7, ip
 80027e4:	e766      	b.n	80026b4 <HAL_GPIO_Init+0xf4>
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	48000400 	.word	0x48000400
 80027f0:	48000800 	.word	0x48000800
 80027f4:	40010400 	.word	0x40010400
 80027f8:	48000c00 	.word	0x48000c00
 80027fc:	48001000 	.word	0x48001000
 8002800:	48001400 	.word	0x48001400
 8002804:	48001800 	.word	0x48001800

08002808 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002808:	6903      	ldr	r3, [r0, #16]
 800280a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800280c:	bf14      	ite	ne
 800280e:	2001      	movne	r0, #1
 8002810:	2000      	moveq	r0, #0
 8002812:	4770      	bx	lr

08002814 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002814:	4a04      	ldr	r2, [pc, #16]	@ (8002828 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002816:	6951      	ldr	r1, [r2, #20]
 8002818:	4201      	tst	r1, r0
 800281a:	d100      	bne.n	800281e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800281c:	4770      	bx	lr
{
 800281e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002820:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002822:	f7fd ffe3 	bl	80007ec <HAL_GPIO_EXTI_Callback>
  }
}
 8002826:	bd08      	pop	{r3, pc}
 8002828:	40010400 	.word	0x40010400

0800282c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800282c:	6803      	ldr	r3, [r0, #0]
{
 800282e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002832:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002834:	6998      	ldr	r0, [r3, #24]
 8002836:	0684      	lsls	r4, r0, #26
 8002838:	d45e      	bmi.n	80028f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
 800283a:	460e      	mov	r6, r1
 800283c:	4617      	mov	r7, r2
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800283e:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8002842:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002844:	f012 0c10 	ands.w	ip, r2, #16
 8002848:	d059      	beq.n	80028fe <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284a:	1c70      	adds	r0, r6, #1
 800284c:	f8c3 801c 	str.w	r8, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002850:	d160      	bne.n	8002914 <I2C_WaitOnSTOPFlagUntilTimeout+0xe8>
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	0691      	lsls	r1, r2, #26
 8002856:	d5fc      	bpl.n	8002852 <I2C_WaitOnSTOPFlagUntilTimeout+0x26>
  uint32_t error_code = 0;
 8002858:	2400      	movs	r4, #0

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800285a:	2220      	movs	r2, #32
 800285c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800285e:	f044 0c04 	orr.w	ip, r4, #4

    status = HAL_ERROR;
 8002862:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002864:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002866:	05d0      	lsls	r0, r2, #23
 8002868:	d532      	bpl.n	80028d0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800286a:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800286e:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002870:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002872:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002876:	d504      	bpl.n	8002882 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002878:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800287c:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800287e:	f04c 0c08 	orr.w	ip, ip, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002882:	0596      	lsls	r6, r2, #22
 8002884:	d504      	bpl.n	8002890 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002886:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800288a:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800288e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002894:	bf44      	itt	mi
 8002896:	2200      	movmi	r2, #0
 8002898:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	07d1      	lsls	r1, r2, #31
 800289e:	d403      	bmi.n	80028a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	4836      	ldr	r0, [pc, #216]	@ (8002984 <I2C_WaitOnSTOPFlagUntilTimeout+0x158>)
 80028ac:	4002      	ands	r2, r0
 80028ae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80028b0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 80028b6:	ea43 030c 	orr.w	r3, r3, ip
 80028ba:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 80028c4:	2300      	movs	r3, #0
 80028c6:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
}
 80028cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028d0:	0550      	lsls	r0, r2, #21
 80028d2:	d4d1      	bmi.n	8002878 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028d4:	0594      	lsls	r4, r2, #22
 80028d6:	d4d6      	bmi.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  if (status != HAL_OK)
 80028d8:	2900      	cmp	r1, #0
 80028da:	d1d9      	bne.n	8002890 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028dc:	f7ff fc6e 	bl	80021bc <HAL_GetTick>
 80028e0:	1bc0      	subs	r0, r0, r7
 80028e2:	42b0      	cmp	r0, r6
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80028e4:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e6:	d800      	bhi.n	80028ea <I2C_WaitOnSTOPFlagUntilTimeout+0xbe>
 80028e8:	b91e      	cbnz	r6, 80028f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xc6>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	f012 0220 	ands.w	r2, r2, #32
 80028f0:	d007      	beq.n	8002902 <I2C_WaitOnSTOPFlagUntilTimeout+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	0692      	lsls	r2, r2, #26
 80028f6:	d5a4      	bpl.n	8002842 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80028f8:	2000      	movs	r0, #0
}
 80028fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	4661      	mov	r1, ip
 8002900:	e7b0      	b.n	8002864 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002902:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002904:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002906:	430b      	orrs	r3, r1
 8002908:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800290a:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 8002912:	e7d7      	b.n	80028c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x98>
  uint32_t error_code = 0;
 8002914:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8002916:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	0692      	lsls	r2, r2, #26
 800291e:	d42c      	bmi.n	800297a <I2C_WaitOnSTOPFlagUntilTimeout+0x14e>
 8002920:	f1ba 0f00 	cmp.w	sl, #0
 8002924:	d19b      	bne.n	800285e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002926:	f7ff fc49 	bl	80021bc <HAL_GetTick>
 800292a:	eba0 0009 	sub.w	r0, r0, r9
 800292e:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002930:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002932:	d301      	bcc.n	8002938 <I2C_WaitOnSTOPFlagUntilTimeout+0x10c>
 8002934:	2e00      	cmp	r6, #0
 8002936:	d1f0      	bne.n	800291a <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002938:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800293a:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800293e:	6999      	ldr	r1, [r3, #24]
 8002940:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8002942:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002944:	d50b      	bpl.n	800295e <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
 8002946:	0441      	lsls	r1, r0, #17
 8002948:	d409      	bmi.n	800295e <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              (tmp1 != I2C_CR2_STOP) && \
 800294a:	2a20      	cmp	r2, #32
 800294c:	d007      	beq.n	800295e <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002954:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002956:	f7ff fc31 	bl	80021bc <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800295a:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800295c:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800295e:	699a      	ldr	r2, [r3, #24]
 8002960:	0690      	lsls	r0, r2, #26
 8002962:	d4da      	bmi.n	800291a <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002964:	f7ff fc2a 	bl	80021bc <HAL_GetTick>
 8002968:	eba0 0009 	sub.w	r0, r0, r9
 800296c:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800296e:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002970:	d9f5      	bls.n	800295e <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002972:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8002974:	f04f 0a01 	mov.w	sl, #1
 8002978:	e7cf      	b.n	800291a <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
    if (status == HAL_OK)
 800297a:	f1ba 0f00 	cmp.w	sl, #0
 800297e:	f43f af6c 	beq.w	800285a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002982:	e76c      	b.n	800285e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8002984:	fe00e800 	.word	0xfe00e800

08002988 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002988:	2800      	cmp	r0, #0
 800298a:	d054      	beq.n	8002a36 <HAL_I2C_Init+0xae>
{
 800298c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002992:	4604      	mov	r4, r0
 8002994:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002998:	2b00      	cmp	r3, #0
 800299a:	d047      	beq.n	8002a2c <HAL_I2C_Init+0xa4>
  __HAL_I2C_DISABLE(hi2c);
 800299c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800299e:	2224      	movs	r2, #36	@ 0x24
 80029a0:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80029a4:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029a6:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 80029a8:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80029b0:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029b2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029b4:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029b6:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029bc:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029be:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029c0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c2:	d009      	beq.n	80029d8 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029c4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029c8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029ca:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029cc:	d107      	bne.n	80029de <HAL_I2C_Init+0x56>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	e006      	b.n	80029e6 <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029dc:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029e6:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029e8:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ea:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 80029ee:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80029f2:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029f4:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029f6:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029f8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029fa:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029fc:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a04:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a06:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a08:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a0a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a0c:	4301      	orrs	r1, r0
 8002a0e:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	f041 0101 	orr.w	r1, r1, #1
 8002a16:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1c:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a22:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8002a28:	4610      	mov	r0, r2
}
 8002a2a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002a2c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002a30:	f7fe fcc6 	bl	80013c0 <HAL_I2C_MspInit>
 8002a34:	e7b2      	b.n	800299c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002a36:	2001      	movs	r0, #1
}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <HAL_I2C_Master_Transmit>:
{
 8002a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a40:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a42:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8002a46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d129      	bne.n	8002aa0 <HAL_I2C_Master_Transmit+0x64>
    __HAL_LOCK(hi2c);
 8002a4c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	4604      	mov	r4, r0
 8002a54:	d024      	beq.n	8002aa0 <HAL_I2C_Master_Transmit+0x64>
 8002a56:	2301      	movs	r3, #1
 8002a58:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8002a5c:	468b      	mov	fp, r1
 8002a5e:	4615      	mov	r5, r2
 8002a60:	f7ff fbac 	bl	80021bc <HAL_GetTick>
 8002a64:	4682      	mov	sl, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a66:	6820      	ldr	r0, [r4, #0]
 8002a68:	6983      	ldr	r3, [r0, #24]
 8002a6a:	041a      	lsls	r2, r3, #16
 8002a6c:	d51b      	bpl.n	8002aa6 <HAL_I2C_Master_Transmit+0x6a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7ff fba5 	bl	80021bc <HAL_GetTick>
 8002a72:	eba0 000a 	sub.w	r0, r0, sl
 8002a76:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a78:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7a:	d9f5      	bls.n	8002a68 <HAL_I2C_Master_Transmit+0x2c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a7c:	6983      	ldr	r3, [r0, #24]
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	d5f2      	bpl.n	8002a68 <HAL_I2C_Master_Transmit+0x2c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a82:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a86:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8c:	6463      	str	r3, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8002a8e:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a96:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8002a9a:	2001      	movs	r0, #1
}
 8002a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002aa0:	2002      	movs	r0, #2
}
 8002aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aa6:	2221      	movs	r2, #33	@ 0x21
 8002aa8:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aac:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002aae:	2210      	movs	r2, #16
 8002ab0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab4:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8002ab6:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ab8:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr  = pData;
 8002abc:	6265      	str	r5, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2bff      	cmp	r3, #255	@ 0xff
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ac6:	d85d      	bhi.n	8002b84 <HAL_I2C_Master_Transmit+0x148>
      hi2c->XferSize = hi2c->XferCount;
 8002ac8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002aca:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
 8002acc:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 812f 	bne.w	8002d32 <HAL_I2C_Master_Transmit+0x2f6>
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ad4:	6843      	ldr	r3, [r0, #4]
 8002ad6:	4a9b      	ldr	r2, [pc, #620]	@ (8002d44 <HAL_I2C_Master_Transmit+0x308>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	ea43 030b 	orr.w	r3, r3, fp
 8002ade:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ae2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ae6:	6043      	str	r3, [r0, #4]
    while (hi2c->XferCount > 0U)
 8002ae8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 809c 	beq.w	8002c2a <HAL_I2C_Master_Transmit+0x1ee>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af2:	f04f 0910 	mov.w	r9, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af6:	6985      	ldr	r5, [r0, #24]
 8002af8:	f015 0502 	ands.w	r5, r5, #2
 8002afc:	d17f      	bne.n	8002bfe <HAL_I2C_Master_Transmit+0x1c2>
  uint32_t itflag   = hi2c->Instance->ISR;
 8002afe:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b00:	f013 0310 	ands.w	r3, r3, #16
 8002b04:	d079      	beq.n	8002bfa <HAL_I2C_Master_Transmit+0x1be>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b06:	1c71      	adds	r1, r6, #1
 8002b08:	f8c0 901c 	str.w	r9, [r0, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b0c:	f040 80d8 	bne.w	8002cc0 <HAL_I2C_Master_Transmit+0x284>
 8002b10:	6983      	ldr	r3, [r0, #24]
 8002b12:	069a      	lsls	r2, r3, #26
 8002b14:	d5fc      	bpl.n	8002b10 <HAL_I2C_Master_Transmit+0xd4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b16:	2320      	movs	r3, #32
 8002b18:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002b1a:	f045 0304 	orr.w	r3, r5, #4
    status = HAL_ERROR;
 8002b1e:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8002b20:	6982      	ldr	r2, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b22:	05d5      	lsls	r5, r2, #23
 8002b24:	d549      	bpl.n	8002bba <HAL_I2C_Master_Transmit+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b2a:	61c1      	str	r1, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b2c:	0551      	lsls	r1, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b32:	d504      	bpl.n	8002b3e <HAL_I2C_Master_Transmit+0x102>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b38:	61c1      	str	r1, [r0, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002b3a:	f043 0308 	orr.w	r3, r3, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b3e:	0596      	lsls	r6, r2, #22
 8002b40:	d504      	bpl.n	8002b4c <HAL_I2C_Master_Transmit+0x110>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b46:	f043 0302 	orr.w	r3, r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b4a:	61c2      	str	r2, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b4c:	6982      	ldr	r2, [r0, #24]
 8002b4e:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002b50:	bf44      	itt	mi
 8002b52:	2200      	movmi	r2, #0
 8002b54:	6282      	strmi	r2, [r0, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b56:	6982      	ldr	r2, [r0, #24]
 8002b58:	07d2      	lsls	r2, r2, #31
 8002b5a:	d403      	bmi.n	8002b64 <HAL_I2C_Master_Transmit+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b5c:	6982      	ldr	r2, [r0, #24]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	6182      	str	r2, [r0, #24]
    I2C_RESET_CR2(hi2c);
 8002b64:	6842      	ldr	r2, [r0, #4]
 8002b66:	4d78      	ldr	r5, [pc, #480]	@ (8002d48 <HAL_I2C_Master_Transmit+0x30c>)
 8002b68:	402a      	ands	r2, r5
 8002b6a:	6042      	str	r2, [r0, #4]
    hi2c->ErrorCode |= error_code;
 8002b6c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6e:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	2020      	movs	r0, #32
    hi2c->ErrorCode |= error_code;
 8002b72:	4313      	orrs	r3, r2
 8002b74:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8002b76:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return status;
 8002b82:	e78a      	b.n	8002a9a <HAL_I2C_Master_Transmit+0x5e>
 8002b84:	23ff      	movs	r3, #255	@ 0xff
 8002b86:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b88:	22fe      	movs	r2, #254	@ 0xfe
 8002b8a:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
      xfermode = I2C_RELOAD_MODE;
 8002b8e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b92:	f815 7b01 	ldrb.w	r7, [r5], #1
 8002b96:	6287      	str	r7, [r0, #40]	@ 0x28
      hi2c->XferSize--;
 8002b98:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002b9a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8002b9c:	6265      	str	r5, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002b9e:	3a01      	subs	r2, #1
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	8562      	strh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ba4:	6842      	ldr	r2, [r0, #4]
 8002ba6:	4d67      	ldr	r5, [pc, #412]	@ (8002d44 <HAL_I2C_Master_Transmit+0x308>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ba8:	ea4b 0303 	orr.w	r3, fp, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bac:	402a      	ands	r2, r5
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bb6:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002bb8:	e796      	b.n	8002ae8 <HAL_I2C_Master_Transmit+0xac>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bba:	0557      	lsls	r7, r2, #21
 8002bbc:	d4ba      	bmi.n	8002b34 <HAL_I2C_Master_Transmit+0xf8>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bbe:	0595      	lsls	r5, r2, #22
 8002bc0:	d4bf      	bmi.n	8002b42 <HAL_I2C_Master_Transmit+0x106>
  if (status != HAL_OK)
 8002bc2:	2900      	cmp	r1, #0
 8002bc4:	d1c2      	bne.n	8002b4c <HAL_I2C_Master_Transmit+0x110>
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	1c77      	adds	r7, r6, #1
 8002bc8:	d095      	beq.n	8002af6 <HAL_I2C_Master_Transmit+0xba>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bca:	f7ff faf7 	bl	80021bc <HAL_GetTick>
 8002bce:	eba0 030a 	sub.w	r3, r0, sl
 8002bd2:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bd4:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd6:	d301      	bcc.n	8002bdc <HAL_I2C_Master_Transmit+0x1a0>
 8002bd8:	2e00      	cmp	r6, #0
 8002bda:	d18c      	bne.n	8002af6 <HAL_I2C_Master_Transmit+0xba>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bdc:	6983      	ldr	r3, [r0, #24]
 8002bde:	f013 0302 	ands.w	r3, r3, #2
 8002be2:	d188      	bne.n	8002af6 <HAL_I2C_Master_Transmit+0xba>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8002be6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bec:	430a      	orrs	r2, r1
 8002bee:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
 8002bf8:	e74f      	b.n	8002a9a <HAL_I2C_Master_Transmit+0x5e>
  HAL_StatusTypeDef status = HAL_OK;
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	e790      	b.n	8002b20 <HAL_I2C_Master_Transmit+0xe4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bfe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002c00:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c06:	6282      	str	r2, [r0, #40]	@ 0x28
      hi2c->XferCount--;
 8002c08:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8002c0a:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002c0c:	3a01      	subs	r2, #1
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c12:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c18:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8002c1a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c1c:	b102      	cbz	r2, 8002c20 <HAL_I2C_Master_Transmit+0x1e4>
 8002c1e:	b1d3      	cbz	r3, 8002c56 <HAL_I2C_Master_Transmit+0x21a>
    while (hi2c->XferCount > 0U)
 8002c20:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f af66 	bne.w	8002af6 <HAL_I2C_Master_Transmit+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2a:	4652      	mov	r2, sl
 8002c2c:	4631      	mov	r1, r6
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff fdfc 	bl	800282c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	f47f af30 	bne.w	8002a9a <HAL_I2C_Master_Transmit+0x5e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002c3c:	4d42      	ldr	r5, [pc, #264]	@ (8002d48 <HAL_I2C_Master_Transmit+0x30c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3e:	2120      	movs	r1, #32
 8002c40:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	402a      	ands	r2, r5
 8002c46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002c4c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c50:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8002c54:	e725      	b.n	8002aa2 <HAL_I2C_Master_Transmit+0x66>
 8002c56:	1c71      	adds	r1, r6, #1
 8002c58:	d113      	bne.n	8002c82 <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c5a:	6983      	ldr	r3, [r0, #24]
 8002c5c:	061a      	lsls	r2, r3, #24
 8002c5e:	d5fc      	bpl.n	8002c5a <HAL_I2C_Master_Transmit+0x21e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c60:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2bff      	cmp	r3, #255	@ 0xff
 8002c66:	d91c      	bls.n	8002ca2 <HAL_I2C_Master_Transmit+0x266>
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c68:	6843      	ldr	r3, [r0, #4]
 8002c6a:	4a38      	ldr	r2, [pc, #224]	@ (8002d4c <HAL_I2C_Master_Transmit+0x310>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	ea43 030b 	orr.w	r3, r3, fp
 8002c72:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8002c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c7a:	22ff      	movs	r2, #255	@ 0xff
 8002c7c:	8522      	strh	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c7e:	6043      	str	r3, [r0, #4]
}
 8002c80:	e7ce      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c82:	6983      	ldr	r3, [r0, #24]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	d4eb      	bmi.n	8002c60 <HAL_I2C_Master_Transmit+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c88:	f7ff fa98 	bl	80021bc <HAL_GetTick>
 8002c8c:	eba0 030a 	sub.w	r3, r0, sl
 8002c90:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c92:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c94:	d301      	bcc.n	8002c9a <HAL_I2C_Master_Transmit+0x25e>
 8002c96:	2e00      	cmp	r6, #0
 8002c98:	d1f3      	bne.n	8002c82 <HAL_I2C_Master_Transmit+0x246>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c9a:	6983      	ldr	r3, [r0, #24]
 8002c9c:	061d      	lsls	r5, r3, #24
 8002c9e:	d4f0      	bmi.n	8002c82 <HAL_I2C_Master_Transmit+0x246>
 8002ca0:	e6ef      	b.n	8002a82 <HAL_I2C_Master_Transmit+0x46>
          hi2c->XferSize = hi2c->XferCount;
 8002ca2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ca4:	4929      	ldr	r1, [pc, #164]	@ (8002d4c <HAL_I2C_Master_Transmit+0x310>)
          hi2c->XferSize = hi2c->XferCount;
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002caa:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cac:	6843      	ldr	r3, [r0, #4]
 8002cae:	400b      	ands	r3, r1
 8002cb0:	ea43 030b 	orr.w	r3, r3, fp
 8002cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002cb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cbc:	6043      	str	r3, [r0, #4]
}
 8002cbe:	e7af      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x1e4>
  uint32_t tickstart = Tickstart;
 8002cc0:	4657      	mov	r7, sl
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	46a8      	mov	r8, r5
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cc4:	6983      	ldr	r3, [r0, #24]
 8002cc6:	069b      	lsls	r3, r3, #26
 8002cc8:	d42e      	bmi.n	8002d28 <HAL_I2C_Master_Transmit+0x2ec>
 8002cca:	f1b8 0f00 	cmp.w	r8, #0
 8002cce:	f47f af24 	bne.w	8002b1a <HAL_I2C_Master_Transmit+0xde>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7ff fa73 	bl	80021bc <HAL_GetTick>
 8002cd6:	1bc0      	subs	r0, r0, r7
 8002cd8:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cda:	6820      	ldr	r0, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cdc:	d301      	bcc.n	8002ce2 <HAL_I2C_Master_Transmit+0x2a6>
 8002cde:	2e00      	cmp	r6, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_I2C_Master_Transmit+0x288>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ce2:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 8002ce4:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ce8:	6982      	ldr	r2, [r0, #24]
 8002cea:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 8002cec:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cee:	d50b      	bpl.n	8002d08 <HAL_I2C_Master_Transmit+0x2cc>
 8002cf0:	044a      	lsls	r2, r1, #17
 8002cf2:	d409      	bmi.n	8002d08 <HAL_I2C_Master_Transmit+0x2cc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d007      	beq.n	8002d08 <HAL_I2C_Master_Transmit+0x2cc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cf8:	6843      	ldr	r3, [r0, #4]
 8002cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cfe:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 8002d00:	f7ff fa5c 	bl	80021bc <HAL_GetTick>
 8002d04:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d06:	6820      	ldr	r0, [r4, #0]
 8002d08:	6983      	ldr	r3, [r0, #24]
 8002d0a:	0699      	lsls	r1, r3, #26
 8002d0c:	d4da      	bmi.n	8002cc4 <HAL_I2C_Master_Transmit+0x288>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d0e:	f7ff fa55 	bl	80021bc <HAL_GetTick>
 8002d12:	1bc0      	subs	r0, r0, r7
 8002d14:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d16:	6820      	ldr	r0, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d18:	d9f6      	bls.n	8002d08 <HAL_I2C_Master_Transmit+0x2cc>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d1a:	6983      	ldr	r3, [r0, #24]
 8002d1c:	069b      	lsls	r3, r3, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d1e:	f04f 0520 	mov.w	r5, #32
              status = HAL_ERROR;
 8002d22:	f04f 0801 	mov.w	r8, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d26:	d5d0      	bpl.n	8002cca <HAL_I2C_Master_Transmit+0x28e>
    if (status == HAL_OK)
 8002d28:	f1b8 0f00 	cmp.w	r8, #0
 8002d2c:	f43f aef3 	beq.w	8002b16 <HAL_I2C_Master_Transmit+0xda>
 8002d30:	e6f3      	b.n	8002b1a <HAL_I2C_Master_Transmit+0xde>
      hi2c->XferSize--;
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002d36:	1c53      	adds	r3, r2, #1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	041b      	lsls	r3, r3, #16
      xfermode = I2C_AUTOEND_MODE;
 8002d3c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d40:	e727      	b.n	8002b92 <HAL_I2C_Master_Transmit+0x156>
 8002d42:	bf00      	nop
 8002d44:	fc009800 	.word	0xfc009800
 8002d48:	fe00e800 	.word	0xfe00e800
 8002d4c:	fc009c00 	.word	0xfc009c00

08002d50 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d50:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002d54:	2a20      	cmp	r2, #32
 8002d56:	d123      	bne.n	8002da0 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002d58:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002d60:	2a01      	cmp	r2, #1
 8002d62:	4603      	mov	r3, r0
 8002d64:	d01c      	beq.n	8002da0 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d66:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d68:	2024      	movs	r0, #36	@ 0x24
{
 8002d6a:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002d70:	6810      	ldr	r0, [r2, #0]
 8002d72:	f020 0001 	bic.w	r0, r0, #1
 8002d76:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d78:	6810      	ldr	r0, [r2, #0]
 8002d7a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002d7e:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d80:	6810      	ldr	r0, [r2, #0]
 8002d82:	4301      	orrs	r1, r0
 8002d84:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d86:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d88:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8002d8c:	f041 0101 	orr.w	r1, r1, #1
 8002d90:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002d96:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d9a:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002d9c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002da0:	2002      	movs	r0, #2
}
 8002da2:	4770      	bx	lr

08002da4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da4:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002da8:	2a20      	cmp	r2, #32
 8002daa:	d122      	bne.n	8002df2 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8002dac:	b500      	push	{lr}
 8002dae:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db2:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002db6:	2a01      	cmp	r2, #1
 8002db8:	4603      	mov	r3, r0
 8002dba:	d01c      	beq.n	8002df6 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dbc:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbe:	2024      	movs	r0, #36	@ 0x24
 8002dc0:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002dc4:	6810      	ldr	r0, [r2, #0]
 8002dc6:	f020 0001 	bic.w	r0, r0, #1
 8002dca:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dcc:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dce:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dd2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dd6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dd8:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dda:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8002dde:	f041 0101 	orr.w	r1, r1, #1
 8002de2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002de8:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dec:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002dee:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002df2:	2002      	movs	r0, #2
}
 8002df4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002df6:	2002      	movs	r0, #2
}
 8002df8:	f85d fb04 	ldr.w	pc, [sp], #4

08002dfc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dfc:	4b02      	ldr	r3, [pc, #8]	@ (8002e08 <HAL_PWREx_GetVoltageRange+0xc>)
 8002dfe:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002e00:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40007000 	.word	0x40007000

08002e0c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e0c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002e10:	d00e      	beq.n	8002e30 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e12:	4a1b      	ldr	r2, [pc, #108]	@ (8002e80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e14:	6813      	ldr	r3, [r2, #0]
 8002e16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e1e:	d005      	beq.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e20:	6813      	ldr	r3, [r2, #0]
 8002e22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e30:	4913      	ldr	r1, [pc, #76]	@ (8002e80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e32:	680b      	ldr	r3, [r1, #0]
 8002e34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e3c:	d0f6      	beq.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e3e:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e40:	4a10      	ldr	r2, [pc, #64]	@ (8002e84 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e4a:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e4c:	6813      	ldr	r3, [r2, #0]
 8002e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e88 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e50:	2032      	movs	r0, #50	@ 0x32
 8002e52:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e56:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e5e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e60:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e64:	d506      	bpl.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002e66:	e000      	b.n	8002e6a <HAL_PWREx_ControlVoltageScaling+0x5e>
 8002e68:	b123      	cbz	r3, 8002e74 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002e6a:	694a      	ldr	r2, [r1, #20]
 8002e6c:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8002e6e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e72:	d4f9      	bmi.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e74:	4b02      	ldr	r3, [pc, #8]	@ (8002e80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	055b      	lsls	r3, r3, #21
 8002e7a:	d5d7      	bpl.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8002e7c:	2003      	movs	r0, #3
}
 8002e7e:	4770      	bx	lr
 8002e80:	40007000 	.word	0x40007000
 8002e84:	20000034 	.word	0x20000034
 8002e88:	431bde83 	.word	0x431bde83

08002e8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e8c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e8e:	4d20      	ldr	r5, [pc, #128]	@ (8002f10 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002e90:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002e92:	00db      	lsls	r3, r3, #3
{
 8002e94:	b083      	sub	sp, #12
 8002e96:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e98:	d51a      	bpl.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e9a:	f7ff ffaf 	bl	8002dfc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e9e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002ea2:	d027      	beq.n	8002ef4 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ea4:	2c80      	cmp	r4, #128	@ 0x80
 8002ea6:	d82c      	bhi.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ea8:	d02f      	beq.n	8002f0a <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002eaa:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8002eae:	fab4 f484 	clz	r4, r4
 8002eb2:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002eb4:	4917      	ldr	r1, [pc, #92]	@ (8002f14 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002eb6:	680b      	ldr	r3, [r1, #0]
 8002eb8:	f023 0307 	bic.w	r3, r3, #7
 8002ebc:	4323      	orrs	r3, r4
 8002ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ec0:	6808      	ldr	r0, [r1, #0]
 8002ec2:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002ec6:	1b00      	subs	r0, r0, r4
 8002ec8:	bf18      	it	ne
 8002eca:	2001      	movne	r0, #1
 8002ecc:	b003      	add	sp, #12
 8002ece:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ed0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	65ab      	str	r3, [r5, #88]	@ 0x58
 8002ed8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002ee2:	f7ff ff8b 	bl	8002dfc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ee6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef2:	d1d7      	bne.n	8002ea4 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8002ef4:	2c80      	cmp	r4, #128	@ 0x80
 8002ef6:	d906      	bls.n	8002f06 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef8:	2ca1      	cmp	r4, #161	@ 0xa1
 8002efa:	bf34      	ite	cc
 8002efc:	2401      	movcc	r4, #1
 8002efe:	2402      	movcs	r4, #2
 8002f00:	e7d8      	b.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f02:	2403      	movs	r4, #3
 8002f04:	e7d6      	b.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f06:	2400      	movs	r4, #0
 8002f08:	e7d4      	b.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f0a:	2402      	movs	r4, #2
 8002f0c:	e7d2      	b.n	8002eb4 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40022000 	.word	0x40022000

08002f18 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f18:	4a28      	ldr	r2, [pc, #160]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f1a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f1c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f1e:	f013 030c 	ands.w	r3, r3, #12
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x18>
 8002f24:	2b0c      	cmp	r3, #12
 8002f26:	d035      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d141      	bne.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8002f2c:	4824      	ldr	r0, [pc, #144]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f2e:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f30:	4a22      	ldr	r2, [pc, #136]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f32:	6811      	ldr	r1, [r2, #0]
 8002f34:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f36:	bf54      	ite	pl
 8002f38:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f3c:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002f3e:	4921      	ldr	r1, [pc, #132]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f40:	bf54      	ite	pl
 8002f42:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f46:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002f4a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f4e:	b303      	cbz	r3, 8002f92 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	d11d      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f54:	4b19      	ldr	r3, [pc, #100]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d025      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x94>
 8002f60:	4a19      	ldr	r2, [pc, #100]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	bf08      	it	eq
 8002f66:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f68:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f6a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f6c:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f74:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f78:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f7c:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f7e:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f82:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f84:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f86:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002f8a:	fbb2 f0f3 	udiv	r0, r2, r3
 8002f8e:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f90:	2000      	movs	r0, #0
}
 8002f92:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f94:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f98:	2a01      	cmp	r2, #1
 8002f9a:	d0c9      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f9c:	4b07      	ldr	r3, [pc, #28]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002fa4:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fa6:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8002faa:	d1d9      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8002fac:	4804      	ldr	r0, [pc, #16]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002fae:	e7db      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	4805      	ldr	r0, [pc, #20]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fb4:	bf18      	it	ne
 8002fb6:	2000      	movne	r0, #0
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	00f42400 	.word	0x00f42400
 8002fc4:	080073fc 	.word	0x080073fc
 8002fc8:	007a1200 	.word	0x007a1200

08002fcc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	f000 81f0 	beq.w	80033b2 <HAL_RCC_OscConfig+0x3e6>
{
 8002fd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd6:	4aa7      	ldr	r2, [pc, #668]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fd8:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fda:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fdc:	68d6      	ldr	r6, [r2, #12]
 8002fde:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fe0:	06d8      	lsls	r0, r3, #27
{
 8002fe2:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe4:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe8:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fec:	d52e      	bpl.n	800304c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fee:	2d00      	cmp	r5, #0
 8002ff0:	f000 8100 	beq.w	80031f4 <HAL_RCC_OscConfig+0x228>
 8002ff4:	2d0c      	cmp	r5, #12
 8002ff6:	f000 80fa 	beq.w	80031ee <HAL_RCC_OscConfig+0x222>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ffa:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8002ffc:	4f9d      	ldr	r7, [pc, #628]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 817e 	beq.w	8003300 <HAL_RCC_OscConfig+0x334>
        __HAL_RCC_MSI_ENABLE();
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800300c:	f7ff f8d6 	bl	80021bc <HAL_GetTick>
 8003010:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003012:	e006      	b.n	8003022 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003014:	f7ff f8d2 	bl	80021bc <HAL_GetTick>
 8003018:	eba0 0008 	sub.w	r0, r0, r8
 800301c:	2802      	cmp	r0, #2
 800301e:	f200 817f 	bhi.w	8003320 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	079b      	lsls	r3, r3, #30
 8003026:	d5f5      	bpl.n	8003014 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6a22      	ldr	r2, [r4, #32]
 8003034:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003038:	4313      	orrs	r3, r2
 800303a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69e2      	ldr	r2, [r4, #28]
 8003040:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003044:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003048:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	07d9      	lsls	r1, r3, #31
 800304e:	f100 80a5 	bmi.w	800319c <HAL_RCC_OscConfig+0x1d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	0799      	lsls	r1, r3, #30
 8003054:	d523      	bpl.n	800309e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003056:	2d04      	cmp	r5, #4
 8003058:	f000 8142 	beq.w	80032e0 <HAL_RCC_OscConfig+0x314>
 800305c:	2d0c      	cmp	r5, #12
 800305e:	f000 813c 	beq.w	80032da <HAL_RCC_OscConfig+0x30e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003062:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8003064:	4e83      	ldr	r6, [pc, #524]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8175 	beq.w	8003356 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 800306c:	6833      	ldr	r3, [r6, #0]
 800306e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003072:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003074:	f7ff f8a2 	bl	80021bc <HAL_GetTick>
 8003078:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800307a:	e005      	b.n	8003088 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307c:	f7ff f89e 	bl	80021bc <HAL_GetTick>
 8003080:	1bc0      	subs	r0, r0, r7
 8003082:	2802      	cmp	r0, #2
 8003084:	f200 814c 	bhi.w	8003320 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003088:	6833      	ldr	r3, [r6, #0]
 800308a:	055b      	lsls	r3, r3, #21
 800308c:	d5f6      	bpl.n	800307c <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	6873      	ldr	r3, [r6, #4]
 8003090:	6922      	ldr	r2, [r4, #16]
 8003092:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8003096:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800309a:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	0719      	lsls	r1, r3, #28
 80030a0:	d519      	bpl.n	80030d6 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80030a4:	4e73      	ldr	r6, [pc, #460]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 8103 	beq.w	80032b2 <HAL_RCC_OscConfig+0x2e6>
      __HAL_RCC_LSI_ENABLE();
 80030ac:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80030b8:	f7ff f880 	bl	80021bc <HAL_GetTick>
 80030bc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030be:	e005      	b.n	80030cc <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c0:	f7ff f87c 	bl	80021bc <HAL_GetTick>
 80030c4:	1bc0      	subs	r0, r0, r7
 80030c6:	2802      	cmp	r0, #2
 80030c8:	f200 812a 	bhi.w	8003320 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030cc:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80030d0:	079a      	lsls	r2, r3, #30
 80030d2:	d5f5      	bpl.n	80030c0 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	0758      	lsls	r0, r3, #29
 80030d8:	d53e      	bpl.n	8003158 <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030da:	4b66      	ldr	r3, [pc, #408]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
 80030dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030de:	00d1      	lsls	r1, r2, #3
 80030e0:	f100 8137 	bmi.w	8003352 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030e6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80030ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	9301      	str	r3, [sp, #4]
 80030f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80030f6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f8:	4f5f      	ldr	r7, [pc, #380]	@ (8003278 <HAL_RCC_OscConfig+0x2ac>)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	05da      	lsls	r2, r3, #23
 80030fe:	f140 8172 	bpl.w	80033e6 <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003102:	68a3      	ldr	r3, [r4, #8]
 8003104:	2b01      	cmp	r3, #1
 8003106:	f000 8138 	beq.w	800337a <HAL_RCC_OscConfig+0x3ae>
 800310a:	2b05      	cmp	r3, #5
 800310c:	f000 81ec 	beq.w	80034e8 <HAL_RCC_OscConfig+0x51c>
 8003110:	4f58      	ldr	r7, [pc, #352]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
 8003112:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800311e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003122:	f022 0204 	bic.w	r2, r2, #4
 8003126:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 812c 	bne.w	8003388 <HAL_RCC_OscConfig+0x3bc>
      tickstart = HAL_GetTick();
 8003130:	f7ff f844 	bl	80021bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003138:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800313a:	e006      	b.n	800314a <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7ff f83e 	bl	80021bc <HAL_GetTick>
 8003140:	eba0 0008 	sub.w	r0, r0, r8
 8003144:	4548      	cmp	r0, r9
 8003146:	f200 80eb 	bhi.w	8003320 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800314a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800314e:	0799      	lsls	r1, r3, #30
 8003150:	d4f4      	bmi.n	800313c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8003152:	2e00      	cmp	r6, #0
 8003154:	f040 8159 	bne.w	800340a <HAL_RCC_OscConfig+0x43e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003158:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800315a:	b1db      	cbz	r3, 8003194 <HAL_RCC_OscConfig+0x1c8>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800315c:	2b02      	cmp	r3, #2
 800315e:	f000 816d 	beq.w	800343c <HAL_RCC_OscConfig+0x470>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003162:	2d0c      	cmp	r5, #12
 8003164:	f000 8095 	beq.w	8003292 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8003168:	4c42      	ldr	r4, [pc, #264]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003170:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003172:	f7ff f823 	bl	80021bc <HAL_GetTick>
 8003176:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003178:	e005      	b.n	8003186 <HAL_RCC_OscConfig+0x1ba>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317a:	f7ff f81f 	bl	80021bc <HAL_GetTick>
 800317e:	1b40      	subs	r0, r0, r5
 8003180:	2802      	cmp	r0, #2
 8003182:	f200 80cd 	bhi.w	8003320 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	d4f6      	bmi.n	800317a <HAL_RCC_OscConfig+0x1ae>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800318c:	68e2      	ldr	r2, [r4, #12]
 800318e:	4b3b      	ldr	r3, [pc, #236]	@ (800327c <HAL_RCC_OscConfig+0x2b0>)
 8003190:	4013      	ands	r3, r2
 8003192:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8003194:	2000      	movs	r0, #0
}
 8003196:	b003      	add	sp, #12
 8003198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800319c:	2d08      	cmp	r5, #8
 800319e:	d07e      	beq.n	800329e <HAL_RCC_OscConfig+0x2d2>
 80031a0:	2d0c      	cmp	r5, #12
 80031a2:	d07a      	beq.n	800329a <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a4:	6863      	ldr	r3, [r4, #4]
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031aa:	f000 80bd 	beq.w	8003328 <HAL_RCC_OscConfig+0x35c>
 80031ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b2:	f000 8136 	beq.w	8003422 <HAL_RCC_OscConfig+0x456>
 80031b6:	4f2f      	ldr	r7, [pc, #188]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80031be:	603a      	str	r2, [r7, #0]
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031c6:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f040 80b2 	bne.w	8003332 <HAL_RCC_OscConfig+0x366>
        tickstart = HAL_GetTick();
 80031ce:	f7fe fff5 	bl	80021bc <HAL_GetTick>
 80031d2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031d4:	e006      	b.n	80031e4 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d6:	f7fe fff1 	bl	80021bc <HAL_GetTick>
 80031da:	eba0 0008 	sub.w	r0, r0, r8
 80031de:	2864      	cmp	r0, #100	@ 0x64
 80031e0:	f200 809e 	bhi.w	8003320 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	0398      	lsls	r0, r3, #14
 80031e8:	d4f5      	bmi.n	80031d6 <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	e731      	b.n	8003052 <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031ee:	2e01      	cmp	r6, #1
 80031f0:	f47f af03 	bne.w	8002ffa <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0799      	lsls	r1, r3, #30
 80031fa:	d447      	bmi.n	800328c <HAL_RCC_OscConfig+0x2c0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
 80031fe:	6a20      	ldr	r0, [r4, #32]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	0712      	lsls	r2, r2, #28
 8003204:	bf56      	itet	pl
 8003206:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 800320a:	681b      	ldrmi	r3, [r3, #0]
 800320c:	091b      	lsrpl	r3, r3, #4
 800320e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003212:	4298      	cmp	r0, r3
 8003214:	f200 80cf 	bhi.w	80033b6 <HAL_RCC_OscConfig+0x3ea>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003218:	4b16      	ldr	r3, [pc, #88]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	f042 0208 	orr.w	r2, r2, #8
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003228:	4302      	orrs	r2, r0
 800322a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	69e1      	ldr	r1, [r4, #28]
 8003230:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003234:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003238:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800323a:	2d00      	cmp	r5, #0
 800323c:	f000 80eb 	beq.w	8003416 <HAL_RCC_OscConfig+0x44a>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003240:	f7ff fe6a 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCC_OscConfig+0x2a8>)
 8003246:	4a0e      	ldr	r2, [pc, #56]	@ (8003280 <HAL_RCC_OscConfig+0x2b4>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800324e:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8003250:	4a0c      	ldr	r2, [pc, #48]	@ (8003284 <HAL_RCC_OscConfig+0x2b8>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800325a:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800325c:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <HAL_RCC_OscConfig+0x2bc>)
 800325e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8003260:	f7fe ff62 	bl	8002128 <HAL_InitTick>
        if(status != HAL_OK)
 8003264:	2800      	cmp	r0, #0
 8003266:	d196      	bne.n	8003196 <HAL_RCC_OscConfig+0x1ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	07d9      	lsls	r1, r3, #31
 800326c:	f57f aef1 	bpl.w	8003052 <HAL_RCC_OscConfig+0x86>
 8003270:	e794      	b.n	800319c <HAL_RCC_OscConfig+0x1d0>
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	40007000 	.word	0x40007000
 800327c:	feeefffc 	.word	0xfeeefffc
 8003280:	08007434 	.word	0x08007434
 8003284:	20000190 	.word	0x20000190
 8003288:	20000034 	.word	0x20000034
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800328c:	69a3      	ldr	r3, [r4, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1b4      	bne.n	80031fc <HAL_RCC_OscConfig+0x230>
    return HAL_ERROR;
 8003292:	2001      	movs	r0, #1
}
 8003294:	b003      	add	sp, #12
 8003296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800329a:	2e03      	cmp	r6, #3
 800329c:	d182      	bne.n	80031a4 <HAL_RCC_OscConfig+0x1d8>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329e:	4a99      	ldr	r2, [pc, #612]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	0392      	lsls	r2, r2, #14
 80032a4:	f57f aed5 	bpl.w	8003052 <HAL_RCC_OscConfig+0x86>
 80032a8:	6862      	ldr	r2, [r4, #4]
 80032aa:	2a00      	cmp	r2, #0
 80032ac:	f47f aed1 	bne.w	8003052 <HAL_RCC_OscConfig+0x86>
 80032b0:	e7ef      	b.n	8003292 <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_LSI_DISABLE();
 80032b2:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80032be:	f7fe ff7d 	bl	80021bc <HAL_GetTick>
 80032c2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c4:	e004      	b.n	80032d0 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fe ff79 	bl	80021bc <HAL_GetTick>
 80032ca:	1bc0      	subs	r0, r0, r7
 80032cc:	2802      	cmp	r0, #2
 80032ce:	d827      	bhi.n	8003320 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032d0:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80032d4:	079b      	lsls	r3, r3, #30
 80032d6:	d4f6      	bmi.n	80032c6 <HAL_RCC_OscConfig+0x2fa>
 80032d8:	e6fc      	b.n	80030d4 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032da:	2e02      	cmp	r6, #2
 80032dc:	f47f aec1 	bne.w	8003062 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e0:	4a88      	ldr	r2, [pc, #544]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	0552      	lsls	r2, r2, #21
 80032e6:	d502      	bpl.n	80032ee <HAL_RCC_OscConfig+0x322>
 80032e8:	68e2      	ldr	r2, [r4, #12]
 80032ea:	2a00      	cmp	r2, #0
 80032ec:	d0d1      	beq.n	8003292 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ee:	4985      	ldr	r1, [pc, #532]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
 80032f0:	6920      	ldr	r0, [r4, #16]
 80032f2:	684a      	ldr	r2, [r1, #4]
 80032f4:	f022 52f8 	bic.w	r2, r2, #520093696	@ 0x1f000000
 80032f8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80032fc:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032fe:	e6ce      	b.n	800309e <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003308:	f7fe ff58 	bl	80021bc <HAL_GetTick>
 800330c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	0798      	lsls	r0, r3, #30
 8003312:	d5a9      	bpl.n	8003268 <HAL_RCC_OscConfig+0x29c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003314:	f7fe ff52 	bl	80021bc <HAL_GetTick>
 8003318:	eba0 0008 	sub.w	r0, r0, r8
 800331c:	2802      	cmp	r0, #2
 800331e:	d9f6      	bls.n	800330e <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8003320:	2003      	movs	r0, #3
}
 8003322:	b003      	add	sp, #12
 8003324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003328:	4a76      	ldr	r2, [pc, #472]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003330:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003332:	f7fe ff43 	bl	80021bc <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003336:	f8df 81cc 	ldr.w	r8, [pc, #460]	@ 8003504 <HAL_RCC_OscConfig+0x538>
        tickstart = HAL_GetTick();
 800333a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333c:	e004      	b.n	8003348 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333e:	f7fe ff3d 	bl	80021bc <HAL_GetTick>
 8003342:	1bc0      	subs	r0, r0, r7
 8003344:	2864      	cmp	r0, #100	@ 0x64
 8003346:	d8eb      	bhi.n	8003320 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003348:	f8d8 3000 	ldr.w	r3, [r8]
 800334c:	039b      	lsls	r3, r3, #14
 800334e:	d5f6      	bpl.n	800333e <HAL_RCC_OscConfig+0x372>
 8003350:	e74b      	b.n	80031ea <HAL_RCC_OscConfig+0x21e>
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2600      	movs	r6, #0
 8003354:	e6d0      	b.n	80030f8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8003356:	6833      	ldr	r3, [r6, #0]
 8003358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800335c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800335e:	f7fe ff2d 	bl	80021bc <HAL_GetTick>
 8003362:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003364:	e004      	b.n	8003370 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003366:	f7fe ff29 	bl	80021bc <HAL_GetTick>
 800336a:	1bc0      	subs	r0, r0, r7
 800336c:	2802      	cmp	r0, #2
 800336e:	d8d7      	bhi.n	8003320 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003370:	6833      	ldr	r3, [r6, #0]
 8003372:	0558      	lsls	r0, r3, #21
 8003374:	d4f7      	bmi.n	8003366 <HAL_RCC_OscConfig+0x39a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	e691      	b.n	800309e <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337a:	4a62      	ldr	r2, [pc, #392]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
 800337c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8003388:	f7fe ff18 	bl	80021bc <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338c:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 8003504 <HAL_RCC_OscConfig+0x538>
      tickstart = HAL_GetTick();
 8003390:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003396:	e004      	b.n	80033a2 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003398:	f7fe ff10 	bl	80021bc <HAL_GetTick>
 800339c:	1bc0      	subs	r0, r0, r7
 800339e:	4548      	cmp	r0, r9
 80033a0:	d8be      	bhi.n	8003320 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a2:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 80033a6:	0798      	lsls	r0, r3, #30
 80033a8:	d5f6      	bpl.n	8003398 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 80033aa:	2e00      	cmp	r6, #0
 80033ac:	f43f aed4 	beq.w	8003158 <HAL_RCC_OscConfig+0x18c>
 80033b0:	e02b      	b.n	800340a <HAL_RCC_OscConfig+0x43e>
    return HAL_ERROR;
 80033b2:	2001      	movs	r0, #1
}
 80033b4:	4770      	bx	lr
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033b6:	f7ff fd69 	bl	8002e8c <RCC_SetFlashLatencyFromMSIRange>
 80033ba:	2800      	cmp	r0, #0
 80033bc:	f47f af69 	bne.w	8003292 <HAL_RCC_OscConfig+0x2c6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c0:	4b50      	ldr	r3, [pc, #320]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	f042 0208 	orr.w	r2, r2, #8
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	6a21      	ldr	r1, [r4, #32]
 80033ce:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	69e1      	ldr	r1, [r4, #28]
 80033da:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80033de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	e72c      	b.n	8003240 <HAL_RCC_OscConfig+0x274>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ec:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80033ee:	f7fe fee5 	bl	80021bc <HAL_GetTick>
 80033f2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	05db      	lsls	r3, r3, #23
 80033f8:	f53f ae83 	bmi.w	8003102 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fc:	f7fe fede 	bl	80021bc <HAL_GetTick>
 8003400:	eba0 0008 	sub.w	r0, r0, r8
 8003404:	2802      	cmp	r0, #2
 8003406:	d9f5      	bls.n	80033f4 <HAL_RCC_OscConfig+0x428>
 8003408:	e78a      	b.n	8003320 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_PWR_CLK_DISABLE();
 800340a:	4a3e      	ldr	r2, [pc, #248]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
 800340c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800340e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	@ 0x58
 8003414:	e6a0      	b.n	8003158 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003416:	f7ff fd39 	bl	8002e8c <RCC_SetFlashLatencyFromMSIRange>
 800341a:	2800      	cmp	r0, #0
 800341c:	f43f af10 	beq.w	8003240 <HAL_RCC_OscConfig+0x274>
 8003420:	e737      	b.n	8003292 <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003422:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003426:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003438:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800343a:	e77a      	b.n	8003332 <HAL_RCC_OscConfig+0x366>
      pll_config = RCC->PLLCFGR;
 800343c:	4e31      	ldr	r6, [pc, #196]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8003440:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003442:	f003 0103 	and.w	r1, r3, #3
 8003446:	4291      	cmp	r1, r2
 8003448:	d060      	beq.n	800350c <HAL_RCC_OscConfig+0x540>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800344a:	2d0c      	cmp	r5, #12
 800344c:	f43f af21 	beq.w	8003292 <HAL_RCC_OscConfig+0x2c6>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003450:	4d2c      	ldr	r5, [pc, #176]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
 8003452:	682b      	ldr	r3, [r5, #0]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	f53f af1c 	bmi.w	8003292 <HAL_RCC_OscConfig+0x2c6>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800345a:	682b      	ldr	r3, [r5, #0]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	f53f af18 	bmi.w	8003292 <HAL_RCC_OscConfig+0x2c6>
            __HAL_RCC_PLL_DISABLE();
 8003462:	682b      	ldr	r3, [r5, #0]
 8003464:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003468:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800346a:	f7fe fea7 	bl	80021bc <HAL_GetTick>
 800346e:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003470:	e005      	b.n	800347e <HAL_RCC_OscConfig+0x4b2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003472:	f7fe fea3 	bl	80021bc <HAL_GetTick>
 8003476:	1b80      	subs	r0, r0, r6
 8003478:	2802      	cmp	r0, #2
 800347a:	f63f af51 	bhi.w	8003320 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347e:	682b      	ldr	r3, [r5, #0]
 8003480:	019f      	lsls	r7, r3, #6
 8003482:	d4f6      	bmi.n	8003472 <HAL_RCC_OscConfig+0x4a6>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003484:	68e9      	ldr	r1, [r5, #12]
 8003486:	4b20      	ldr	r3, [pc, #128]	@ (8003508 <HAL_RCC_OscConfig+0x53c>)
 8003488:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	4e1e      	ldr	r6, [pc, #120]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800348c:	400b      	ands	r3, r1
 800348e:	4313      	orrs	r3, r2
 8003490:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	@ 0x30
 8003494:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003498:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 800349c:	3a01      	subs	r2, #1
 800349e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80034a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80034a4:	0900      	lsrs	r0, r0, #4
 80034a6:	0849      	lsrs	r1, r1, #1
 80034a8:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80034ac:	3901      	subs	r1, #1
 80034ae:	0852      	lsrs	r2, r2, #1
 80034b0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80034b4:	3a01      	subs	r2, #1
 80034b6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80034ba:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034c2:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c4:	68eb      	ldr	r3, [r5, #12]
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ca:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80034cc:	f7fe fe76 	bl	80021bc <HAL_GetTick>
 80034d0:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	e005      	b.n	80034e0 <HAL_RCC_OscConfig+0x514>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe fe72 	bl	80021bc <HAL_GetTick>
 80034d8:	1b00      	subs	r0, r0, r4
 80034da:	2802      	cmp	r0, #2
 80034dc:	f63f af20 	bhi.w	8003320 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e0:	6833      	ldr	r3, [r6, #0]
 80034e2:	0198      	lsls	r0, r3, #6
 80034e4:	d5f6      	bpl.n	80034d4 <HAL_RCC_OscConfig+0x508>
 80034e6:	e655      	b.n	8003194 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e8:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <HAL_RCC_OscConfig+0x538>)
 80034ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80034ee:	f042 0204 	orr.w	r2, r2, #4
 80034f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80034f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003502:	e741      	b.n	8003388 <HAL_RCC_OscConfig+0x3bc>
 8003504:	40021000 	.word	0x40021000
 8003508:	f99d808c 	.word	0xf99d808c
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800350c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800350e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003512:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003514:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003518:	d197      	bne.n	800344a <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800351a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800351c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003520:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003524:	d191      	bne.n	800344a <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003526:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003528:	3a07      	subs	r2, #7
 800352a:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 800352e:	bf18      	it	ne
 8003530:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003532:	4291      	cmp	r1, r2
 8003534:	d189      	bne.n	800344a <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003536:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003538:	0852      	lsrs	r2, r2, #1
 800353a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800353e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003540:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003544:	d181      	bne.n	800344a <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003546:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003548:	0852      	lsrs	r2, r2, #1
 800354a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800354e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003550:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003554:	f47f af79 	bne.w	800344a <HAL_RCC_OscConfig+0x47e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003558:	6833      	ldr	r3, [r6, #0]
 800355a:	0199      	lsls	r1, r3, #6
 800355c:	f53f ae1a 	bmi.w	8003194 <HAL_RCC_OscConfig+0x1c8>
          __HAL_RCC_PLL_ENABLE();
 8003560:	6833      	ldr	r3, [r6, #0]
 8003562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003566:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003568:	68f3      	ldr	r3, [r6, #12]
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800356e:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8003570:	f7fe fe24 	bl	80021bc <HAL_GetTick>
 8003574:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003576:	e005      	b.n	8003584 <HAL_RCC_OscConfig+0x5b8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe fe20 	bl	80021bc <HAL_GetTick>
 800357c:	1b03      	subs	r3, r0, r4
 800357e:	2b02      	cmp	r3, #2
 8003580:	f63f aece 	bhi.w	8003320 <HAL_RCC_OscConfig+0x354>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003584:	6833      	ldr	r3, [r6, #0]
 8003586:	019a      	lsls	r2, r3, #6
 8003588:	d5f6      	bpl.n	8003578 <HAL_RCC_OscConfig+0x5ac>
 800358a:	e603      	b.n	8003194 <HAL_RCC_OscConfig+0x1c8>

0800358c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800358c:	2800      	cmp	r0, #0
 800358e:	f000 80a0 	beq.w	80036d2 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003592:	4a54      	ldr	r2, [pc, #336]	@ (80036e4 <HAL_RCC_ClockConfig+0x158>)
 8003594:	6813      	ldr	r3, [r2, #0]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	428b      	cmp	r3, r1
{
 800359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a0:	460d      	mov	r5, r1
 80035a2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a4:	d20c      	bcs.n	80035c0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	6813      	ldr	r3, [r2, #0]
 80035a8:	f023 0307 	bic.w	r3, r3, #7
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b0:	6813      	ldr	r3, [r2, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	428b      	cmp	r3, r1
 80035b8:	d002      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80035ba:	2001      	movs	r0, #1
}
 80035bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c4:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	d570      	bpl.n	80036ac <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035ca:	4e47      	ldr	r6, [pc, #284]	@ (80036e8 <HAL_RCC_ClockConfig+0x15c>)
 80035cc:	68a0      	ldr	r0, [r4, #8]
 80035ce:	68b1      	ldr	r1, [r6, #8]
 80035d0:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 80035d4:	4288      	cmp	r0, r1
 80035d6:	d904      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d8:	68b1      	ldr	r1, [r6, #8]
 80035da:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 80035de:	4301      	orrs	r1, r0
 80035e0:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	b332      	cbz	r2, 8003632 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e4:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e6:	4b40      	ldr	r3, [pc, #256]	@ (80036e8 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e8:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ec:	d065      	beq.n	80036ba <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	2a02      	cmp	r2, #2
 80035f0:	d06c      	beq.n	80036cc <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	d171      	bne.n	80036da <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035f6:	079e      	lsls	r6, r3, #30
 80035f8:	d5df      	bpl.n	80035ba <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035fa:	4e3b      	ldr	r6, [pc, #236]	@ (80036e8 <HAL_RCC_ClockConfig+0x15c>)
 80035fc:	68b3      	ldr	r3, [r6, #8]
 80035fe:	f023 0303 	bic.w	r3, r3, #3
 8003602:	4313      	orrs	r3, r2
 8003604:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003606:	f7fe fdd9 	bl	80021bc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800360e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003610:	e004      	b.n	800361c <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003612:	f7fe fdd3 	bl	80021bc <HAL_GetTick>
 8003616:	1bc0      	subs	r0, r0, r7
 8003618:	4540      	cmp	r0, r8
 800361a:	d85c      	bhi.n	80036d6 <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361c:	68b3      	ldr	r3, [r6, #8]
 800361e:	6862      	ldr	r2, [r4, #4]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003628:	d1f3      	bne.n	8003612 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	0799      	lsls	r1, r3, #30
 800362e:	d506      	bpl.n	800363e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003630:	68a0      	ldr	r0, [r4, #8]
 8003632:	492d      	ldr	r1, [pc, #180]	@ (80036e8 <HAL_RCC_ClockConfig+0x15c>)
 8003634:	688a      	ldr	r2, [r1, #8]
 8003636:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800363a:	4282      	cmp	r2, r0
 800363c:	d840      	bhi.n	80036c0 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800363e:	4929      	ldr	r1, [pc, #164]	@ (80036e4 <HAL_RCC_ClockConfig+0x158>)
 8003640:	680a      	ldr	r2, [r1, #0]
 8003642:	f002 0207 	and.w	r2, r2, #7
 8003646:	42aa      	cmp	r2, r5
 8003648:	d909      	bls.n	800365e <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	680a      	ldr	r2, [r1, #0]
 800364c:	f022 0207 	bic.w	r2, r2, #7
 8003650:	432a      	orrs	r2, r5
 8003652:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003654:	680a      	ldr	r2, [r1, #0]
 8003656:	f002 0207 	and.w	r2, r2, #7
 800365a:	42aa      	cmp	r2, r5
 800365c:	d1ad      	bne.n	80035ba <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365e:	075a      	lsls	r2, r3, #29
 8003660:	d506      	bpl.n	8003670 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003662:	4921      	ldr	r1, [pc, #132]	@ (80036e8 <HAL_RCC_ClockConfig+0x15c>)
 8003664:	68e0      	ldr	r0, [r4, #12]
 8003666:	688a      	ldr	r2, [r1, #8]
 8003668:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800366c:	4302      	orrs	r2, r0
 800366e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	071b      	lsls	r3, r3, #28
 8003672:	d507      	bpl.n	8003684 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003674:	4a1c      	ldr	r2, [pc, #112]	@ (80036e8 <HAL_RCC_ClockConfig+0x15c>)
 8003676:	6921      	ldr	r1, [r4, #16]
 8003678:	6893      	ldr	r3, [r2, #8]
 800367a:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800367e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003682:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003684:	f7ff fc48 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8003688:	4a17      	ldr	r2, [pc, #92]	@ (80036e8 <HAL_RCC_ClockConfig+0x15c>)
 800368a:	4c18      	ldr	r4, [pc, #96]	@ (80036ec <HAL_RCC_ClockConfig+0x160>)
 800368c:	6892      	ldr	r2, [r2, #8]
 800368e:	4918      	ldr	r1, [pc, #96]	@ (80036f0 <HAL_RCC_ClockConfig+0x164>)
 8003690:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003694:	4603      	mov	r3, r0
 8003696:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8003698:	4816      	ldr	r0, [pc, #88]	@ (80036f4 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800369a:	f002 021f 	and.w	r2, r2, #31
 800369e:	40d3      	lsrs	r3, r2
}
 80036a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80036a4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036a6:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80036a8:	f7fe bd3e 	b.w	8002128 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ac:	2a00      	cmp	r2, #0
 80036ae:	d0c6      	beq.n	800363e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b0:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b2:	4b0d      	ldr	r3, [pc, #52]	@ (80036e8 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b4:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b6:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b8:	d199      	bne.n	80035ee <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	019b      	lsls	r3, r3, #6
 80036bc:	d49d      	bmi.n	80035fa <HAL_RCC_ClockConfig+0x6e>
 80036be:	e77c      	b.n	80035ba <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	688a      	ldr	r2, [r1, #8]
 80036c2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80036c6:	4302      	orrs	r2, r0
 80036c8:	608a      	str	r2, [r1, #8]
 80036ca:	e7b8      	b.n	800363e <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036cc:	039f      	lsls	r7, r3, #14
 80036ce:	d494      	bmi.n	80035fa <HAL_RCC_ClockConfig+0x6e>
 80036d0:	e773      	b.n	80035ba <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80036d2:	2001      	movs	r0, #1
}
 80036d4:	4770      	bx	lr
        return HAL_TIMEOUT;
 80036d6:	2003      	movs	r0, #3
 80036d8:	e770      	b.n	80035bc <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036da:	0558      	lsls	r0, r3, #21
 80036dc:	f57f af6d 	bpl.w	80035ba <HAL_RCC_ClockConfig+0x2e>
 80036e0:	e78b      	b.n	80035fa <HAL_RCC_ClockConfig+0x6e>
 80036e2:	bf00      	nop
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08007434 	.word	0x08007434
 80036f0:	20000034 	.word	0x20000034
 80036f4:	20000190 	.word	0x20000190

080036f8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <HAL_RCC_GetPCLK1Freq+0x18>)
 80036fa:	4a06      	ldr	r2, [pc, #24]	@ (8003714 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80036fc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80036fe:	4906      	ldr	r1, [pc, #24]	@ (8003718 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003700:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003704:	6808      	ldr	r0, [r1, #0]
 8003706:	5cd3      	ldrb	r3, [r2, r3]
 8003708:	f003 031f 	and.w	r3, r3, #31
}
 800370c:	40d8      	lsrs	r0, r3
 800370e:	4770      	bx	lr
 8003710:	40021000 	.word	0x40021000
 8003714:	0800742c 	.word	0x0800742c
 8003718:	20000034 	.word	0x20000034

0800371c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800371c:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <HAL_RCC_GetPCLK2Freq+0x18>)
 800371e:	4a06      	ldr	r2, [pc, #24]	@ (8003738 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003720:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003722:	4906      	ldr	r1, [pc, #24]	@ (800373c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003724:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003728:	6808      	ldr	r0, [r1, #0]
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	f003 031f 	and.w	r3, r3, #31
}
 8003730:	40d8      	lsrs	r0, r3
 8003732:	4770      	bx	lr
 8003734:	40021000 	.word	0x40021000
 8003738:	0800742c 	.word	0x0800742c
 800373c:	20000034 	.word	0x20000034

08003740 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003740:	4a45      	ldr	r2, [pc, #276]	@ (8003858 <RCCEx_PLLSAI1_Config+0x118>)
{
 8003742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003744:	68d6      	ldr	r6, [r2, #12]
{
 8003746:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003748:	07b1      	lsls	r1, r6, #30
{
 800374a:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800374c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800374e:	d006      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003750:	68d1      	ldr	r1, [r2, #12]
 8003752:	f001 0103 	and.w	r1, r1, #3
 8003756:	4281      	cmp	r1, r0
 8003758:	d04c      	beq.n	80037f4 <RCCEx_PLLSAI1_Config+0xb4>
 800375a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800375c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800375e:	2802      	cmp	r0, #2
 8003760:	d059      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0xd6>
 8003762:	2803      	cmp	r0, #3
 8003764:	d050      	beq.n	8003808 <RCCEx_PLLSAI1_Config+0xc8>
 8003766:	2801      	cmp	r0, #1
 8003768:	d1f7      	bne.n	800375a <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	0793      	lsls	r3, r2, #30
 800376e:	d5f5      	bpl.n	800375c <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003770:	4939      	ldr	r1, [pc, #228]	@ (8003858 <RCCEx_PLLSAI1_Config+0x118>)
 8003772:	68ca      	ldr	r2, [r1, #12]
 8003774:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8003778:	ea42 0300 	orr.w	r3, r2, r0
 800377c:	6862      	ldr	r2, [r4, #4]
 800377e:	3a01      	subs	r2, #1
 8003780:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003784:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8003786:	4e34      	ldr	r6, [pc, #208]	@ (8003858 <RCCEx_PLLSAI1_Config+0x118>)
 8003788:	6833      	ldr	r3, [r6, #0]
 800378a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800378e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003790:	f7fe fd14 	bl	80021bc <HAL_GetTick>
 8003794:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003796:	e004      	b.n	80037a2 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003798:	f7fe fd10 	bl	80021bc <HAL_GetTick>
 800379c:	1bc3      	subs	r3, r0, r7
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d83d      	bhi.n	800381e <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a2:	6833      	ldr	r3, [r6, #0]
 80037a4:	011a      	lsls	r2, r3, #4
 80037a6:	d4f7      	bmi.n	8003798 <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037a8:	68a3      	ldr	r3, [r4, #8]
 80037aa:	021a      	lsls	r2, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80037ac:	2d00      	cmp	r5, #0
 80037ae:	d138      	bne.n	8003822 <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b0:	6933      	ldr	r3, [r6, #16]
 80037b2:	68e1      	ldr	r1, [r4, #12]
 80037b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037bc:	0909      	lsrs	r1, r1, #4
 80037be:	4313      	orrs	r3, r2
 80037c0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80037c4:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80037c6:	4d24      	ldr	r5, [pc, #144]	@ (8003858 <RCCEx_PLLSAI1_Config+0x118>)
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80037d0:	f7fe fcf4 	bl	80021bc <HAL_GetTick>
 80037d4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037d6:	e004      	b.n	80037e2 <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d8:	f7fe fcf0 	bl	80021bc <HAL_GetTick>
 80037dc:	1b80      	subs	r0, r0, r6
 80037de:	2802      	cmp	r0, #2
 80037e0:	d81d      	bhi.n	800381e <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037e2:	682b      	ldr	r3, [r5, #0]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	d5f7      	bpl.n	80037d8 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037e8:	692b      	ldr	r3, [r5, #16]
 80037ea:	69a2      	ldr	r2, [r4, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	2000      	movs	r0, #0
 80037f0:	612b      	str	r3, [r5, #16]
}
 80037f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80037f4:	2900      	cmp	r1, #0
 80037f6:	d0b0      	beq.n	800375a <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037f8:	68d3      	ldr	r3, [r2, #12]
       ||
 80037fa:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037fc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003800:	3301      	adds	r3, #1
       ||
 8003802:	4293      	cmp	r3, r2
 8003804:	d1a9      	bne.n	800375a <RCCEx_PLLSAI1_Config+0x1a>
 8003806:	e7be      	b.n	8003786 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003808:	6811      	ldr	r1, [r2, #0]
 800380a:	038e      	lsls	r6, r1, #14
 800380c:	d4b0      	bmi.n	8003770 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	0351      	lsls	r1, r2, #13
 8003812:	d5a2      	bpl.n	800375a <RCCEx_PLLSAI1_Config+0x1a>
 8003814:	e7ac      	b.n	8003770 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	0557      	lsls	r7, r2, #21
 800381a:	d59e      	bpl.n	800375a <RCCEx_PLLSAI1_Config+0x1a>
 800381c:	e7a8      	b.n	8003770 <RCCEx_PLLSAI1_Config+0x30>
 800381e:	2003      	movs	r0, #3
}
 8003820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8003822:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003824:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8003826:	d00b      	beq.n	8003840 <RCCEx_PLLSAI1_Config+0x100>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003828:	6961      	ldr	r1, [r4, #20]
 800382a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800382e:	0849      	lsrs	r1, r1, #1
 8003830:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003834:	3901      	subs	r1, #1
 8003836:	4313      	orrs	r3, r2
 8003838:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800383c:	6133      	str	r3, [r6, #16]
 800383e:	e7c2      	b.n	80037c6 <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003840:	6921      	ldr	r1, [r4, #16]
 8003842:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003846:	0849      	lsrs	r1, r1, #1
 8003848:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800384c:	3901      	subs	r1, #1
 800384e:	4313      	orrs	r3, r2
 8003850:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003854:	6133      	str	r3, [r6, #16]
 8003856:	e7b6      	b.n	80037c6 <RCCEx_PLLSAI1_Config+0x86>
 8003858:	40021000 	.word	0x40021000

0800385c <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800385c:	4a3e      	ldr	r2, [pc, #248]	@ (8003958 <RCCEx_PLLSAI2_Config+0xfc>)
{
 800385e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003860:	68d6      	ldr	r6, [r2, #12]
{
 8003862:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003864:	07b1      	lsls	r1, r6, #30
{
 8003866:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003868:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800386a:	d006      	beq.n	800387a <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800386c:	68d1      	ldr	r1, [r2, #12]
 800386e:	f001 0103 	and.w	r1, r1, #3
 8003872:	4281      	cmp	r1, r0
 8003874:	d04c      	beq.n	8003910 <RCCEx_PLLSAI2_Config+0xb4>
 8003876:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 800387a:	2802      	cmp	r0, #2
 800387c:	d059      	beq.n	8003932 <RCCEx_PLLSAI2_Config+0xd6>
 800387e:	2803      	cmp	r0, #3
 8003880:	d050      	beq.n	8003924 <RCCEx_PLLSAI2_Config+0xc8>
 8003882:	2801      	cmp	r0, #1
 8003884:	d1f7      	bne.n	8003876 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	0793      	lsls	r3, r2, #30
 800388a:	d5f5      	bpl.n	8003878 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800388c:	4932      	ldr	r1, [pc, #200]	@ (8003958 <RCCEx_PLLSAI2_Config+0xfc>)
 800388e:	68ca      	ldr	r2, [r1, #12]
 8003890:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8003894:	ea42 0300 	orr.w	r3, r2, r0
 8003898:	6862      	ldr	r2, [r4, #4]
 800389a:	3a01      	subs	r2, #1
 800389c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80038a0:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 80038a2:	4e2d      	ldr	r6, [pc, #180]	@ (8003958 <RCCEx_PLLSAI2_Config+0xfc>)
 80038a4:	6833      	ldr	r3, [r6, #0]
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80038ac:	f7fe fc86 	bl	80021bc <HAL_GetTick>
 80038b0:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038b2:	e004      	b.n	80038be <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038b4:	f7fe fc82 	bl	80021bc <HAL_GetTick>
 80038b8:	1bc3      	subs	r3, r0, r7
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d83d      	bhi.n	800393a <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038be:	6833      	ldr	r3, [r6, #0]
 80038c0:	009a      	lsls	r2, r3, #2
 80038c2:	d4f7      	bmi.n	80038b4 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038c4:	68a3      	ldr	r3, [r4, #8]
 80038c6:	021a      	lsls	r2, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80038c8:	2d00      	cmp	r5, #0
 80038ca:	d138      	bne.n	800393e <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038cc:	6973      	ldr	r3, [r6, #20]
 80038ce:	68e1      	ldr	r1, [r4, #12]
 80038d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d8:	0909      	lsrs	r1, r1, #4
 80038da:	4313      	orrs	r3, r2
 80038dc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80038e0:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80038e2:	4d1d      	ldr	r5, [pc, #116]	@ (8003958 <RCCEx_PLLSAI2_Config+0xfc>)
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80038ec:	f7fe fc66 	bl	80021bc <HAL_GetTick>
 80038f0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038f2:	e004      	b.n	80038fe <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038f4:	f7fe fc62 	bl	80021bc <HAL_GetTick>
 80038f8:	1b80      	subs	r0, r0, r6
 80038fa:	2802      	cmp	r0, #2
 80038fc:	d81d      	bhi.n	800393a <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038fe:	682b      	ldr	r3, [r5, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	d5f7      	bpl.n	80038f4 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003904:	696b      	ldr	r3, [r5, #20]
 8003906:	6962      	ldr	r2, [r4, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	2000      	movs	r0, #0
 800390c:	616b      	str	r3, [r5, #20]
}
 800390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003910:	2900      	cmp	r1, #0
 8003912:	d0b0      	beq.n	8003876 <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003914:	68d3      	ldr	r3, [r2, #12]
       ||
 8003916:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003918:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800391c:	3301      	adds	r3, #1
       ||
 800391e:	4293      	cmp	r3, r2
 8003920:	d1a9      	bne.n	8003876 <RCCEx_PLLSAI2_Config+0x1a>
 8003922:	e7be      	b.n	80038a2 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003924:	6811      	ldr	r1, [r2, #0]
 8003926:	038e      	lsls	r6, r1, #14
 8003928:	d4b0      	bmi.n	800388c <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	0351      	lsls	r1, r2, #13
 800392e:	d5a2      	bpl.n	8003876 <RCCEx_PLLSAI2_Config+0x1a>
 8003930:	e7ac      	b.n	800388c <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	0557      	lsls	r7, r2, #21
 8003936:	d59e      	bpl.n	8003876 <RCCEx_PLLSAI2_Config+0x1a>
 8003938:	e7a8      	b.n	800388c <RCCEx_PLLSAI2_Config+0x30>
 800393a:	2003      	movs	r0, #3
}
 800393c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800393e:	6973      	ldr	r3, [r6, #20]
 8003940:	6921      	ldr	r1, [r4, #16]
 8003942:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003946:	0849      	lsrs	r1, r1, #1
 8003948:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800394c:	3901      	subs	r1, #1
 800394e:	4313      	orrs	r3, r2
 8003950:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003954:	6173      	str	r3, [r6, #20]
 8003956:	e7c4      	b.n	80038e2 <RCCEx_PLLSAI2_Config+0x86>
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_RCCEx_PeriphCLKConfig>:
{
 800395c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003960:	6803      	ldr	r3, [r0, #0]
 8003962:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 8003966:	b083      	sub	sp, #12
 8003968:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800396a:	d016      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800396c:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 800396e:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8003972:	f000 81dd 	beq.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8003976:	f200 8117 	bhi.w	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800397a:	2900      	cmp	r1, #0
 800397c:	f000 81ac 	beq.w	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8003980:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8003984:	f040 81c6 	bne.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003988:	2100      	movs	r1, #0
 800398a:	3020      	adds	r0, #32
 800398c:	f7ff ff66 	bl	800385c <RCCEx_PLLSAI2_Config>
 8003990:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003992:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003994:	2e00      	cmp	r6, #0
 8003996:	f000 81d8 	beq.w	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800399a:	04d8      	lsls	r0, r3, #19
 800399c:	f140 8115 	bpl.w	8003bca <HAL_RCCEx_PeriphCLKConfig+0x26e>
    switch(PeriphClkInit->Sai2ClockSelection)
 80039a0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80039a2:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 80039a6:	f000 81c9 	beq.w	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039aa:	f200 816f 	bhi.w	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x330>
 80039ae:	2900      	cmp	r1, #0
 80039b0:	f000 819b 	beq.w	8003cea <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80039b4:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80039b8:	f040 81ae 	bne.w	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039bc:	2100      	movs	r1, #0
 80039be:	f104 0020 	add.w	r0, r4, #32
 80039c2:	f7ff ff4b 	bl	800385c <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039c8:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 80039ca:	2f00      	cmp	r7, #0
 80039cc:	f040 8165 	bne.w	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x33e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039d0:	49b3      	ldr	r1, [pc, #716]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039d2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80039d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80039d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80039dc:	4302      	orrs	r2, r0
 80039de:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039e2:	0399      	lsls	r1, r3, #14
 80039e4:	f100 80f5 	bmi.w	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e8:	07da      	lsls	r2, r3, #31
 80039ea:	d508      	bpl.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ec:	49ac      	ldr	r1, [pc, #688]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039ee:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80039f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80039f4:	f022 0203 	bic.w	r2, r2, #3
 80039f8:	4302      	orrs	r2, r0
 80039fa:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039fe:	079f      	lsls	r7, r3, #30
 8003a00:	d508      	bpl.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a02:	49a7      	ldr	r1, [pc, #668]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a04:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003a06:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003a0a:	f022 020c 	bic.w	r2, r2, #12
 8003a0e:	4302      	orrs	r2, r0
 8003a10:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a14:	075d      	lsls	r5, r3, #29
 8003a16:	d508      	bpl.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a18:	49a1      	ldr	r1, [pc, #644]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a1a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003a1c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003a20:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8003a24:	4302      	orrs	r2, r0
 8003a26:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a2a:	0718      	lsls	r0, r3, #28
 8003a2c:	d508      	bpl.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a2e:	499c      	ldr	r1, [pc, #624]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a30:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003a32:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003a36:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8003a3a:	4302      	orrs	r2, r0
 8003a3c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a40:	06d9      	lsls	r1, r3, #27
 8003a42:	d508      	bpl.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a44:	4996      	ldr	r1, [pc, #600]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a46:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003a48:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003a4c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a50:	4302      	orrs	r2, r0
 8003a52:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a56:	069a      	lsls	r2, r3, #26
 8003a58:	d508      	bpl.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a5a:	4991      	ldr	r1, [pc, #580]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a5c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003a5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003a62:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a66:	4302      	orrs	r2, r0
 8003a68:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a6c:	059f      	lsls	r7, r3, #22
 8003a6e:	d508      	bpl.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a70:	498b      	ldr	r1, [pc, #556]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a72:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003a74:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003a78:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003a7c:	4302      	orrs	r2, r0
 8003a7e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a82:	055d      	lsls	r5, r3, #21
 8003a84:	d508      	bpl.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a86:	4986      	ldr	r1, [pc, #536]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a88:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003a8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003a8e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003a92:	4302      	orrs	r2, r0
 8003a94:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a98:	0658      	lsls	r0, r3, #25
 8003a9a:	d508      	bpl.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a9c:	4980      	ldr	r1, [pc, #512]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a9e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003aa0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003aa4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003aa8:	4302      	orrs	r2, r0
 8003aaa:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aae:	0619      	lsls	r1, r3, #24
 8003ab0:	d508      	bpl.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ab2:	497b      	ldr	r1, [pc, #492]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ab4:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003ab6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003aba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003abe:	4302      	orrs	r2, r0
 8003ac0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac4:	05da      	lsls	r2, r3, #23
 8003ac6:	d508      	bpl.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac8:	4975      	ldr	r1, [pc, #468]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003aca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003acc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003ad0:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003ad4:	4302      	orrs	r2, r0
 8003ad6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ada:	049f      	lsls	r7, r3, #18
 8003adc:	d510      	bpl.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ade:	4970      	ldr	r1, [pc, #448]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ae0:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003ae2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003ae6:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003aea:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aec:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003af4:	f000 8104 	beq.w	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003af8:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8003afc:	f000 8132 	beq.w	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b00:	031d      	lsls	r5, r3, #12
 8003b02:	d510      	bpl.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b04:	4966      	ldr	r1, [pc, #408]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b06:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003b08:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b0c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003b10:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b12:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b16:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b1a:	f000 80f6 	beq.w	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b1e:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8003b22:	f000 8129 	beq.w	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b26:	0358      	lsls	r0, r3, #13
 8003b28:	d510      	bpl.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b2a:	495d      	ldr	r1, [pc, #372]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b2c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8003b2e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b32:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003b36:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b38:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b3c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b40:	f000 80d9 	beq.w	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b44:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8003b48:	f000 8120 	beq.w	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x430>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b4c:	0459      	lsls	r1, r3, #17
 8003b4e:	d510      	bpl.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b50:	4853      	ldr	r0, [pc, #332]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b52:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003b54:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8003b58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b5c:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b5e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b62:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b66:	f000 80d9 	beq.w	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b6a:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003b6e:	f000 80ee 	beq.w	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b72:	041a      	lsls	r2, r3, #16
 8003b74:	d508      	bpl.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b76:	494a      	ldr	r1, [pc, #296]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b78:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8003b7a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b7e:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8003b82:	4302      	orrs	r2, r0
 8003b84:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b88:	03db      	lsls	r3, r3, #15
 8003b8a:	d509      	bpl.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b8c:	4a44      	ldr	r2, [pc, #272]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b8e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8003b92:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003b96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	b003      	add	sp, #12
 8003ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ba8:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8003bac:	f040 80b2 	bne.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb0:	483b      	ldr	r0, [pc, #236]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bb2:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8003bb6:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bc0:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bc2:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bc6:	f53f aeeb 	bmi.w	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003bca:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bcc:	0399      	lsls	r1, r3, #14
 8003bce:	f57f af0b 	bpl.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bd2:	4b33      	ldr	r3, [pc, #204]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003bd6:	00d2      	lsls	r2, r2, #3
 8003bd8:	d566      	bpl.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    FlagStatus       pwrclkchanged = RESET;
 8003bda:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bde:	4d31      	ldr	r5, [pc, #196]	@ (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003be8:	f7fe fae8 	bl	80021bc <HAL_GetTick>
 8003bec:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bee:	e005      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf0:	f7fe fae4 	bl	80021bc <HAL_GetTick>
 8003bf4:	eba0 0309 	sub.w	r3, r0, r9
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d861      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	05db      	lsls	r3, r3, #23
 8003c00:	d5f6      	bpl.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 8003c02:	2f00      	cmp	r7, #0
 8003c04:	f040 80cc 	bne.w	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x444>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c08:	4d25      	ldr	r5, [pc, #148]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c0a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c0e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c12:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003c16:	d026      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d024      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c1c:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c20:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c28:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c2c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c34:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c38:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c3a:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 8003c3e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c42:	d510      	bpl.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        tickstart = HAL_GetTick();
 8003c44:	f7fe faba 	bl	80021bc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003c4c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4e:	e004      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fe fab4 	bl	80021bc <HAL_GetTick>
 8003c54:	1bc0      	subs	r0, r0, r7
 8003c56:	4548      	cmp	r0, r9
 8003c58:	d832      	bhi.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x364>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c5a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003c5e:	0799      	lsls	r1, r3, #30
 8003c60:	d5f6      	bpl.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c62:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8003c66:	490e      	ldr	r1, [pc, #56]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c68:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c76:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8003c78:	f1b8 0f00 	cmp.w	r8, #0
 8003c7c:	f43f aeb4 	beq.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c80:	4907      	ldr	r1, [pc, #28]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c82:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003c84:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003c88:	658a      	str	r2, [r1, #88]	@ 0x58
 8003c8a:	e6ad      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003c8c:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8003c90:	d142      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c92:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 8003c94:	2f00      	cmp	r7, #0
 8003c96:	f43f ae9b 	beq.w	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c9a:	463e      	mov	r6, r7
 8003c9c:	e796      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x270>
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003caa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003cae:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003cba:	f04f 0801 	mov.w	r8, #1
 8003cbe:	e78e      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x282>
        ret = HAL_TIMEOUT;
 8003cc0:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cc2:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8003cc4:	f1b8 0f00 	cmp.w	r8, #0
 8003cc8:	f43f ae8e 	beq.w	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4935      	ldr	r1, [pc, #212]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003cce:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003cd0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003cd4:	658a      	str	r2, [r1, #88]	@ 0x58
 8003cd6:	e687      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cd8:	3004      	adds	r0, #4
 8003cda:	f7ff fd31 	bl	8003740 <RCCEx_PLLSAI1_Config>
 8003cde:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ce0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003ce2:	2e00      	cmp	r6, #0
 8003ce4:	f47f ae59 	bne.w	800399a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8003ce8:	e02f      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cea:	1d20      	adds	r0, r4, #4
 8003cec:	f7ff fd28 	bl	8003740 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf0:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cf2:	4607      	mov	r7, r0
      break;
 8003cf4:	e669      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf6:	68ca      	ldr	r2, [r1, #12]
 8003cf8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003cfc:	60ca      	str	r2, [r1, #12]
 8003cfe:	e725      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d00:	68ca      	ldr	r2, [r1, #12]
 8003d02:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003d06:	60ca      	str	r2, [r1, #12]
 8003d08:	e6fa      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d0a:	68ca      	ldr	r2, [r1, #12]
 8003d0c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003d10:	60ca      	str	r2, [r1, #12]
 8003d12:	e708      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d14:	2601      	movs	r6, #1
 8003d16:	e640      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003d18:	2601      	movs	r6, #1
 8003d1a:	e756      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x26e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	1d20      	adds	r0, r4, #4
 8003d20:	f7ff fd0e 	bl	8003740 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d24:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003d26:	2800      	cmp	r0, #0
 8003d28:	f43f af23 	beq.w	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d2c:	4606      	mov	r6, r0
 8003d2e:	e720      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d30:	481c      	ldr	r0, [pc, #112]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003d32:	68c2      	ldr	r2, [r0, #12]
 8003d34:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d38:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8003d3a:	e739      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d3c:	4919      	ldr	r1, [pc, #100]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003d3e:	68ca      	ldr	r2, [r1, #12]
 8003d40:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003d44:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d46:	4637      	mov	r7, r6
 8003d48:	e7a4      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d4a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003d4c:	e730      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d4e:	2102      	movs	r1, #2
 8003d50:	f104 0020 	add.w	r0, r4, #32
 8003d54:	f7ff fd82 	bl	800385c <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d58:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	f43f af09 	beq.w	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d60:	4606      	mov	r6, r0
 8003d62:	e706      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x216>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d64:	2101      	movs	r1, #1
 8003d66:	1d20      	adds	r0, r4, #4
 8003d68:	f7ff fcea 	bl	8003740 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d6c:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	f43f aec6 	beq.w	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d74:	4606      	mov	r6, r0
 8003d76:	e6c3      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d78:	2101      	movs	r1, #1
 8003d7a:	1d20      	adds	r0, r4, #4
 8003d7c:	f7ff fce0 	bl	8003740 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d80:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003d82:	2800      	cmp	r0, #0
 8003d84:	f43f aecf 	beq.w	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d88:	4606      	mov	r6, r0
 8003d8a:	e6cc      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	1d20      	adds	r0, r4, #4
 8003d90:	f7ff fcd6 	bl	8003740 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d94:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003d96:	2800      	cmp	r0, #0
 8003d98:	f43f aed8 	beq.w	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	e6d5      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003da0:	463e      	mov	r6, r7
 8003da2:	e78e      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8003da4:	40021000 	.word	0x40021000

08003da8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da8:	2800      	cmp	r0, #0
 8003daa:	f000 8084 	beq.w	8003eb6 <HAL_TIM_Base_Init+0x10e>
{
 8003dae:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003db4:	4604      	mov	r4, r0
 8003db6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d070      	beq.n	8003ea0 <HAL_TIM_Base_Init+0xf8>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dbe:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc0:	493e      	ldr	r1, [pc, #248]	@ (8003ebc <HAL_TIM_Base_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003dca:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dcc:	d054      	beq.n	8003e78 <HAL_TIM_Base_Init+0xd0>
 8003dce:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003dd2:	d024      	beq.n	8003e1e <HAL_TIM_Base_Init+0x76>
 8003dd4:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8003dd8:	428a      	cmp	r2, r1
 8003dda:	d020      	beq.n	8003e1e <HAL_TIM_Base_Init+0x76>
 8003ddc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003de0:	428a      	cmp	r2, r1
 8003de2:	d01c      	beq.n	8003e1e <HAL_TIM_Base_Init+0x76>
 8003de4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003de8:	428a      	cmp	r2, r1
 8003dea:	d018      	beq.n	8003e1e <HAL_TIM_Base_Init+0x76>
 8003dec:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8003df0:	428a      	cmp	r2, r1
 8003df2:	d041      	beq.n	8003e78 <HAL_TIM_Base_Init+0xd0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003df4:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 8003df8:	428a      	cmp	r2, r1
 8003dfa:	d056      	beq.n	8003eaa <HAL_TIM_Base_Init+0x102>
 8003dfc:	4930      	ldr	r1, [pc, #192]	@ (8003ec0 <HAL_TIM_Base_Init+0x118>)
 8003dfe:	428a      	cmp	r2, r1
 8003e00:	d053      	beq.n	8003eaa <HAL_TIM_Base_Init+0x102>
 8003e02:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003e06:	428a      	cmp	r2, r1
 8003e08:	d04f      	beq.n	8003eaa <HAL_TIM_Base_Init+0x102>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0a:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e0c:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e0e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e14:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003e16:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e18:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e1a:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1c:	e010      	b.n	8003e40 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 8003e1e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e20:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e26:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e34:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e36:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003e38:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003e3a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e3c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e3e:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e40:	2301      	movs	r3, #1
 8003e42:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e44:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003e4c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003e50:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003e54:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003e58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003e64:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003e68:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003e6c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003e74:	2000      	movs	r0, #0
}
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003e78:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e7a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e80:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e86:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e88:	69a1      	ldr	r1, [r4, #24]
 8003e8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e8e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003e90:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e92:	68e3      	ldr	r3, [r4, #12]
 8003e94:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e96:	6863      	ldr	r3, [r4, #4]
 8003e98:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003e9a:	6963      	ldr	r3, [r4, #20]
 8003e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e9e:	e7cf      	b.n	8003e40 <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 8003ea0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003ea4:	f7fd fad2 	bl	800144c <HAL_TIM_Base_MspInit>
 8003ea8:	e789      	b.n	8003dbe <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eaa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eac:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb2:	4303      	orrs	r3, r0
 8003eb4:	e7e9      	b.n	8003e8a <HAL_TIM_Base_Init+0xe2>
    return HAL_ERROR;
 8003eb6:	2001      	movs	r0, #1
}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40014400 	.word	0x40014400

08003ec4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d126      	bne.n	8003f1a <HAL_TIM_Base_Start_IT+0x56>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ecc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ece:	4919      	ldr	r1, [pc, #100]	@ (8003f34 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee0:	d01d      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x5a>
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee6:	d01a      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x5a>
 8003ee8:	4a13      	ldr	r2, [pc, #76]	@ (8003f38 <HAL_TIM_Base_Start_IT+0x74>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d017      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x5a>
 8003eee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x5a>
 8003ef6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00f      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x5a>
 8003efe:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x5a>
 8003f06:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f16:	2000      	movs	r0, #0
 8003f18:	4770      	bx	lr
    return HAL_ERROR;
 8003f1a:	2001      	movs	r0, #1
}
 8003f1c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1e:	6899      	ldr	r1, [r3, #8]
 8003f20:	4a06      	ldr	r2, [pc, #24]	@ (8003f3c <HAL_TIM_Base_Start_IT+0x78>)
 8003f22:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f24:	2a06      	cmp	r2, #6
 8003f26:	d0f6      	beq.n	8003f16 <HAL_TIM_Base_Start_IT+0x52>
 8003f28:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003f2c:	d1ef      	bne.n	8003f0e <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 8003f2e:	2000      	movs	r0, #0
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	00010007 	.word	0x00010007

08003f40 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003f40:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d06f      	beq.n	8004028 <HAL_TIM_ConfigClockSource+0xe8>
 8003f48:	4602      	mov	r2, r0
{
 8003f4a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003f4e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8003f54:	2001      	movs	r0, #1
 8003f56:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003f5a:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f5c:	4b4c      	ldr	r3, [pc, #304]	@ (8004090 <HAL_TIM_ConfigClockSource+0x150>)
 8003f5e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003f60:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f62:	680b      	ldr	r3, [r1, #0]
 8003f64:	2b60      	cmp	r3, #96	@ 0x60
 8003f66:	d061      	beq.n	800402c <HAL_TIM_ConfigClockSource+0xec>
 8003f68:	d824      	bhi.n	8003fb4 <HAL_TIM_ConfigClockSource+0x74>
 8003f6a:	2b40      	cmp	r3, #64	@ 0x40
 8003f6c:	d077      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x11e>
 8003f6e:	d94a      	bls.n	8004006 <HAL_TIM_ConfigClockSource+0xc6>
 8003f70:	2b50      	cmp	r3, #80	@ 0x50
 8003f72:	d117      	bne.n	8003fa4 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8003f74:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003f76:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f78:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f7a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003f7e:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f80:	6a23      	ldr	r3, [r4, #32]
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f88:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f8e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f92:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003f94:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f96:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f9c:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa0:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003fa6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003fac:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8003fb0:	bc30      	pop	{r4, r5}
 8003fb2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb8:	d0f3      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x62>
 8003fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fbe:	d110      	bne.n	8003fe2 <HAL_TIM_ConfigClockSource+0xa2>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc0:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003fc4:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc6:	432b      	orrs	r3, r5
 8003fc8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fca:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003fd2:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd4:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fd6:	68a3      	ldr	r3, [r4, #8]
 8003fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fdc:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003fde:	2000      	movs	r0, #0
 8003fe0:	e7e0      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003fe2:	2b70      	cmp	r3, #112	@ 0x70
 8003fe4:	d1de      	bne.n	8003fa4 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fe6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003fea:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fec:	432b      	orrs	r3, r5
 8003fee:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff0:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ff4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003ff8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003ffa:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003ffc:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ffe:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004002:	60a3      	str	r3, [r4, #8]
      break;
 8004004:	e7cd      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8004006:	2b20      	cmp	r3, #32
 8004008:	d002      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0xd0>
 800400a:	d909      	bls.n	8004020 <HAL_TIM_ConfigClockSource+0xe0>
 800400c:	2b30      	cmp	r3, #48	@ 0x30
 800400e:	d1c9      	bne.n	8003fa4 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8004010:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004012:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004016:	430b      	orrs	r3, r1
 8004018:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800401c:	60a3      	str	r3, [r4, #8]
}
 800401e:	e7c0      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8004020:	f033 0110 	bics.w	r1, r3, #16
 8004024:	d1be      	bne.n	8003fa4 <HAL_TIM_ConfigClockSource+0x64>
 8004026:	e7f3      	b.n	8004010 <HAL_TIM_ConfigClockSource+0xd0>
  __HAL_LOCK(htim);
 8004028:	2002      	movs	r0, #2
}
 800402a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800402c:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800402e:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004030:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004032:	6a21      	ldr	r1, [r4, #32]
 8004034:	f021 0110 	bic.w	r1, r1, #16
 8004038:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403a:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800403c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004040:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8004044:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004048:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800404c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800404e:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004050:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004056:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800405a:	60a3      	str	r3, [r4, #8]
}
 800405c:	e7a1      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x62>
                               sClockSourceConfig->ClockPolarity,
 800405e:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004060:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8004062:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004064:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004068:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800406a:	6a23      	ldr	r3, [r4, #32]
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004072:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004074:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004078:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800407c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800407e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004080:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004086:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800408a:	60a3      	str	r3, [r4, #8]
}
 800408c:	e789      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x62>
 800408e:	bf00      	nop
 8004090:	fffe0088 	.word	0xfffe0088

08004094 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop

08004098 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop

0800409c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop

080040a0 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop

080040a4 <HAL_TIM_IRQHandler>:
{
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 80040a6:	6803      	ldr	r3, [r0, #0]
 80040a8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040aa:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040ac:	07a7      	lsls	r7, r4, #30
{
 80040ae:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040b0:	d501      	bpl.n	80040b6 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040b2:	07b1      	lsls	r1, r6, #30
 80040b4:	d456      	bmi.n	8004164 <HAL_TIM_IRQHandler+0xc0>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040b6:	0763      	lsls	r3, r4, #29
 80040b8:	d501      	bpl.n	80040be <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040ba:	0777      	lsls	r7, r6, #29
 80040bc:	d43f      	bmi.n	800413e <HAL_TIM_IRQHandler+0x9a>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040be:	0720      	lsls	r0, r4, #28
 80040c0:	d501      	bpl.n	80040c6 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040c2:	0731      	lsls	r1, r6, #28
 80040c4:	d429      	bmi.n	800411a <HAL_TIM_IRQHandler+0x76>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040c6:	06e3      	lsls	r3, r4, #27
 80040c8:	d501      	bpl.n	80040ce <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ca:	06f7      	lsls	r7, r6, #27
 80040cc:	d412      	bmi.n	80040f4 <HAL_TIM_IRQHandler+0x50>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040ce:	07e0      	lsls	r0, r4, #31
 80040d0:	d501      	bpl.n	80040d6 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040d2:	07f1      	lsls	r1, r6, #31
 80040d4:	d464      	bmi.n	80041a0 <HAL_TIM_IRQHandler+0xfc>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040d6:	0622      	lsls	r2, r4, #24
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040d8:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040dc:	d552      	bpl.n	8004184 <HAL_TIM_IRQHandler+0xe0>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040de:	0633      	lsls	r3, r6, #24
 80040e0:	d466      	bmi.n	80041b0 <HAL_TIM_IRQHandler+0x10c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040e2:	0660      	lsls	r0, r4, #25
 80040e4:	d501      	bpl.n	80040ea <HAL_TIM_IRQHandler+0x46>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040e6:	0671      	lsls	r1, r6, #25
 80040e8:	d473      	bmi.n	80041d2 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ea:	06a2      	lsls	r2, r4, #26
 80040ec:	d501      	bpl.n	80040f2 <HAL_TIM_IRQHandler+0x4e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040ee:	06b3      	lsls	r3, r6, #26
 80040f0:	d44d      	bmi.n	800418e <HAL_TIM_IRQHandler+0xea>
}
 80040f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	f06f 0210 	mvn.w	r2, #16
 80040fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040fc:	2208      	movs	r2, #8
 80040fe:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004106:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004108:	d174      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	f7ff ffc3 	bl	8004094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410e:	4628      	mov	r0, r5
 8004110:	f7ff ffc4 	bl	800409c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004114:	2300      	movs	r3, #0
 8004116:	772b      	strb	r3, [r5, #28]
 8004118:	e7d9      	b.n	80040ce <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800411a:	682b      	ldr	r3, [r5, #0]
 800411c:	f06f 0208 	mvn.w	r2, #8
 8004120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004122:	2204      	movs	r2, #4
 8004124:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	079a      	lsls	r2, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800412c:	d15f      	bne.n	80041ee <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412e:	f7ff ffb1 	bl	8004094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004132:	4628      	mov	r0, r5
 8004134:	f7ff ffb2 	bl	800409c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004138:	2300      	movs	r3, #0
 800413a:	772b      	strb	r3, [r5, #28]
 800413c:	e7c3      	b.n	80040c6 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	f06f 0204 	mvn.w	r2, #4
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004146:	2202      	movs	r2, #2
 8004148:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004150:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004152:	d149      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004154:	f7ff ff9e 	bl	8004094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	4628      	mov	r0, r5
 800415a:	f7ff ff9f 	bl	800409c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	2300      	movs	r3, #0
 8004160:	772b      	strb	r3, [r5, #28]
 8004162:	e7ac      	b.n	80040be <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004164:	f06f 0202 	mvn.w	r2, #2
 8004168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800416a:	2201      	movs	r2, #1
 800416c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	079a      	lsls	r2, r3, #30
 8004172:	d136      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004174:	f7ff ff8e 	bl	8004094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	4628      	mov	r0, r5
 800417a:	f7ff ff8f 	bl	800409c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	2300      	movs	r3, #0
 8004180:	772b      	strb	r3, [r5, #28]
 8004182:	e798      	b.n	80040b6 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004184:	2f00      	cmp	r7, #0
 8004186:	d0ac      	beq.n	80040e2 <HAL_TIM_IRQHandler+0x3e>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004188:	0637      	lsls	r7, r6, #24
 800418a:	d41a      	bmi.n	80041c2 <HAL_TIM_IRQHandler+0x11e>
 800418c:	e7a9      	b.n	80040e2 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800418e:	682b      	ldr	r3, [r5, #0]
 8004190:	f06f 0220 	mvn.w	r2, #32
 8004194:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004196:	4628      	mov	r0, r5
}
 8004198:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 800419c:	f000 b87e 	b.w	800429c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	f06f 0201 	mvn.w	r2, #1
 80041a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a8:	4628      	mov	r0, r5
 80041aa:	f7fc fc25 	bl	80009f8 <HAL_TIM_PeriodElapsedCallback>
 80041ae:	e792      	b.n	80040d6 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80041b8:	4628      	mov	r0, r5
 80041ba:	f000 f871 	bl	80042a0 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041be:	2f00      	cmp	r7, #0
 80041c0:	d08f      	beq.n	80040e2 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041c2:	682b      	ldr	r3, [r5, #0]
 80041c4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80041c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 f86a 	bl	80042a4 <HAL_TIMEx_Break2Callback>
 80041d0:	e787      	b.n	80040e2 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041d2:	682b      	ldr	r3, [r5, #0]
 80041d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80041da:	4628      	mov	r0, r5
 80041dc:	f7ff ff60 	bl	80040a0 <HAL_TIM_TriggerCallback>
 80041e0:	e783      	b.n	80040ea <HAL_TIM_IRQHandler+0x46>
          HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	f7ff ff59 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 80041e6:	e7ca      	b.n	800417e <HAL_TIM_IRQHandler+0xda>
        HAL_TIM_IC_CaptureCallback(htim);
 80041e8:	f7ff ff56 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 80041ec:	e7b7      	b.n	800415e <HAL_TIM_IRQHandler+0xba>
        HAL_TIM_IC_CaptureCallback(htim);
 80041ee:	f7ff ff53 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 80041f2:	e7a1      	b.n	8004138 <HAL_TIM_IRQHandler+0x94>
        HAL_TIM_IC_CaptureCallback(htim);
 80041f4:	f7ff ff50 	bl	8004098 <HAL_TIM_IC_CaptureCallback>
 80041f8:	e78c      	b.n	8004114 <HAL_TIM_IRQHandler+0x70>
 80041fa:	bf00      	nop

080041fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041fc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004200:	2a01      	cmp	r2, #1
 8004202:	d044      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004204:	6802      	ldr	r2, [r0, #0]
{
 8004206:	b470      	push	{r4, r5, r6}
 8004208:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800420a:	4e22      	ldr	r6, [pc, #136]	@ (8004294 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	2002      	movs	r0, #2
 800420e:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004212:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 8004214:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004216:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004218:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800421a:	d026      	beq.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800421c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8004220:	42b2      	cmp	r2, r6
 8004222:	d02b      	beq.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8004224:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004228:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800422e:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004230:	d00e      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004232:	4819      	ldr	r0, [pc, #100]	@ (8004298 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004234:	4282      	cmp	r2, r0
 8004236:	d00b      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004238:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800423c:	4282      	cmp	r2, r0
 800423e:	d007      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004240:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004244:	4282      	cmp	r2, r0
 8004246:	d003      	beq.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8004248:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 800424c:	4282      	cmp	r2, r0
 800424e:	d104      	bne.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004250:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004252:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004256:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004258:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800425a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004262:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004266:	bc70      	pop	{r4, r5, r6}
 8004268:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800426a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800426c:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004270:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004272:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004276:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8004278:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427a:	e7e9      	b.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800427c:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800427e:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004282:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004284:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004288:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 800428a:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428c:	e7e0      	b.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 800428e:	2002      	movs	r0, #2
}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40000400 	.word	0x40000400

0800429c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop

080042a0 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop

080042a4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop

080042a8 <HAL_UART_TxCpltCallback>:
/**
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop

080042ac <HAL_UART_ErrorCallback>:
/**
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop

080042b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042b2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80042ba:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042be:	f7ff fff5 	bl	80042ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c2:	bd08      	pop	{r3, pc}

080042c4 <HAL_UARTEx_RxEventCallback>:
}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042c8:	6803      	ldr	r3, [r0, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042cc:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042ce:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 80042d2:	ea12 0f0c 	tst.w	r2, ip
{
 80042d6:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042d8:	689d      	ldr	r5, [r3, #8]
{
 80042da:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80042dc:	d150      	bne.n	8004380 <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042de:	0696      	lsls	r6, r2, #26
 80042e0:	d502      	bpl.n	80042e8 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042e2:	068e      	lsls	r6, r1, #26
 80042e4:	f100 80cb 	bmi.w	800447e <HAL_UART_IRQHandler+0x1b6>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80042ea:	2801      	cmp	r0, #1
 80042ec:	d024      	beq.n	8004338 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042ee:	02d6      	lsls	r6, r2, #11
 80042f0:	d502      	bpl.n	80042f8 <HAL_UART_IRQHandler+0x30>
 80042f2:	0268      	lsls	r0, r5, #9
 80042f4:	f100 80c8 	bmi.w	8004488 <HAL_UART_IRQHandler+0x1c0>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042f8:	0616      	lsls	r6, r2, #24
 80042fa:	d414      	bmi.n	8004326 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042fc:	0650      	lsls	r0, r2, #25
 80042fe:	d501      	bpl.n	8004304 <HAL_UART_IRQHandler+0x3c>
 8004300:	064a      	lsls	r2, r1, #25
 8004302:	d400      	bmi.n	8004306 <HAL_UART_IRQHandler+0x3e>
}
 8004304:	bd70      	pop	{r4, r5, r6, pc}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800430a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	e843 2100 	strex	r1, r2, [r3]
 8004312:	2900      	cmp	r1, #0
 8004314:	d1f7      	bne.n	8004306 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004316:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004318:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800431a:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->TxISR = NULL;
 800431c:	66e3      	str	r3, [r4, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800431e:	4620      	mov	r0, r4
 8004320:	f7ff ffc2 	bl	80042a8 <HAL_UART_TxCpltCallback>
}
 8004324:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004326:	060d      	lsls	r5, r1, #24
 8004328:	d5e8      	bpl.n	80042fc <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 800432a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0e9      	beq.n	8004304 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8004330:	4620      	mov	r0, r4
}
 8004332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8004336:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004338:	06d6      	lsls	r6, r2, #27
 800433a:	d5d8      	bpl.n	80042ee <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800433c:	06c8      	lsls	r0, r1, #27
 800433e:	d5d6      	bpl.n	80042ee <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004340:	2210      	movs	r2, #16
 8004342:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	0651      	lsls	r1, r2, #25
 8004348:	f140 80fb 	bpl.w	8004542 <HAL_UART_IRQHandler+0x27a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800434c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800434e:	6801      	ldr	r1, [r0, #0]
 8004350:	684a      	ldr	r2, [r1, #4]
 8004352:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004354:	2a00      	cmp	r2, #0
 8004356:	d0d5      	beq.n	8004304 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004358:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 800435c:	4295      	cmp	r5, r2
 800435e:	d9d1      	bls.n	8004304 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8004360:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004364:	680a      	ldr	r2, [r1, #0]
 8004366:	0692      	lsls	r2, r2, #26
 8004368:	f140 8122 	bpl.w	80045b0 <HAL_UART_IRQHandler+0x2e8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800436c:	2302      	movs	r3, #2
 800436e:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004370:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8004374:	1ae9      	subs	r1, r5, r3
 8004376:	4620      	mov	r0, r4
 8004378:	b289      	uxth	r1, r1
 800437a:	f7ff ffa3 	bl	80042c4 <HAL_UARTEx_RxEventCallback>
}
 800437e:	bd70      	pop	{r4, r5, r6, pc}
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004380:	f015 0601 	ands.w	r6, r5, #1
 8004384:	f040 80a5 	bne.w	80044d2 <HAL_UART_IRQHandler+0x20a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004388:	48a5      	ldr	r0, [pc, #660]	@ (8004620 <HAL_UART_IRQHandler+0x358>)
 800438a:	4201      	tst	r1, r0
 800438c:	d0ac      	beq.n	80042e8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800438e:	07d5      	lsls	r5, r2, #31
 8004390:	d50f      	bpl.n	80043b2 <HAL_UART_IRQHandler+0xea>
 8004392:	05c8      	lsls	r0, r1, #23
 8004394:	f140 80d1 	bpl.w	800453a <HAL_UART_IRQHandler+0x272>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004398:	2001      	movs	r0, #1
 800439a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800439c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80043a0:	f040 0001 	orr.w	r0, r0, #1
 80043a4:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043a8:	0790      	lsls	r0, r2, #30
 80043aa:	d57a      	bpl.n	80044a2 <HAL_UART_IRQHandler+0x1da>
 80043ac:	2e00      	cmp	r6, #0
 80043ae:	f040 8094 	bne.w	80044da <HAL_UART_IRQHandler+0x212>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043b2:	0755      	lsls	r5, r2, #29
 80043b4:	f140 809b 	bpl.w	80044ee <HAL_UART_IRQHandler+0x226>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043b8:	0716      	lsls	r6, r2, #28
 80043ba:	f100 80bb 	bmi.w	8004534 <HAL_UART_IRQHandler+0x26c>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043be:	0516      	lsls	r6, r2, #20
 80043c0:	d50a      	bpl.n	80043d8 <HAL_UART_IRQHandler+0x110>
 80043c2:	014d      	lsls	r5, r1, #5
 80043c4:	d508      	bpl.n	80043d8 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80043ca:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043cc:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80043d0:	f040 0020 	orr.w	r0, r0, #32
 80043d4:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80043dc:	2800      	cmp	r0, #0
 80043de:	d091      	beq.n	8004304 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043e0:	0690      	lsls	r0, r2, #26
 80043e2:	d506      	bpl.n	80043f2 <HAL_UART_IRQHandler+0x12a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043e4:	0689      	lsls	r1, r1, #26
 80043e6:	d504      	bpl.n	80043f2 <HAL_UART_IRQHandler+0x12a>
        if (huart->RxISR != NULL)
 80043e8:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80043ea:	b112      	cbz	r2, 80043f2 <HAL_UART_IRQHandler+0x12a>
          huart->RxISR(huart);
 80043ec:	4620      	mov	r0, r4
 80043ee:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043f0:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80043f2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043f6:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043f8:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043fc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8004400:	ea52 0501 	orrs.w	r5, r2, r1
 8004404:	f000 8105 	beq.w	8004612 <HAL_UART_IRQHandler+0x34a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	e843 2100 	strex	r1, r2, [r3]
 8004414:	2900      	cmp	r1, #0
 8004416:	d1f7      	bne.n	8004408 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	f103 0208 	add.w	r2, r3, #8
 800441c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004420:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004424:	f103 0008 	add.w	r0, r3, #8
 8004428:	e840 2100 	strex	r1, r2, [r0]
 800442c:	2900      	cmp	r1, #0
 800442e:	d1f3      	bne.n	8004418 <HAL_UART_IRQHandler+0x150>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004430:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004432:	2a01      	cmp	r2, #1
 8004434:	d064      	beq.n	8004500 <HAL_UART_IRQHandler+0x238>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004438:	2120      	movs	r1, #32
 800443a:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	6622      	str	r2, [r4, #96]	@ 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8004442:	66a2      	str	r2, [r4, #104]	@ 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	064a      	lsls	r2, r1, #25
 8004446:	d56c      	bpl.n	8004522 <HAL_UART_IRQHandler+0x25a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	f103 0208 	add.w	r2, r3, #8
 800444c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	f103 0008 	add.w	r0, r3, #8
 8004458:	e840 2100 	strex	r1, r2, [r0]
 800445c:	2900      	cmp	r1, #0
 800445e:	d1f3      	bne.n	8004448 <HAL_UART_IRQHandler+0x180>
          if (huart->hdmarx != NULL)
 8004460:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004462:	2800      	cmp	r0, #0
 8004464:	d05d      	beq.n	8004522 <HAL_UART_IRQHandler+0x25a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004466:	4b6f      	ldr	r3, [pc, #444]	@ (8004624 <HAL_UART_IRQHandler+0x35c>)
 8004468:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800446a:	f7fe f885 	bl	8002578 <HAL_DMA_Abort_IT>
 800446e:	2800      	cmp	r0, #0
 8004470:	f43f af48 	beq.w	8004304 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004474:	6f60      	ldr	r0, [r4, #116]	@ 0x74
}
 8004476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800447a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800447c:	4718      	bx	r3
      if (huart->RxISR != NULL)
 800447e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8004480:	2b00      	cmp	r3, #0
 8004482:	f47f af56 	bne.w	8004332 <HAL_UART_IRQHandler+0x6a>
 8004486:	e73d      	b.n	8004304 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004488:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800448c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004494:	f000 bb9e 	b.w	8004bd4 <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004498:	05c8      	lsls	r0, r1, #23
 800449a:	f53f af7d 	bmi.w	8004398 <HAL_UART_IRQHandler+0xd0>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800449e:	0795      	lsls	r5, r2, #30
 80044a0:	d41b      	bmi.n	80044da <HAL_UART_IRQHandler+0x212>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044a2:	0750      	lsls	r0, r2, #29
 80044a4:	d523      	bpl.n	80044ee <HAL_UART_IRQHandler+0x226>
 80044a6:	2e00      	cmp	r6, #0
 80044a8:	d086      	beq.n	80043b8 <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044aa:	2004      	movs	r0, #4
 80044ac:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ae:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044b2:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044b4:	f040 0002 	orr.w	r0, r0, #2
 80044b8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044bc:	f57f af7f 	bpl.w	80043be <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044c0:	2008      	movs	r0, #8
 80044c2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044c4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80044c8:	f040 0008 	orr.w	r0, r0, #8
 80044cc:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80044d0:	e775      	b.n	80043be <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044d2:	07d0      	lsls	r0, r2, #31
 80044d4:	d4e0      	bmi.n	8004498 <HAL_UART_IRQHandler+0x1d0>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044d6:	0795      	lsls	r5, r2, #30
 80044d8:	d527      	bpl.n	800452a <HAL_UART_IRQHandler+0x262>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044da:	2002      	movs	r0, #2
 80044dc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044de:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80044e2:	f040 0004 	orr.w	r0, r0, #4
 80044e6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044ea:	0750      	lsls	r0, r2, #29
 80044ec:	d4dd      	bmi.n	80044aa <HAL_UART_IRQHandler+0x1e2>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044ee:	0710      	lsls	r0, r2, #28
 80044f0:	f57f af65 	bpl.w	80043be <HAL_UART_IRQHandler+0xf6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044f4:	f001 0020 	and.w	r0, r1, #32
 80044f8:	4330      	orrs	r0, r6
 80044fa:	f43f af60 	beq.w	80043be <HAL_UART_IRQHandler+0xf6>
 80044fe:	e7df      	b.n	80044c0 <HAL_UART_IRQHandler+0x1f8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004504:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	e843 2100 	strex	r1, r2, [r3]
 800450c:	2900      	cmp	r1, #0
 800450e:	d092      	beq.n	8004436 <HAL_UART_IRQHandler+0x16e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	e853 2f00 	ldrex	r2, [r3]
 8004514:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	e843 2100 	strex	r1, r2, [r3]
 800451c:	2900      	cmp	r1, #0
 800451e:	d1ef      	bne.n	8004500 <HAL_UART_IRQHandler+0x238>
 8004520:	e789      	b.n	8004436 <HAL_UART_IRQHandler+0x16e>
            HAL_UART_ErrorCallback(huart);
 8004522:	4620      	mov	r0, r4
 8004524:	f7ff fec2 	bl	80042ac <HAL_UART_ErrorCallback>
}
 8004528:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800452a:	0756      	lsls	r6, r2, #29
 800452c:	d4bd      	bmi.n	80044aa <HAL_UART_IRQHandler+0x1e2>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800452e:	0710      	lsls	r0, r2, #28
 8004530:	d4c6      	bmi.n	80044c0 <HAL_UART_IRQHandler+0x1f8>
 8004532:	e744      	b.n	80043be <HAL_UART_IRQHandler+0xf6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004534:	068d      	lsls	r5, r1, #26
 8004536:	d4c3      	bmi.n	80044c0 <HAL_UART_IRQHandler+0x1f8>
 8004538:	e741      	b.n	80043be <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800453a:	0795      	lsls	r5, r2, #30
 800453c:	f53f af39 	bmi.w	80043b2 <HAL_UART_IRQHandler+0xea>
 8004540:	e7af      	b.n	80044a2 <HAL_UART_IRQHandler+0x1da>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004542:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 8004546:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800454a:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
      if ((huart->RxXferCount > 0U)
 800454e:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004550:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004552:	2a00      	cmp	r2, #0
 8004554:	f43f aed6 	beq.w	8004304 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004558:	1a41      	subs	r1, r0, r1
 800455a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800455c:	2900      	cmp	r1, #0
 800455e:	f43f aed1 	beq.w	8004304 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004566:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	e843 2000 	strex	r0, r2, [r3]
 800456e:	2800      	cmp	r0, #0
 8004570:	d1f7      	bne.n	8004562 <HAL_UART_IRQHandler+0x29a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	f103 0208 	add.w	r2, r3, #8
 8004576:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	f103 0508 	add.w	r5, r3, #8
 8004582:	e845 2000 	strex	r0, r2, [r5]
 8004586:	2800      	cmp	r0, #0
 8004588:	d1f3      	bne.n	8004572 <HAL_UART_IRQHandler+0x2aa>
        huart->RxState = HAL_UART_STATE_READY;
 800458a:	2220      	movs	r2, #32
 800458c:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->RxISR = NULL;
 8004590:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004592:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004598:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	e843 2000 	strex	r0, r2, [r3]
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d1f7      	bne.n	8004594 <HAL_UART_IRQHandler+0x2cc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045a4:	2302      	movs	r3, #2
 80045a6:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7ff fe8b 	bl	80042c4 <HAL_UARTEx_RxEventCallback>
}
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	e843 2100 	strex	r1, r2, [r3]
 80045bc:	2900      	cmp	r1, #0
 80045be:	d1f7      	bne.n	80045b0 <HAL_UART_IRQHandler+0x2e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	f103 0208 	add.w	r2, r3, #8
 80045c4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	f103 0508 	add.w	r5, r3, #8
 80045d0:	e845 2100 	strex	r1, r2, [r5]
 80045d4:	2900      	cmp	r1, #0
 80045d6:	d1f3      	bne.n	80045c0 <HAL_UART_IRQHandler+0x2f8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f103 0208 	add.w	r2, r3, #8
 80045dc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	f103 0508 	add.w	r5, r3, #8
 80045e8:	e845 2100 	strex	r1, r2, [r5]
 80045ec:	2900      	cmp	r1, #0
 80045ee:	d1f3      	bne.n	80045d8 <HAL_UART_IRQHandler+0x310>
          huart->RxState = HAL_UART_STATE_READY;
 80045f0:	2220      	movs	r2, #32
 80045f2:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f6:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	e843 2100 	strex	r1, r2, [r3]
 8004604:	2900      	cmp	r1, #0
 8004606:	d1f7      	bne.n	80045f8 <HAL_UART_IRQHandler+0x330>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004608:	f7fd ff90 	bl	800252c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800460c:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 8004610:	e6ac      	b.n	800436c <HAL_UART_IRQHandler+0xa4>
        HAL_UART_ErrorCallback(huart);
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff fe4a 	bl	80042ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 800461c:	bd70      	pop	{r4, r5, r6, pc}
 800461e:	bf00      	nop
 8004620:	04000120 	.word	0x04000120
 8004624:	080042b1 	.word	0x080042b1

08004628 <UART_SetConfig>:
{
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800462c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800462e:	6882      	ldr	r2, [r0, #8]
 8004630:	6900      	ldr	r0, [r0, #16]
 8004632:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004634:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004636:	4302      	orrs	r2, r0
 8004638:	430a      	orrs	r2, r1
 800463a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800463c:	4981      	ldr	r1, [pc, #516]	@ (8004844 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800463e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004640:	4029      	ands	r1, r5
 8004642:	430a      	orrs	r2, r1
 8004644:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68e1      	ldr	r1, [r4, #12]
 800464a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800464e:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004650:	497d      	ldr	r1, [pc, #500]	@ (8004848 <UART_SetConfig+0x220>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004652:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004654:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004656:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004658:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800465a:	d03f      	beq.n	80046dc <UART_SetConfig+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 800465c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8004662:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004664:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004666:	4979      	ldr	r1, [pc, #484]	@ (800484c <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004668:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800466a:	428b      	cmp	r3, r1
 800466c:	d115      	bne.n	800469a <UART_SetConfig+0x72>
 800466e:	4b78      	ldr	r3, [pc, #480]	@ (8004850 <UART_SetConfig+0x228>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b02      	cmp	r3, #2
 800467a:	f000 808d 	beq.w	8004798 <UART_SetConfig+0x170>
 800467e:	2b03      	cmp	r3, #3
 8004680:	d077      	beq.n	8004772 <UART_SetConfig+0x14a>
 8004682:	2b01      	cmp	r3, #1
 8004684:	d06d      	beq.n	8004762 <UART_SetConfig+0x13a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004686:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800468a:	f000 80cf 	beq.w	800482c <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 800468e:	f7ff f845 	bl	800371c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004692:	2800      	cmp	r0, #0
 8004694:	d172      	bne.n	800477c <UART_SetConfig+0x154>
        pclk = (uint32_t) HSI_VALUE;
 8004696:	2000      	movs	r0, #0
 8004698:	e01c      	b.n	80046d4 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800469a:	4a6e      	ldr	r2, [pc, #440]	@ (8004854 <UART_SetConfig+0x22c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10f      	bne.n	80046c0 <UART_SetConfig+0x98>
 80046a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004850 <UART_SetConfig+0x228>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b0c      	cmp	r3, #12
 80046ac:	d811      	bhi.n	80046d2 <UART_SetConfig+0xaa>
 80046ae:	e8df f003 	tbb	[pc, r3]
 80046b2:	1082      	.short	0x1082
 80046b4:	10581010 	.word	0x10581010
 80046b8:	10731010 	.word	0x10731010
 80046bc:	1010      	.short	0x1010
 80046be:	60          	.byte	0x60
 80046bf:	00          	.byte	0x00
 80046c0:	4a65      	ldr	r2, [pc, #404]	@ (8004858 <UART_SetConfig+0x230>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d07d      	beq.n	80047c2 <UART_SetConfig+0x19a>
 80046c6:	4a65      	ldr	r2, [pc, #404]	@ (800485c <UART_SetConfig+0x234>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d03f      	beq.n	800474c <UART_SetConfig+0x124>
 80046cc:	4a64      	ldr	r2, [pc, #400]	@ (8004860 <UART_SetConfig+0x238>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d067      	beq.n	80047a2 <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 80046d2:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 80046da:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046dc:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046e0:	485b      	ldr	r0, [pc, #364]	@ (8004850 <UART_SetConfig+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e2:	430a      	orrs	r2, r1
 80046e4:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046e6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80046ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f2:	d07e      	beq.n	80047f2 <UART_SetConfig+0x1ca>
 80046f4:	d807      	bhi.n	8004706 <UART_SetConfig+0xde>
 80046f6:	b323      	cbz	r3, 8004742 <UART_SetConfig+0x11a>
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fc:	d1e9      	bne.n	80046d2 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 80046fe:	f7fe fc0b 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004702:	b928      	cbnz	r0, 8004710 <UART_SetConfig+0xe8>
 8004704:	e7c7      	b.n	8004696 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004706:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800470a:	d1e2      	bne.n	80046d2 <UART_SetConfig+0xaa>
        pclk = (uint32_t) LSE_VALUE;
 800470c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004710:	6862      	ldr	r2, [r4, #4]
 8004712:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004716:	4283      	cmp	r3, r0
 8004718:	d8db      	bhi.n	80046d2 <UART_SetConfig+0xaa>
 800471a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800471e:	d8d8      	bhi.n	80046d2 <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004720:	0851      	lsrs	r1, r2, #1
 8004722:	2300      	movs	r3, #0
 8004724:	468c      	mov	ip, r1
 8004726:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800472a:	4619      	mov	r1, r3
 800472c:	fbe0 c105 	umlal	ip, r1, r0, r5
 8004730:	4660      	mov	r0, ip
 8004732:	f7fb fd51 	bl	80001d8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004736:	4b4b      	ldr	r3, [pc, #300]	@ (8004864 <UART_SetConfig+0x23c>)
 8004738:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800473c:	429a      	cmp	r2, r3
 800473e:	d8c8      	bhi.n	80046d2 <UART_SetConfig+0xaa>
 8004740:	e027      	b.n	8004792 <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004742:	f7fe ffd9 	bl	80036f8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004746:	2800      	cmp	r0, #0
 8004748:	d1e2      	bne.n	8004710 <UART_SetConfig+0xe8>
 800474a:	e7a4      	b.n	8004696 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800474c:	4b40      	ldr	r3, [pc, #256]	@ (8004850 <UART_SetConfig+0x228>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004752:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004756:	2b80      	cmp	r3, #128	@ 0x80
 8004758:	d01e      	beq.n	8004798 <UART_SetConfig+0x170>
 800475a:	d83f      	bhi.n	80047dc <UART_SetConfig+0x1b4>
 800475c:	b35b      	cbz	r3, 80047b6 <UART_SetConfig+0x18e>
 800475e:	2b40      	cmp	r3, #64	@ 0x40
 8004760:	d1b7      	bne.n	80046d2 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004762:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004766:	d069      	beq.n	800483c <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 8004768:	f7fe fbd6 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
        break;
 800476c:	e791      	b.n	8004692 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800476e:	2b30      	cmp	r3, #48	@ 0x30
 8004770:	d1af      	bne.n	80046d2 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004772:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004776:	d05e      	beq.n	8004836 <UART_SetConfig+0x20e>
        pclk = (uint32_t) LSE_VALUE;
 8004778:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800477c:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800477e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004782:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004786:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478a:	f1a0 0310 	sub.w	r3, r0, #16
 800478e:	4293      	cmp	r3, r2
 8004790:	d89f      	bhi.n	80046d2 <UART_SetConfig+0xaa>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	60d8      	str	r0, [r3, #12]
 8004796:	e77e      	b.n	8004696 <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004798:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800479c:	d049      	beq.n	8004832 <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 800479e:	4832      	ldr	r0, [pc, #200]	@ (8004868 <UART_SetConfig+0x240>)
 80047a0:	e7ec      	b.n	800477c <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004850 <UART_SetConfig+0x228>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047b0:	d0f2      	beq.n	8004798 <UART_SetConfig+0x170>
 80047b2:	d81a      	bhi.n	80047ea <UART_SetConfig+0x1c2>
 80047b4:	b9ab      	cbnz	r3, 80047e2 <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80047ba:	d01c      	beq.n	80047f6 <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 80047bc:	f7fe ff9c 	bl	80036f8 <HAL_RCC_GetPCLK1Freq>
        break;
 80047c0:	e767      	b.n	8004692 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047c2:	4b23      	ldr	r3, [pc, #140]	@ (8004850 <UART_SetConfig+0x228>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d0e3      	beq.n	8004798 <UART_SetConfig+0x170>
 80047d0:	d8cd      	bhi.n	800476e <UART_SetConfig+0x146>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ef      	beq.n	80047b6 <UART_SetConfig+0x18e>
 80047d6:	2b10      	cmp	r3, #16
 80047d8:	d0c3      	beq.n	8004762 <UART_SetConfig+0x13a>
 80047da:	e77a      	b.n	80046d2 <UART_SetConfig+0xaa>
 80047dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80047de:	d0c8      	beq.n	8004772 <UART_SetConfig+0x14a>
 80047e0:	e777      	b.n	80046d2 <UART_SetConfig+0xaa>
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e6:	d0bc      	beq.n	8004762 <UART_SetConfig+0x13a>
 80047e8:	e773      	b.n	80046d2 <UART_SetConfig+0xaa>
 80047ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ee:	d0c0      	beq.n	8004772 <UART_SetConfig+0x14a>
 80047f0:	e76f      	b.n	80046d2 <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 80047f2:	481d      	ldr	r0, [pc, #116]	@ (8004868 <UART_SetConfig+0x240>)
 80047f4:	e78c      	b.n	8004710 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f6:	f7fe ff7f 	bl	80036f8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80047fa:	2800      	cmp	r0, #0
 80047fc:	f43f af4b 	beq.w	8004696 <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004800:	0040      	lsls	r0, r0, #1
 8004802:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004804:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004808:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800480c:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004810:	f1a3 0110 	sub.w	r1, r3, #16
 8004814:	4291      	cmp	r1, r2
 8004816:	f63f af5c 	bhi.w	80046d2 <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800481a:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800481e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004820:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004822:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004826:	4313      	orrs	r3, r2
 8004828:	60cb      	str	r3, [r1, #12]
 800482a:	e734      	b.n	8004696 <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800482c:	f7fe ff76 	bl	800371c <HAL_RCC_GetPCLK2Freq>
        break;
 8004830:	e7e3      	b.n	80047fa <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004832:	480e      	ldr	r0, [pc, #56]	@ (800486c <UART_SetConfig+0x244>)
 8004834:	e7e5      	b.n	8004802 <UART_SetConfig+0x1da>
 8004836:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800483a:	e7e2      	b.n	8004802 <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetSysClockFreq();
 800483c:	f7fe fb6c 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
        break;
 8004840:	e7db      	b.n	80047fa <UART_SetConfig+0x1d2>
 8004842:	bf00      	nop
 8004844:	efff69f3 	.word	0xefff69f3
 8004848:	40008000 	.word	0x40008000
 800484c:	40013800 	.word	0x40013800
 8004850:	40021000 	.word	0x40021000
 8004854:	40004400 	.word	0x40004400
 8004858:	40004800 	.word	0x40004800
 800485c:	40004c00 	.word	0x40004c00
 8004860:	40005000 	.word	0x40005000
 8004864:	000ffcff 	.word	0x000ffcff
 8004868:	00f42400 	.word	0x00f42400
 800486c:	01e84800 	.word	0x01e84800

08004870 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004870:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004872:	071a      	lsls	r2, r3, #28
{
 8004874:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004876:	d506      	bpl.n	8004886 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004878:	6801      	ldr	r1, [r0, #0]
 800487a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800487c:	684a      	ldr	r2, [r1, #4]
 800487e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004882:	4322      	orrs	r2, r4
 8004884:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004886:	07dc      	lsls	r4, r3, #31
 8004888:	d506      	bpl.n	8004898 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800488a:	6801      	ldr	r1, [r0, #0]
 800488c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800488e:	684a      	ldr	r2, [r1, #4]
 8004890:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004894:	4322      	orrs	r2, r4
 8004896:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004898:	0799      	lsls	r1, r3, #30
 800489a:	d506      	bpl.n	80048aa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800489c:	6801      	ldr	r1, [r0, #0]
 800489e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80048a0:	684a      	ldr	r2, [r1, #4]
 80048a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80048a6:	4322      	orrs	r2, r4
 80048a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048aa:	075a      	lsls	r2, r3, #29
 80048ac:	d506      	bpl.n	80048bc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ae:	6801      	ldr	r1, [r0, #0]
 80048b0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80048b2:	684a      	ldr	r2, [r1, #4]
 80048b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048b8:	4322      	orrs	r2, r4
 80048ba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048bc:	06dc      	lsls	r4, r3, #27
 80048be:	d506      	bpl.n	80048ce <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048c0:	6801      	ldr	r1, [r0, #0]
 80048c2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80048c4:	688a      	ldr	r2, [r1, #8]
 80048c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048ca:	4322      	orrs	r2, r4
 80048cc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ce:	0699      	lsls	r1, r3, #26
 80048d0:	d506      	bpl.n	80048e0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048d2:	6801      	ldr	r1, [r0, #0]
 80048d4:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80048d6:	688a      	ldr	r2, [r1, #8]
 80048d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048dc:	4322      	orrs	r2, r4
 80048de:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048e0:	065a      	lsls	r2, r3, #25
 80048e2:	d509      	bpl.n	80048f8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048e4:	6801      	ldr	r1, [r0, #0]
 80048e6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80048e8:	684a      	ldr	r2, [r1, #4]
 80048ea:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80048ee:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048f0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048f4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048f6:	d00b      	beq.n	8004910 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	d506      	bpl.n	800490a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048fc:	6802      	ldr	r2, [r0, #0]
 80048fe:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004900:	6853      	ldr	r3, [r2, #4]
 8004902:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004906:	430b      	orrs	r3, r1
 8004908:	6053      	str	r3, [r2, #4]
}
 800490a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800490e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004910:	684a      	ldr	r2, [r1, #4]
 8004912:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004914:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004918:	4322      	orrs	r2, r4
 800491a:	604a      	str	r2, [r1, #4]
 800491c:	e7ec      	b.n	80048f8 <UART_AdvFeatureConfig+0x88>
 800491e:	bf00      	nop

08004920 <UART_CheckIdleState>:
{
 8004920:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	2300      	movs	r3, #0
{
 8004924:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004926:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800492a:	f7fd fc47 	bl	80021bc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	6813      	ldr	r3, [r2, #0]
 8004932:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8004934:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004936:	d40e      	bmi.n	8004956 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004938:	6813      	ldr	r3, [r2, #0]
 800493a:	0759      	lsls	r1, r3, #29
 800493c:	d42f      	bmi.n	800499e <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004940:	2220      	movs	r2, #32
 8004942:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8004944:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8004946:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800494c:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 800494e:	2300      	movs	r3, #0
 8004950:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8004954:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004956:	69d3      	ldr	r3, [r2, #28]
 8004958:	0298      	lsls	r0, r3, #10
 800495a:	d4ed      	bmi.n	8004938 <UART_CheckIdleState+0x18>
 800495c:	e00c      	b.n	8004978 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	0749      	lsls	r1, r1, #29
 8004962:	461a      	mov	r2, r3
 8004964:	d505      	bpl.n	8004972 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004966:	69d9      	ldr	r1, [r3, #28]
 8004968:	0708      	lsls	r0, r1, #28
 800496a:	d449      	bmi.n	8004a00 <UART_CheckIdleState+0xe0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800496c:	69d9      	ldr	r1, [r3, #28]
 800496e:	0509      	lsls	r1, r1, #20
 8004970:	d474      	bmi.n	8004a5c <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	0298      	lsls	r0, r3, #10
 8004976:	d4df      	bmi.n	8004938 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004978:	f7fd fc20 	bl	80021bc <HAL_GetTick>
 800497c:	1b43      	subs	r3, r0, r5
 800497e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004982:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004984:	d3eb      	bcc.n	800495e <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800498a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	e843 2100 	strex	r1, r2, [r3]
 8004992:	2900      	cmp	r1, #0
 8004994:	d1f7      	bne.n	8004986 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8004996:	2320      	movs	r3, #32
 8004998:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800499a:	2003      	movs	r0, #3
 800499c:	e7d7      	b.n	800494e <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499e:	69d3      	ldr	r3, [r2, #28]
 80049a0:	025b      	lsls	r3, r3, #9
 80049a2:	d4cc      	bmi.n	800493e <UART_CheckIdleState+0x1e>
 80049a4:	e00d      	b.n	80049c2 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	0750      	lsls	r0, r2, #29
 80049aa:	d507      	bpl.n	80049bc <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	0711      	lsls	r1, r2, #28
 80049b0:	f100 8082 	bmi.w	8004ab8 <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	0512      	lsls	r2, r2, #20
 80049b8:	f100 80ac 	bmi.w	8004b14 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	025b      	lsls	r3, r3, #9
 80049c0:	d4bd      	bmi.n	800493e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c2:	f7fd fbfb 	bl	80021bc <HAL_GetTick>
 80049c6:	1b43      	subs	r3, r0, r5
 80049c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	d3ea      	bcc.n	80049a6 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	e843 2100 	strex	r1, r2, [r3]
 80049dc:	2900      	cmp	r1, #0
 80049de:	d1f7      	bne.n	80049d0 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	f103 0208 	add.w	r2, r3, #8
 80049e4:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	f103 0008 	add.w	r0, r3, #8
 80049f0:	e840 2100 	strex	r1, r2, [r0]
 80049f4:	2900      	cmp	r1, #0
 80049f6:	d1f3      	bne.n	80049e0 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 80049f8:	2320      	movs	r3, #32
 80049fa:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 80049fe:	e7cc      	b.n	800499a <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a00:	2208      	movs	r2, #8
 8004a02:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a08:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	e843 2100 	strex	r1, r2, [r3]
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d1f7      	bne.n	8004a04 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	f103 0208 	add.w	r2, r3, #8
 8004a18:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	f103 0008 	add.w	r0, r3, #8
 8004a24:	e840 2100 	strex	r1, r2, [r0]
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	d1f3      	bne.n	8004a14 <UART_CheckIdleState+0xf4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a2c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004a2e:	2a01      	cmp	r2, #1
 8004a30:	d00b      	beq.n	8004a4a <UART_CheckIdleState+0x12a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004a34:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a36:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004a38:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004a3c:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004a40:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a44:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8004a48:	e79d      	b.n	8004986 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	e843 2100 	strex	r1, r2, [r3]
 8004a56:	2900      	cmp	r1, #0
 8004a58:	d1f7      	bne.n	8004a4a <UART_CheckIdleState+0x12a>
 8004a5a:	e7ea      	b.n	8004a32 <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a60:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a66:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	e843 2100 	strex	r1, r2, [r3]
 8004a6e:	2900      	cmp	r1, #0
 8004a70:	d1f7      	bne.n	8004a62 <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	f103 0208 	add.w	r2, r3, #8
 8004a76:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	f103 0008 	add.w	r0, r3, #8
 8004a82:	e840 2100 	strex	r1, r2, [r0]
 8004a86:	2900      	cmp	r1, #0
 8004a88:	d1f3      	bne.n	8004a72 <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004a8c:	2a01      	cmp	r2, #1
 8004a8e:	d00a      	beq.n	8004aa6 <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a90:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004a92:	2120      	movs	r1, #32
 8004a94:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004a98:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9a:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004a9c:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aa0:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8004aa4:	e76f      	b.n	8004986 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aaa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	e843 2100 	strex	r1, r2, [r3]
 8004ab2:	2900      	cmp	r1, #0
 8004ab4:	d1f7      	bne.n	8004aa6 <UART_CheckIdleState+0x186>
 8004ab6:	e7eb      	b.n	8004a90 <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ab8:	2208      	movs	r2, #8
 8004aba:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	e843 2100 	strex	r1, r2, [r3]
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	d1f7      	bne.n	8004abc <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	f103 0208 	add.w	r2, r3, #8
 8004ad0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	f103 0008 	add.w	r0, r3, #8
 8004adc:	e840 2100 	strex	r1, r2, [r0]
 8004ae0:	2900      	cmp	r1, #0
 8004ae2:	d1f3      	bne.n	8004acc <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004ae6:	2a01      	cmp	r2, #1
 8004ae8:	d00b      	beq.n	8004b02 <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aea:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004aec:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aee:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004af0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004af4:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af6:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004af8:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004afc:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8004b00:	e766      	b.n	80049d0 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b06:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	e843 2100 	strex	r1, r2, [r3]
 8004b0e:	2900      	cmp	r1, #0
 8004b10:	d1f7      	bne.n	8004b02 <UART_CheckIdleState+0x1e2>
 8004b12:	e7ea      	b.n	8004aea <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b18:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	e843 2100 	strex	r1, r2, [r3]
 8004b26:	2900      	cmp	r1, #0
 8004b28:	d1f7      	bne.n	8004b1a <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	f103 0208 	add.w	r2, r3, #8
 8004b2e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	f103 0008 	add.w	r0, r3, #8
 8004b3a:	e840 2100 	strex	r1, r2, [r0]
 8004b3e:	2900      	cmp	r1, #0
 8004b40:	d1f3      	bne.n	8004b2a <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b42:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004b44:	2a01      	cmp	r2, #1
 8004b46:	d00a      	beq.n	8004b5e <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b48:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	2120      	movs	r1, #32
 8004b4c:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004b50:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004b54:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b58:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8004b5c:	e738      	b.n	80049d0 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b62:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	e843 2100 	strex	r1, r2, [r3]
 8004b6a:	2900      	cmp	r1, #0
 8004b6c:	d1f7      	bne.n	8004b5e <UART_CheckIdleState+0x23e>
 8004b6e:	e7eb      	b.n	8004b48 <UART_CheckIdleState+0x228>

08004b70 <HAL_UART_Init>:
  if (huart == NULL)
 8004b70:	b370      	cbz	r0, 8004bd0 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004b72:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8004b74:	b510      	push	{r4, lr}
 8004b76:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004b78:	b32b      	cbz	r3, 8004bc6 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8004b7a:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b7c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8004b7e:	2324      	movs	r3, #36	@ 0x24
 8004b80:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b8a:	b9c1      	cbnz	r1, 8004bbe <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7ff fd4b 	bl	8004628 <UART_SetConfig>
 8004b92:	2801      	cmp	r0, #1
 8004b94:	d011      	beq.n	8004bba <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ba6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004bae:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004bb6:	f7ff beb3 	b.w	8004920 <UART_CheckIdleState>
}
 8004bba:	2001      	movs	r0, #1
 8004bbc:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7ff fe56 	bl	8004870 <UART_AdvFeatureConfig>
 8004bc4:	e7e2      	b.n	8004b8c <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8004bc6:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8004bca:	f7fc fc7d 	bl	80014c8 <HAL_UART_MspInit>
 8004bce:	e7d4      	b.n	8004b7a <HAL_UART_Init+0xa>
}
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop

08004bd8 <memset>:
 8004bd8:	4402      	add	r2, r0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d100      	bne.n	8004be2 <memset+0xa>
 8004be0:	4770      	bx	lr
 8004be2:	f803 1b01 	strb.w	r1, [r3], #1
 8004be6:	e7f9      	b.n	8004bdc <memset+0x4>

08004be8 <strncpy>:
 8004be8:	b510      	push	{r4, lr}
 8004bea:	3901      	subs	r1, #1
 8004bec:	4603      	mov	r3, r0
 8004bee:	b132      	cbz	r2, 8004bfe <strncpy+0x16>
 8004bf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004bf4:	f803 4b01 	strb.w	r4, [r3], #1
 8004bf8:	3a01      	subs	r2, #1
 8004bfa:	2c00      	cmp	r4, #0
 8004bfc:	d1f7      	bne.n	8004bee <strncpy+0x6>
 8004bfe:	441a      	add	r2, r3
 8004c00:	2100      	movs	r1, #0
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d100      	bne.n	8004c08 <strncpy+0x20>
 8004c06:	bd10      	pop	{r4, pc}
 8004c08:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0c:	e7f9      	b.n	8004c02 <strncpy+0x1a>
	...

08004c10 <__libc_init_array>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4d0d      	ldr	r5, [pc, #52]	@ (8004c48 <__libc_init_array+0x38>)
 8004c14:	4c0d      	ldr	r4, [pc, #52]	@ (8004c4c <__libc_init_array+0x3c>)
 8004c16:	1b64      	subs	r4, r4, r5
 8004c18:	10a4      	asrs	r4, r4, #2
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	42a6      	cmp	r6, r4
 8004c1e:	d109      	bne.n	8004c34 <__libc_init_array+0x24>
 8004c20:	4d0b      	ldr	r5, [pc, #44]	@ (8004c50 <__libc_init_array+0x40>)
 8004c22:	4c0c      	ldr	r4, [pc, #48]	@ (8004c54 <__libc_init_array+0x44>)
 8004c24:	f000 f818 	bl	8004c58 <_init>
 8004c28:	1b64      	subs	r4, r4, r5
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	42a6      	cmp	r6, r4
 8004c30:	d105      	bne.n	8004c3e <__libc_init_array+0x2e>
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c38:	4798      	blx	r3
 8004c3a:	3601      	adds	r6, #1
 8004c3c:	e7ee      	b.n	8004c1c <__libc_init_array+0xc>
 8004c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c42:	4798      	blx	r3
 8004c44:	3601      	adds	r6, #1
 8004c46:	e7f2      	b.n	8004c2e <__libc_init_array+0x1e>
 8004c48:	0803c2f8 	.word	0x0803c2f8
 8004c4c:	0803c2f8 	.word	0x0803c2f8
 8004c50:	0803c2f8 	.word	0x0803c2f8
 8004c54:	0803c2fc 	.word	0x0803c2fc

08004c58 <_init>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	bf00      	nop
 8004c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5e:	bc08      	pop	{r3}
 8004c60:	469e      	mov	lr, r3
 8004c62:	4770      	bx	lr

08004c64 <_fini>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	bf00      	nop
 8004c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6a:	bc08      	pop	{r3}
 8004c6c:	469e      	mov	lr, r3
 8004c6e:	4770      	bx	lr
