
ECEN-361-Laser-Harp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004820  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00034f88  080049a8  080049a8  000059a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08039930  08039930  0003b194  2**0
                  CONTENTS
  4 .ARM          00000008  08039930  08039930  0003a930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08039938  08039938  0003b194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08039938  08039938  0003a938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803993c  0803993c  0003a93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08039940  0003b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000198  08039ad4  0003b198  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08039ad4  0003b490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003b194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025b2b  00000000  00000000  0003b1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dcf  00000000  00000000  00060cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000133ef  00000000  00000000  00064abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00077eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002051  00000000  00000000  00079218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028261  00000000  00000000  0007b269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027277  00000000  00000000  000a34ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f848e  00000000  00000000  000ca741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c2bcf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000388c  00000000  00000000  001c2c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009b  00000000  00000000  001c64a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000198 	.word	0x20000198
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004990 	.word	0x08004990

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000019c 	.word	0x2000019c
 80001c4:	08004990 	.word	0x08004990

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b510      	push	{r4, lr}
 80004ba:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004bc:	2244      	movs	r2, #68	@ 0x44
 80004be:	2100      	movs	r1, #0
 80004c0:	a806      	add	r0, sp, #24
 80004c2:	f004 fa39 	bl	8004938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c6:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80004d0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80004d4:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004d6:	f002 fb49 	bl	8002b6c <HAL_PWREx_ControlVoltageScaling>
 80004da:	b108      	cbz	r0, 80004e0 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004de:	e7fe      	b.n	80004de <SystemClock_Config+0x26>
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004e0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8000538 <SystemClock_Config+0x80>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e8:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ea:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ec:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004f2:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 80004f4:	220a      	movs	r2, #10
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f6:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fa:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004fc:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004fe:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000502:	9112      	str	r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000504:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000506:	f002 fc11 	bl	8002d2c <HAL_RCC_OscConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	b108      	cbz	r0, 8000512 <SystemClock_Config+0x5a>
 800050e:	b672      	cpsid	i
  while (1)
 8000510:	e7fe      	b.n	8000510 <SystemClock_Config+0x58>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000512:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000514:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000516:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000518:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051c:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000520:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000524:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000526:	f002 fee1 	bl	80032ec <HAL_RCC_ClockConfig>
 800052a:	b108      	cbz	r0, 8000530 <SystemClock_Config+0x78>
 800052c:	b672      	cpsid	i
  while (1)
 800052e:	e7fe      	b.n	800052e <SystemClock_Config+0x76>
}
 8000530:	b018      	add	sp, #96	@ 0x60
 8000532:	bd10      	pop	{r4, pc}
 8000534:	f3af 8000 	nop.w
 8000538:	00000007 	.word	0x00000007
 800053c:	00000002 	.word	0x00000002

08000540 <main>:
{
 8000540:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	2400      	movs	r4, #0
{
 8000544:	b093      	sub	sp, #76	@ 0x4c
  HAL_Init();
 8000546:	f001 fcc5 	bl	8001ed4 <HAL_Init>
  SystemClock_Config();
 800054a:	f7ff ffb5 	bl	80004b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b99      	ldr	r3, [pc, #612]	@ (80007b8 <main+0x278>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000558:	4898      	ldr	r0, [pc, #608]	@ (80007bc <main+0x27c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	f042 0204 	orr.w	r2, r2, #4
 800055e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000560:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000562:	f002 0204 	and.w	r2, r2, #4
 8000566:	9201      	str	r2, [sp, #4]
 8000568:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000570:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000572:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000574:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000578:	9202      	str	r2, [sp, #8]
 800057a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057e:	f042 0201 	orr.w	r2, r2, #1
 8000582:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000584:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000586:	f002 0201 	and.w	r2, r2, #1
 800058a:	9203      	str	r2, [sp, #12]
 800058c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000590:	f042 0202 	orr.w	r2, r2, #2
 8000594:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 800059e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = B1_Pin;
 80005a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f001 feb7 	bl	8002320 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_4_Pin
 80005b2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80005b6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ba:	4880      	ldr	r0, [pc, #512]	@ (80007bc <main+0x27c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005be:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_4_Pin
 80005c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c4:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	f001 feab 	bl	8002320 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RIGHT_BTN_Pin|LEFT_BTN_Pin|BOTTOM_BTN_Pin|TOP_BTN_Pin;
 80005ca:	2300      	movs	r3, #0
 80005cc:	22f0      	movs	r2, #240	@ 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	487c      	ldr	r0, [pc, #496]	@ (80007c0 <main+0x280>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d0:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RIGHT_BTN_Pin|LEFT_BTN_Pin|BOTTOM_BTN_Pin|TOP_BTN_Pin;
 80005d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	f001 fea2 	bl	8002320 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005dc:	4622      	mov	r2, r4
 80005de:	4621      	mov	r1, r4
 80005e0:	2006      	movs	r0, #6
 80005e2:	f001 fcc5 	bl	8001f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005e6:	2006      	movs	r0, #6
 80005e8:	f001 fcfe 	bl	8001fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80005ec:	4622      	mov	r2, r4
 80005ee:	4621      	mov	r1, r4
 80005f0:	2007      	movs	r0, #7
 80005f2:	f001 fcbd 	bl	8001f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005f6:	2007      	movs	r0, #7
 80005f8:	f001 fcf6 	bl	8001fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005fc:	4622      	mov	r2, r4
 80005fe:	4621      	mov	r1, r4
 8000600:	2008      	movs	r0, #8
 8000602:	f001 fcb5 	bl	8001f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000606:	2008      	movs	r0, #8
 8000608:	f001 fcee 	bl	8001fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800060c:	4622      	mov	r2, r4
 800060e:	4621      	mov	r1, r4
 8000610:	2009      	movs	r0, #9
 8000612:	f001 fcad 	bl	8001f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000616:	2009      	movs	r0, #9
 8000618:	f001 fce6 	bl	8001fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800061c:	4622      	mov	r2, r4
 800061e:	4621      	mov	r1, r4
 8000620:	200a      	movs	r0, #10
 8000622:	f001 fca5 	bl	8001f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000626:	200a      	movs	r0, #10
 8000628:	f001 fcde 	bl	8001fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800062c:	4622      	mov	r2, r4
 800062e:	4621      	mov	r1, r4
 8000630:	2017      	movs	r0, #23
 8000632:	f001 fc9d 	bl	8001f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000636:	2017      	movs	r0, #23
 8000638:	f001 fcd6 	bl	8001fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800063c:	4622      	mov	r2, r4
 800063e:	4621      	mov	r1, r4
 8000640:	2028      	movs	r0, #40	@ 0x28
 8000642:	f001 fc95 	bl	8001f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000646:	2028      	movs	r0, #40	@ 0x28
 8000648:	f001 fcce 	bl	8001fe8 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 800064c:	485d      	ldr	r0, [pc, #372]	@ (80007c4 <main+0x284>)
  huart2.Init.BaudRate = 115200;
 800064e:	4a5e      	ldr	r2, [pc, #376]	@ (80007c8 <main+0x288>)
 8000650:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000654:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800065a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800065e:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000662:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000666:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	f004 f931 	bl	80048d0 <HAL_UART_Init>
 800066e:	b108      	cbz	r0, 8000674 <main+0x134>
 8000670:	b672      	cpsid	i
  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0x132>
  hdac1.Instance = DAC1;
 8000674:	4c55      	ldr	r4, [pc, #340]	@ (80007cc <main+0x28c>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000676:	4601      	mov	r1, r0
 8000678:	2224      	movs	r2, #36	@ 0x24
 800067a:	a808      	add	r0, sp, #32
 800067c:	f004 f95c 	bl	8004938 <memset>
  hdac1.Instance = DAC1;
 8000680:	4b53      	ldr	r3, [pc, #332]	@ (80007d0 <main+0x290>)
 8000682:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000684:	4620      	mov	r0, r4
 8000686:	f001 fcd7 	bl	8002038 <HAL_DAC_Init>
 800068a:	b108      	cbz	r0, 8000690 <main+0x150>
 800068c:	b672      	cpsid	i
  while (1)
 800068e:	e7fe      	b.n	800068e <main+0x14e>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000690:	e9cd 0008 	strd	r0, r0, [sp, #32]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000694:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000698:	4602      	mov	r2, r0
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800069a:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800069c:	a908      	add	r1, sp, #32
 800069e:	4620      	mov	r0, r4
 80006a0:	f001 fd5c 	bl	800215c <HAL_DAC_ConfigChannel>
 80006a4:	b108      	cbz	r0, 80006aa <main+0x16a>
 80006a6:	b672      	cpsid	i
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x168>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006aa:	2210      	movs	r2, #16
 80006ac:	a908      	add	r1, sp, #32
 80006ae:	4620      	mov	r0, r4
 80006b0:	f001 fd54 	bl	800215c <HAL_DAC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b9c0      	cbnz	r0, 80006ea <main+0x1aa>
  htim15.Instance = TIM15;
 80006b8:	4c46      	ldr	r4, [pc, #280]	@ (80007d4 <main+0x294>)
 80006ba:	4a47      	ldr	r2, [pc, #284]	@ (80007d8 <main+0x298>)
 80006bc:	6022      	str	r2, [r4, #0]
  htim15.Init.Prescaler = 80-1;
 80006be:	224f      	movs	r2, #79	@ 0x4f
 80006c0:	6062      	str	r2, [r4, #4]
  htim15.Init.Period = 9;
 80006c2:	2209      	movs	r2, #9
 80006c4:	e9c4 0202 	strd	r0, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c8:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80006cc:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  htim15.Init.RepetitionCounter = 0;
 80006d0:	e9c4 0004 	strd	r0, r0, [r4, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d4:	9005      	str	r0, [sp, #20]
  htim15.Init.RepetitionCounter = 0;
 80006d6:	2280      	movs	r2, #128	@ 0x80
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80006d8:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006da:	e9cd 3306 	strd	r3, r3, [sp, #24]
  htim15.Init.RepetitionCounter = 0;
 80006de:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80006e0:	f003 fa12 	bl	8003b08 <HAL_TIM_Base_Init>
 80006e4:	b118      	cbz	r0, 80006ee <main+0x1ae>
 80006e6:	b672      	cpsid	i
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x1a8>
 80006ea:	b672      	cpsid	i
 80006ec:	e7fe      	b.n	80006ec <main+0x1ac>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80006f2:	a908      	add	r1, sp, #32
 80006f4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f6:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80006f8:	f003 fad2 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b108      	cbz	r0, 8000704 <main+0x1c4>
 8000700:	b672      	cpsid	i
  while (1)
 8000702:	e7fe      	b.n	8000702 <main+0x1c2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000704:	a905      	add	r1, sp, #20
 8000706:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000708:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070a:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800070c:	f003 fc26 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	b108      	cbz	r0, 8000718 <main+0x1d8>
 8000714:	b672      	cpsid	i
  while (1)
 8000716:	e7fe      	b.n	8000716 <main+0x1d6>
  hi2c1.Instance = I2C1;
 8000718:	4c30      	ldr	r4, [pc, #192]	@ (80007dc <main+0x29c>)
  hi2c1.Init.Timing = 0x10909CEC;
 800071a:	4931      	ldr	r1, [pc, #196]	@ (80007e0 <main+0x2a0>)
 800071c:	4a31      	ldr	r2, [pc, #196]	@ (80007e4 <main+0x2a4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x10909CEC;
 8000722:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000726:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800072a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072e:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000732:	f001 ffd9 	bl	80026e8 <HAL_I2C_Init>
 8000736:	4601      	mov	r1, r0
 8000738:	b108      	cbz	r0, 800073e <main+0x1fe>
 800073a:	b672      	cpsid	i
  while (1)
 800073c:	e7fe      	b.n	800073c <main+0x1fc>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073e:	4620      	mov	r0, r4
 8000740:	f002 f9b6 	bl	8002ab0 <HAL_I2CEx_ConfigAnalogFilter>
 8000744:	4601      	mov	r1, r0
 8000746:	b108      	cbz	r0, 800074c <main+0x20c>
 8000748:	b672      	cpsid	i
  while (1)
 800074a:	e7fe      	b.n	800074a <main+0x20a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800074c:	4620      	mov	r0, r4
 800074e:	f002 f9d9 	bl	8002b04 <HAL_I2CEx_ConfigDigitalFilter>
 8000752:	b108      	cbz	r0, 8000758 <main+0x218>
 8000754:	b672      	cpsid	i
  while (1)
 8000756:	e7fe      	b.n	8000756 <main+0x216>
  htim16.Instance = TIM16;
 8000758:	4c23      	ldr	r4, [pc, #140]	@ (80007e8 <main+0x2a8>)
 800075a:	4824      	ldr	r0, [pc, #144]	@ (80007ec <main+0x2ac>)
  htim16.Init.Prescaler = 3200-1;
 800075c:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8000760:	e9c4 0200 	strd	r0, r2, [r4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	2300      	movs	r3, #0
  htim16.Init.Period = 100-1;
 8000766:	2163      	movs	r1, #99	@ 0x63
  htim16.Init.RepetitionCounter = 0;
 8000768:	2280      	movs	r2, #128	@ 0x80
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800076a:	4620      	mov	r0, r4
  htim16.Init.Period = 100-1;
 800076c:	e9c4 3102 	strd	r3, r1, [r4, #8]
  htim16.Init.RepetitionCounter = 0;
 8000770:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8000774:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000776:	f003 f9c7 	bl	8003b08 <HAL_TIM_Base_Init>
 800077a:	4605      	mov	r5, r0
 800077c:	b108      	cbz	r0, 8000782 <main+0x242>
 800077e:	b672      	cpsid	i
  while (1)
 8000780:	e7fe      	b.n	8000780 <main+0x240>
  HAL_TIM_Base_Start_IT(&htim15); // Start the Music Interrupt Timer
 8000782:	4814      	ldr	r0, [pc, #80]	@ (80007d4 <main+0x294>)
 8000784:	f003 fa4e 	bl	8003c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16); // Star the Sustain Interrupt Timer
 8000788:	4620      	mov	r0, r4
 800078a:	f003 fa4b 	bl	8003c24 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Start one of the dac channels
 800078e:	2110      	movs	r1, #16
 8000790:	480e      	ldr	r0, [pc, #56]	@ (80007cc <main+0x28c>)
 8000792:	f001 fc67 	bl	8002064 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start one of the dac channels
 8000796:	4629      	mov	r1, r5
 8000798:	480c      	ldr	r0, [pc, #48]	@ (80007cc <main+0x28c>)
 800079a:	f001 fc63 	bl	8002064 <HAL_DAC_Start>
  tranposition__increment_octave();
 800079e:	f001 f90d 	bl	80019bc <tranposition__increment_octave>
  menu_init();
 80007a2:	f000 f8fb 	bl	800099c <menu_init>
  lcd_init();
 80007a6:	f000 fa73 	bl	8000c90 <lcd_init>
	  poll_buttons();
 80007aa:	f000 f9bb 	bl	8000b24 <poll_buttons>
	  HAL_Delay(100);
 80007ae:	2064      	movs	r0, #100	@ 0x64
 80007b0:	f001 fbba 	bl	8001f28 <HAL_Delay>
  while (1)
 80007b4:	e7f9      	b.n	80007aa <main+0x26a>
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000800 	.word	0x48000800
 80007c0:	48000400 	.word	0x48000400
 80007c4:	20000244 	.word	0x20000244
 80007c8:	40004400 	.word	0x40004400
 80007cc:	200003c0 	.word	0x200003c0
 80007d0:	40007400 	.word	0x40007400
 80007d4:	20000320 	.word	0x20000320
 80007d8:	40014000 	.word	0x40014000
 80007dc:	2000036c 	.word	0x2000036c
 80007e0:	40005400 	.word	0x40005400
 80007e4:	10909cec 	.word	0x10909cec
 80007e8:	200002d0 	.word	0x200002d0
 80007ec:	40014400 	.word	0x40014400

080007f0 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin) {
 80007f0:	2840      	cmp	r0, #64	@ 0x40
 80007f2:	d078      	beq.n	80008e6 <HAL_GPIO_EXTI_Callback+0xf6>
 80007f4:	d817      	bhi.n	8000826 <HAL_GPIO_EXTI_Callback+0x36>
 80007f6:	3801      	subs	r0, #1
 80007f8:	b283      	uxth	r3, r0
 80007fa:	2b1f      	cmp	r3, #31
 80007fc:	d825      	bhi.n	800084a <HAL_GPIO_EXTI_Callback+0x5a>
 80007fe:	281f      	cmp	r0, #31
 8000800:	d823      	bhi.n	800084a <HAL_GPIO_EXTI_Callback+0x5a>
 8000802:	e8df f000 	tbb	[pc, r0]
 8000806:	433a      	.short	0x433a
 8000808:	22224c22 	.word	0x22224c22
 800080c:	22225522 	.word	0x22225522
 8000810:	22222222 	.word	0x22222222
 8000814:	22225e22 	.word	0x22225e22
 8000818:	22222222 	.word	0x22222222
 800081c:	22222222 	.word	0x22222222
 8000820:	22222222 	.word	0x22222222
 8000824:	3122      	.short	0x3122
 8000826:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800082a:	d053      	beq.n	80008d4 <HAL_GPIO_EXTI_Callback+0xe4>
 800082c:	d90e      	bls.n	800084c <HAL_GPIO_EXTI_Callback+0x5c>
 800082e:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8000832:	d061      	beq.n	80008f8 <HAL_GPIO_EXTI_Callback+0x108>
 8000834:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8000838:	d171      	bne.n	800091e <HAL_GPIO_EXTI_Callback+0x12e>
		active[NOTE_B] = !active[NOTE_B];
 800083a:	4a39      	ldr	r2, [pc, #228]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_B = active[NOTE_B] ? 1 : 0;
 800083c:	4939      	ldr	r1, [pc, #228]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x134>)
		active[NOTE_B] = !active[NOTE_B];
 800083e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000840:	fab3 f383 	clz	r3, r3
 8000844:	095b      	lsrs	r3, r3, #5
 8000846:	62d3      	str	r3, [r2, #44]	@ 0x2c
		sustain_B = active[NOTE_B] ? 1 : 0;
 8000848:	600b      	str	r3, [r1, #0]
}
 800084a:	4770      	bx	lr
	switch (GPIO_Pin) {
 800084c:	2880      	cmp	r0, #128	@ 0x80
 800084e:	d05c      	beq.n	800090a <HAL_GPIO_EXTI_Callback+0x11a>
 8000850:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8000854:	d162      	bne.n	800091c <HAL_GPIO_EXTI_Callback+0x12c>
		active[NOTE_Gs] = !active[NOTE_Gs];
 8000856:	4a32      	ldr	r2, [pc, #200]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_Gs = active[NOTE_Gs] ? 1 : 0;
 8000858:	4933      	ldr	r1, [pc, #204]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x138>)
		active[NOTE_Gs] = !active[NOTE_Gs];
 800085a:	6a13      	ldr	r3, [r2, #32]
 800085c:	fab3 f383 	clz	r3, r3
 8000860:	095b      	lsrs	r3, r3, #5
 8000862:	6213      	str	r3, [r2, #32]
		sustain_Gs = active[NOTE_Gs] ? 1 : 0;
 8000864:	600b      	str	r3, [r1, #0]
		break;
 8000866:	4770      	bx	lr
		active[NOTE_F] = !active[NOTE_F];
 8000868:	4a2d      	ldr	r2, [pc, #180]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_F = active[NOTE_F] ? 1 : 0;
 800086a:	4930      	ldr	r1, [pc, #192]	@ (800092c <HAL_GPIO_EXTI_Callback+0x13c>)
		active[NOTE_F] = !active[NOTE_F];
 800086c:	6953      	ldr	r3, [r2, #20]
 800086e:	fab3 f383 	clz	r3, r3
 8000872:	095b      	lsrs	r3, r3, #5
 8000874:	6153      	str	r3, [r2, #20]
		sustain_F = active[NOTE_F] ? 1 : 0;
 8000876:	600b      	str	r3, [r1, #0]
		break;
 8000878:	4770      	bx	lr
		active[NOTE_C] = !active[NOTE_C];
 800087a:	4a29      	ldr	r2, [pc, #164]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_C = active[NOTE_C] ? 1 : 0; //set sustain_note variables to 1 when the notes are active and 0 when they are inactive
 800087c:	492c      	ldr	r1, [pc, #176]	@ (8000930 <HAL_GPIO_EXTI_Callback+0x140>)
		active[NOTE_C] = !active[NOTE_C];
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	fab3 f383 	clz	r3, r3
 8000884:	095b      	lsrs	r3, r3, #5
 8000886:	6013      	str	r3, [r2, #0]
		sustain_C = active[NOTE_C] ? 1 : 0; //set sustain_note variables to 1 when the notes are active and 0 when they are inactive
 8000888:	600b      	str	r3, [r1, #0]
		break;
 800088a:	4770      	bx	lr
		active[NOTE_Cs] = !active[NOTE_Cs];
 800088c:	4a24      	ldr	r2, [pc, #144]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_Cs = active[NOTE_Cs] ? 1 : 0;
 800088e:	4929      	ldr	r1, [pc, #164]	@ (8000934 <HAL_GPIO_EXTI_Callback+0x144>)
		active[NOTE_Cs] = !active[NOTE_Cs];
 8000890:	6853      	ldr	r3, [r2, #4]
 8000892:	fab3 f383 	clz	r3, r3
 8000896:	095b      	lsrs	r3, r3, #5
 8000898:	6053      	str	r3, [r2, #4]
		sustain_Cs = active[NOTE_Cs] ? 1 : 0;
 800089a:	600b      	str	r3, [r1, #0]
		break;
 800089c:	4770      	bx	lr
		active[NOTE_D] = !active[NOTE_D];
 800089e:	4a20      	ldr	r2, [pc, #128]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_D = active[NOTE_D] ? 1 : 0;
 80008a0:	4925      	ldr	r1, [pc, #148]	@ (8000938 <HAL_GPIO_EXTI_Callback+0x148>)
		active[NOTE_D] = !active[NOTE_D];
 80008a2:	6893      	ldr	r3, [r2, #8]
 80008a4:	fab3 f383 	clz	r3, r3
 80008a8:	095b      	lsrs	r3, r3, #5
 80008aa:	6093      	str	r3, [r2, #8]
		sustain_D = active[NOTE_D] ? 1 : 0;
 80008ac:	600b      	str	r3, [r1, #0]
		break;
 80008ae:	4770      	bx	lr
		active[NOTE_Ds] = !active[NOTE_Ds];
 80008b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_Ds = active[NOTE_Ds] ? 1 : 0;
 80008b2:	4922      	ldr	r1, [pc, #136]	@ (800093c <HAL_GPIO_EXTI_Callback+0x14c>)
		active[NOTE_Ds] = !active[NOTE_Ds];
 80008b4:	68d3      	ldr	r3, [r2, #12]
 80008b6:	fab3 f383 	clz	r3, r3
 80008ba:	095b      	lsrs	r3, r3, #5
 80008bc:	60d3      	str	r3, [r2, #12]
		sustain_Ds = active[NOTE_Ds] ? 1 : 0;
 80008be:	600b      	str	r3, [r1, #0]
		break;
 80008c0:	4770      	bx	lr
		active[NOTE_E] = !active[NOTE_E];
 80008c2:	4a17      	ldr	r2, [pc, #92]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_E = active[NOTE_E] ? 1 : 0;
 80008c4:	491e      	ldr	r1, [pc, #120]	@ (8000940 <HAL_GPIO_EXTI_Callback+0x150>)
		active[NOTE_E] = !active[NOTE_E];
 80008c6:	6913      	ldr	r3, [r2, #16]
 80008c8:	fab3 f383 	clz	r3, r3
 80008cc:	095b      	lsrs	r3, r3, #5
 80008ce:	6113      	str	r3, [r2, #16]
		sustain_E = active[NOTE_E] ? 1 : 0;
 80008d0:	600b      	str	r3, [r1, #0]
		break;
 80008d2:	4770      	bx	lr
		active[NOTE_A] = !active[NOTE_A];
 80008d4:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_A = active[NOTE_A] ? 1 : 0;
 80008d6:	491b      	ldr	r1, [pc, #108]	@ (8000944 <HAL_GPIO_EXTI_Callback+0x154>)
		active[NOTE_A] = !active[NOTE_A];
 80008d8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80008da:	fab3 f383 	clz	r3, r3
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	6253      	str	r3, [r2, #36]	@ 0x24
		sustain_A = active[NOTE_A] ? 1 : 0;
 80008e2:	600b      	str	r3, [r1, #0]
		break;
 80008e4:	4770      	bx	lr
		active[NOTE_Fs] = !active[NOTE_Fs];
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_Fs = active[NOTE_Fs] ? 1 : 0;
 80008e8:	4917      	ldr	r1, [pc, #92]	@ (8000948 <HAL_GPIO_EXTI_Callback+0x158>)
		active[NOTE_Fs] = !active[NOTE_Fs];
 80008ea:	6993      	ldr	r3, [r2, #24]
 80008ec:	fab3 f383 	clz	r3, r3
 80008f0:	095b      	lsrs	r3, r3, #5
 80008f2:	6193      	str	r3, [r2, #24]
		sustain_Fs = active[NOTE_Fs] ? 1 : 0;
 80008f4:	600b      	str	r3, [r1, #0]
		break;
 80008f6:	4770      	bx	lr
		active[NOTE_As] = !active[NOTE_As];
 80008f8:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_As = active[NOTE_As] ? 1 : 0;
 80008fa:	4914      	ldr	r1, [pc, #80]	@ (800094c <HAL_GPIO_EXTI_Callback+0x15c>)
		active[NOTE_As] = !active[NOTE_As];
 80008fc:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80008fe:	fab3 f383 	clz	r3, r3
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	6293      	str	r3, [r2, #40]	@ 0x28
		sustain_As = active[NOTE_As] ? 1 : 0;
 8000906:	600b      	str	r3, [r1, #0]
		break;
 8000908:	4770      	bx	lr
		active[NOTE_G] = !active[NOTE_G];
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_G = active[NOTE_G] ? 1 : 0;
 800090c:	4910      	ldr	r1, [pc, #64]	@ (8000950 <HAL_GPIO_EXTI_Callback+0x160>)
		active[NOTE_G] = !active[NOTE_G];
 800090e:	69d3      	ldr	r3, [r2, #28]
 8000910:	fab3 f383 	clz	r3, r3
 8000914:	095b      	lsrs	r3, r3, #5
 8000916:	61d3      	str	r3, [r2, #28]
		sustain_G = active[NOTE_G] ? 1 : 0;
 8000918:	600b      	str	r3, [r1, #0]
		break;
 800091a:	4770      	bx	lr
 800091c:	4770      	bx	lr
 800091e:	4770      	bx	lr
 8000920:	200001e4 	.word	0x200001e4
 8000924:	200001b4 	.word	0x200001b4
 8000928:	200001c0 	.word	0x200001c0
 800092c:	200001cc 	.word	0x200001cc
 8000930:	200001e0 	.word	0x200001e0
 8000934:	200001dc 	.word	0x200001dc
 8000938:	200001d8 	.word	0x200001d8
 800093c:	200001d4 	.word	0x200001d4
 8000940:	200001d0 	.word	0x200001d0
 8000944:	200001bc 	.word	0x200001bc
 8000948:	200001c8 	.word	0x200001c8
 800094c:	200001b8 	.word	0x200001b8
 8000950:	200001c4 	.word	0x200001c4

08000954 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim16 )
 8000954:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000956:	4298      	cmp	r0, r3
 8000958:	d003      	beq.n	8000962 <HAL_TIM_PeriodElapsedCallback+0xe>
	if (htim == &htim15 )
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800095c:	4298      	cmp	r0, r3
 800095e:	d002      	beq.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x12>
 8000960:	4770      	bx	lr
		update_decay_values();
 8000962:	f000 bdaf 	b.w	80014c4 <update_decay_values>
{
 8000966:	b510      	push	{r4, lr}
		int wave = tranposition__note_update();
 8000968:	f001 f874 	bl	8001a54 <tranposition__note_update>
 800096c:	4604      	mov	r4, r0
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, wave);
 800096e:	4623      	mov	r3, r4
 8000970:	2200      	movs	r2, #0
 8000972:	2110      	movs	r1, #16
 8000974:	4807      	ldr	r0, [pc, #28]	@ (8000994 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000976:	f001 fba3 	bl	80020c0 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, wave);
 800097a:	2200      	movs	r2, #0
 800097c:	4623      	mov	r3, r4
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <HAL_TIM_PeriodElapsedCallback+0x40>)
}
 8000980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, wave);
 8000984:	4611      	mov	r1, r2
 8000986:	f001 bb9b 	b.w	80020c0 <HAL_DAC_SetValue>
 800098a:	bf00      	nop
 800098c:	200002d0 	.word	0x200002d0
 8000990:	20000320 	.word	0x20000320
 8000994:	200003c0 	.word	0x200003c0

08000998 <Error_Handler>:
 8000998:	b672      	cpsid	i
  while (1)
 800099a:	e7fe      	b.n	800099a <Error_Handler+0x2>

0800099c <menu_init>:

char buffer[32];

int sustain_flag = 0;

void menu_init(void) {
 800099c:	b538      	push	{r3, r4, r5, lr}
    current_menu_item = MENU_ITEM_OCTAVE;
 800099e:	4c2a      	ldr	r4, [pc, #168]	@ (8000a48 <menu_init+0xac>)
 80009a0:	2300      	movs	r3, #0
 80009a2:	7023      	strb	r3, [r4, #0]
    current_setting_value = 0;
    lcd_init();  // Assuming lcd_init() initializes your LCD display
 80009a4:	f000 f974 	bl	8000c90 <lcd_init>
    menu_update_display();
}

void menu_update_display(void) {

    lcd_clear();  // Assuming lcd_clear() clears the LCD display
 80009a8:	f000 fbb6 	bl	8001118 <lcd_clear>
    switch (current_menu_item) {
 80009ac:	7823      	ldrb	r3, [r4, #0]
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	d849      	bhi.n	8000a46 <menu_init+0xaa>
 80009b2:	e8df f003 	tbb	[pc, r3]
 80009b6:	2515      	.short	0x2515
 80009b8:	3634      	.short	0x3634
 80009ba:	03          	.byte	0x03
 80009bb:	00          	.byte	0x00
            snprintf(buffer, sizeof(buffer), "Sustain: up ON, down OFF");
            lcd_set_cursor(0, 0);
            lcd_write_string(buffer);
            break;
        case MENU_ITEM_TRANSPOSITION:
            snprintf(buffer, sizeof(buffer), "Transposition: up inc, down dec");
 80009bc:	4d23      	ldr	r5, [pc, #140]	@ (8000a4c <menu_init+0xb0>)
 80009be:	4c24      	ldr	r4, [pc, #144]	@ (8000a50 <menu_init+0xb4>)
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            lcd_set_cursor(0, 0);
 80009cc:	2100      	movs	r1, #0
 80009ce:	4608      	mov	r0, r1
 80009d0:	f000 fb4c 	bl	800106c <lcd_set_cursor>
            lcd_write_string(buffer);
 80009d4:	f1a4 0010 	sub.w	r0, r4, #16
}
 80009d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_string(buffer);
 80009dc:	f000 baea 	b.w	8000fb4 <lcd_write_string>
            snprintf(buffer, sizeof(buffer), "Octave: ");
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <menu_init+0xb8>)
 80009e2:	4c1b      	ldr	r4, [pc, #108]	@ (8000a50 <menu_init+0xb4>)
 80009e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009e8:	c403      	stmia	r4!, {r0, r1}
            lcd_set_cursor(0, 0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Octave: ");
 80009ee:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 80009f0:	f000 fb3c 	bl	800106c <lcd_set_cursor>
            lcd_write_string(buffer);
 80009f4:	f1a4 0008 	sub.w	r0, r4, #8
}
 80009f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_string(buffer);
 80009fc:	f000 bada 	b.w	8000fb4 <lcd_write_string>
            snprintf(buffer, sizeof(buffer), "Instrument: ");
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <menu_init+0xbc>)
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000a02:	4c13      	ldr	r4, [pc, #76]	@ (8000a50 <menu_init+0xb4>)
 8000a04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a06:	c407      	stmia	r4!, {r0, r1, r2}
            lcd_set_cursor(0, 0);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000a0c:	7023      	strb	r3, [r4, #0]
            lcd_set_cursor(0, 0);
 8000a0e:	f000 fb2d 	bl	800106c <lcd_set_cursor>
            lcd_write_string(buffer);
 8000a12:	f1a4 000c 	sub.w	r0, r4, #12
}
 8000a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_string(buffer);
 8000a1a:	f000 bacb 	b.w	8000fb4 <lcd_write_string>
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <menu_init+0xc0>)
 8000a20:	e7ef      	b.n	8000a02 <menu_init+0x66>
            snprintf(buffer, sizeof(buffer), "Sustain: up ON, down OFF");
 8000a22:	4d0f      	ldr	r5, [pc, #60]	@ (8000a60 <menu_init+0xc4>)
 8000a24:	4c0a      	ldr	r4, [pc, #40]	@ (8000a50 <menu_init+0xb4>)
 8000a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2e:	c403      	stmia	r4!, {r0, r1}
            lcd_set_cursor(0, 0);
 8000a30:	2100      	movs	r1, #0
 8000a32:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Sustain: up ON, down OFF");
 8000a34:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000a36:	f000 fb19 	bl	800106c <lcd_set_cursor>
            lcd_write_string(buffer);
 8000a3a:	f1a4 0018 	sub.w	r0, r4, #24
}
 8000a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_string(buffer);
 8000a42:	f000 bab7 	b.w	8000fb4 <lcd_write_string>
}
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
 8000a48:	200003f8 	.word	0x200003f8
 8000a4c:	080049f0 	.word	0x080049f0
 8000a50:	200003d8 	.word	0x200003d8
 8000a54:	080049a8 	.word	0x080049a8
 8000a58:	080049b4 	.word	0x080049b4
 8000a5c:	080049c4 	.word	0x080049c4
 8000a60:	080049d4 	.word	0x080049d4

08000a64 <menu_update_display>:
void menu_update_display(void) {
 8000a64:	b538      	push	{r3, r4, r5, lr}
    lcd_clear();  // Assuming lcd_clear() clears the LCD display
 8000a66:	f000 fb57 	bl	8001118 <lcd_clear>
    switch (current_menu_item) {
 8000a6a:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <menu_update_display+0xa4>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	d849      	bhi.n	8000b06 <menu_update_display+0xa2>
 8000a72:	e8df f003 	tbb	[pc, r3]
 8000a76:	2515      	.short	0x2515
 8000a78:	3634      	.short	0x3634
 8000a7a:	03          	.byte	0x03
 8000a7b:	00          	.byte	0x00
            snprintf(buffer, sizeof(buffer), "Transposition: up inc, down dec");
 8000a7c:	4d23      	ldr	r5, [pc, #140]	@ (8000b0c <menu_update_display+0xa8>)
 8000a7e:	4c24      	ldr	r4, [pc, #144]	@ (8000b10 <menu_update_display+0xac>)
 8000a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            lcd_set_cursor(0, 0);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	f000 faec 	bl	800106c <lcd_set_cursor>
            lcd_write_string(buffer);
 8000a94:	f1a4 0010 	sub.w	r0, r4, #16
            break;
        default:
            break;
    }
}
 8000a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_string(buffer);
 8000a9c:	f000 ba8a 	b.w	8000fb4 <lcd_write_string>
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <menu_update_display+0xb0>)
 8000aa2:	4c1b      	ldr	r4, [pc, #108]	@ (8000b10 <menu_update_display+0xac>)
 8000aa4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000aa8:	c403      	stmia	r4!, {r0, r1}
            lcd_set_cursor(0, 0);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000aae:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000ab0:	f000 fadc 	bl	800106c <lcd_set_cursor>
            lcd_write_string(buffer);
 8000ab4:	f1a4 0008 	sub.w	r0, r4, #8
}
 8000ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_string(buffer);
 8000abc:	f000 ba7a 	b.w	8000fb4 <lcd_write_string>
            snprintf(buffer, sizeof(buffer), "Instrument: ");
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <menu_update_display+0xb4>)
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000ac2:	4c13      	ldr	r4, [pc, #76]	@ (8000b10 <menu_update_display+0xac>)
 8000ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac6:	c407      	stmia	r4!, {r0, r1, r2}
            lcd_set_cursor(0, 0);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000acc:	7023      	strb	r3, [r4, #0]
            lcd_set_cursor(0, 0);
 8000ace:	f000 facd 	bl	800106c <lcd_set_cursor>
            lcd_write_string(buffer);
 8000ad2:	f1a4 000c 	sub.w	r0, r4, #12
}
 8000ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_string(buffer);
 8000ada:	f000 ba6b 	b.w	8000fb4 <lcd_write_string>
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <menu_update_display+0xb8>)
 8000ae0:	e7ef      	b.n	8000ac2 <menu_update_display+0x5e>
            snprintf(buffer, sizeof(buffer), "Sustain: up ON, down OFF");
 8000ae2:	4d0f      	ldr	r5, [pc, #60]	@ (8000b20 <menu_update_display+0xbc>)
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b10 <menu_update_display+0xac>)
 8000ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aee:	c403      	stmia	r4!, {r0, r1}
            lcd_set_cursor(0, 0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Sustain: up ON, down OFF");
 8000af4:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000af6:	f000 fab9 	bl	800106c <lcd_set_cursor>
            lcd_write_string(buffer);
 8000afa:	f1a4 0018 	sub.w	r0, r4, #24
}
 8000afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_string(buffer);
 8000b02:	f000 ba57 	b.w	8000fb4 <lcd_write_string>
}
 8000b06:	bd38      	pop	{r3, r4, r5, pc}
 8000b08:	200003f8 	.word	0x200003f8
 8000b0c:	080049f0 	.word	0x080049f0
 8000b10:	200003d8 	.word	0x200003d8
 8000b14:	080049a8 	.word	0x080049a8
 8000b18:	080049b4 	.word	0x080049b4
 8000b1c:	080049c4 	.word	0x080049c4
 8000b20:	080049d4 	.word	0x080049d4

08000b24 <poll_buttons>:

void poll_buttons(void) {
 8000b24:	b538      	push	{r3, r4, r5, lr}
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == 1) {
 8000b26:	4854      	ldr	r0, [pc, #336]	@ (8000c78 <poll_buttons+0x154>)
 8000b28:	2180      	movs	r1, #128	@ 0x80
 8000b2a:	f001 fd1d 	bl	8002568 <HAL_GPIO_ReadPin>
 8000b2e:	2801      	cmp	r0, #1
 8000b30:	d05c      	beq.n	8000bec <poll_buttons+0xc8>
        HAL_Delay(100);
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
            HAL_Delay(100); // Debounce delay
        }
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == 1) {
 8000b32:	4851      	ldr	r0, [pc, #324]	@ (8000c78 <poll_buttons+0x154>)
 8000b34:	2140      	movs	r1, #64	@ 0x40
 8000b36:	f001 fd17 	bl	8002568 <HAL_GPIO_ReadPin>
 8000b3a:	2801      	cmp	r0, #1
 8000b3c:	d03e      	beq.n	8000bbc <poll_buttons+0x98>
        HAL_Delay(100);
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
            HAL_Delay(100); // Debounce delay
        }
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == 1) {
 8000b3e:	484e      	ldr	r0, [pc, #312]	@ (8000c78 <poll_buttons+0x154>)
 8000b40:	2120      	movs	r1, #32
 8000b42:	f001 fd11 	bl	8002568 <HAL_GPIO_ReadPin>
 8000b46:	2801      	cmp	r0, #1
 8000b48:	d020      	beq.n	8000b8c <poll_buttons+0x68>
        HAL_Delay(100);
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
            HAL_Delay(100); // Debounce delay
        }
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == 1) {
 8000b4a:	484b      	ldr	r0, [pc, #300]	@ (8000c78 <poll_buttons+0x154>)
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	f001 fd0b 	bl	8002568 <HAL_GPIO_ReadPin>
 8000b52:	2801      	cmp	r0, #1
 8000b54:	d000      	beq.n	8000b58 <poll_buttons+0x34>
        HAL_Delay(100);
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
            HAL_Delay(100); // Debounce delay
        }
    }
}
 8000b56:	bd38      	pop	{r3, r4, r5, pc}
    if (current_menu_item < MENU_ITEM_COUNT - 1) {
 8000b58:	4b48      	ldr	r3, [pc, #288]	@ (8000c7c <poll_buttons+0x158>)
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000b5a:	4c47      	ldr	r4, [pc, #284]	@ (8000c78 <poll_buttons+0x154>)
    if (current_menu_item < MENU_ITEM_COUNT - 1) {
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	2a03      	cmp	r2, #3
        current_menu_item++;
 8000b60:	bf9a      	itte	ls
 8000b62:	3201      	addls	r2, #1
 8000b64:	b2d2      	uxtbls	r2, r2
        current_menu_item = 0;
 8000b66:	2200      	movhi	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
    menu_update_display();
 8000b6a:	f7ff ff7b 	bl	8000a64 <menu_update_display>
        HAL_Delay(100);
 8000b6e:	2064      	movs	r0, #100	@ 0x64
 8000b70:	f001 f9da 	bl	8001f28 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000b74:	e001      	b.n	8000b7a <poll_buttons+0x56>
            HAL_Delay(100); // Debounce delay
 8000b76:	f001 f9d7 	bl	8001f28 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f001 fcf3 	bl	8002568 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000b84:	2064      	movs	r0, #100	@ 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f5      	beq.n	8000b76 <poll_buttons+0x52>
}
 8000b8a:	bd38      	pop	{r3, r4, r5, pc}
    if (current_menu_item > 0) {
 8000b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c7c <poll_buttons+0x158>)
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d143      	bne.n	8000c1c <poll_buttons+0xf8>
        current_menu_item = MENU_ITEM_COUNT - 1;
 8000b94:	2204      	movs	r2, #4
 8000b96:	701a      	strb	r2, [r3, #0]
    menu_update_display();
 8000b98:	f7ff ff64 	bl	8000a64 <menu_update_display>
        HAL_Delay(100);
 8000b9c:	2064      	movs	r0, #100	@ 0x64
 8000b9e:	f001 f9c3 	bl	8001f28 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000ba2:	4c35      	ldr	r4, [pc, #212]	@ (8000c78 <poll_buttons+0x154>)
 8000ba4:	e001      	b.n	8000baa <poll_buttons+0x86>
            HAL_Delay(100); // Debounce delay
 8000ba6:	f001 f9bf 	bl	8001f28 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000baa:	2120      	movs	r1, #32
 8000bac:	4620      	mov	r0, r4
 8000bae:	f001 fcdb 	bl	8002568 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000bb4:	2064      	movs	r0, #100	@ 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f5      	beq.n	8000ba6 <poll_buttons+0x82>
 8000bba:	e7c6      	b.n	8000b4a <poll_buttons+0x26>
    switch (current_menu_item) {
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <poll_buttons+0x158>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d047      	beq.n	8000c54 <poll_buttons+0x130>
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d02f      	beq.n	8000c28 <poll_buttons+0x104>
    menu_update_display();
 8000bc8:	f7ff ff4c 	bl	8000a64 <menu_update_display>
        HAL_Delay(100);
 8000bcc:	2064      	movs	r0, #100	@ 0x64
 8000bce:	f001 f9ab 	bl	8001f28 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000bd2:	4c29      	ldr	r4, [pc, #164]	@ (8000c78 <poll_buttons+0x154>)
 8000bd4:	e001      	b.n	8000bda <poll_buttons+0xb6>
            HAL_Delay(100); // Debounce delay
 8000bd6:	f001 f9a7 	bl	8001f28 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f001 fcc3 	bl	8002568 <HAL_GPIO_ReadPin>
 8000be2:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000be4:	2064      	movs	r0, #100	@ 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f5      	beq.n	8000bd6 <poll_buttons+0xb2>
 8000bea:	e7a8      	b.n	8000b3e <poll_buttons+0x1a>
    switch (current_menu_item) {
 8000bec:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <poll_buttons+0x158>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d01c      	beq.n	8000c2e <poll_buttons+0x10a>
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d014      	beq.n	8000c22 <poll_buttons+0xfe>
    menu_update_display();
 8000bf8:	f7ff ff34 	bl	8000a64 <menu_update_display>
        HAL_Delay(100);
 8000bfc:	2064      	movs	r0, #100	@ 0x64
 8000bfe:	f001 f993 	bl	8001f28 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000c02:	4c1d      	ldr	r4, [pc, #116]	@ (8000c78 <poll_buttons+0x154>)
 8000c04:	e001      	b.n	8000c0a <poll_buttons+0xe6>
            HAL_Delay(100); // Debounce delay
 8000c06:	f001 f98f 	bl	8001f28 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000c0a:	2180      	movs	r1, #128	@ 0x80
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f001 fcab 	bl	8002568 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000c14:	2064      	movs	r0, #100	@ 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f5      	beq.n	8000c06 <poll_buttons+0xe2>
 8000c1a:	e78a      	b.n	8000b32 <poll_buttons+0xe>
        current_menu_item--;
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	e7b9      	b.n	8000b96 <poll_buttons+0x72>
            tranposition__increment_octave();
 8000c22:	f000 fecb 	bl	80019bc <tranposition__increment_octave>
            break;
 8000c26:	e7e7      	b.n	8000bf8 <poll_buttons+0xd4>
            tranposition__decrement_octave();
 8000c28:	f000 feee 	bl	8001a08 <tranposition__decrement_octave>
            break;
 8000c2c:	e7cc      	b.n	8000bc8 <poll_buttons+0xa4>
        	sustain_flag = 1;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <poll_buttons+0x15c>)
        	snprintf(buffer, sizeof(buffer), "Sustain: ON 10s duration ");
 8000c30:	4d14      	ldr	r5, [pc, #80]	@ (8000c84 <poll_buttons+0x160>)
        	sustain_flag = 1;
 8000c32:	6018      	str	r0, [r3, #0]
        	snprintf(buffer, sizeof(buffer), "Sustain: ON 10s duration ");
 8000c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c36:	4c14      	ldr	r4, [pc, #80]	@ (8000c88 <poll_buttons+0x164>)
 8000c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3e:	c403      	stmia	r4!, {r0, r1}
        	lcd_set_cursor(0, 0);
 8000c40:	2100      	movs	r1, #0
 8000c42:	4608      	mov	r0, r1
        	snprintf(buffer, sizeof(buffer), "Sustain: ON 10s duration ");
 8000c44:	8022      	strh	r2, [r4, #0]
        	lcd_set_cursor(0, 0);
 8000c46:	f000 fa11 	bl	800106c <lcd_set_cursor>
        	lcd_write_string(buffer);
 8000c4a:	f1a4 0018 	sub.w	r0, r4, #24
 8000c4e:	f000 f9b1 	bl	8000fb4 <lcd_write_string>
            break;
 8000c52:	e7d1      	b.n	8000bf8 <poll_buttons+0xd4>
        	snprintf(buffer, sizeof(buffer), "Sustain: OFF ");
 8000c54:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <poll_buttons+0x168>)
 8000c56:	4c0c      	ldr	r4, [pc, #48]	@ (8000c88 <poll_buttons+0x164>)
 8000c58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5a:	c407      	stmia	r4!, {r0, r1, r2}
        	sustain_flag = 0;
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	4a08      	ldr	r2, [pc, #32]	@ (8000c80 <poll_buttons+0x15c>)
        	snprintf(buffer, sizeof(buffer), "Sustain: OFF ");
 8000c60:	8023      	strh	r3, [r4, #0]
        	lcd_set_cursor(0, 0);
 8000c62:	4628      	mov	r0, r5
 8000c64:	4629      	mov	r1, r5
        	sustain_flag = 0;
 8000c66:	6015      	str	r5, [r2, #0]
        	lcd_set_cursor(0, 0);
 8000c68:	f000 fa00 	bl	800106c <lcd_set_cursor>
        	lcd_write_string(buffer);
 8000c6c:	f1a4 000c 	sub.w	r0, r4, #12
 8000c70:	f000 f9a0 	bl	8000fb4 <lcd_write_string>
            break;
 8000c74:	e7a8      	b.n	8000bc8 <poll_buttons+0xa4>
 8000c76:	bf00      	nop
 8000c78:	48000400 	.word	0x48000400
 8000c7c:	200003f8 	.word	0x200003f8
 8000c80:	200003d4 	.word	0x200003d4
 8000c84:	08004a10 	.word	0x08004a10
 8000c88:	200003d8 	.word	0x200003d8
 8000c8c:	08004a2c 	.word	0x08004a2c

08000c90 <lcd_init>:
    lcd_write_nibble(upper_nibble, 1);
    lcd_write_nibble(lower_nibble, 1);
}

void lcd_init()
{
 8000c90:	b570      	push	{r4, r5, r6, lr}
    data |= backlight_state << BL_BIT;
 8000c92:	4ec6      	ldr	r6, [pc, #792]	@ (8000fac <lcd_init+0x31c>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000c94:	4cc6      	ldr	r4, [pc, #792]	@ (8000fb0 <lcd_init+0x320>)
{
 8000c96:	b084      	sub	sp, #16
    HAL_Delay(50);
 8000c98:	2032      	movs	r0, #50	@ 0x32
 8000c9a:	f001 f945 	bl	8001f28 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000c9e:	7833      	ldrb	r3, [r6, #0]
 8000ca0:	00db      	lsls	r3, r3, #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ca2:	2564      	movs	r5, #100	@ 0x64
    data |= 1 << EN_BIT;
 8000ca4:	f043 0334 	orr.w	r3, r3, #52	@ 0x34
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ca8:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000cac:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cb0:	214e      	movs	r1, #78	@ 0x4e
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	9500      	str	r5, [sp, #0]
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f001 fd70 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f001 f933 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000cc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cc6:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000cc8:	f023 0304 	bic.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ccc:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000cd0:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cd4:	214e      	movs	r1, #78	@ 0x4e
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f001 fd5f 	bl	800279c <HAL_I2C_Master_Transmit>
    lcd_write_nibble(0x03, 0);
    HAL_Delay(5);
 8000cde:	2005      	movs	r0, #5
 8000ce0:	f001 f922 	bl	8001f28 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000ce4:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ce6:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000ce8:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000cea:	f043 0334 	orr.w	r3, r3, #52	@ 0x34
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cee:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000cf2:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cf6:	214e      	movs	r1, #78	@ 0x4e
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f001 fd4e 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f001 f911 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000d06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d0a:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000d0c:	f023 0304 	bic.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d10:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000d14:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d18:	214e      	movs	r1, #78	@ 0x4e
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f001 fd3d 	bl	800279c <HAL_I2C_Master_Transmit>
    lcd_write_nibble(0x03, 0);
    HAL_Delay(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f001 f900 	bl	8001f28 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000d28:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d2a:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000d2c:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000d2e:	f043 0334 	orr.w	r3, r3, #52	@ 0x34
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d32:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000d36:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d3a:	214e      	movs	r1, #78	@ 0x4e
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f001 fd2c 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f001 f8ef 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000d4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d4e:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000d50:	f023 0304 	bic.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d54:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000d58:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d5c:	214e      	movs	r1, #78	@ 0x4e
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4620      	mov	r0, r4
 8000d62:	f001 fd1b 	bl	800279c <HAL_I2C_Master_Transmit>
    lcd_write_nibble(0x03, 0);
    HAL_Delay(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f001 f8de 	bl	8001f28 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000d6c:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d6e:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000d70:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000d72:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d76:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000d7a:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d7e:	214e      	movs	r1, #78	@ 0x4e
 8000d80:	2301      	movs	r3, #1
 8000d82:	4620      	mov	r0, r4
 8000d84:	f001 fd0a 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f001 f8cd 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000d8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d92:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000d94:	f023 0304 	bic.w	r3, r3, #4
 8000d98:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d9c:	f10d 020f 	add.w	r2, sp, #15
 8000da0:	2301      	movs	r3, #1
 8000da2:	214e      	movs	r1, #78	@ 0x4e
 8000da4:	4620      	mov	r0, r4
 8000da6:	f001 fcf9 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000daa:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dac:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000dae:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000db0:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000db4:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000db8:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dbc:	214e      	movs	r1, #78	@ 0x4e
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f001 fceb 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f001 f8ae 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000dcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dd0:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000dd2:	f023 0304 	bic.w	r3, r3, #4
 8000dd6:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dda:	f10d 020f 	add.w	r2, sp, #15
 8000dde:	2301      	movs	r3, #1
 8000de0:	214e      	movs	r1, #78	@ 0x4e
 8000de2:	4620      	mov	r0, r4
 8000de4:	f001 fcda 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000de8:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dea:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000dec:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000dee:	f063 037b 	orn	r3, r3, #123	@ 0x7b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000df2:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000df6:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dfa:	214e      	movs	r1, #78	@ 0x4e
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f001 fccc 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f001 f88f 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000e0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e0e:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e18:	f10d 020f 	add.w	r2, sp, #15
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	214e      	movs	r1, #78	@ 0x4e
 8000e20:	4620      	mov	r0, r4
 8000e22:	f001 fcbb 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000e26:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e28:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000e2a:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e30:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000e34:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e38:	214e      	movs	r1, #78	@ 0x4e
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f001 fcad 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f001 f870 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000e48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e4c:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000e4e:	f023 0304 	bic.w	r3, r3, #4
 8000e52:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e56:	f10d 020f 	add.w	r2, sp, #15
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	214e      	movs	r1, #78	@ 0x4e
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f001 fc9c 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000e64:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e66:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000e68:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000e6a:	f063 033b 	orn	r3, r3, #59	@ 0x3b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e6e:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000e72:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e76:	214e      	movs	r1, #78	@ 0x4e
 8000e78:	2301      	movs	r3, #1
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f001 fc8e 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f001 f851 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000e86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e8a:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000e8c:	f023 0304 	bic.w	r3, r3, #4
 8000e90:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e94:	f10d 020f 	add.w	r2, sp, #15
 8000e98:	2301      	movs	r3, #1
 8000e9a:	214e      	movs	r1, #78	@ 0x4e
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f001 fc7d 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000ea2:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ea4:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000ea6:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000eac:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000eb0:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000eb4:	214e      	movs	r1, #78	@ 0x4e
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	4620      	mov	r0, r4
 8000eba:	f001 fc6f 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f001 f832 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000ec4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ec8:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000eca:	f023 0304 	bic.w	r3, r3, #4
 8000ece:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ed2:	f10d 020f 	add.w	r2, sp, #15
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	214e      	movs	r1, #78	@ 0x4e
 8000eda:	4620      	mov	r0, r4
 8000edc:	f001 fc5e 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000ee0:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ee2:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000ee4:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000ee6:	432b      	orrs	r3, r5
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ee8:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000eec:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ef0:	214e      	movs	r1, #78	@ 0x4e
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f001 fc51 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f001 f814 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000f00:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f04:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000f06:	f023 0304 	bic.w	r3, r3, #4
 8000f0a:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f0e:	f10d 020f 	add.w	r2, sp, #15
 8000f12:	2301      	movs	r3, #1
 8000f14:	214e      	movs	r1, #78	@ 0x4e
 8000f16:	4620      	mov	r0, r4
 8000f18:	f001 fc40 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000f1c:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f1e:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000f20:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000f22:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f26:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000f2a:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f2e:	214e      	movs	r1, #78	@ 0x4e
 8000f30:	2301      	movs	r3, #1
 8000f32:	4620      	mov	r0, r4
 8000f34:	f001 fc32 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f000 fff5 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000f3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f42:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000f44:	f023 0304 	bic.w	r3, r3, #4
 8000f48:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f4c:	f10d 020f 	add.w	r2, sp, #15
 8000f50:	2301      	movs	r3, #1
 8000f52:	214e      	movs	r1, #78	@ 0x4e
 8000f54:	4620      	mov	r0, r4
 8000f56:	f001 fc21 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000f5a:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f5c:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000f5e:	00d2      	lsls	r2, r2, #3
    data |= 1 << EN_BIT;
 8000f60:	f042 0214 	orr.w	r2, r2, #20
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f64:	2301      	movs	r3, #1
    data |= 1 << EN_BIT;
 8000f66:	f88d 200f 	strb.w	r2, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f6a:	214e      	movs	r1, #78	@ 0x4e
 8000f6c:	f10d 020f 	add.w	r2, sp, #15
 8000f70:	4620      	mov	r0, r4
 8000f72:	f001 fc13 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 ffd6 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000f7c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f80:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000f82:	f021 0104 	bic.w	r1, r1, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f86:	2301      	movs	r3, #1
 8000f88:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000f8c:	f88d 100f 	strb.w	r1, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f90:	4620      	mov	r0, r4
 8000f92:	214e      	movs	r1, #78	@ 0x4e
 8000f94:	f001 fc02 	bl	800279c <HAL_I2C_Master_Transmit>
        HAL_Delay(2);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f000 ffc5 	bl	8001f28 <HAL_Delay>
    lcd_write_nibble(0x02, 0);
    lcd_send_cmd(0x28);
    lcd_send_cmd(0x0C);
    lcd_send_cmd(0x06);
    lcd_send_cmd(0x01);
    HAL_Delay(2);
 8000f9e:	2002      	movs	r0, #2
}
 8000fa0:	b004      	add	sp, #16
 8000fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(2);
 8000fa6:	f000 bfbf 	b.w	8001f28 <HAL_Delay>
 8000faa:	bf00      	nop
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	2000036c 	.word	0x2000036c

08000fb4 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8000fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    while (*str)
 8000fb8:	7804      	ldrb	r4, [r0, #0]
{
 8000fba:	b084      	sub	sp, #16
    while (*str)
 8000fbc:	2c00      	cmp	r4, #0
 8000fbe:	d04d      	beq.n	800105c <lcd_write_string+0xa8>
 8000fc0:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8001068 <lcd_write_string+0xb4>
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fc4:	4e27      	ldr	r6, [pc, #156]	@ (8001064 <lcd_write_string+0xb0>)
 8000fc6:	4607      	mov	r7, r0
    data |= backlight_state << BL_BIT;
 8000fc8:	f898 3000 	ldrb.w	r3, [r8]
    uint8_t data = nibble << D4_BIT;
 8000fcc:	f004 0cf0 	and.w	ip, r4, #240	@ 0xf0
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fd0:	2564      	movs	r5, #100	@ 0x64
    data |= 1 << EN_BIT;
 8000fd2:	ea4c 0cc3 	orr.w	ip, ip, r3, lsl #3
 8000fd6:	f04c 0c05 	orr.w	ip, ip, #5
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f10d 020f 	add.w	r2, sp, #15
 8000fe0:	214e      	movs	r1, #78	@ 0x4e
 8000fe2:	9500      	str	r5, [sp, #0]
 8000fe4:	4630      	mov	r0, r6
    data |= 1 << EN_BIT;
 8000fe6:	f88d c00f 	strb.w	ip, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fea:	f001 fbd7 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 ff9a 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000ff4:	f89d c00f 	ldrb.w	ip, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ff8:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000ffa:	f02c 0c04 	bic.w	ip, ip, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ffe:	2301      	movs	r3, #1
 8001000:	f10d 020f 	add.w	r2, sp, #15
 8001004:	214e      	movs	r1, #78	@ 0x4e
 8001006:	4630      	mov	r0, r6
    data &= ~(1 << EN_BIT);
 8001008:	f88d c00f 	strb.w	ip, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800100c:	f001 fbc6 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8001010:	f898 3000 	ldrb.w	r3, [r8]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001014:	9500      	str	r5, [sp, #0]
    data |= 1 << EN_BIT;
 8001016:	0124      	lsls	r4, r4, #4
 8001018:	ea44 04c3 	orr.w	r4, r4, r3, lsl #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800101c:	f10d 020f 	add.w	r2, sp, #15
 8001020:	2301      	movs	r3, #1
 8001022:	214e      	movs	r1, #78	@ 0x4e
    data |= 1 << EN_BIT;
 8001024:	f044 0405 	orr.w	r4, r4, #5
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001028:	4630      	mov	r0, r6
    data |= 1 << EN_BIT;
 800102a:	f88d 400f 	strb.w	r4, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800102e:	f001 fbb5 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f000 ff78 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8001038:	f89d 400f 	ldrb.w	r4, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800103c:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 800103e:	f024 0404 	bic.w	r4, r4, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001042:	2301      	movs	r3, #1
 8001044:	f10d 020f 	add.w	r2, sp, #15
 8001048:	214e      	movs	r1, #78	@ 0x4e
 800104a:	4630      	mov	r0, r6
    data &= ~(1 << EN_BIT);
 800104c:	f88d 400f 	strb.w	r4, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001050:	f001 fba4 	bl	800279c <HAL_I2C_Master_Transmit>
    while (*str)
 8001054:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8001058:	2c00      	cmp	r4, #0
 800105a:	d1b5      	bne.n	8000fc8 <lcd_write_string+0x14>
    {
        lcd_send_data(*str++);
    }
}
 800105c:	b004      	add	sp, #16
 800105e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001062:	bf00      	nop
 8001064:	2000036c 	.word	0x2000036c
 8001068:	20000000 	.word	0x20000000

0800106c <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800106c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t address;
    switch (row)
 800106e:	f1a0 0001 	sub.w	r0, r0, #1
    data |= backlight_state << BL_BIT;
 8001072:	4e27      	ldr	r6, [pc, #156]	@ (8001110 <lcd_set_cursor+0xa4>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001074:	4d27      	ldr	r5, [pc, #156]	@ (8001114 <lcd_set_cursor+0xa8>)
    data |= backlight_state << BL_BIT;
 8001076:	7832      	ldrb	r2, [r6, #0]
    switch (row)
 8001078:	fab0 f080 	clz	r0, r0
 800107c:	0940      	lsrs	r0, r0, #5
            address = 0x40;
            break;
        default:
            address = 0x00;
    }
    address += column;
 800107e:	eb01 1180 	add.w	r1, r1, r0, lsl #6
    data |= 1 << EN_BIT;
 8001082:	f001 03f0 	and.w	r3, r1, #240	@ 0xf0
{
 8001086:	b085      	sub	sp, #20
    data |= 1 << EN_BIT;
 8001088:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800108c:	2764      	movs	r7, #100	@ 0x64
    data |= 1 << EN_BIT;
 800108e:	f063 037b 	orn	r3, r3, #123	@ 0x7b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001092:	f10d 020f 	add.w	r2, sp, #15
    address += column;
 8001096:	b2cc      	uxtb	r4, r1
    data |= 1 << EN_BIT;
 8001098:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800109c:	214e      	movs	r1, #78	@ 0x4e
 800109e:	2301      	movs	r3, #1
 80010a0:	9700      	str	r7, [sp, #0]
 80010a2:	4628      	mov	r0, r5
 80010a4:	f001 fb7a 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 ff3d 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 80010ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010b2:	9700      	str	r7, [sp, #0]
    data &= ~(1 << EN_BIT);
 80010b4:	f023 0304 	bic.w	r3, r3, #4
 80010b8:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010bc:	f10d 020f 	add.w	r2, sp, #15
 80010c0:	2301      	movs	r3, #1
 80010c2:	214e      	movs	r1, #78	@ 0x4e
 80010c4:	4628      	mov	r0, r5
 80010c6:	f001 fb69 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 80010ca:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010cc:	9700      	str	r7, [sp, #0]
    data |= backlight_state << BL_BIT;
 80010ce:	0121      	lsls	r1, r4, #4
 80010d0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
    data |= 1 << EN_BIT;
 80010d4:	f041 0104 	orr.w	r1, r1, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010d8:	f10d 020f 	add.w	r2, sp, #15
 80010dc:	2301      	movs	r3, #1
    data |= 1 << EN_BIT;
 80010de:	f88d 100f 	strb.w	r1, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010e2:	4628      	mov	r0, r5
 80010e4:	214e      	movs	r1, #78	@ 0x4e
 80010e6:	f001 fb59 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 ff1c 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 80010f0:	f89d 400f 	ldrb.w	r4, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010f4:	9700      	str	r7, [sp, #0]
    data &= ~(1 << EN_BIT);
 80010f6:	f024 0404 	bic.w	r4, r4, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010fa:	2301      	movs	r3, #1
 80010fc:	f10d 020f 	add.w	r2, sp, #15
 8001100:	214e      	movs	r1, #78	@ 0x4e
 8001102:	4628      	mov	r0, r5
    data &= ~(1 << EN_BIT);
 8001104:	f88d 400f 	strb.w	r4, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001108:	f001 fb48 	bl	800279c <HAL_I2C_Master_Transmit>
    lcd_send_cmd(0x80 | address);
}
 800110c:	b005      	add	sp, #20
 800110e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	2000036c 	.word	0x2000036c

08001118 <lcd_clear>:

void lcd_clear(void)
{
 8001118:	b570      	push	{r4, r5, r6, lr}
    data |= backlight_state << BL_BIT;
 800111a:	4e24      	ldr	r6, [pc, #144]	@ (80011ac <lcd_clear+0x94>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800111c:	4c24      	ldr	r4, [pc, #144]	@ (80011b0 <lcd_clear+0x98>)
    data |= backlight_state << BL_BIT;
 800111e:	7833      	ldrb	r3, [r6, #0]
{
 8001120:	b084      	sub	sp, #16
    data |= backlight_state << BL_BIT;
 8001122:	00db      	lsls	r3, r3, #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001124:	2564      	movs	r5, #100	@ 0x64
    data |= 1 << EN_BIT;
 8001126:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800112a:	f10d 020f 	add.w	r2, sp, #15
 800112e:	9500      	str	r5, [sp, #0]
    data |= 1 << EN_BIT;
 8001130:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001134:	214e      	movs	r1, #78	@ 0x4e
 8001136:	2301      	movs	r3, #1
 8001138:	4620      	mov	r0, r4
 800113a:	f001 fb2f 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fef2 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8001144:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001148:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 800114a:	f023 0304 	bic.w	r3, r3, #4
 800114e:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001152:	f10d 020f 	add.w	r2, sp, #15
 8001156:	2301      	movs	r3, #1
 8001158:	214e      	movs	r1, #78	@ 0x4e
 800115a:	4620      	mov	r0, r4
 800115c:	f001 fb1e 	bl	800279c <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8001160:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001162:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8001164:	00d2      	lsls	r2, r2, #3
    data |= 1 << EN_BIT;
 8001166:	f042 0214 	orr.w	r2, r2, #20
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800116a:	2301      	movs	r3, #1
    data |= 1 << EN_BIT;
 800116c:	f88d 200f 	strb.w	r2, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001170:	214e      	movs	r1, #78	@ 0x4e
 8001172:	f10d 020f 	add.w	r2, sp, #15
 8001176:	4620      	mov	r0, r4
 8001178:	f001 fb10 	bl	800279c <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f000 fed3 	bl	8001f28 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8001182:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001186:	9500      	str	r5, [sp, #0]
 8001188:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 800118c:	f023 0504 	bic.w	r5, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001190:	214e      	movs	r1, #78	@ 0x4e
 8001192:	2301      	movs	r3, #1
 8001194:	4620      	mov	r0, r4
    data &= ~(1 << EN_BIT);
 8001196:	f88d 500f 	strb.w	r5, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800119a:	f001 faff 	bl	800279c <HAL_I2C_Master_Transmit>
        HAL_Delay(2);
 800119e:	2002      	movs	r0, #2
    lcd_send_cmd(0x01);
}
 80011a0:	b004      	add	sp, #16
 80011a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_Delay(2);
 80011a6:	f000 bebf 	b.w	8001f28 <HAL_Delay>
 80011aa:	bf00      	nop
 80011ac:	20000000 	.word	0x20000000
 80011b0:	2000036c 	.word	0x2000036c

080011b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_MspInit+0x2c>)
 80011b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011b8:	f042 0201 	orr.w	r2, r2, #1
 80011bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80011be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 80011c0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	f002 0201 	and.w	r2, r2, #1
 80011c6:	9200      	str	r2, [sp, #0]
 80011c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80011cc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80011d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80011d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011dc:	b002      	add	sp, #8
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011e4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_DAC_MspInit+0x6c>)
 80011e8:	6802      	ldr	r2, [r0, #0]
{
 80011ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	2400      	movs	r4, #0
  if(hdac->Instance==DAC1)
 80011ee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80011f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80011f8:	9406      	str	r4, [sp, #24]
  if(hdac->Instance==DAC1)
 80011fa:	d001      	beq.n	8001200 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80011fc:	b008      	add	sp, #32
 80011fe:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001200:	f503 33ce 	add.w	r3, r3, #105472	@ 0x19c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001206:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001208:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800120c:	659a      	str	r2, [r3, #88]	@ 0x58
 800120e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001210:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001214:	9200      	str	r2, [sp, #0]
 8001216:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001228:	2230      	movs	r2, #48	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800122e:	2303      	movs	r3, #3
 8001230:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f001 f873 	bl	8002320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800123a:	4622      	mov	r2, r4
 800123c:	4621      	mov	r1, r4
 800123e:	2036      	movs	r0, #54	@ 0x36
 8001240:	f000 fe96 	bl	8001f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001244:	2036      	movs	r0, #54	@ 0x36
 8001246:	f000 fecf 	bl	8001fe8 <HAL_NVIC_EnableIRQ>
}
 800124a:	b008      	add	sp, #32
 800124c:	bd10      	pop	{r4, pc}
 800124e:	bf00      	nop
 8001250:	40007400 	.word	0x40007400

08001254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001254:	b510      	push	{r4, lr}
 8001256:	4604      	mov	r4, r0
 8001258:	b0aa      	sub	sp, #168	@ 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	2288      	movs	r2, #136	@ 0x88
 800125e:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001264:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001268:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126a:	f003 fb65 	bl	8004938 <memset>
  if(hi2c->Instance==I2C1)
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <HAL_I2C_MspInit+0x80>)
 8001270:	6822      	ldr	r2, [r4, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d001      	beq.n	800127a <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001276:	b02a      	add	sp, #168	@ 0xa8
 8001278:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800127a:	2340      	movs	r3, #64	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800127e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001280:	f002 fa1c 	bl	80036bc <HAL_RCCEx_PeriphCLKConfig>
 8001284:	bb18      	cbnz	r0, 80012ce <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	4c14      	ldr	r4, [pc, #80]	@ (80012d8 <HAL_I2C_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	4814      	ldr	r0, [pc, #80]	@ (80012dc <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001292:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800129a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800129e:	2312      	movs	r3, #18
 80012a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012a4:	2200      	movs	r2, #0
 80012a6:	2303      	movs	r3, #3
 80012a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ae:	2304      	movs	r3, #4
 80012b0:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f001 f834 	bl	8002320 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012be:	65a3      	str	r3, [r4, #88]	@ 0x58
 80012c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	9b01      	ldr	r3, [sp, #4]
}
 80012ca:	b02a      	add	sp, #168	@ 0xa8
 80012cc:	bd10      	pop	{r4, pc}
      Error_Handler();
 80012ce:	f7ff fb63 	bl	8000998 <Error_Handler>
 80012d2:	e7d8      	b.n	8001286 <HAL_I2C_MspInit+0x32>
 80012d4:	40005400 	.word	0x40005400
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000400 	.word	0x48000400

080012e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e0:	b500      	push	{lr}
  if(htim_base->Instance==TIM15)
 80012e2:	4a1a      	ldr	r2, [pc, #104]	@ (800134c <HAL_TIM_Base_MspInit+0x6c>)
 80012e4:	6803      	ldr	r3, [r0, #0]
 80012e6:	4293      	cmp	r3, r2
{
 80012e8:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM15)
 80012ea:	d005      	beq.n	80012f8 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 80012ec:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <HAL_TIM_Base_MspInit+0x70>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d017      	beq.n	8001322 <HAL_TIM_Base_MspInit+0x42>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80012f2:	b003      	add	sp, #12
 80012f4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM15_CLK_ENABLE();
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <HAL_TIM_Base_MspInit+0x74>)
 80012fa:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80012fc:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8001300:	6619      	str	r1, [r3, #96]	@ 0x60
 8001302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800130c:	2018      	movs	r0, #24
 800130e:	4611      	mov	r1, r2
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001310:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001312:	f000 fe2d 	bl	8001f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001316:	2018      	movs	r0, #24
}
 8001318:	b003      	add	sp, #12
 800131a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800131e:	f000 be63 	b.w	8001fe8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <HAL_TIM_Base_MspInit+0x74>)
 8001324:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8001326:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800132a:	6619      	str	r1, [r3, #96]	@ 0x60
 800132c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001334:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001336:	2019      	movs	r0, #25
 8001338:	4611      	mov	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 800133a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800133c:	f000 fe18 	bl	8001f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001340:	2019      	movs	r0, #25
}
 8001342:	b003      	add	sp, #12
 8001344:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001348:	f000 be4e 	b.w	8001fe8 <HAL_NVIC_EnableIRQ>
 800134c:	40014000 	.word	0x40014000
 8001350:	40014400 	.word	0x40014400
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b510      	push	{r4, lr}
 800135a:	4604      	mov	r4, r0
 800135c:	b0aa      	sub	sp, #168	@ 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001360:	2288      	movs	r2, #136	@ 0x88
 8001362:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001368:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800136c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136e:	f003 fae3 	bl	8004938 <memset>
  if(huart->Instance==USART2)
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <HAL_UART_MspInit+0xa0>)
 8001374:	6822      	ldr	r2, [r4, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d001      	beq.n	800137e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800137a:	b02a      	add	sp, #168	@ 0xa8
 800137c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800137e:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001380:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001382:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001384:	f002 f99a 	bl	80036bc <HAL_RCCEx_PeriphCLKConfig>
 8001388:	bb58      	cbnz	r0, 80013e2 <HAL_UART_MspInit+0x8a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800138a:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <HAL_UART_MspInit+0xa4>)
 800138c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800138e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001392:	659a      	str	r2, [r3, #88]	@ 0x58
 8001394:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001396:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800139a:	9200      	str	r2, [sp, #0]
 800139c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013a0:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 80013e8 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80013b0:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 80013f0 <HAL_UART_MspInit+0x98>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013bc:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013c2:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c6:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f000 ffa9 	bl	8002320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	4611      	mov	r1, r2
 80013d2:	2026      	movs	r0, #38	@ 0x26
 80013d4:	f000 fdcc 	bl	8001f70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013d8:	2026      	movs	r0, #38	@ 0x26
 80013da:	f000 fe05 	bl	8001fe8 <HAL_NVIC_EnableIRQ>
}
 80013de:	b02a      	add	sp, #168	@ 0xa8
 80013e0:	bd10      	pop	{r4, pc}
      Error_Handler();
 80013e2:	f7ff fad9 	bl	8000998 <Error_Handler>
 80013e6:	e7d0      	b.n	800138a <HAL_UART_MspInit+0x32>
 80013e8:	0000000c 	.word	0x0000000c
 80013ec:	00000002 	.word	0x00000002
 80013f0:	00000000 	.word	0x00000000
 80013f4:	00000003 	.word	0x00000003
 80013f8:	40004400 	.word	0x40004400
 80013fc:	40021000 	.word	0x40021000

08001400 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler>
 8001402:	bf00      	nop

08001404 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <HardFault_Handler>
 8001406:	bf00      	nop

08001408 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler>
 800140a:	bf00      	nop

0800140c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <BusFault_Handler>
 800140e:	bf00      	nop

08001410 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler>
 8001412:	bf00      	nop

08001414 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop

0800141c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop

08001420 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 bd70 	b.w	8001f04 <HAL_IncTick>

08001424 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_1_Pin);
 8001424:	2001      	movs	r0, #1
 8001426:	f001 b8a5 	b.w	8002574 <HAL_GPIO_EXTI_IRQHandler>
 800142a:	bf00      	nop

0800142c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_2_Pin);
 800142c:	2002      	movs	r0, #2
 800142e:	f001 b8a1 	b.w	8002574 <HAL_GPIO_EXTI_IRQHandler>
 8001432:	bf00      	nop

08001434 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_3_Pin);
 8001434:	2004      	movs	r0, #4
 8001436:	f001 b89d 	b.w	8002574 <HAL_GPIO_EXTI_IRQHandler>
 800143a:	bf00      	nop

0800143c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_4_Pin);
 800143c:	2008      	movs	r0, #8
 800143e:	f001 b899 	b.w	8002574 <HAL_GPIO_EXTI_IRQHandler>
 8001442:	bf00      	nop

08001444 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_5_Pin);
 8001444:	2010      	movs	r0, #16
 8001446:	f001 b895 	b.w	8002574 <HAL_GPIO_EXTI_IRQHandler>
 800144a:	bf00      	nop

0800144c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800144c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_6_Pin);
 800144e:	2020      	movs	r0, #32
 8001450:	f001 f890 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_7_Pin);
 8001454:	2040      	movs	r0, #64	@ 0x40
 8001456:	f001 f88d 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_8_Pin);
 800145a:	2080      	movs	r0, #128	@ 0x80
 800145c:	f001 f88a 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_9_Pin);
 8001460:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001464:	f001 f886 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_10_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(NOTE_10_Pin);
 800146c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001470:	f001 b880 	b.w	8002574 <HAL_GPIO_EXTI_IRQHandler>

08001474 <TIM1_BRK_TIM15_IRQHandler>:
void TIM1_BRK_TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001474:	4801      	ldr	r0, [pc, #4]	@ (800147c <TIM1_BRK_TIM15_IRQHandler+0x8>)
 8001476:	f002 bcc5 	b.w	8003e04 <HAL_TIM_IRQHandler>
 800147a:	bf00      	nop
 800147c:	20000320 	.word	0x20000320

08001480 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001480:	4801      	ldr	r0, [pc, #4]	@ (8001488 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001482:	f002 bcbf 	b.w	8003e04 <HAL_TIM_IRQHandler>
 8001486:	bf00      	nop
 8001488:	200002d0 	.word	0x200002d0

0800148c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800148c:	4801      	ldr	r0, [pc, #4]	@ (8001494 <USART2_IRQHandler+0x8>)
 800148e:	f002 bdcb 	b.w	8004028 <HAL_UART_IRQHandler>
 8001492:	bf00      	nop
 8001494:	20000244 	.word	0x20000244

08001498 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001498:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_11_Pin);
 800149a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800149e:	f001 f869 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_12_Pin);
 80014a2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80014a6:	f001 f865 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014ae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014b2:	f001 b85f 	b.w	8002574 <HAL_GPIO_EXTI_IRQHandler>
 80014b6:	bf00      	nop

080014b8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80014b8:	4801      	ldr	r0, [pc, #4]	@ (80014c0 <TIM6_DAC_IRQHandler+0x8>)
 80014ba:	f000 be1b 	b.w	80020f4 <HAL_DAC_IRQHandler>
 80014be:	bf00      	nop
 80014c0:	200003c0 	.word	0x200003c0

080014c4 <update_decay_values>:
int decay_index_A = 0;
int decay_index_As = 0;
int decay_index_B = 0;

void update_decay_values()
{
 80014c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// sustain_flag is the on/off switch. up button sets it true(on) and down button sets it false(off)
	if(sustain_flag)
 80014c8:	4b97      	ldr	r3, [pc, #604]	@ (8001728 <update_decay_values+0x264>)
	if(decay_index_As > 2500-1)
	{
		sustain_As = 0;
	}

	if(decay_index_B > 2500-1)
 80014ca:	f8df c2ec 	ldr.w	ip, [pc, #748]	@ 80017b8 <update_decay_values+0x2f4>
	if(sustain_flag)
 80014ce:	681b      	ldr	r3, [r3, #0]
	if(decay_index_B > 2500-1)
 80014d0:	f8dc 2000 	ldr.w	r2, [ip]
{
 80014d4:	b083      	sub	sp, #12
	if(decay_index_B > 2500-1)
 80014d6:	9201      	str	r2, [sp, #4]
	if(sustain_flag)
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d176      	bne.n	80015ca <update_decay_values+0x106>
 80014dc:	4f93      	ldr	r7, [pc, #588]	@ (800172c <update_decay_values+0x268>)
 80014de:	4b94      	ldr	r3, [pc, #592]	@ (8001730 <update_decay_values+0x26c>)
 80014e0:	4e94      	ldr	r6, [pc, #592]	@ (8001734 <update_decay_values+0x270>)
 80014e2:	4d95      	ldr	r5, [pc, #596]	@ (8001738 <update_decay_values+0x274>)
 80014e4:	4c95      	ldr	r4, [pc, #596]	@ (800173c <update_decay_values+0x278>)
 80014e6:	4896      	ldr	r0, [pc, #600]	@ (8001740 <update_decay_values+0x27c>)
 80014e8:	f8df e2d0 	ldr.w	lr, [pc, #720]	@ 80017bc <update_decay_values+0x2f8>
 80014ec:	f8df 82d0 	ldr.w	r8, [pc, #720]	@ 80017c0 <update_decay_values+0x2fc>
 80014f0:	f8df 92d0 	ldr.w	r9, [pc, #720]	@ 80017c4 <update_decay_values+0x300>
 80014f4:	4993      	ldr	r1, [pc, #588]	@ (8001744 <update_decay_values+0x280>)
	if(decay_index_C > 2500-1)
 80014f6:	f8d7 c000 	ldr.w	ip, [r7]
 80014fa:	f640 17c3 	movw	r7, #2499	@ 0x9c3
 80014fe:	45bc      	cmp	ip, r7
 8001500:	dd04      	ble.n	800150c <update_decay_values+0x48>
		sustain_C = 0;
 8001502:	4f91      	ldr	r7, [pc, #580]	@ (8001748 <update_decay_values+0x284>)
 8001504:	f04f 0c00 	mov.w	ip, #0
 8001508:	f8c7 c000 	str.w	ip, [r7]
	if(decay_index_Cs > 2500-1)
 800150c:	681f      	ldr	r7, [r3, #0]
 800150e:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8001512:	429f      	cmp	r7, r3
 8001514:	dd02      	ble.n	800151c <update_decay_values+0x58>
		sustain_Cs = 0;
 8001516:	4b8d      	ldr	r3, [pc, #564]	@ (800174c <update_decay_values+0x288>)
 8001518:	2700      	movs	r7, #0
 800151a:	601f      	str	r7, [r3, #0]
	if(decay_index_D > 2500-1)
 800151c:	6836      	ldr	r6, [r6, #0]
 800151e:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8001522:	429e      	cmp	r6, r3
 8001524:	dd02      	ble.n	800152c <update_decay_values+0x68>
		sustain_D = 0;
 8001526:	4b8a      	ldr	r3, [pc, #552]	@ (8001750 <update_decay_values+0x28c>)
 8001528:	2600      	movs	r6, #0
 800152a:	601e      	str	r6, [r3, #0]
	if(decay_index_Ds > 2500-1)
 800152c:	4b89      	ldr	r3, [pc, #548]	@ (8001754 <update_decay_values+0x290>)
 800152e:	681e      	ldr	r6, [r3, #0]
 8001530:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8001534:	429e      	cmp	r6, r3
 8001536:	dd02      	ble.n	800153e <update_decay_values+0x7a>
		sustain_Ds = 0;
 8001538:	4b87      	ldr	r3, [pc, #540]	@ (8001758 <update_decay_values+0x294>)
 800153a:	2600      	movs	r6, #0
 800153c:	601e      	str	r6, [r3, #0]
	if(decay_index_E > 2500-1)
 800153e:	682d      	ldr	r5, [r5, #0]
 8001540:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8001544:	429d      	cmp	r5, r3
 8001546:	dd02      	ble.n	800154e <update_decay_values+0x8a>
		sustain_E = 0;
 8001548:	4b84      	ldr	r3, [pc, #528]	@ (800175c <update_decay_values+0x298>)
 800154a:	2500      	movs	r5, #0
 800154c:	601d      	str	r5, [r3, #0]
	if(decay_index_F > 2500-1)
 800154e:	6824      	ldr	r4, [r4, #0]
 8001550:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8001554:	429c      	cmp	r4, r3
 8001556:	dd02      	ble.n	800155e <update_decay_values+0x9a>
		sustain_F = 0;
 8001558:	4b81      	ldr	r3, [pc, #516]	@ (8001760 <update_decay_values+0x29c>)
 800155a:	2400      	movs	r4, #0
 800155c:	601c      	str	r4, [r3, #0]
	if(decay_index_Fs > 2500-1)
 800155e:	6800      	ldr	r0, [r0, #0]
 8001560:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8001564:	4298      	cmp	r0, r3
 8001566:	dd02      	ble.n	800156e <update_decay_values+0xaa>
		sustain_Fs = 0;
 8001568:	4b7e      	ldr	r3, [pc, #504]	@ (8001764 <update_decay_values+0x2a0>)
 800156a:	2000      	movs	r0, #0
 800156c:	6018      	str	r0, [r3, #0]
	if(decay_index_G > 2500-1)
 800156e:	f8de 0000 	ldr.w	r0, [lr]
 8001572:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8001576:	4298      	cmp	r0, r3
 8001578:	dd02      	ble.n	8001580 <update_decay_values+0xbc>
		sustain_G = 0;
 800157a:	4b7b      	ldr	r3, [pc, #492]	@ (8001768 <update_decay_values+0x2a4>)
 800157c:	2000      	movs	r0, #0
 800157e:	6018      	str	r0, [r3, #0]
	if(decay_index_Gs > 2500-1)
 8001580:	f8d8 0000 	ldr.w	r0, [r8]
 8001584:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 8001588:	4298      	cmp	r0, r3
 800158a:	dd02      	ble.n	8001592 <update_decay_values+0xce>
		sustain_Gs = 0;
 800158c:	4b77      	ldr	r3, [pc, #476]	@ (800176c <update_decay_values+0x2a8>)
 800158e:	2000      	movs	r0, #0
 8001590:	6018      	str	r0, [r3, #0]
	if(decay_index_A > 2500-1)
 8001592:	f8d9 0000 	ldr.w	r0, [r9]
 8001596:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 800159a:	4298      	cmp	r0, r3
 800159c:	dd02      	ble.n	80015a4 <update_decay_values+0xe0>
		sustain_A = 0;
 800159e:	4b74      	ldr	r3, [pc, #464]	@ (8001770 <update_decay_values+0x2ac>)
 80015a0:	2000      	movs	r0, #0
 80015a2:	6018      	str	r0, [r3, #0]
	if(decay_index_As > 2500-1)
 80015a4:	6809      	ldr	r1, [r1, #0]
 80015a6:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80015aa:	4299      	cmp	r1, r3
 80015ac:	dd02      	ble.n	80015b4 <update_decay_values+0xf0>
		sustain_As = 0;
 80015ae:	4b71      	ldr	r3, [pc, #452]	@ (8001774 <update_decay_values+0x2b0>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	6019      	str	r1, [r3, #0]
	if(decay_index_B > 2500-1)
 80015b4:	9a01      	ldr	r2, [sp, #4]
 80015b6:	f640 13c3 	movw	r3, #2499	@ 0x9c3
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dd02      	ble.n	80015c4 <update_decay_values+0x100>
	{
		sustain_B = 0;
 80015be:	4b6e      	ldr	r3, [pc, #440]	@ (8001778 <update_decay_values+0x2b4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
	}



}
 80015c4:	b003      	add	sp, #12
 80015c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(sustain_C)
 80015ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001748 <update_decay_values+0x284>)
				decay_index_C++;
 80015cc:	4f57      	ldr	r7, [pc, #348]	@ (800172c <update_decay_values+0x268>)
		if(sustain_C)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b133      	cbz	r3, 80015e0 <update_decay_values+0x11c>
				decay_value_C = decay_table[NOTE_C];
 80015d2:	4b6a      	ldr	r3, [pc, #424]	@ (800177c <update_decay_values+0x2b8>)
 80015d4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015d8:	6019      	str	r1, [r3, #0]
				decay_index_C++;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	603b      	str	r3, [r7, #0]
		if(sustain_Cs)
 80015e0:	4b5a      	ldr	r3, [pc, #360]	@ (800174c <update_decay_values+0x288>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d173      	bne.n	80016d0 <update_decay_values+0x20c>
		if(sustain_D)
 80015e8:	4959      	ldr	r1, [pc, #356]	@ (8001750 <update_decay_values+0x28c>)
 80015ea:	4b51      	ldr	r3, [pc, #324]	@ (8001730 <update_decay_values+0x26c>)
 80015ec:	6809      	ldr	r1, [r1, #0]
 80015ee:	2900      	cmp	r1, #0
 80015f0:	d179      	bne.n	80016e6 <update_decay_values+0x222>
 80015f2:	4e50      	ldr	r6, [pc, #320]	@ (8001734 <update_decay_values+0x270>)
		if(sustain_Ds)
 80015f4:	4958      	ldr	r1, [pc, #352]	@ (8001758 <update_decay_values+0x294>)
 80015f6:	6809      	ldr	r1, [r1, #0]
 80015f8:	b129      	cbz	r1, 8001606 <update_decay_values+0x142>
			decay_index_Cs++;
 80015fa:	6819      	ldr	r1, [r3, #0]
			decay_value_Ds = decay_table[NOTE_Ds];
 80015fc:	4860      	ldr	r0, [pc, #384]	@ (8001780 <update_decay_values+0x2bc>)
			decay_index_Cs++;
 80015fe:	3101      	adds	r1, #1
 8001600:	6019      	str	r1, [r3, #0]
			decay_value_Ds = decay_table[NOTE_Ds];
 8001602:	4960      	ldr	r1, [pc, #384]	@ (8001784 <update_decay_values+0x2c0>)
 8001604:	6008      	str	r0, [r1, #0]
		if(sustain_E)
 8001606:	4955      	ldr	r1, [pc, #340]	@ (800175c <update_decay_values+0x298>)
			decay_index_E++;
 8001608:	4d4b      	ldr	r5, [pc, #300]	@ (8001738 <update_decay_values+0x274>)
		if(sustain_E)
 800160a:	6809      	ldr	r1, [r1, #0]
 800160c:	b129      	cbz	r1, 800161a <update_decay_values+0x156>
			decay_index_E++;
 800160e:	6829      	ldr	r1, [r5, #0]
			decay_value_E = decay_table[NOTE_E];
 8001610:	485d      	ldr	r0, [pc, #372]	@ (8001788 <update_decay_values+0x2c4>)
			decay_index_E++;
 8001612:	3101      	adds	r1, #1
 8001614:	6029      	str	r1, [r5, #0]
			decay_value_E = decay_table[NOTE_E];
 8001616:	495d      	ldr	r1, [pc, #372]	@ (800178c <update_decay_values+0x2c8>)
 8001618:	6001      	str	r1, [r0, #0]
		if(sustain_F)
 800161a:	4951      	ldr	r1, [pc, #324]	@ (8001760 <update_decay_values+0x29c>)
			decay_index_F++;
 800161c:	4c47      	ldr	r4, [pc, #284]	@ (800173c <update_decay_values+0x278>)
		if(sustain_F)
 800161e:	6809      	ldr	r1, [r1, #0]
 8001620:	b129      	cbz	r1, 800162e <update_decay_values+0x16a>
			decay_index_F++;
 8001622:	6821      	ldr	r1, [r4, #0]
			decay_value_F = decay_table[NOTE_F];
 8001624:	485a      	ldr	r0, [pc, #360]	@ (8001790 <update_decay_values+0x2cc>)
			decay_index_F++;
 8001626:	3101      	adds	r1, #1
 8001628:	6021      	str	r1, [r4, #0]
			decay_value_F = decay_table[NOTE_F];
 800162a:	495a      	ldr	r1, [pc, #360]	@ (8001794 <update_decay_values+0x2d0>)
 800162c:	6001      	str	r1, [r0, #0]
		if(sustain_Fs)
 800162e:	494d      	ldr	r1, [pc, #308]	@ (8001764 <update_decay_values+0x2a0>)
			decay_index_Fs++;
 8001630:	4843      	ldr	r0, [pc, #268]	@ (8001740 <update_decay_values+0x27c>)
		if(sustain_Fs)
 8001632:	6809      	ldr	r1, [r1, #0]
 8001634:	b139      	cbz	r1, 8001646 <update_decay_values+0x182>
			decay_index_Fs++;
 8001636:	6801      	ldr	r1, [r0, #0]
			decay_value_Fs = decay_table[NOTE_Fs];
 8001638:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 80017c8 <update_decay_values+0x304>
			decay_index_Fs++;
 800163c:	3101      	adds	r1, #1
 800163e:	6001      	str	r1, [r0, #0]
			decay_value_Fs = decay_table[NOTE_Fs];
 8001640:	4955      	ldr	r1, [pc, #340]	@ (8001798 <update_decay_values+0x2d4>)
 8001642:	f8ce 1000 	str.w	r1, [lr]
		if(sustain_G)
 8001646:	4948      	ldr	r1, [pc, #288]	@ (8001768 <update_decay_values+0x2a4>)
			decay_index_G++;
 8001648:	f8df e170 	ldr.w	lr, [pc, #368]	@ 80017bc <update_decay_values+0x2f8>
		if(sustain_G)
 800164c:	6809      	ldr	r1, [r1, #0]
 800164e:	b149      	cbz	r1, 8001664 <update_decay_values+0x1a0>
			decay_index_G++;
 8001650:	f8de 1000 	ldr.w	r1, [lr]
			decay_value_G = decay_table[NOTE_G];
 8001654:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 80017cc <update_decay_values+0x308>
			decay_index_G++;
 8001658:	3101      	adds	r1, #1
 800165a:	f8ce 1000 	str.w	r1, [lr]
			decay_value_G = decay_table[NOTE_G];
 800165e:	494f      	ldr	r1, [pc, #316]	@ (800179c <update_decay_values+0x2d8>)
 8001660:	f8c8 1000 	str.w	r1, [r8]
		if(sustain_Gs)
 8001664:	4941      	ldr	r1, [pc, #260]	@ (800176c <update_decay_values+0x2a8>)
			decay_index_Gs++;
 8001666:	f8df 8158 	ldr.w	r8, [pc, #344]	@ 80017c0 <update_decay_values+0x2fc>
		if(sustain_Gs)
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	b149      	cbz	r1, 8001682 <update_decay_values+0x1be>
			decay_index_Gs++;
 800166e:	f8d8 1000 	ldr.w	r1, [r8]
			decay_value_Gs = decay_table[NOTE_Gs];
 8001672:	f8df 915c 	ldr.w	r9, [pc, #348]	@ 80017d0 <update_decay_values+0x30c>
			decay_index_Gs++;
 8001676:	3101      	adds	r1, #1
 8001678:	f8c8 1000 	str.w	r1, [r8]
			decay_value_Gs = decay_table[NOTE_Gs];
 800167c:	4948      	ldr	r1, [pc, #288]	@ (80017a0 <update_decay_values+0x2dc>)
 800167e:	f8c9 1000 	str.w	r1, [r9]
		if(sustain_A)
 8001682:	493b      	ldr	r1, [pc, #236]	@ (8001770 <update_decay_values+0x2ac>)
			decay_index_A++;
 8001684:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 80017c4 <update_decay_values+0x300>
		if(sustain_A)
 8001688:	6809      	ldr	r1, [r1, #0]
 800168a:	b149      	cbz	r1, 80016a0 <update_decay_values+0x1dc>
			decay_index_A++;
 800168c:	f8d9 1000 	ldr.w	r1, [r9]
			decay_value_A = decay_table[NOTE_A];
 8001690:	f8df a140 	ldr.w	sl, [pc, #320]	@ 80017d4 <update_decay_values+0x310>
			decay_index_A++;
 8001694:	3101      	adds	r1, #1
 8001696:	f8c9 1000 	str.w	r1, [r9]
			decay_value_A = decay_table[NOTE_A];
 800169a:	4942      	ldr	r1, [pc, #264]	@ (80017a4 <update_decay_values+0x2e0>)
 800169c:	f8ca 1000 	str.w	r1, [sl]
		if(sustain_As)
 80016a0:	4934      	ldr	r1, [pc, #208]	@ (8001774 <update_decay_values+0x2b0>)
 80016a2:	6809      	ldr	r1, [r1, #0]
 80016a4:	2900      	cmp	r1, #0
 80016a6:	d131      	bne.n	800170c <update_decay_values+0x248>
 80016a8:	4926      	ldr	r1, [pc, #152]	@ (8001744 <update_decay_values+0x280>)
		if(sustain_B)
 80016aa:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 8001778 <update_decay_values+0x2b4>
 80016ae:	f8da a000 	ldr.w	sl, [sl]
 80016b2:	f1ba 0f00 	cmp.w	sl, #0
 80016b6:	d01e      	beq.n	80016f6 <update_decay_values+0x232>
			decay_index_B++;
 80016b8:	9a01      	ldr	r2, [sp, #4]
			decay_value_B = decay_table[NOTE_B];
 80016ba:	f8df a11c 	ldr.w	sl, [pc, #284]	@ 80017d8 <update_decay_values+0x314>
			decay_index_B++;
 80016be:	3201      	adds	r2, #1
 80016c0:	f8cc 2000 	str.w	r2, [ip]
			decay_value_B = decay_table[NOTE_B];
 80016c4:	f8df c114 	ldr.w	ip, [pc, #276]	@ 80017dc <update_decay_values+0x318>
			decay_index_B++;
 80016c8:	9201      	str	r2, [sp, #4]
			decay_value_B = decay_table[NOTE_B];
 80016ca:	f8cc a000 	str.w	sl, [ip]
			decay_index_B++;
 80016ce:	e712      	b.n	80014f6 <update_decay_values+0x32>
			decay_value_Cs = decay_table[NOTE_Cs];
 80016d0:	4b35      	ldr	r3, [pc, #212]	@ (80017a8 <update_decay_values+0x2e4>)
 80016d2:	4936      	ldr	r1, [pc, #216]	@ (80017ac <update_decay_values+0x2e8>)
 80016d4:	6019      	str	r1, [r3, #0]
			decay_index_Cs++;
 80016d6:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <update_decay_values+0x26c>)
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	3101      	adds	r1, #1
 80016dc:	6019      	str	r1, [r3, #0]
		if(sustain_D)
 80016de:	491c      	ldr	r1, [pc, #112]	@ (8001750 <update_decay_values+0x28c>)
 80016e0:	6809      	ldr	r1, [r1, #0]
 80016e2:	2900      	cmp	r1, #0
 80016e4:	d085      	beq.n	80015f2 <update_decay_values+0x12e>
			decay_value_D = decay_table[NOTE_D];
 80016e6:	4932      	ldr	r1, [pc, #200]	@ (80017b0 <update_decay_values+0x2ec>)
			decay_index_D++;
 80016e8:	4e12      	ldr	r6, [pc, #72]	@ (8001734 <update_decay_values+0x270>)
			decay_value_D = decay_table[NOTE_D];
 80016ea:	4832      	ldr	r0, [pc, #200]	@ (80017b4 <update_decay_values+0x2f0>)
 80016ec:	6008      	str	r0, [r1, #0]
			decay_index_D++;
 80016ee:	6831      	ldr	r1, [r6, #0]
 80016f0:	3101      	adds	r1, #1
 80016f2:	6031      	str	r1, [r6, #0]
 80016f4:	e77e      	b.n	80015f4 <update_decay_values+0x130>
			decay_value_C = 1;
 80016f6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800177c <update_decay_values+0x2b8>
			decay_value_Cs = 1;
 80016fa:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 80017a8 <update_decay_values+0x2e4>
			decay_value_C = 1;
 80016fe:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 8001702:	f8cb c000 	str.w	ip, [fp]
			decay_value_Cs = 1;
 8001706:	f8ca c000 	str.w	ip, [sl]
 800170a:	e6f4      	b.n	80014f6 <update_decay_values+0x32>
			decay_index_As++;
 800170c:	490d      	ldr	r1, [pc, #52]	@ (8001744 <update_decay_values+0x280>)
			decay_value_As = decay_table[NOTE_As];
 800170e:	f8df a0d0 	ldr.w	sl, [pc, #208]	@ 80017e0 <update_decay_values+0x31c>
			decay_index_As++;
 8001712:	680a      	ldr	r2, [r1, #0]
 8001714:	f102 0b01 	add.w	fp, r2, #1
 8001718:	f8c1 b000 	str.w	fp, [r1]
			decay_value_As = decay_table[NOTE_As];
 800171c:	f8df b0c4 	ldr.w	fp, [pc, #196]	@ 80017e4 <update_decay_values+0x320>
 8001720:	f8ca b000 	str.w	fp, [sl]
			decay_index_As++;
 8001724:	e7c1      	b.n	80016aa <update_decay_values+0x1e6>
 8001726:	bf00      	nop
 8001728:	200003d4 	.word	0x200003d4
 800172c:	20000428 	.word	0x20000428
 8001730:	20000424 	.word	0x20000424
 8001734:	20000420 	.word	0x20000420
 8001738:	20000418 	.word	0x20000418
 800173c:	20000414 	.word	0x20000414
 8001740:	20000410 	.word	0x20000410
 8001744:	20000400 	.word	0x20000400
 8001748:	200001e0 	.word	0x200001e0
 800174c:	200001dc 	.word	0x200001dc
 8001750:	200001d8 	.word	0x200001d8
 8001754:	2000041c 	.word	0x2000041c
 8001758:	200001d4 	.word	0x200001d4
 800175c:	200001d0 	.word	0x200001d0
 8001760:	200001cc 	.word	0x200001cc
 8001764:	200001c8 	.word	0x200001c8
 8001768:	200001c4 	.word	0x200001c4
 800176c:	200001c0 	.word	0x200001c0
 8001770:	200001bc 	.word	0x200001bc
 8001774:	200001b8 	.word	0x200001b8
 8001778:	200001b4 	.word	0x200001b4
 800177c:	20000030 	.word	0x20000030
 8001780:	3f7cf245 	.word	0x3f7cf245
 8001784:	20000024 	.word	0x20000024
 8001788:	20000020 	.word	0x20000020
 800178c:	3f7befc5 	.word	0x3f7befc5
 8001790:	2000001c 	.word	0x2000001c
 8001794:	3f7aee4d 	.word	0x3f7aee4d
 8001798:	3f79eddc 	.word	0x3f79eddc
 800179c:	3f78ee72 	.word	0x3f78ee72
 80017a0:	3f77f00c 	.word	0x3f77f00c
 80017a4:	3f76f2ab 	.word	0x3f76f2ab
 80017a8:	2000002c 	.word	0x2000002c
 80017ac:	3f7efa61 	.word	0x3f7efa61
 80017b0:	20000028 	.word	0x20000028
 80017b4:	3f7df5ce 	.word	0x3f7df5ce
 80017b8:	200003fc 	.word	0x200003fc
 80017bc:	2000040c 	.word	0x2000040c
 80017c0:	20000408 	.word	0x20000408
 80017c4:	20000404 	.word	0x20000404
 80017c8:	20000018 	.word	0x20000018
 80017cc:	20000014 	.word	0x20000014
 80017d0:	20000010 	.word	0x20000010
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	3f74faef 	.word	0x3f74faef
 80017dc:	20000004 	.word	0x20000004
 80017e0:	20000008 	.word	0x20000008
 80017e4:	3f75f64c 	.word	0x3f75f64c

080017e8 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017e8:	4a03      	ldr	r2, [pc, #12]	@ (80017f8 <SystemInit+0x10>)
 80017ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80017ee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <update_note_tables>:
	}

	update_note_tables();
}

void update_note_tables(){
 80017fc:	b430      	push	{r4, r5}
	 * This function takes the current octave and uses it to update our current
	 * note and sample information.
	 * The NOTE_TABLES are found in sine_tables.h
	 *
	 */
	current_C_TABLE = C_TABLES[activeOctave];
 80017fe:	4b3e      	ldr	r3, [pc, #248]	@ (80018f8 <update_note_tables+0xfc>)
 8001800:	4d3e      	ldr	r5, [pc, #248]	@ (80018fc <update_note_tables+0x100>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4a3e      	ldr	r2, [pc, #248]	@ (8001900 <update_note_tables+0x104>)
 8001806:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 800180a:	483e      	ldr	r0, [pc, #248]	@ (8001904 <update_note_tables+0x108>)
	current_C_TABLE = C_TABLES[activeOctave];
 800180c:	6015      	str	r5, [r2, #0]
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 800180e:	4a3e      	ldr	r2, [pc, #248]	@ (8001908 <update_note_tables+0x10c>)
 8001810:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_D_TABLE = D_TABLES[activeOctave];
 8001814:	493d      	ldr	r1, [pc, #244]	@ (800190c <update_note_tables+0x110>)
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 8001816:	6010      	str	r0, [r2, #0]
	current_D_TABLE = D_TABLES[activeOctave];
 8001818:	4a3d      	ldr	r2, [pc, #244]	@ (8001910 <update_note_tables+0x114>)
 800181a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 800181e:	4c3d      	ldr	r4, [pc, #244]	@ (8001914 <update_note_tables+0x118>)
	current_D_TABLE = D_TABLES[activeOctave];
 8001820:	6011      	str	r1, [r2, #0]
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 8001822:	4a3d      	ldr	r2, [pc, #244]	@ (8001918 <update_note_tables+0x11c>)
 8001824:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_E_TABLE = E_TABLES[activeOctave];
 8001828:	483c      	ldr	r0, [pc, #240]	@ (800191c <update_note_tables+0x120>)
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 800182a:	6015      	str	r5, [r2, #0]
	current_E_TABLE = E_TABLES[activeOctave];
 800182c:	4a3c      	ldr	r2, [pc, #240]	@ (8001920 <update_note_tables+0x124>)
 800182e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_F_TABLE = F_TABLES[activeOctave];
 8001832:	493c      	ldr	r1, [pc, #240]	@ (8001924 <update_note_tables+0x128>)
	current_E_TABLE = E_TABLES[activeOctave];
 8001834:	6010      	str	r0, [r2, #0]
	current_F_TABLE = F_TABLES[activeOctave];
 8001836:	4a3c      	ldr	r2, [pc, #240]	@ (8001928 <update_note_tables+0x12c>)
 8001838:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 800183c:	4c3b      	ldr	r4, [pc, #236]	@ (800192c <update_note_tables+0x130>)
	current_F_TABLE = F_TABLES[activeOctave];
 800183e:	6011      	str	r1, [r2, #0]
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 8001840:	4a3b      	ldr	r2, [pc, #236]	@ (8001930 <update_note_tables+0x134>)
 8001842:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_G_TABLE = G_TABLES[activeOctave];
 8001846:	483b      	ldr	r0, [pc, #236]	@ (8001934 <update_note_tables+0x138>)
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 8001848:	6015      	str	r5, [r2, #0]
	current_G_TABLE = G_TABLES[activeOctave];
 800184a:	4a3b      	ldr	r2, [pc, #236]	@ (8001938 <update_note_tables+0x13c>)
 800184c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 8001850:	493a      	ldr	r1, [pc, #232]	@ (800193c <update_note_tables+0x140>)
	current_G_TABLE = G_TABLES[activeOctave];
 8001852:	6010      	str	r0, [r2, #0]
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 8001854:	4a3a      	ldr	r2, [pc, #232]	@ (8001940 <update_note_tables+0x144>)
 8001856:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_A_TABLE = A_TABLES[activeOctave];
 800185a:	4c3a      	ldr	r4, [pc, #232]	@ (8001944 <update_note_tables+0x148>)
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 800185c:	6011      	str	r1, [r2, #0]
	current_A_TABLE = A_TABLES[activeOctave];
 800185e:	4a3a      	ldr	r2, [pc, #232]	@ (8001948 <update_note_tables+0x14c>)
 8001860:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_As_TABLE = As_TABLES[activeOctave];
 8001864:	4839      	ldr	r0, [pc, #228]	@ (800194c <update_note_tables+0x150>)
	current_A_TABLE = A_TABLES[activeOctave];
 8001866:	6015      	str	r5, [r2, #0]
	current_As_TABLE = As_TABLES[activeOctave];
 8001868:	4a39      	ldr	r2, [pc, #228]	@ (8001950 <update_note_tables+0x154>)
 800186a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_B_TABLE = B_TABLES[activeOctave];
 800186e:	4939      	ldr	r1, [pc, #228]	@ (8001954 <update_note_tables+0x158>)
	current_As_TABLE = As_TABLES[activeOctave];
 8001870:	6010      	str	r0, [r2, #0]
	current_B_TABLE = B_TABLES[activeOctave];
 8001872:	4a39      	ldr	r2, [pc, #228]	@ (8001958 <update_note_tables+0x15c>)
 8001874:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]

	current_C_SAMPLES = C_SAMPLES[activeOctave];
 8001878:	4c38      	ldr	r4, [pc, #224]	@ (800195c <update_note_tables+0x160>)
	current_B_TABLE = B_TABLES[activeOctave];
 800187a:	6011      	str	r1, [r2, #0]
	current_C_SAMPLES = C_SAMPLES[activeOctave];
 800187c:	4a38      	ldr	r2, [pc, #224]	@ (8001960 <update_note_tables+0x164>)
 800187e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 8001882:	4838      	ldr	r0, [pc, #224]	@ (8001964 <update_note_tables+0x168>)
	current_C_SAMPLES = C_SAMPLES[activeOctave];
 8001884:	6015      	str	r5, [r2, #0]
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 8001886:	4a38      	ldr	r2, [pc, #224]	@ (8001968 <update_note_tables+0x16c>)
 8001888:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 800188c:	4937      	ldr	r1, [pc, #220]	@ (800196c <update_note_tables+0x170>)
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 800188e:	6010      	str	r0, [r2, #0]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 8001890:	4c37      	ldr	r4, [pc, #220]	@ (8001970 <update_note_tables+0x174>)
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 8001892:	4a38      	ldr	r2, [pc, #224]	@ (8001974 <update_note_tables+0x178>)
 8001894:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 8001898:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 800189c:	6011      	str	r1, [r2, #0]
	current_E_SAMPLES = E_SAMPLES[activeOctave];
 800189e:	4936      	ldr	r1, [pc, #216]	@ (8001978 <update_note_tables+0x17c>)
 80018a0:	4a36      	ldr	r2, [pc, #216]	@ (800197c <update_note_tables+0x180>)
 80018a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 80018a6:	4836      	ldr	r0, [pc, #216]	@ (8001980 <update_note_tables+0x184>)
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 80018a8:	4d36      	ldr	r5, [pc, #216]	@ (8001984 <update_note_tables+0x188>)
	current_E_SAMPLES = E_SAMPLES[activeOctave];
 80018aa:	6011      	str	r1, [r2, #0]
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 80018ac:	4a36      	ldr	r2, [pc, #216]	@ (8001988 <update_note_tables+0x18c>)
 80018ae:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 80018b2:	6004      	str	r4, [r0, #0]
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 80018b4:	4835      	ldr	r0, [pc, #212]	@ (800198c <update_note_tables+0x190>)
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 80018b6:	6015      	str	r5, [r2, #0]
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 80018b8:	4a35      	ldr	r2, [pc, #212]	@ (8001990 <update_note_tables+0x194>)
 80018ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 80018be:	4935      	ldr	r1, [pc, #212]	@ (8001994 <update_note_tables+0x198>)
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 80018c0:	6010      	str	r0, [r2, #0]
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 80018c2:	4a35      	ldr	r2, [pc, #212]	@ (8001998 <update_note_tables+0x19c>)
 80018c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 80018c8:	4c34      	ldr	r4, [pc, #208]	@ (800199c <update_note_tables+0x1a0>)
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 80018ca:	6011      	str	r1, [r2, #0]
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 80018cc:	4934      	ldr	r1, [pc, #208]	@ (80019a0 <update_note_tables+0x1a4>)
 80018ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 80018d2:	4c34      	ldr	r4, [pc, #208]	@ (80019a4 <update_note_tables+0x1a8>)
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 80018d4:	600d      	str	r5, [r1, #0]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 80018d6:	4834      	ldr	r0, [pc, #208]	@ (80019a8 <update_note_tables+0x1ac>)
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 80018d8:	4934      	ldr	r1, [pc, #208]	@ (80019ac <update_note_tables+0x1b0>)
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 80018da:	4a35      	ldr	r2, [pc, #212]	@ (80019b0 <update_note_tables+0x1b4>)
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 80018dc:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80018e0:	600c      	str	r4, [r1, #0]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 80018e2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 80018e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 80018ea:	4932      	ldr	r1, [pc, #200]	@ (80019b4 <update_note_tables+0x1b8>)
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 80018ec:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <update_note_tables+0x1bc>)
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 80018ee:	6008      	str	r0, [r1, #0]

}
 80018f0:	bc30      	pop	{r4, r5}
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 80018f2:	601a      	str	r2, [r3, #0]
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000038 	.word	0x20000038
 80018fc:	20000170 	.word	0x20000170
 8001900:	20000488 	.word	0x20000488
 8001904:	20000154 	.word	0x20000154
 8001908:	20000484 	.word	0x20000484
 800190c:	20000138 	.word	0x20000138
 8001910:	20000480 	.word	0x20000480
 8001914:	2000011c 	.word	0x2000011c
 8001918:	2000047c 	.word	0x2000047c
 800191c:	20000100 	.word	0x20000100
 8001920:	20000478 	.word	0x20000478
 8001924:	200000e4 	.word	0x200000e4
 8001928:	20000474 	.word	0x20000474
 800192c:	200000c8 	.word	0x200000c8
 8001930:	20000470 	.word	0x20000470
 8001934:	200000ac 	.word	0x200000ac
 8001938:	2000046c 	.word	0x2000046c
 800193c:	20000090 	.word	0x20000090
 8001940:	20000468 	.word	0x20000468
 8001944:	20000074 	.word	0x20000074
 8001948:	20000464 	.word	0x20000464
 800194c:	20000058 	.word	0x20000058
 8001950:	20000460 	.word	0x20000460
 8001954:	2000003c 	.word	0x2000003c
 8001958:	2000045c 	.word	0x2000045c
 800195c:	08004bb8 	.word	0x08004bb8
 8001960:	20000458 	.word	0x20000458
 8001964:	08004b9c 	.word	0x08004b9c
 8001968:	20000454 	.word	0x20000454
 800196c:	08004b80 	.word	0x08004b80
 8001970:	08004b64 	.word	0x08004b64
 8001974:	20000450 	.word	0x20000450
 8001978:	08004b48 	.word	0x08004b48
 800197c:	20000448 	.word	0x20000448
 8001980:	2000044c 	.word	0x2000044c
 8001984:	08004b2c 	.word	0x08004b2c
 8001988:	20000444 	.word	0x20000444
 800198c:	08004b10 	.word	0x08004b10
 8001990:	20000440 	.word	0x20000440
 8001994:	08004af4 	.word	0x08004af4
 8001998:	2000043c 	.word	0x2000043c
 800199c:	08004ad8 	.word	0x08004ad8
 80019a0:	20000438 	.word	0x20000438
 80019a4:	08004abc 	.word	0x08004abc
 80019a8:	08004aa0 	.word	0x08004aa0
 80019ac:	20000434 	.word	0x20000434
 80019b0:	08004a84 	.word	0x08004a84
 80019b4:	20000430 	.word	0x20000430
 80019b8:	2000042c 	.word	0x2000042c

080019bc <tranposition__increment_octave>:
	switch (activeOctave) {
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <tranposition__increment_octave+0x48>)
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	2a05      	cmp	r2, #5
 80019c2:	d81c      	bhi.n	80019fe <tranposition__increment_octave+0x42>
 80019c4:	e8df f002 	tbb	[pc, r2]
 80019c8:	130f0307 	.word	0x130f0307
 80019cc:	0b17      	.short	0x0b17
 80019ce:	2202      	movs	r2, #2
		activeOctave = OCTAVE_2;
 80019d0:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 80019d2:	f7ff bf13 	b.w	80017fc <update_note_tables>
	switch (activeOctave) {
 80019d6:	2201      	movs	r2, #1
		activeOctave = OCTAVE_2;
 80019d8:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 80019da:	f7ff bf0f 	b.w	80017fc <update_note_tables>
		break;
 80019de:	2206      	movs	r2, #6
		activeOctave = OCTAVE_2;
 80019e0:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 80019e2:	f7ff bf0b 	b.w	80017fc <update_note_tables>
		break;
 80019e6:	2203      	movs	r2, #3
		activeOctave = OCTAVE_2;
 80019e8:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 80019ea:	f7ff bf07 	b.w	80017fc <update_note_tables>
		break;
 80019ee:	2204      	movs	r2, #4
		activeOctave = OCTAVE_2;
 80019f0:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 80019f2:	f7ff bf03 	b.w	80017fc <update_note_tables>
		break;
 80019f6:	2205      	movs	r2, #5
		activeOctave = OCTAVE_2;
 80019f8:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 80019fa:	f7ff beff 	b.w	80017fc <update_note_tables>
		break;
 80019fe:	2200      	movs	r2, #0
 8001a00:	e7e6      	b.n	80019d0 <tranposition__increment_octave+0x14>
 8001a02:	bf00      	nop
 8001a04:	20000038 	.word	0x20000038

08001a08 <tranposition__decrement_octave>:
	switch (activeOctave) {
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <tranposition__decrement_octave+0x48>)
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	2a05      	cmp	r2, #5
 8001a0e:	d81c      	bhi.n	8001a4a <tranposition__decrement_octave+0x42>
 8001a10:	e8df f002 	tbb	[pc, r2]
 8001a14:	130f0307 	.word	0x130f0307
 8001a18:	0b17      	.short	0x0b17
 8001a1a:	2200      	movs	r2, #0
		activeOctave = OCTAVE_7;
 8001a1c:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001a1e:	f7ff beed 	b.w	80017fc <update_note_tables>
	switch (activeOctave) {
 8001a22:	2206      	movs	r2, #6
		activeOctave = OCTAVE_7;
 8001a24:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001a26:	f7ff bee9 	b.w	80017fc <update_note_tables>
		break;
 8001a2a:	2204      	movs	r2, #4
		activeOctave = OCTAVE_7;
 8001a2c:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001a2e:	f7ff bee5 	b.w	80017fc <update_note_tables>
		break;
 8001a32:	2201      	movs	r2, #1
		activeOctave = OCTAVE_7;
 8001a34:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001a36:	f7ff bee1 	b.w	80017fc <update_note_tables>
		break;
 8001a3a:	2202      	movs	r2, #2
		activeOctave = OCTAVE_7;
 8001a3c:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001a3e:	f7ff bedd 	b.w	80017fc <update_note_tables>
		break;
 8001a42:	2203      	movs	r2, #3
		activeOctave = OCTAVE_7;
 8001a44:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001a46:	f7ff bed9 	b.w	80017fc <update_note_tables>
		break;
 8001a4a:	2205      	movs	r2, #5
 8001a4c:	e7e6      	b.n	8001a1c <tranposition__decrement_octave+0x14>
 8001a4e:	bf00      	nop
 8001a50:	20000038 	.word	0x20000038

08001a54 <tranposition__note_update>:
	/****************************************************************
		 This first section of Code is to handle the reseting of each index.
		 Normally this would be done at the end, but since we might be switching octaves
		 we need to make sure that our indexes are restarted.
	*********************************************************************/
		if (my_index[NOTE_C] > current_C_SAMPLES)
 8001a54:	4bad      	ldr	r3, [pc, #692]	@ (8001d0c <tranposition__note_update+0x2b8>)
 8001a56:	4aae      	ldr	r2, [pc, #696]	@ (8001d10 <tranposition__note_update+0x2bc>)
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	6812      	ldr	r2, [r2, #0]
			my_index[NOTE_C] = 0;
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001a5c:	6859      	ldr	r1, [r3, #4]
		if (my_index[NOTE_C] > current_C_SAMPLES)
 8001a5e:	4290      	cmp	r0, r2
			my_index[NOTE_C] = 0;
 8001a60:	bfc8      	it	gt
 8001a62:	2000      	movgt	r0, #0
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001a64:	4aab      	ldr	r2, [pc, #684]	@ (8001d14 <tranposition__note_update+0x2c0>)
int tranposition__note_update() {
 8001a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			my_index[NOTE_C] = 0;
 8001a6a:	bfc8      	it	gt
 8001a6c:	6018      	strgt	r0, [r3, #0]
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001a6e:	6812      	ldr	r2, [r2, #0]
			my_index[NOTE_Cs] = 0;
		if (my_index[NOTE_D] > current_D_SAMPLES)
 8001a70:	689c      	ldr	r4, [r3, #8]
			my_index[NOTE_D] = 0;
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001a72:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001a76:	4291      	cmp	r1, r2
			my_index[NOTE_Cs] = 0;
 8001a78:	bfc8      	it	gt
 8001a7a:	2100      	movgt	r1, #0
		if (my_index[NOTE_D] > current_D_SAMPLES)
 8001a7c:	4aa6      	ldr	r2, [pc, #664]	@ (8001d18 <tranposition__note_update+0x2c4>)
			my_index[NOTE_Cs] = 0;
 8001a7e:	bfc8      	it	gt
 8001a80:	6059      	strgt	r1, [r3, #4]
		if (my_index[NOTE_D] > current_D_SAMPLES)
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	4294      	cmp	r4, r2
			my_index[NOTE_D] = 0;
 8001a86:	bfc8      	it	gt
 8001a88:	2400      	movgt	r4, #0
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001a8a:	4aa4      	ldr	r2, [pc, #656]	@ (8001d1c <tranposition__note_update+0x2c8>)
			my_index[NOTE_D] = 0;
 8001a8c:	bfc8      	it	gt
 8001a8e:	609c      	strgt	r4, [r3, #8]
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	4592      	cmp	sl, r2
int tranposition__note_update() {
 8001a94:	b08f      	sub	sp, #60	@ 0x3c
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001a96:	dd02      	ble.n	8001a9e <tranposition__note_update+0x4a>
			my_index[NOTE_Ds] = 0;
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	4692      	mov	sl, r2
		if (my_index[NOTE_E] > current_E_SAMPLES)
 8001a9e:	4aa0      	ldr	r2, [pc, #640]	@ (8001d20 <tranposition__note_update+0x2cc>)
 8001aa0:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	4591      	cmp	r9, r2
 8001aa8:	dd02      	ble.n	8001ab0 <tranposition__note_update+0x5c>
			my_index[NOTE_E] = 0;
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
 8001aae:	4691      	mov	r9, r2
		if (my_index[NOTE_F] > current_F_SAMPLES)
 8001ab0:	4a9c      	ldr	r2, [pc, #624]	@ (8001d24 <tranposition__note_update+0x2d0>)
 8001ab2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	4590      	cmp	r8, r2
 8001aba:	dd02      	ble.n	8001ac2 <tranposition__note_update+0x6e>
			my_index[NOTE_F] = 0;
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	4690      	mov	r8, r2
		if (my_index[NOTE_Fs] > current_Fs_SAMPLES)
 8001ac2:	4a99      	ldr	r2, [pc, #612]	@ (8001d28 <tranposition__note_update+0x2d4>)
 8001ac4:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	4596      	cmp	lr, r2
 8001acc:	dd02      	ble.n	8001ad4 <tranposition__note_update+0x80>
			my_index[NOTE_Fs] = 0;
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
 8001ad2:	4696      	mov	lr, r2
		if (my_index[NOTE_G] > current_G_SAMPLES)
 8001ad4:	4a95      	ldr	r2, [pc, #596]	@ (8001d2c <tranposition__note_update+0x2d8>)
 8001ad6:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	4594      	cmp	ip, r2
 8001ade:	dd02      	ble.n	8001ae6 <tranposition__note_update+0x92>
			my_index[NOTE_G] = 0;
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	61da      	str	r2, [r3, #28]
 8001ae4:	4694      	mov	ip, r2
		if (my_index[NOTE_Gs] > current_Gs_SAMPLES)
 8001ae6:	4a92      	ldr	r2, [pc, #584]	@ (8001d30 <tranposition__note_update+0x2dc>)
 8001ae8:	6a1f      	ldr	r7, [r3, #32]
 8001aea:	6812      	ldr	r2, [r2, #0]
			my_index[NOTE_Gs] = 0;
		if (my_index[NOTE_A] > current_A_SAMPLES)
 8001aec:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
			my_index[NOTE_A] = 0;
		if (my_index[NOTE_As] > current_As_SAMPLES)
 8001aee:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
		if (my_index[NOTE_Gs] > current_Gs_SAMPLES)
 8001af0:	4297      	cmp	r7, r2
			my_index[NOTE_Gs] = 0;
 8001af2:	bfc8      	it	gt
 8001af4:	2700      	movgt	r7, #0
		if (my_index[NOTE_A] > current_A_SAMPLES)
 8001af6:	4a8f      	ldr	r2, [pc, #572]	@ (8001d34 <tranposition__note_update+0x2e0>)
			my_index[NOTE_Gs] = 0;
 8001af8:	bfc8      	it	gt
 8001afa:	621f      	strgt	r7, [r3, #32]
		if (my_index[NOTE_A] > current_A_SAMPLES)
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	4296      	cmp	r6, r2
			my_index[NOTE_A] = 0;
 8001b00:	bfc8      	it	gt
 8001b02:	2600      	movgt	r6, #0
		if (my_index[NOTE_As] > current_As_SAMPLES)
 8001b04:	4a8c      	ldr	r2, [pc, #560]	@ (8001d38 <tranposition__note_update+0x2e4>)
			my_index[NOTE_A] = 0;
 8001b06:	bfc8      	it	gt
 8001b08:	625e      	strgt	r6, [r3, #36]	@ 0x24
		if (my_index[NOTE_As] > current_As_SAMPLES)
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	9500      	str	r5, [sp, #0]
 8001b0e:	4295      	cmp	r5, r2
 8001b10:	dd02      	ble.n	8001b18 <tranposition__note_update+0xc4>
			my_index[NOTE_As] = 0;
 8001b12:	2200      	movs	r2, #0
 8001b14:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b16:	9200      	str	r2, [sp, #0]
		if (my_index[NOTE_B] > current_B_SAMPLES)
 8001b18:	4a88      	ldr	r2, [pc, #544]	@ (8001d3c <tranposition__note_update+0x2e8>)
 8001b1a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	9501      	str	r5, [sp, #4]
 8001b20:	4295      	cmp	r5, r2
 8001b22:	dd02      	ble.n	8001b2a <tranposition__note_update+0xd6>
			my_index[NOTE_B] = 0;
 8001b24:	2200      	movs	r2, #0
 8001b26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b28:	9201      	str	r2, [sp, #4]
	 * This first batch of values is to look update the value for each Note.
	 * By using a list and different indexes we can speed up the program with good spatial locality
	 * If the note is active then we update the value. Otherwise we return a zero.
	 ***************************************************************************/
	int wave_out =0;
	wave_out	+= active[NOTE_C] ? (current_C_TABLE[my_index[NOTE_C]] * decay_value_C) : 0;
 8001b2a:	4a85      	ldr	r2, [pc, #532]	@ (8001d40 <tranposition__note_update+0x2ec>)
 8001b2c:	6815      	ldr	r5, [r2, #0]
 8001b2e:	9502      	str	r5, [sp, #8]
 8001b30:	2d00      	cmp	r5, #0
 8001b32:	f000 8177 	beq.w	8001e24 <tranposition__note_update+0x3d0>
 8001b36:	4d83      	ldr	r5, [pc, #524]	@ (8001d44 <tranposition__note_update+0x2f0>)
 8001b38:	682d      	ldr	r5, [r5, #0]
 8001b3a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8001b3e:	edd5 7a00 	vldr	s15, [r5]
 8001b42:	4d81      	ldr	r5, [pc, #516]	@ (8001d48 <tranposition__note_update+0x2f4>)
 8001b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b48:	ed95 7a00 	vldr	s14, [r5]
 8001b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out	+= active[NOTE_Cs] ? (current_Cs_TABLE[my_index[NOTE_Cs]] * decay_value_Cs) : 0;
 8001b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b58:	6855      	ldr	r5, [r2, #4]
 8001b5a:	9503      	str	r5, [sp, #12]
 8001b5c:	b165      	cbz	r5, 8001b78 <tranposition__note_update+0x124>
 8001b5e:	4d7b      	ldr	r5, [pc, #492]	@ (8001d4c <tranposition__note_update+0x2f8>)
 8001b60:	682d      	ldr	r5, [r5, #0]
 8001b62:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8001b66:	ed95 7a00 	vldr	s14, [r5]
 8001b6a:	4d79      	ldr	r5, [pc, #484]	@ (8001d50 <tranposition__note_update+0x2fc>)
 8001b6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b70:	edd5 6a00 	vldr	s13, [r5]
 8001b74:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_D] ? (current_D_TABLE[my_index[NOTE_D]] * decay_value_D) : 0;
 8001b78:	6895      	ldr	r5, [r2, #8]
 8001b7a:	9504      	str	r5, [sp, #16]
	wave_out	+= active[NOTE_Cs] ? (current_Cs_TABLE[my_index[NOTE_Cs]] * decay_value_Cs) : 0;
 8001b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_D] ? (current_D_TABLE[my_index[NOTE_D]] * decay_value_D) : 0;
 8001b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b84:	b165      	cbz	r5, 8001ba0 <tranposition__note_update+0x14c>
 8001b86:	4d73      	ldr	r5, [pc, #460]	@ (8001d54 <tranposition__note_update+0x300>)
 8001b88:	682d      	ldr	r5, [r5, #0]
 8001b8a:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8001b8e:	ed95 7a00 	vldr	s14, [r5]
 8001b92:	4d71      	ldr	r5, [pc, #452]	@ (8001d58 <tranposition__note_update+0x304>)
 8001b94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b98:	edd5 6a00 	vldr	s13, [r5]
 8001b9c:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_Ds] ? (current_Ds_TABLE[my_index[NOTE_Ds]] *decay_value_Ds) : 0;
 8001ba0:	68d5      	ldr	r5, [r2, #12]
 8001ba2:	9505      	str	r5, [sp, #20]
	wave_out 	+= active[NOTE_D] ? (current_D_TABLE[my_index[NOTE_D]] * decay_value_D) : 0;
 8001ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_Ds] ? (current_Ds_TABLE[my_index[NOTE_Ds]] *decay_value_Ds) : 0;
 8001ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bac:	b165      	cbz	r5, 8001bc8 <tranposition__note_update+0x174>
 8001bae:	4d6b      	ldr	r5, [pc, #428]	@ (8001d5c <tranposition__note_update+0x308>)
 8001bb0:	682d      	ldr	r5, [r5, #0]
 8001bb2:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 8001bb6:	ed95 7a00 	vldr	s14, [r5]
 8001bba:	4d69      	ldr	r5, [pc, #420]	@ (8001d60 <tranposition__note_update+0x30c>)
 8001bbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001bc0:	edd5 6a00 	vldr	s13, [r5]
 8001bc4:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_E] ? (current_E_TABLE[my_index[NOTE_E]] * decay_value_E) : 0;
 8001bc8:	6915      	ldr	r5, [r2, #16]
 8001bca:	9506      	str	r5, [sp, #24]
	wave_out 	+= active[NOTE_Ds] ? (current_Ds_TABLE[my_index[NOTE_Ds]] *decay_value_Ds) : 0;
 8001bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_E] ? (current_E_TABLE[my_index[NOTE_E]] * decay_value_E) : 0;
 8001bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd4:	b165      	cbz	r5, 8001bf0 <tranposition__note_update+0x19c>
 8001bd6:	4d63      	ldr	r5, [pc, #396]	@ (8001d64 <tranposition__note_update+0x310>)
 8001bd8:	682d      	ldr	r5, [r5, #0]
 8001bda:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001bde:	ed95 7a00 	vldr	s14, [r5]
 8001be2:	4d61      	ldr	r5, [pc, #388]	@ (8001d68 <tranposition__note_update+0x314>)
 8001be4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001be8:	edd5 6a00 	vldr	s13, [r5]
 8001bec:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_F] ? (current_F_TABLE[my_index[NOTE_F]] * decay_value_F) : 0;
 8001bf0:	6955      	ldr	r5, [r2, #20]
 8001bf2:	9507      	str	r5, [sp, #28]
	wave_out 	+= active[NOTE_E] ? (current_E_TABLE[my_index[NOTE_E]] * decay_value_E) : 0;
 8001bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_F] ? (current_F_TABLE[my_index[NOTE_F]] * decay_value_F) : 0;
 8001bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfc:	b165      	cbz	r5, 8001c18 <tranposition__note_update+0x1c4>
 8001bfe:	4d5b      	ldr	r5, [pc, #364]	@ (8001d6c <tranposition__note_update+0x318>)
 8001c00:	682d      	ldr	r5, [r5, #0]
 8001c02:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 8001c06:	ed95 7a00 	vldr	s14, [r5]
 8001c0a:	4d59      	ldr	r5, [pc, #356]	@ (8001d70 <tranposition__note_update+0x31c>)
 8001c0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c10:	edd5 6a00 	vldr	s13, [r5]
 8001c14:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_Fs] ? (current_Fs_TABLE[my_index[NOTE_Fs]] * decay_value_Fs) : 0;
 8001c18:	6995      	ldr	r5, [r2, #24]
 8001c1a:	9508      	str	r5, [sp, #32]
	wave_out 	+= active[NOTE_F] ? (current_F_TABLE[my_index[NOTE_F]] * decay_value_F) : 0;
 8001c1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_Fs] ? (current_Fs_TABLE[my_index[NOTE_Fs]] * decay_value_Fs) : 0;
 8001c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c24:	b165      	cbz	r5, 8001c40 <tranposition__note_update+0x1ec>
 8001c26:	4d53      	ldr	r5, [pc, #332]	@ (8001d74 <tranposition__note_update+0x320>)
 8001c28:	682d      	ldr	r5, [r5, #0]
 8001c2a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8001c2e:	ed95 7a00 	vldr	s14, [r5]
 8001c32:	4d51      	ldr	r5, [pc, #324]	@ (8001d78 <tranposition__note_update+0x324>)
 8001c34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c38:	edd5 6a00 	vldr	s13, [r5]
 8001c3c:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_G] ? (current_G_TABLE[my_index[NOTE_G]] * decay_value_G) : 0;
 8001c40:	69d5      	ldr	r5, [r2, #28]
 8001c42:	9509      	str	r5, [sp, #36]	@ 0x24
	wave_out 	+= active[NOTE_Fs] ? (current_Fs_TABLE[my_index[NOTE_Fs]] * decay_value_Fs) : 0;
 8001c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_G] ? (current_G_TABLE[my_index[NOTE_G]] * decay_value_G) : 0;
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	b165      	cbz	r5, 8001c68 <tranposition__note_update+0x214>
 8001c4e:	4d4b      	ldr	r5, [pc, #300]	@ (8001d7c <tranposition__note_update+0x328>)
 8001c50:	682d      	ldr	r5, [r5, #0]
 8001c52:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8001c56:	ed95 7a00 	vldr	s14, [r5]
 8001c5a:	4d49      	ldr	r5, [pc, #292]	@ (8001d80 <tranposition__note_update+0x32c>)
 8001c5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c60:	edd5 6a00 	vldr	s13, [r5]
 8001c64:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_Gs] ? (current_Gs_TABLE[my_index[NOTE_Gs]] * decay_value_Gs): 0;
 8001c68:	6a15      	ldr	r5, [r2, #32]
 8001c6a:	950a      	str	r5, [sp, #40]	@ 0x28
	wave_out 	+= active[NOTE_G] ? (current_G_TABLE[my_index[NOTE_G]] * decay_value_G) : 0;
 8001c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_Gs] ? (current_Gs_TABLE[my_index[NOTE_Gs]] * decay_value_Gs): 0;
 8001c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c74:	b165      	cbz	r5, 8001c90 <tranposition__note_update+0x23c>
 8001c76:	4d43      	ldr	r5, [pc, #268]	@ (8001d84 <tranposition__note_update+0x330>)
 8001c78:	682d      	ldr	r5, [r5, #0]
 8001c7a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8001c7e:	ed95 7a00 	vldr	s14, [r5]
 8001c82:	4d41      	ldr	r5, [pc, #260]	@ (8001d88 <tranposition__note_update+0x334>)
 8001c84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c88:	edd5 6a00 	vldr	s13, [r5]
 8001c8c:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_A] ? (current_A_TABLE[my_index[NOTE_A]] * decay_value_A) : 0;
 8001c90:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8001c92:	950b      	str	r5, [sp, #44]	@ 0x2c
	wave_out 	+= active[NOTE_Gs] ? (current_Gs_TABLE[my_index[NOTE_Gs]] * decay_value_Gs): 0;
 8001c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_A] ? (current_A_TABLE[my_index[NOTE_A]] * decay_value_A) : 0;
 8001c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9c:	b165      	cbz	r5, 8001cb8 <tranposition__note_update+0x264>
 8001c9e:	4d3b      	ldr	r5, [pc, #236]	@ (8001d8c <tranposition__note_update+0x338>)
 8001ca0:	682d      	ldr	r5, [r5, #0]
 8001ca2:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8001ca6:	ed95 7a00 	vldr	s14, [r5]
 8001caa:	4d39      	ldr	r5, [pc, #228]	@ (8001d90 <tranposition__note_update+0x33c>)
 8001cac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001cb0:	edd5 6a00 	vldr	s13, [r5]
 8001cb4:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_As] ? (current_As_TABLE[my_index[NOTE_As]] * decay_value_As) : 0;
 8001cb8:	6a95      	ldr	r5, [r2, #40]	@ 0x28
 8001cba:	950c      	str	r5, [sp, #48]	@ 0x30
	wave_out 	+= active[NOTE_A] ? (current_A_TABLE[my_index[NOTE_A]] * decay_value_A) : 0;
 8001cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_As] ? (current_As_TABLE[my_index[NOTE_As]] * decay_value_As) : 0;
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	b185      	cbz	r5, 8001ce8 <tranposition__note_update+0x294>
 8001cc6:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8001d94 <tranposition__note_update+0x340>
 8001cca:	9d00      	ldr	r5, [sp, #0]
 8001ccc:	f8db b000 	ldr.w	fp, [fp]
 8001cd0:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8001cd4:	ed95 7a00 	vldr	s14, [r5]
 8001cd8:	f8df b0bc 	ldr.w	fp, [pc, #188]	@ 8001d98 <tranposition__note_update+0x344>
 8001cdc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ce0:	eddb 6a00 	vldr	s13, [fp]
 8001ce4:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8001ce8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cea:	920d      	str	r2, [sp, #52]	@ 0x34
	wave_out 	+= active[NOTE_As] ? (current_As_TABLE[my_index[NOTE_As]] * decay_value_As) : 0;
 8001cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8001cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf4:	2a00      	cmp	r2, #0
 8001cf6:	d05b      	beq.n	8001db0 <tranposition__note_update+0x35c>
 8001cf8:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 8001d9c <tranposition__note_update+0x348>
 8001cfc:	9a01      	ldr	r2, [sp, #4]
 8001cfe:	f8db b000 	ldr.w	fp, [fp]
 8001d02:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8001d06:	ed92 7a00 	vldr	s14, [r2]
 8001d0a:	e049      	b.n	8001da0 <tranposition__note_update+0x34c>
 8001d0c:	20000214 	.word	0x20000214
 8001d10:	20000458 	.word	0x20000458
 8001d14:	20000454 	.word	0x20000454
 8001d18:	20000450 	.word	0x20000450
 8001d1c:	2000044c 	.word	0x2000044c
 8001d20:	20000448 	.word	0x20000448
 8001d24:	20000444 	.word	0x20000444
 8001d28:	20000440 	.word	0x20000440
 8001d2c:	2000043c 	.word	0x2000043c
 8001d30:	20000438 	.word	0x20000438
 8001d34:	20000434 	.word	0x20000434
 8001d38:	20000430 	.word	0x20000430
 8001d3c:	2000042c 	.word	0x2000042c
 8001d40:	200001e4 	.word	0x200001e4
 8001d44:	20000488 	.word	0x20000488
 8001d48:	20000030 	.word	0x20000030
 8001d4c:	20000484 	.word	0x20000484
 8001d50:	2000002c 	.word	0x2000002c
 8001d54:	20000480 	.word	0x20000480
 8001d58:	20000028 	.word	0x20000028
 8001d5c:	2000047c 	.word	0x2000047c
 8001d60:	20000024 	.word	0x20000024
 8001d64:	20000478 	.word	0x20000478
 8001d68:	20000020 	.word	0x20000020
 8001d6c:	20000474 	.word	0x20000474
 8001d70:	2000001c 	.word	0x2000001c
 8001d74:	20000470 	.word	0x20000470
 8001d78:	20000018 	.word	0x20000018
 8001d7c:	2000046c 	.word	0x2000046c
 8001d80:	20000014 	.word	0x20000014
 8001d84:	20000468 	.word	0x20000468
 8001d88:	20000010 	.word	0x20000010
 8001d8c:	20000464 	.word	0x20000464
 8001d90:	2000000c 	.word	0x2000000c
 8001d94:	20000460 	.word	0x20000460
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	2000045c 	.word	0x2000045c
 8001da0:	f8df b08c 	ldr.w	fp, [pc, #140]	@ 8001e30 <tranposition__note_update+0x3dc>
 8001da4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001da8:	eddb 6a00 	vldr	s13, [fp]
 8001dac:	eee7 7a26 	vfma.f32	s15, s14, s13

	/* ***************************************************************
	 This batch of code is to just update the index if the note is active.
	 Since the active list should only ever hold a 0 or a 1, this code works. Avoid if statements
	 ***************************************************************************/
	my_index[NOTE_C] += active[NOTE_C];
 8001db0:	9a02      	ldr	r2, [sp, #8]
	my_index[NOTE_F] += active[NOTE_F];
	my_index[NOTE_Fs] += active[NOTE_Fs];
	my_index[NOTE_G] += active[NOTE_G];
	my_index[NOTE_Gs] += active[NOTE_Gs];
	my_index[NOTE_A] += active[NOTE_A];
	my_index[NOTE_As] += active[NOTE_As];
 8001db2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
	my_index[NOTE_C] += active[NOTE_C];
 8001db4:	4402      	add	r2, r0
 8001db6:	4610      	mov	r0, r2
	my_index[NOTE_Cs] += active[NOTE_Cs];
 8001db8:	9a03      	ldr	r2, [sp, #12]
 8001dba:	440a      	add	r2, r1
 8001dbc:	4693      	mov	fp, r2
	my_index[NOTE_D] += active[NOTE_D];
 8001dbe:	9a04      	ldr	r2, [sp, #16]
	my_index[NOTE_B] += active[NOTE_B];
 8001dc0:	990d      	ldr	r1, [sp, #52]	@ 0x34
	my_index[NOTE_D] += active[NOTE_D];
 8001dc2:	4422      	add	r2, r4
 8001dc4:	4614      	mov	r4, r2
	my_index[NOTE_Ds] += active[NOTE_Ds];
 8001dc6:	9a05      	ldr	r2, [sp, #20]
 8001dc8:	4452      	add	r2, sl
 8001dca:	4692      	mov	sl, r2
	my_index[NOTE_E] += active[NOTE_E];
 8001dcc:	9a06      	ldr	r2, [sp, #24]
 8001dce:	444a      	add	r2, r9
 8001dd0:	4691      	mov	r9, r2
	my_index[NOTE_F] += active[NOTE_F];
 8001dd2:	9a07      	ldr	r2, [sp, #28]
 8001dd4:	4442      	add	r2, r8
 8001dd6:	4690      	mov	r8, r2
	my_index[NOTE_Fs] += active[NOTE_Fs];
 8001dd8:	9a08      	ldr	r2, [sp, #32]
 8001dda:	4472      	add	r2, lr
 8001ddc:	4696      	mov	lr, r2
	my_index[NOTE_G] += active[NOTE_G];
 8001dde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001de0:	4462      	add	r2, ip
 8001de2:	4694      	mov	ip, r2
	my_index[NOTE_Gs] += active[NOTE_Gs];
 8001de4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001de6:	443a      	add	r2, r7
 8001de8:	4617      	mov	r7, r2
	my_index[NOTE_A] += active[NOTE_A];
 8001dea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8001dec:	4432      	add	r2, r6
 8001dee:	4616      	mov	r6, r2
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8001df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	my_index[NOTE_As] += active[NOTE_As];
 8001df4:	9a00      	ldr	r2, [sp, #0]
 8001df6:	4415      	add	r5, r2
	my_index[NOTE_B] += active[NOTE_B];
 8001df8:	9a01      	ldr	r2, [sp, #4]
	my_index[NOTE_Gs] += active[NOTE_Gs];
 8001dfa:	621f      	str	r7, [r3, #32]
	my_index[NOTE_Cs] += active[NOTE_Cs];
 8001dfc:	e9c3 0b00 	strd	r0, fp, [r3]
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8001e00:	ee17 0a90 	vmov	r0, s15



	return	wave_out * 12;
 8001e04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	my_index[NOTE_B] += active[NOTE_B];
 8001e08:	4411      	add	r1, r2

}
 8001e0a:	0080      	lsls	r0, r0, #2
	my_index[NOTE_Ds] += active[NOTE_Ds];
 8001e0c:	e9c3 4a02 	strd	r4, sl, [r3, #8]
	my_index[NOTE_F] += active[NOTE_F];
 8001e10:	e9c3 9804 	strd	r9, r8, [r3, #16]
	my_index[NOTE_G] += active[NOTE_G];
 8001e14:	e9c3 ec06 	strd	lr, ip, [r3, #24]
	my_index[NOTE_B] += active[NOTE_B];
 8001e18:	e9c3 510a 	strd	r5, r1, [r3, #40]	@ 0x28
	my_index[NOTE_A] += active[NOTE_A];
 8001e1c:	625e      	str	r6, [r3, #36]	@ 0x24
}
 8001e1e:	b00f      	add	sp, #60	@ 0x3c
 8001e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e24:	eddf 7a01 	vldr	s15, [pc, #4]	@ 8001e2c <tranposition__note_update+0x3d8>
 8001e28:	e696      	b.n	8001b58 <tranposition__note_update+0x104>
 8001e2a:	bf00      	nop
 8001e2c:	00000000 	.word	0x00000000
 8001e30:	20000004 	.word	0x20000004

08001e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e38:	f7ff fcd6 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e3c:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e3e:	490d      	ldr	r1, [pc, #52]	@ (8001e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <LoopForever+0xe>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e54:	4c0a      	ldr	r4, [pc, #40]	@ (8001e80 <LoopForever+0x16>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e62:	f002 fd71 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e66:	f7fe fb6b 	bl	8000540 <main>

08001e6a <LoopForever>:

LoopForever:
    b LoopForever
 8001e6a:	e7fe      	b.n	8001e6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e74:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8001e78:	08039940 	.word	0x08039940
  ldr r2, =_sbss
 8001e7c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001e80:	20000490 	.word	0x20000490

08001e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC1_2_IRQHandler>
	...

08001e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e88:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_InitTick+0x40>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b90b      	cbnz	r3, 8001e94 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e90:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001e92:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e94:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <HAL_InitTick+0x44>)
 8001e96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e9a:	4605      	mov	r5, r0
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	6808      	ldr	r0, [r1, #0]
 8001ea2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ea6:	f000 f8ad 	bl	8002004 <HAL_SYSTICK_Config>
 8001eaa:	4604      	mov	r4, r0
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d1ef      	bne.n	8001e90 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb0:	2d0f      	cmp	r5, #15
 8001eb2:	d8ed      	bhi.n	8001e90 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f000 f858 	bl	8001f70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_InitTick+0x48>)
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	601d      	str	r5, [r3, #0]
}
 8001ec6:	bd38      	pop	{r3, r4, r5, pc}
 8001ec8:	2000018c 	.word	0x2000018c
 8001ecc:	20000034 	.word	0x20000034
 8001ed0:	20000190 	.word	0x20000190

08001ed4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <HAL_Init+0x2c>)
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 8001edc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ede:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee2:	f000 f833 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff ffce 	bl	8001e88 <HAL_InitTick>
 8001eec:	b110      	cbz	r0, 8001ef4 <HAL_Init+0x20>
    status = HAL_ERROR;
 8001eee:	2401      	movs	r4, #1
}
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	bd10      	pop	{r4, pc}
 8001ef4:	4604      	mov	r4, r0
    HAL_MspInit();
 8001ef6:	f7ff f95d 	bl	80011b4 <HAL_MspInit>
}
 8001efa:	4620      	mov	r0, r4
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000

08001f04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001f04:	4a03      	ldr	r2, [pc, #12]	@ (8001f14 <HAL_IncTick+0x10>)
 8001f06:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <HAL_IncTick+0x14>)
 8001f08:	6811      	ldr	r1, [r2, #0]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	440b      	add	r3, r1
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	2000048c 	.word	0x2000048c
 8001f18:	2000018c 	.word	0x2000018c

08001f1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f1c:	4b01      	ldr	r3, [pc, #4]	@ (8001f24 <HAL_GetTick+0x8>)
 8001f1e:	6818      	ldr	r0, [r3, #0]
}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	2000048c 	.word	0x2000048c

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b538      	push	{r3, r4, r5, lr}
 8001f2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff fff6 	bl	8001f1c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f30:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001f32:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001f34:	d002      	beq.n	8001f3c <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8001f36:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <HAL_Delay+0x20>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f3c:	f7ff ffee 	bl	8001f1c <HAL_GetTick>
 8001f40:	1b40      	subs	r0, r0, r5
 8001f42:	42a0      	cmp	r0, r4
 8001f44:	d3fa      	bcc.n	8001f3c <HAL_Delay+0x14>
  {
  }
}
 8001f46:	bd38      	pop	{r3, r4, r5, pc}
 8001f48:	2000018c 	.word	0x2000018c

08001f4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4907      	ldr	r1, [pc, #28]	@ (8001f6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f4e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f56:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001f66:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_NVIC_SetPriority+0x70>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7a:	f1c3 0e07 	rsb	lr, r3, #7
 8001f7e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f86:	bf28      	it	cs
 8001f88:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8c:	f1bc 0f06 	cmp.w	ip, #6
 8001f90:	d91c      	bls.n	8001fcc <HAL_NVIC_SetPriority+0x5c>
 8001f92:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	fa03 f30c 	lsl.w	r3, r3, ip
 8001f9e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	fa03 f30e 	lsl.w	r3, r3, lr
 8001faa:	ea21 0303 	bic.w	r3, r1, r3
 8001fae:	fa03 f30c 	lsl.w	r3, r3, ip
 8001fb2:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001fb6:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001fba:	db0a      	blt.n	8001fd2 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001fc0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001fc4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001fc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fcc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	4694      	mov	ip, r2
 8001fd0:	e7e7      	b.n	8001fa2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_NVIC_SetPriority+0x74>)
 8001fd4:	f000 000f 	and.w	r0, r0, #15
 8001fd8:	4402      	add	r2, r0
 8001fda:	7613      	strb	r3, [r2, #24]
 8001fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fe0:	e000ed00 	.word	0xe000ed00
 8001fe4:	e000ecfc 	.word	0xe000ecfc

08001fe8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	db07      	blt.n	8001ffc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <HAL_NVIC_EnableIRQ+0x18>)
 8001fee:	0941      	lsrs	r1, r0, #5
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f000 001f 	and.w	r0, r0, #31
 8001ff6:	4083      	lsls	r3, r0
 8001ff8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e100 	.word	0xe000e100

08002004 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	3801      	subs	r0, #1
 8002006:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800200a:	d301      	bcc.n	8002010 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800200e:	4770      	bx	lr
{
 8002010:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002016:	4c07      	ldr	r4, [pc, #28]	@ (8002034 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002018:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800201e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002022:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002024:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002026:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	6119      	str	r1, [r3, #16]
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8002038:	b188      	cbz	r0, 800205e <HAL_DAC_Init+0x26>
{
 800203a:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800203c:	7903      	ldrb	r3, [r0, #4]
 800203e:	4604      	mov	r4, r0
 8002040:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002044:	b13b      	cbz	r3, 8002056 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002046:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002048:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800204a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800204c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800204e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002050:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002052:	4618      	mov	r0, r3
}
 8002054:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8002056:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002058:	f7ff f8c4 	bl	80011e4 <HAL_DAC_MspInit>
 800205c:	e7f3      	b.n	8002046 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 800205e:	2001      	movs	r0, #1
}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002064:	7942      	ldrb	r2, [r0, #5]
 8002066:	2a01      	cmp	r2, #1
 8002068:	d027      	beq.n	80020ba <HAL_DAC_Start+0x56>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800206a:	4603      	mov	r3, r0
 800206c:	2202      	movs	r2, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800206e:	6800      	ldr	r0, [r0, #0]
{
 8002070:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 8002072:	711a      	strb	r2, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8002074:	6804      	ldr	r4, [r0, #0]
 8002076:	f001 0c10 	and.w	ip, r1, #16
 800207a:	2201      	movs	r2, #1
 800207c:	fa02 f20c 	lsl.w	r2, r2, ip
 8002080:	4322      	orrs	r2, r4
 8002082:	6002      	str	r2, [r0, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002084:	6802      	ldr	r2, [r0, #0]
  if(Channel == DAC_CHANNEL_1)
 8002086:	b971      	cbnz	r1, 80020a6 <HAL_DAC_Start+0x42>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002088:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 800208c:	2a04      	cmp	r2, #4
 800208e:	d103      	bne.n	8002098 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002090:	6842      	ldr	r2, [r0, #4]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	6042      	str	r2, [r0, #4]
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002098:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 800209a:	2201      	movs	r2, #1
 800209c:	711a      	strb	r2, [r3, #4]
  __HAL_UNLOCK(hdac);
 800209e:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 80020a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020a4:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80020a6:	f402 1270 	and.w	r2, r2, #3932160	@ 0x3c0000
 80020aa:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80020ae:	d1f3      	bne.n	8002098 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80020b0:	6842      	ldr	r2, [r0, #4]
 80020b2:	f042 0202 	orr.w	r2, r2, #2
 80020b6:	6042      	str	r2, [r0, #4]
 80020b8:	e7ee      	b.n	8002098 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 80020ba:	2002      	movs	r0, #2
}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop

080020c0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80020c0:	b410      	push	{r4}
 80020c2:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80020c4:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0;
 80020c6:	2400      	movs	r4, #0
 80020c8:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 80020ca:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80020cc:	b951      	cbnz	r1, 80020e4 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80020ce:	9901      	ldr	r1, [sp, #4]
 80020d0:	3108      	adds	r1, #8
 80020d2:	440a      	add	r2, r1
 80020d4:	9201      	str	r2, [sp, #4]
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80020d6:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 80020d8:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	b003      	add	sp, #12
 80020de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020e2:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80020e4:	9901      	ldr	r1, [sp, #4]
 80020e6:	3114      	adds	r1, #20
 80020e8:	440a      	add	r2, r1
 80020ea:	9201      	str	r2, [sp, #4]
 80020ec:	e7f3      	b.n	80020d6 <HAL_DAC_SetValue+0x16>
 80020ee:	bf00      	nop

080020f0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @brief  DMA underrun DAC callback for channel1.
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop

080020f4 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80020f4:	6803      	ldr	r3, [r0, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	0491      	lsls	r1, r2, #18
{
 80020fa:	b510      	push	{r4, lr}
 80020fc:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80020fe:	d502      	bpl.n	8002106 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002102:	0492      	lsls	r2, r2, #18
 8002104:	d418      	bmi.n	8002138 <HAL_DAC_IRQHandler+0x44>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	0091      	lsls	r1, r2, #2
 800210a:	d502      	bpl.n	8002112 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800210c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	d400      	bmi.n	8002114 <HAL_DAC_IRQHandler+0x20>
}
 8002112:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8002114:	2204      	movs	r2, #4
 8002116:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002118:	6922      	ldr	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800211a:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800211e:	f042 0202 	orr.w	r2, r2, #2
 8002122:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002124:	6359      	str	r1, [r3, #52]	@ 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800212c:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800212e:	601a      	str	r2, [r3, #0]
}
 8002130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002134:	f000 b8a8 	b.w	8002288 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002138:	2204      	movs	r2, #4
 800213a:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800213c:	6902      	ldr	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800213e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002148:	6359      	str	r1, [r3, #52]	@ 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002150:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002152:	f7ff ffcd 	bl	80020f0 <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	e7d5      	b.n	8002106 <HAL_DAC_IRQHandler+0x12>
 800215a:	bf00      	nop

0800215c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800215e:	7943      	ldrb	r3, [r0, #5]
 8002160:	2b01      	cmp	r3, #1
{
 8002162:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002164:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8002166:	f000 8085 	beq.w	8002274 <HAL_DAC_ConfigChannel+0x118>
 800216a:	2301      	movs	r3, #1
 800216c:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800216e:	2904      	cmp	r1, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8002170:	f04f 0302 	mov.w	r3, #2
 8002174:	4605      	mov	r5, r0
 8002176:	4614      	mov	r4, r2
 8002178:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800217a:	d038      	beq.n	80021ee <HAL_DAC_ConfigChannel+0x92>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800217c:	6800      	ldr	r0, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800217e:	f002 0210 	and.w	r2, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002182:	6933      	ldr	r3, [r6, #16]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d108      	bne.n	800219a <HAL_DAC_ConfigChannel+0x3e>
    tmpreg1 = hdac->Instance->CCR;
 8002188:	6b84      	ldr	r4, [r0, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800218a:	6973      	ldr	r3, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800218c:	271f      	movs	r7, #31
 800218e:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002190:	4093      	lsls	r3, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002192:	ea24 0407 	bic.w	r4, r4, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002196:	4323      	orrs	r3, r4
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002198:	6383      	str	r3, [r0, #56]	@ 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800219a:	e9d6 3402 	ldrd	r3, r4, [r6, #8]
 800219e:	4323      	orrs	r3, r4
 80021a0:	430b      	orrs	r3, r1
  tmpreg1 = hdac->Instance->MCR;
 80021a2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021a4:	6871      	ldr	r1, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80021a6:	2607      	movs	r6, #7
 80021a8:	4096      	lsls	r6, r2
 80021aa:	ea24 0406 	bic.w	r4, r4, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021ae:	4093      	lsls	r3, r2
 80021b0:	4323      	orrs	r3, r4
  hdac->Instance->MCR = tmpreg1;
 80021b2:	63c3      	str	r3, [r0, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80021b4:	6803      	ldr	r3, [r0, #0]
 80021b6:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 80021ba:	4094      	lsls	r4, r2
 80021bc:	ea23 0304 	bic.w	r3, r3, r4
 80021c0:	6003      	str	r3, [r0, #0]
  tmpreg1 = hdac->Instance->CR;
 80021c2:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80021c4:	f640 74fc 	movw	r4, #4092	@ 0xffc
 80021c8:	4094      	lsls	r4, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021ca:	4091      	lsls	r1, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80021cc:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021d0:	430b      	orrs	r3, r1
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021d2:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80021d4:	6803      	ldr	r3, [r0, #0]
 80021d6:	21c0      	movs	r1, #192	@ 0xc0
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	ea23 0302 	bic.w	r3, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021e0:	2100      	movs	r1, #0
  hdac->State = HAL_DAC_STATE_READY;
 80021e2:	2201      	movs	r2, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80021e4:	6003      	str	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80021e6:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 80021e8:	7169      	strb	r1, [r5, #5]

  /* Return function status */
  return HAL_OK;
 80021ea:	4608      	mov	r0, r1
}
 80021ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 80021ee:	f7ff fe95 	bl	8001f1c <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80021f2:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80021f4:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80021f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 80021f8:	b154      	cbz	r4, 8002210 <HAL_DAC_ConfigChannel+0xb4>
 80021fa:	e01c      	b.n	8002236 <HAL_DAC_ConfigChannel+0xda>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80021fc:	f7ff fe8e 	bl	8001f1c <HAL_GetTick>
 8002200:	1bc0      	subs	r0, r0, r7
 8002202:	2801      	cmp	r0, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002204:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002206:	d902      	bls.n	800220e <HAL_DAC_ConfigChannel+0xb2>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800220a:	0412      	lsls	r2, r2, #16
 800220c:	d434      	bmi.n	8002278 <HAL_DAC_ConfigChannel+0x11c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800220e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	d4f3      	bmi.n	80021fc <HAL_DAC_ConfigChannel+0xa0>
      HAL_Delay(1);
 8002214:	2001      	movs	r0, #1
 8002216:	f7ff fe87 	bl	8001f28 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800221a:	6828      	ldr	r0, [r5, #0]
 800221c:	69b3      	ldr	r3, [r6, #24]
 800221e:	6403      	str	r3, [r0, #64]	@ 0x40
 8002220:	e011      	b.n	8002246 <HAL_DAC_ConfigChannel+0xea>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002222:	f7ff fe7b 	bl	8001f1c <HAL_GetTick>
 8002226:	1bc0      	subs	r0, r0, r7
 8002228:	2801      	cmp	r0, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800222a:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800222c:	d902      	bls.n	8002234 <HAL_DAC_ConfigChannel+0xd8>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800222e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002230:	2a00      	cmp	r2, #0
 8002232:	db21      	blt.n	8002278 <HAL_DAC_ConfigChannel+0x11c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002236:	2b00      	cmp	r3, #0
 8002238:	dbf3      	blt.n	8002222 <HAL_DAC_ConfigChannel+0xc6>
      HAL_Delay(1U);
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff fe74 	bl	8001f28 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002240:	6828      	ldr	r0, [r5, #0]
 8002242:	69b3      	ldr	r3, [r6, #24]
 8002244:	6443      	str	r3, [r0, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002246:	f004 0210 	and.w	r2, r4, #16
 800224a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800224c:	69f1      	ldr	r1, [r6, #28]
 800224e:	f240 34ff 	movw	r4, #1023	@ 0x3ff
 8002252:	4094      	lsls	r4, r2
 8002254:	4091      	lsls	r1, r2
 8002256:	ea23 0304 	bic.w	r3, r3, r4
 800225a:	430b      	orrs	r3, r1
 800225c:	6483      	str	r3, [r0, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800225e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002260:	6a31      	ldr	r1, [r6, #32]
 8002262:	24ff      	movs	r4, #255	@ 0xff
 8002264:	4094      	lsls	r4, r2
 8002266:	4091      	lsls	r1, r2
 8002268:	ea23 0304 	bic.w	r3, r3, r4
 800226c:	430b      	orrs	r3, r1
 800226e:	64c3      	str	r3, [r0, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002270:	6831      	ldr	r1, [r6, #0]
 8002272:	e786      	b.n	8002182 <HAL_DAC_ConfigChannel+0x26>
  __HAL_LOCK(hdac);
 8002274:	2002      	movs	r0, #2
}
 8002276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002278:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800227a:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002282:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8002284:	2003      	movs	r0, #3
}
 8002286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002288 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @brief  DMA underrun DAC callback for Channel2.
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800228c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002290:	2a02      	cmp	r2, #2
{
 8002292:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002294:	d006      	beq.n	80022a4 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002296:	2204      	movs	r2, #4
 8002298:	63c2      	str	r2, [r0, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229a:	2200      	movs	r2, #0

    return HAL_ERROR;
 800229c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800229e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 80022a2:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a4:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022a6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a8:	6808      	ldr	r0, [r1, #0]
 80022aa:	f020 000e 	bic.w	r0, r0, #14
 80022ae:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80022b0:	6808      	ldr	r0, [r1, #0]
 80022b2:	f020 0001 	bic.w	r0, r0, #1
 80022b6:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022b8:	f04f 0c01 	mov.w	ip, #1
 80022bc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80022be:	f002 021c 	and.w	r2, r2, #28
 80022c2:	fa0c f202 	lsl.w	r2, ip, r2
 80022c6:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 80022c8:	2200      	movs	r2, #0
    return status;
 80022ca:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80022cc:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80022d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop

080022d8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80022d8:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80022dc:	2a02      	cmp	r2, #2
 80022de:	d003      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e0:	2204      	movs	r2, #4
 80022e2:	63c2      	str	r2, [r0, #60]	@ 0x3c

    status = HAL_ERROR;
 80022e4:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80022e6:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e8:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ea:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 80022ec:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ee:	680c      	ldr	r4, [r1, #0]
 80022f0:	f024 040e 	bic.w	r4, r4, #14
 80022f4:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80022f6:	680c      	ldr	r4, [r1, #0]
 80022f8:	f024 0401 	bic.w	r4, r4, #1
 80022fc:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022fe:	f002 021c 	and.w	r2, r2, #28
 8002302:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002304:	2101      	movs	r1, #1
 8002306:	fa01 f202 	lsl.w	r2, r1, r2
 800230a:	6062      	str	r2, [r4, #4]
    if (hdma->XferAbortCallback != NULL)
 800230c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800230e:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002312:	2400      	movs	r4, #0
 8002314:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8002318:	b102      	cbz	r2, 800231c <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 800231a:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800231c:	2000      	movs	r0, #0
}
 800231e:	bd10      	pop	{r4, pc}

08002320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002324:	680c      	ldr	r4, [r1, #0]
{
 8002326:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002328:	2c00      	cmp	r4, #0
 800232a:	f000 809c 	beq.w	8002466 <HAL_GPIO_Init+0x146>
  uint32_t position = 0x00u;
 800232e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002330:	f04f 0b01 	mov.w	fp, #1
 8002334:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8002338:	ea1e 0a04 	ands.w	sl, lr, r4
 800233c:	f000 808e 	beq.w	800245c <HAL_GPIO_Init+0x13c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002340:	684d      	ldr	r5, [r1, #4]
 8002342:	f005 0203 	and.w	r2, r5, #3
 8002346:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800234a:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800234c:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002350:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002354:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002358:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800235c:	f240 8086 	bls.w	800246c <HAL_GPIO_Init+0x14c>
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002360:	2a03      	cmp	r2, #3
 8002362:	f040 80c1 	bne.w	80024e8 <HAL_GPIO_Init+0x1c8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002366:	f8d0 802c 	ldr.w	r8, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800236a:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800236e:	f3c5 0ec0 	ubfx	lr, r5, #3, #1
 8002372:	fa0e fe03 	lsl.w	lr, lr, r3
 8002376:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->ASCR = temp;
 800237a:	f8c0 e02c 	str.w	lr, [r0, #44]	@ 0x2c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800237e:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8002382:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002386:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800238a:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800238c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002390:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002392:	d063      	beq.n	800245c <HAL_GPIO_Init+0x13c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002394:	4f6c      	ldr	r7, [pc, #432]	@ (8002548 <HAL_GPIO_Init+0x228>)
 8002396:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	663a      	str	r2, [r7, #96]	@ 0x60
 800239e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80023a0:	f002 0201 	and.w	r2, r2, #1
 80023a4:	9203      	str	r2, [sp, #12]
 80023a6:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023a8:	f023 0203 	bic.w	r2, r3, #3
 80023ac:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80023b0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023b4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80023b8:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80023be:	260f      	movs	r6, #15
 80023c0:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c4:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c8:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023cc:	d022      	beq.n	8002414 <HAL_GPIO_Init+0xf4>
 80023ce:	4e5f      	ldr	r6, [pc, #380]	@ (800254c <HAL_GPIO_Init+0x22c>)
 80023d0:	42b0      	cmp	r0, r6
 80023d2:	f000 809c 	beq.w	800250e <HAL_GPIO_Init+0x1ee>
 80023d6:	4e5e      	ldr	r6, [pc, #376]	@ (8002550 <HAL_GPIO_Init+0x230>)
 80023d8:	42b0      	cmp	r0, r6
 80023da:	f000 809f 	beq.w	800251c <HAL_GPIO_Init+0x1fc>
 80023de:	f8df e178 	ldr.w	lr, [pc, #376]	@ 8002558 <HAL_GPIO_Init+0x238>
 80023e2:	4570      	cmp	r0, lr
 80023e4:	f000 808c 	beq.w	8002500 <HAL_GPIO_Init+0x1e0>
 80023e8:	f8df e170 	ldr.w	lr, [pc, #368]	@ 800255c <HAL_GPIO_Init+0x23c>
 80023ec:	4570      	cmp	r0, lr
 80023ee:	f000 809c 	beq.w	800252a <HAL_GPIO_Init+0x20a>
 80023f2:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8002560 <HAL_GPIO_Init+0x240>
 80023f6:	4570      	cmp	r0, lr
 80023f8:	f000 809e 	beq.w	8002538 <HAL_GPIO_Init+0x218>
 80023fc:	f8df e164 	ldr.w	lr, [pc, #356]	@ 8002564 <HAL_GPIO_Init+0x244>
 8002400:	4570      	cmp	r0, lr
 8002402:	bf0c      	ite	eq
 8002404:	f04f 0e06 	moveq.w	lr, #6
 8002408:	f04f 0e07 	movne.w	lr, #7
 800240c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002410:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002414:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002416:	4a4f      	ldr	r2, [pc, #316]	@ (8002554 <HAL_GPIO_Init+0x234>)
 8002418:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800241a:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 800241c:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002420:	4e4c      	ldr	r6, [pc, #304]	@ (8002554 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 8002422:	bf54      	ite	pl
 8002424:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002426:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 800242a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 800242c:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800242e:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002430:	4e48      	ldr	r6, [pc, #288]	@ (8002554 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 8002432:	bf54      	ite	pl
 8002434:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002436:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 800243a:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800243c:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800243e:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002440:	4e44      	ldr	r6, [pc, #272]	@ (8002554 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 8002442:	bf54      	ite	pl
 8002444:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002446:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 800244a:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 800244c:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800244e:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8002450:	4d40      	ldr	r5, [pc, #256]	@ (8002554 <HAL_GPIO_Init+0x234>)
        temp &= ~(iocurrent);
 8002452:	bf54      	ite	pl
 8002454:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002456:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 800245a:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 800245c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245e:	fa34 f203 	lsrs.w	r2, r4, r3
 8002462:	f47f af67 	bne.w	8002334 <HAL_GPIO_Init+0x14>
  }
}
 8002466:	b005      	add	sp, #20
 8002468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800246c:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002470:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002472:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002476:	fa06 f80c 	lsl.w	r8, r6, ip
 800247a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800247e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8002482:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002486:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002488:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248c:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8002490:	fa0e fe03 	lsl.w	lr, lr, r3
 8002494:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8002498:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800249c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a0:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a4:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a8:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ac:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80024ae:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b2:	f47f af64 	bne.w	800237e <HAL_GPIO_Init+0x5e>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024b6:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 80024b8:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024bc:	f003 0e07 	and.w	lr, r3, #7
 80024c0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80024c4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024c8:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 80024cc:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024d0:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024d2:	260f      	movs	r6, #15
 80024d4:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024d8:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024da:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024de:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 80024e2:	f8c8 e020 	str.w	lr, [r8, #32]
 80024e6:	e74a      	b.n	800237e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->PUPDR;
 80024e8:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024ee:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f2:	fa06 fe0c 	lsl.w	lr, r6, ip
 80024f6:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 80024fa:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fe:	e73e      	b.n	800237e <HAL_GPIO_Init+0x5e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002500:	f04f 0e03 	mov.w	lr, #3
 8002504:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002508:	ea47 070c 	orr.w	r7, r7, ip
 800250c:	e782      	b.n	8002414 <HAL_GPIO_Init+0xf4>
 800250e:	f04f 0e01 	mov.w	lr, #1
 8002512:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002516:	ea47 070c 	orr.w	r7, r7, ip
 800251a:	e77b      	b.n	8002414 <HAL_GPIO_Init+0xf4>
 800251c:	f04f 0e02 	mov.w	lr, #2
 8002520:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002524:	ea47 070c 	orr.w	r7, r7, ip
 8002528:	e774      	b.n	8002414 <HAL_GPIO_Init+0xf4>
 800252a:	f04f 0e04 	mov.w	lr, #4
 800252e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002532:	ea47 070c 	orr.w	r7, r7, ip
 8002536:	e76d      	b.n	8002414 <HAL_GPIO_Init+0xf4>
 8002538:	f04f 0e05 	mov.w	lr, #5
 800253c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002540:	ea47 070c 	orr.w	r7, r7, ip
 8002544:	e766      	b.n	8002414 <HAL_GPIO_Init+0xf4>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	48000400 	.word	0x48000400
 8002550:	48000800 	.word	0x48000800
 8002554:	40010400 	.word	0x40010400
 8002558:	48000c00 	.word	0x48000c00
 800255c:	48001000 	.word	0x48001000
 8002560:	48001400 	.word	0x48001400
 8002564:	48001800 	.word	0x48001800

08002568 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002568:	6903      	ldr	r3, [r0, #16]
 800256a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800256c:	bf14      	ite	ne
 800256e:	2001      	movne	r0, #1
 8002570:	2000      	moveq	r0, #0
 8002572:	4770      	bx	lr

08002574 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002574:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002576:	6951      	ldr	r1, [r2, #20]
 8002578:	4201      	tst	r1, r0
 800257a:	d100      	bne.n	800257e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800257c:	4770      	bx	lr
{
 800257e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002580:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002582:	f7fe f935 	bl	80007f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002586:	bd08      	pop	{r3, pc}
 8002588:	40010400 	.word	0x40010400

0800258c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800258c:	6803      	ldr	r3, [r0, #0]
{
 800258e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002592:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002594:	6998      	ldr	r0, [r3, #24]
 8002596:	0684      	lsls	r4, r0, #26
 8002598:	d45e      	bmi.n	8002658 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
 800259a:	460e      	mov	r6, r1
 800259c:	4617      	mov	r7, r2
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259e:	f04f 0810 	mov.w	r8, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 80025a2:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025a4:	f012 0c10 	ands.w	ip, r2, #16
 80025a8:	d059      	beq.n	800265e <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025aa:	1c70      	adds	r0, r6, #1
 80025ac:	f8c3 801c 	str.w	r8, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025b0:	d160      	bne.n	8002674 <I2C_WaitOnSTOPFlagUntilTimeout+0xe8>
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	0691      	lsls	r1, r2, #26
 80025b6:	d5fc      	bpl.n	80025b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x26>
  uint32_t error_code = 0;
 80025b8:	2400      	movs	r4, #0

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ba:	2220      	movs	r2, #32
 80025bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025be:	f044 0c04 	orr.w	ip, r4, #4

    status = HAL_ERROR;
 80025c2:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025c4:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025c6:	05d0      	lsls	r0, r2, #23
 80025c8:	d532      	bpl.n	8002630 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025ca:	f44f 7180 	mov.w	r1, #256	@ 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025ce:	0554      	lsls	r4, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025d0:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80025d2:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025d6:	d504      	bpl.n	80025e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025dc:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80025de:	f04c 0c08 	orr.w	ip, ip, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025e2:	0596      	lsls	r6, r2, #22
 80025e4:	d504      	bpl.n	80025f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80025ea:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025ee:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80025f4:	bf44      	itt	mi
 80025f6:	2200      	movmi	r2, #0
 80025f8:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	07d1      	lsls	r1, r2, #31
 80025fe:	d403      	bmi.n	8002608 <I2C_WaitOnSTOPFlagUntilTimeout+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	4836      	ldr	r0, [pc, #216]	@ (80026e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x158>)
 800260c:	4002      	ands	r2, r0
 800260e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002610:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002612:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002614:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8002616:	ea43 030c 	orr.w	r3, r3, ip
 800261a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800261c:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002620:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8002624:	2300      	movs	r3, #0
 8002626:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 800262a:	2001      	movs	r0, #1
}
 800262c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002630:	0550      	lsls	r0, r2, #21
 8002632:	d4d1      	bmi.n	80025d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002634:	0594      	lsls	r4, r2, #22
 8002636:	d4d6      	bmi.n	80025e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
  if (status != HAL_OK)
 8002638:	2900      	cmp	r1, #0
 800263a:	d1d9      	bne.n	80025f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263c:	f7ff fc6e 	bl	8001f1c <HAL_GetTick>
 8002640:	1bc0      	subs	r0, r0, r7
 8002642:	42b0      	cmp	r0, r6
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002644:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002646:	d800      	bhi.n	800264a <I2C_WaitOnSTOPFlagUntilTimeout+0xbe>
 8002648:	b91e      	cbnz	r6, 8002652 <I2C_WaitOnSTOPFlagUntilTimeout+0xc6>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	f012 0220 	ands.w	r2, r2, #32
 8002650:	d007      	beq.n	8002662 <I2C_WaitOnSTOPFlagUntilTimeout+0xd6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	0692      	lsls	r2, r2, #26
 8002656:	d5a4      	bpl.n	80025a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002658:	2000      	movs	r0, #0
}
 800265a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	4661      	mov	r1, ip
 8002660:	e7b0      	b.n	80025c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002662:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002664:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002666:	430b      	orrs	r3, r1
 8002668:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800266a:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800266e:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 8002672:	e7d7      	b.n	8002624 <I2C_WaitOnSTOPFlagUntilTimeout+0x98>
  uint32_t error_code = 0;
 8002674:	2400      	movs	r4, #0
  uint32_t tickstart = Tickstart;
 8002676:	46b9      	mov	r9, r7
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	46a2      	mov	sl, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	0692      	lsls	r2, r2, #26
 800267e:	d42c      	bmi.n	80026da <I2C_WaitOnSTOPFlagUntilTimeout+0x14e>
 8002680:	f1ba 0f00 	cmp.w	sl, #0
 8002684:	d19b      	bne.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002686:	f7ff fc49 	bl	8001f1c <HAL_GetTick>
 800268a:	eba0 0009 	sub.w	r0, r0, r9
 800268e:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002690:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002692:	d301      	bcc.n	8002698 <I2C_WaitOnSTOPFlagUntilTimeout+0x10c>
 8002694:	2e00      	cmp	r6, #0
 8002696:	d1f0      	bne.n	800267a <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002698:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800269a:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800269e:	6999      	ldr	r1, [r3, #24]
 80026a0:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 80026a2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026a4:	d50b      	bpl.n	80026be <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
 80026a6:	0441      	lsls	r1, r0, #17
 80026a8:	d409      	bmi.n	80026be <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              (tmp1 != I2C_CR2_STOP) && \
 80026aa:	2a20      	cmp	r2, #32
 80026ac:	d007      	beq.n	80026be <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026b4:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80026b6:	f7ff fc31 	bl	8001f1c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ba:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80026bc:	4681      	mov	r9, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026be:	699a      	ldr	r2, [r3, #24]
 80026c0:	0690      	lsls	r0, r2, #26
 80026c2:	d4da      	bmi.n	800267a <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026c4:	f7ff fc2a 	bl	8001f1c <HAL_GetTick>
 80026c8:	eba0 0009 	sub.w	r0, r0, r9
 80026cc:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ce:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026d0:	d9f5      	bls.n	80026be <I2C_WaitOnSTOPFlagUntilTimeout+0x132>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026d2:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80026d4:	f04f 0a01 	mov.w	sl, #1
 80026d8:	e7cf      	b.n	800267a <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
    if (status == HAL_OK)
 80026da:	f1ba 0f00 	cmp.w	sl, #0
 80026de:	f43f af6c 	beq.w	80025ba <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80026e2:	e76c      	b.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d054      	beq.n	8002796 <HAL_I2C_Init+0xae>
{
 80026ec:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ee:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80026f2:	4604      	mov	r4, r0
 80026f4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d047      	beq.n	800278c <HAL_I2C_Init+0xa4>
  __HAL_I2C_DISABLE(hi2c);
 80026fc:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026fe:	2224      	movs	r2, #36	@ 0x24
 8002700:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002704:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002706:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8002708:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800270c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8002710:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002712:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002714:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002716:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002718:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800271c:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800271e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002720:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002722:	d009      	beq.n	8002738 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002724:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002728:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800272a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800272c:	d107      	bne.n	800273e <HAL_I2C_Init+0x56>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	e006      	b.n	8002746 <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002738:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800273c:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002744:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002746:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002748:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800274a:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 800274e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002752:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002754:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002756:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002758:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800275a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800275c:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002760:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002764:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002766:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002768:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800276a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800276c:	4301      	orrs	r1, r0
 800276e:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	f041 0101 	orr.w	r1, r1, #1
 8002776:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002778:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800277a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800277c:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800277e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002782:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 8002788:	4610      	mov	r0, r2
}
 800278a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800278c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002790:	f7fe fd60 	bl	8001254 <HAL_I2C_MspInit>
 8002794:	e7b2      	b.n	80026fc <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8002796:	2001      	movs	r0, #1
}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop

0800279c <HAL_I2C_Master_Transmit>:
{
 800279c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a0:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80027a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d129      	bne.n	8002800 <HAL_I2C_Master_Transmit+0x64>
    __HAL_LOCK(hi2c);
 80027ac:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	4604      	mov	r4, r0
 80027b4:	d024      	beq.n	8002800 <HAL_I2C_Master_Transmit+0x64>
 80027b6:	2301      	movs	r3, #1
 80027b8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80027bc:	468b      	mov	fp, r1
 80027be:	4615      	mov	r5, r2
 80027c0:	f7ff fbac 	bl	8001f1c <HAL_GetTick>
 80027c4:	4682      	mov	sl, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c6:	6820      	ldr	r0, [r4, #0]
 80027c8:	6983      	ldr	r3, [r0, #24]
 80027ca:	041a      	lsls	r2, r3, #16
 80027cc:	d51b      	bpl.n	8002806 <HAL_I2C_Master_Transmit+0x6a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ce:	f7ff fba5 	bl	8001f1c <HAL_GetTick>
 80027d2:	eba0 000a 	sub.w	r0, r0, sl
 80027d6:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027d8:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027da:	d9f5      	bls.n	80027c8 <HAL_I2C_Master_Transmit+0x2c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027dc:	6983      	ldr	r3, [r0, #24]
 80027de:	041b      	lsls	r3, r3, #16
 80027e0:	d5f2      	bpl.n	80027c8 <HAL_I2C_Master_Transmit+0x2c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e6:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ec:	6463      	str	r3, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80027ee:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f6:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80027fa:	2001      	movs	r0, #1
}
 80027fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002800:	2002      	movs	r0, #2
}
 8002802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002806:	2221      	movs	r2, #33	@ 0x21
 8002808:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280c:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800280e:	2210      	movs	r2, #16
 8002810:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8002816:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002818:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800281a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr  = pData;
 800281c:	6265      	str	r5, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800281e:	b29b      	uxth	r3, r3
 8002820:	2bff      	cmp	r3, #255	@ 0xff
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002822:	f3cb 0b09 	ubfx	fp, fp, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002826:	d85d      	bhi.n	80028e4 <HAL_I2C_Master_Transmit+0x148>
      hi2c->XferSize = hi2c->XferCount;
 8002828:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800282a:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
 800282c:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 812f 	bne.w	8002a92 <HAL_I2C_Master_Transmit+0x2f6>
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002834:	6843      	ldr	r3, [r0, #4]
 8002836:	4a9b      	ldr	r2, [pc, #620]	@ (8002aa4 <HAL_I2C_Master_Transmit+0x308>)
 8002838:	4013      	ands	r3, r2
 800283a:	ea43 030b 	orr.w	r3, r3, fp
 800283e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002842:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002846:	6043      	str	r3, [r0, #4]
    while (hi2c->XferCount > 0U)
 8002848:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 809c 	beq.w	800298a <HAL_I2C_Master_Transmit+0x1ee>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002852:	f04f 0910 	mov.w	r9, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002856:	6985      	ldr	r5, [r0, #24]
 8002858:	f015 0502 	ands.w	r5, r5, #2
 800285c:	d17f      	bne.n	800295e <HAL_I2C_Master_Transmit+0x1c2>
  uint32_t itflag   = hi2c->Instance->ISR;
 800285e:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002860:	f013 0310 	ands.w	r3, r3, #16
 8002864:	d079      	beq.n	800295a <HAL_I2C_Master_Transmit+0x1be>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002866:	1c71      	adds	r1, r6, #1
 8002868:	f8c0 901c 	str.w	r9, [r0, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800286c:	f040 80d8 	bne.w	8002a20 <HAL_I2C_Master_Transmit+0x284>
 8002870:	6983      	ldr	r3, [r0, #24]
 8002872:	069a      	lsls	r2, r3, #26
 8002874:	d5fc      	bpl.n	8002870 <HAL_I2C_Master_Transmit+0xd4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002876:	2320      	movs	r3, #32
 8002878:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800287a:	f045 0304 	orr.w	r3, r5, #4
    status = HAL_ERROR;
 800287e:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8002880:	6982      	ldr	r2, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002882:	05d5      	lsls	r5, r2, #23
 8002884:	d549      	bpl.n	800291a <HAL_I2C_Master_Transmit+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800288a:	61c1      	str	r1, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800288c:	0551      	lsls	r1, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800288e:	f043 0301 	orr.w	r3, r3, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002892:	d504      	bpl.n	800289e <HAL_I2C_Master_Transmit+0x102>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002894:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002898:	61c1      	str	r1, [r0, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800289a:	f043 0308 	orr.w	r3, r3, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800289e:	0596      	lsls	r6, r2, #22
 80028a0:	d504      	bpl.n	80028ac <HAL_I2C_Master_Transmit+0x110>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80028a6:	f043 0302 	orr.w	r3, r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028aa:	61c2      	str	r2, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028ac:	6982      	ldr	r2, [r0, #24]
 80028ae:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80028b0:	bf44      	itt	mi
 80028b2:	2200      	movmi	r2, #0
 80028b4:	6282      	strmi	r2, [r0, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b6:	6982      	ldr	r2, [r0, #24]
 80028b8:	07d2      	lsls	r2, r2, #31
 80028ba:	d403      	bmi.n	80028c4 <HAL_I2C_Master_Transmit+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028bc:	6982      	ldr	r2, [r0, #24]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	6182      	str	r2, [r0, #24]
    I2C_RESET_CR2(hi2c);
 80028c4:	6842      	ldr	r2, [r0, #4]
 80028c6:	4d78      	ldr	r5, [pc, #480]	@ (8002aa8 <HAL_I2C_Master_Transmit+0x30c>)
 80028c8:	402a      	ands	r2, r5
 80028ca:	6042      	str	r2, [r0, #4]
    hi2c->ErrorCode |= error_code;
 80028cc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ce:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	2020      	movs	r0, #32
    hi2c->ErrorCode |= error_code;
 80028d2:	4313      	orrs	r3, r2
 80028d4:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 80028d6:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80028da:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028de:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return status;
 80028e2:	e78a      	b.n	80027fa <HAL_I2C_Master_Transmit+0x5e>
 80028e4:	23ff      	movs	r3, #255	@ 0xff
 80028e6:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e8:	22fe      	movs	r2, #254	@ 0xfe
 80028ea:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
      xfermode = I2C_RELOAD_MODE;
 80028ee:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028f2:	f815 7b01 	ldrb.w	r7, [r5], #1
 80028f6:	6287      	str	r7, [r0, #40]	@ 0x28
      hi2c->XferSize--;
 80028f8:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80028fa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 80028fc:	6265      	str	r5, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80028fe:	3a01      	subs	r2, #1
 8002900:	b292      	uxth	r2, r2
 8002902:	8562      	strh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002904:	6842      	ldr	r2, [r0, #4]
 8002906:	4d67      	ldr	r5, [pc, #412]	@ (8002aa4 <HAL_I2C_Master_Transmit+0x308>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002908:	ea4b 0303 	orr.w	r3, fp, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800290c:	402a      	ands	r2, r5
 800290e:	4313      	orrs	r3, r2
 8002910:	430b      	orrs	r3, r1
 8002912:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002916:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002918:	e796      	b.n	8002848 <HAL_I2C_Master_Transmit+0xac>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800291a:	0557      	lsls	r7, r2, #21
 800291c:	d4ba      	bmi.n	8002894 <HAL_I2C_Master_Transmit+0xf8>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800291e:	0595      	lsls	r5, r2, #22
 8002920:	d4bf      	bmi.n	80028a2 <HAL_I2C_Master_Transmit+0x106>
  if (status != HAL_OK)
 8002922:	2900      	cmp	r1, #0
 8002924:	d1c2      	bne.n	80028ac <HAL_I2C_Master_Transmit+0x110>
    if (Timeout != HAL_MAX_DELAY)
 8002926:	1c77      	adds	r7, r6, #1
 8002928:	d095      	beq.n	8002856 <HAL_I2C_Master_Transmit+0xba>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7ff faf7 	bl	8001f1c <HAL_GetTick>
 800292e:	eba0 030a 	sub.w	r3, r0, sl
 8002932:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002934:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002936:	d301      	bcc.n	800293c <HAL_I2C_Master_Transmit+0x1a0>
 8002938:	2e00      	cmp	r6, #0
 800293a:	d18c      	bne.n	8002856 <HAL_I2C_Master_Transmit+0xba>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800293c:	6983      	ldr	r3, [r0, #24]
 800293e:	f013 0302 	ands.w	r3, r3, #2
 8002942:	d188      	bne.n	8002856 <HAL_I2C_Master_Transmit+0xba>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002944:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8002946:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800294a:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	430a      	orrs	r2, r1
 800294e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002950:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          return HAL_ERROR;
 8002958:	e74f      	b.n	80027fa <HAL_I2C_Master_Transmit+0x5e>
  HAL_StatusTypeDef status = HAL_OK;
 800295a:	4619      	mov	r1, r3
 800295c:	e790      	b.n	8002880 <HAL_I2C_Master_Transmit+0xe4>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800295e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002960:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002966:	6282      	str	r2, [r0, #40]	@ 0x28
      hi2c->XferCount--;
 8002968:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 800296a:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800296c:	3a01      	subs	r2, #1
 800296e:	b292      	uxth	r2, r2
 8002970:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002972:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002974:	3b01      	subs	r3, #1
 8002976:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002978:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800297a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800297c:	b102      	cbz	r2, 8002980 <HAL_I2C_Master_Transmit+0x1e4>
 800297e:	b1d3      	cbz	r3, 80029b6 <HAL_I2C_Master_Transmit+0x21a>
    while (hi2c->XferCount > 0U)
 8002980:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f af66 	bne.w	8002856 <HAL_I2C_Master_Transmit+0xba>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298a:	4652      	mov	r2, sl
 800298c:	4631      	mov	r1, r6
 800298e:	4620      	mov	r0, r4
 8002990:	f7ff fdfc 	bl	800258c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002994:	2800      	cmp	r0, #0
 8002996:	f47f af30 	bne.w	80027fa <HAL_I2C_Master_Transmit+0x5e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800299c:	4d42      	ldr	r5, [pc, #264]	@ (8002aa8 <HAL_I2C_Master_Transmit+0x30c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299e:	2120      	movs	r1, #32
 80029a0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	402a      	ands	r2, r5
 80029a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029a8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80029ac:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80029b4:	e725      	b.n	8002802 <HAL_I2C_Master_Transmit+0x66>
 80029b6:	1c71      	adds	r1, r6, #1
 80029b8:	d113      	bne.n	80029e2 <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ba:	6983      	ldr	r3, [r0, #24]
 80029bc:	061a      	lsls	r2, r3, #24
 80029be:	d5fc      	bpl.n	80029ba <HAL_I2C_Master_Transmit+0x21e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2bff      	cmp	r3, #255	@ 0xff
 80029c6:	d91c      	bls.n	8002a02 <HAL_I2C_Master_Transmit+0x266>
  MODIFY_REG(hi2c->Instance->CR2, \
 80029c8:	6843      	ldr	r3, [r0, #4]
 80029ca:	4a38      	ldr	r2, [pc, #224]	@ (8002aac <HAL_I2C_Master_Transmit+0x310>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	ea43 030b 	orr.w	r3, r3, fp
 80029d2:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029da:	22ff      	movs	r2, #255	@ 0xff
 80029dc:	8522      	strh	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80029de:	6043      	str	r3, [r0, #4]
}
 80029e0:	e7ce      	b.n	8002980 <HAL_I2C_Master_Transmit+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e2:	6983      	ldr	r3, [r0, #24]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	d4eb      	bmi.n	80029c0 <HAL_I2C_Master_Transmit+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e8:	f7ff fa98 	bl	8001f1c <HAL_GetTick>
 80029ec:	eba0 030a 	sub.w	r3, r0, sl
 80029f0:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029f2:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f4:	d301      	bcc.n	80029fa <HAL_I2C_Master_Transmit+0x25e>
 80029f6:	2e00      	cmp	r6, #0
 80029f8:	d1f3      	bne.n	80029e2 <HAL_I2C_Master_Transmit+0x246>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029fa:	6983      	ldr	r3, [r0, #24]
 80029fc:	061d      	lsls	r5, r3, #24
 80029fe:	d4f0      	bmi.n	80029e2 <HAL_I2C_Master_Transmit+0x246>
 8002a00:	e6ef      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x46>
          hi2c->XferSize = hi2c->XferCount;
 8002a02:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a04:	4929      	ldr	r1, [pc, #164]	@ (8002aac <HAL_I2C_Master_Transmit+0x310>)
          hi2c->XferSize = hi2c->XferCount;
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a0a:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a0c:	6843      	ldr	r3, [r0, #4]
 8002a0e:	400b      	ands	r3, r1
 8002a10:	ea43 030b 	orr.w	r3, r3, fp
 8002a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a1c:	6043      	str	r3, [r0, #4]
}
 8002a1e:	e7af      	b.n	8002980 <HAL_I2C_Master_Transmit+0x1e4>
  uint32_t tickstart = Tickstart;
 8002a20:	4657      	mov	r7, sl
  HAL_StatusTypeDef status = HAL_OK;
 8002a22:	46a8      	mov	r8, r5
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a24:	6983      	ldr	r3, [r0, #24]
 8002a26:	069b      	lsls	r3, r3, #26
 8002a28:	d42e      	bmi.n	8002a88 <HAL_I2C_Master_Transmit+0x2ec>
 8002a2a:	f1b8 0f00 	cmp.w	r8, #0
 8002a2e:	f47f af24 	bne.w	800287a <HAL_I2C_Master_Transmit+0xde>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7ff fa73 	bl	8001f1c <HAL_GetTick>
 8002a36:	1bc0      	subs	r0, r0, r7
 8002a38:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a3a:	6820      	ldr	r0, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	d301      	bcc.n	8002a42 <HAL_I2C_Master_Transmit+0x2a6>
 8002a3e:	2e00      	cmp	r6, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_I2C_Master_Transmit+0x288>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a42:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 8002a44:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a48:	6982      	ldr	r2, [r0, #24]
 8002a4a:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 8002a4c:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a4e:	d50b      	bpl.n	8002a68 <HAL_I2C_Master_Transmit+0x2cc>
 8002a50:	044a      	lsls	r2, r1, #17
 8002a52:	d409      	bmi.n	8002a68 <HAL_I2C_Master_Transmit+0x2cc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d007      	beq.n	8002a68 <HAL_I2C_Master_Transmit+0x2cc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a58:	6843      	ldr	r3, [r0, #4]
 8002a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a5e:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 8002a60:	f7ff fa5c 	bl	8001f1c <HAL_GetTick>
 8002a64:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a66:	6820      	ldr	r0, [r4, #0]
 8002a68:	6983      	ldr	r3, [r0, #24]
 8002a6a:	0699      	lsls	r1, r3, #26
 8002a6c:	d4da      	bmi.n	8002a24 <HAL_I2C_Master_Transmit+0x288>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a6e:	f7ff fa55 	bl	8001f1c <HAL_GetTick>
 8002a72:	1bc0      	subs	r0, r0, r7
 8002a74:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a76:	6820      	ldr	r0, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a78:	d9f6      	bls.n	8002a68 <HAL_I2C_Master_Transmit+0x2cc>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a7a:	6983      	ldr	r3, [r0, #24]
 8002a7c:	069b      	lsls	r3, r3, #26
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a7e:	f04f 0520 	mov.w	r5, #32
              status = HAL_ERROR;
 8002a82:	f04f 0801 	mov.w	r8, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a86:	d5d0      	bpl.n	8002a2a <HAL_I2C_Master_Transmit+0x28e>
    if (status == HAL_OK)
 8002a88:	f1b8 0f00 	cmp.w	r8, #0
 8002a8c:	f43f aef3 	beq.w	8002876 <HAL_I2C_Master_Transmit+0xda>
 8002a90:	e6f3      	b.n	800287a <HAL_I2C_Master_Transmit+0xde>
      hi2c->XferSize--;
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a96:	1c53      	adds	r3, r2, #1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	041b      	lsls	r3, r3, #16
      xfermode = I2C_AUTOEND_MODE;
 8002a9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002aa0:	e727      	b.n	80028f2 <HAL_I2C_Master_Transmit+0x156>
 8002aa2:	bf00      	nop
 8002aa4:	fc009800 	.word	0xfc009800
 8002aa8:	fe00e800 	.word	0xfe00e800
 8002aac:	fc009c00 	.word	0xfc009c00

08002ab0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002ab4:	2a20      	cmp	r2, #32
 8002ab6:	d123      	bne.n	8002b00 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002ab8:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abc:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002ac0:	2a01      	cmp	r2, #1
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	d01c      	beq.n	8002b00 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac6:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac8:	2024      	movs	r0, #36	@ 0x24
{
 8002aca:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002acc:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002ad0:	6810      	ldr	r0, [r2, #0]
 8002ad2:	f020 0001 	bic.w	r0, r0, #1
 8002ad6:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ad8:	6810      	ldr	r0, [r2, #0]
 8002ada:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002ade:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ae0:	6810      	ldr	r0, [r2, #0]
 8002ae2:	4301      	orrs	r1, r0
 8002ae4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ae6:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae8:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8002aec:	f041 0101 	orr.w	r1, r1, #1
 8002af0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002af6:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 8002afa:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002afc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002b00:	2002      	movs	r0, #2
}
 8002b02:	4770      	bx	lr

08002b04 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b04:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002b08:	2a20      	cmp	r2, #32
 8002b0a:	d122      	bne.n	8002b52 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8002b0c:	b500      	push	{lr}
 8002b0e:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b12:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002b16:	2a01      	cmp	r2, #1
 8002b18:	4603      	mov	r3, r0
 8002b1a:	d01c      	beq.n	8002b56 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b1c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1e:	2024      	movs	r0, #36	@ 0x24
 8002b20:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002b24:	6810      	ldr	r0, [r2, #0]
 8002b26:	f020 0001 	bic.w	r0, r0, #1
 8002b2a:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b2c:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b2e:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b32:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b36:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b38:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3a:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8002b3e:	f041 0101 	orr.w	r1, r1, #1
 8002b42:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8002b48:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b4c:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002b4e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8002b52:	2002      	movs	r0, #2
}
 8002b54:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002b56:	2002      	movs	r0, #2
}
 8002b58:	f85d fb04 	ldr.w	pc, [sp], #4

08002b5c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b5c:	4b02      	ldr	r3, [pc, #8]	@ (8002b68 <HAL_PWREx_GetVoltageRange+0xc>)
 8002b5e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002b60:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40007000 	.word	0x40007000

08002b6c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b6c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002b70:	d00e      	beq.n	8002b90 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b72:	4a1b      	ldr	r2, [pc, #108]	@ (8002be0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002b74:	6813      	ldr	r3, [r2, #0]
 8002b76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7e:	d005      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b80:	6813      	ldr	r3, [r2, #0]
 8002b82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b90:	4913      	ldr	r1, [pc, #76]	@ (8002be0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002b92:	680b      	ldr	r3, [r1, #0]
 8002b94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b9c:	d0f6      	beq.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b9e:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ba0:	4a10      	ldr	r2, [pc, #64]	@ (8002be4 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002baa:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bac:	6813      	ldr	r3, [r2, #0]
 8002bae:	4a0e      	ldr	r2, [pc, #56]	@ (8002be8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002bb0:	2032      	movs	r0, #50	@ 0x32
 8002bb2:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb6:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bbe:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bc0:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc4:	d506      	bpl.n	8002bd4 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002bc6:	e000      	b.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x5e>
 8002bc8:	b123      	cbz	r3, 8002bd4 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002bca:	694a      	ldr	r2, [r1, #20]
 8002bcc:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8002bce:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd2:	d4f9      	bmi.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bd4:	4b02      	ldr	r3, [pc, #8]	@ (8002be0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	055b      	lsls	r3, r3, #21
 8002bda:	d5d7      	bpl.n	8002b8c <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8002bdc:	2003      	movs	r0, #3
}
 8002bde:	4770      	bx	lr
 8002be0:	40007000 	.word	0x40007000
 8002be4:	20000034 	.word	0x20000034
 8002be8:	431bde83 	.word	0x431bde83

08002bec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bec:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bee:	4d20      	ldr	r5, [pc, #128]	@ (8002c70 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002bf0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002bf2:	00db      	lsls	r3, r3, #3
{
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bf8:	d51a      	bpl.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bfa:	f7ff ffaf 	bl	8002b5c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfe:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002c02:	d027      	beq.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c04:	2c80      	cmp	r4, #128	@ 0x80
 8002c06:	d82c      	bhi.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c08:	d02f      	beq.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c0a:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8002c0e:	fab4 f484 	clz	r4, r4
 8002c12:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c14:	4917      	ldr	r1, [pc, #92]	@ (8002c74 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002c16:	680b      	ldr	r3, [r1, #0]
 8002c18:	f023 0307 	bic.w	r3, r3, #7
 8002c1c:	4323      	orrs	r3, r4
 8002c1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c20:	6808      	ldr	r0, [r1, #0]
 8002c22:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002c26:	1b00      	subs	r0, r0, r4
 8002c28:	bf18      	it	ne
 8002c2a:	2001      	movne	r0, #1
 8002c2c:	b003      	add	sp, #12
 8002c2e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	65ab      	str	r3, [r5, #88]	@ 0x58
 8002c38:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002c42:	f7ff ff8b 	bl	8002b5c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c46:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c48:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c52:	d1d7      	bne.n	8002c04 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8002c54:	2c80      	cmp	r4, #128	@ 0x80
 8002c56:	d906      	bls.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c58:	2ca1      	cmp	r4, #161	@ 0xa1
 8002c5a:	bf34      	ite	cc
 8002c5c:	2401      	movcc	r4, #1
 8002c5e:	2402      	movcs	r4, #2
 8002c60:	e7d8      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c62:	2403      	movs	r4, #3
 8002c64:	e7d6      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c66:	2400      	movs	r4, #0
 8002c68:	e7d4      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6a:	2402      	movs	r4, #2
 8002c6c:	e7d2      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40022000 	.word	0x40022000

08002c78 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c78:	4a28      	ldr	r2, [pc, #160]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c7a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c7e:	f013 030c 	ands.w	r3, r3, #12
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x18>
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	d035      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d141      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8002c8c:	4824      	ldr	r0, [pc, #144]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c8e:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c90:	4a22      	ldr	r2, [pc, #136]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c92:	6811      	ldr	r1, [r2, #0]
 8002c94:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c96:	bf54      	ite	pl
 8002c98:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c9c:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002c9e:	4921      	ldr	r1, [pc, #132]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ca0:	bf54      	ite	pl
 8002ca2:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca6:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002caa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cae:	b303      	cbz	r3, 8002cf2 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	d11d      	bne.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d025      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x94>
 8002cc0:	4a19      	ldr	r2, [pc, #100]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	bf08      	it	eq
 8002cc6:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cc8:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cca:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ccc:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cd4:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd8:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cdc:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cde:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce2:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce4:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce6:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002cea:	fbb2 f0f3 	udiv	r0, r2, r3
 8002cee:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cf0:	2000      	movs	r0, #0
}
 8002cf2:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf4:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cf8:	2a01      	cmp	r2, #1
 8002cfa:	d0c9      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cfc:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002d04:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d06:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8002d0a:	d1d9      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8002d0c:	4804      	ldr	r0, [pc, #16]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d0e:	e7db      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	4805      	ldr	r0, [pc, #20]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d14:	bf18      	it	ne
 8002d16:	2000      	movne	r0, #0
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	08004a3c 	.word	0x08004a3c
 8002d28:	007a1200 	.word	0x007a1200

08002d2c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	f000 81f0 	beq.w	8003112 <HAL_RCC_OscConfig+0x3e6>
{
 8002d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d36:	4aa7      	ldr	r2, [pc, #668]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d38:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d3c:	68d6      	ldr	r6, [r2, #12]
 8002d3e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d40:	06d8      	lsls	r0, r3, #27
{
 8002d42:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d44:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d48:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d4c:	d52e      	bpl.n	8002dac <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d4e:	2d00      	cmp	r5, #0
 8002d50:	f000 8100 	beq.w	8002f54 <HAL_RCC_OscConfig+0x228>
 8002d54:	2d0c      	cmp	r5, #12
 8002d56:	f000 80fa 	beq.w	8002f4e <HAL_RCC_OscConfig+0x222>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d5a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8002d5c:	4f9d      	ldr	r7, [pc, #628]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 817e 	beq.w	8003060 <HAL_RCC_OscConfig+0x334>
        __HAL_RCC_MSI_ENABLE();
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002d6c:	f7ff f8d6 	bl	8001f1c <HAL_GetTick>
 8002d70:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d72:	e006      	b.n	8002d82 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d74:	f7ff f8d2 	bl	8001f1c <HAL_GetTick>
 8002d78:	eba0 0008 	sub.w	r0, r0, r8
 8002d7c:	2802      	cmp	r0, #2
 8002d7e:	f200 817f 	bhi.w	8003080 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	079b      	lsls	r3, r3, #30
 8002d86:	d5f5      	bpl.n	8002d74 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6a22      	ldr	r2, [r4, #32]
 8002d94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69e2      	ldr	r2, [r4, #28]
 8002da0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002da4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002da8:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	07d9      	lsls	r1, r3, #31
 8002dae:	f100 80a5 	bmi.w	8002efc <HAL_RCC_OscConfig+0x1d0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	0799      	lsls	r1, r3, #30
 8002db4:	d523      	bpl.n	8002dfe <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002db6:	2d04      	cmp	r5, #4
 8002db8:	f000 8142 	beq.w	8003040 <HAL_RCC_OscConfig+0x314>
 8002dbc:	2d0c      	cmp	r5, #12
 8002dbe:	f000 813c 	beq.w	800303a <HAL_RCC_OscConfig+0x30e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc2:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002dc4:	4e83      	ldr	r6, [pc, #524]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8175 	beq.w	80030b6 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 8002dcc:	6833      	ldr	r3, [r6, #0]
 8002dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002dd4:	f7ff f8a2 	bl	8001f1c <HAL_GetTick>
 8002dd8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dda:	e005      	b.n	8002de8 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ddc:	f7ff f89e 	bl	8001f1c <HAL_GetTick>
 8002de0:	1bc0      	subs	r0, r0, r7
 8002de2:	2802      	cmp	r0, #2
 8002de4:	f200 814c 	bhi.w	8003080 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de8:	6833      	ldr	r3, [r6, #0]
 8002dea:	055b      	lsls	r3, r3, #21
 8002dec:	d5f6      	bpl.n	8002ddc <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	6873      	ldr	r3, [r6, #4]
 8002df0:	6922      	ldr	r2, [r4, #16]
 8002df2:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8002df6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002dfa:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	0719      	lsls	r1, r3, #28
 8002e00:	d519      	bpl.n	8002e36 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e02:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002e04:	4e73      	ldr	r6, [pc, #460]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8103 	beq.w	8003012 <HAL_RCC_OscConfig+0x2e6>
      __HAL_RCC_LSI_ENABLE();
 8002e0c:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002e18:	f7ff f880 	bl	8001f1c <HAL_GetTick>
 8002e1c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e1e:	e005      	b.n	8002e2c <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e20:	f7ff f87c 	bl	8001f1c <HAL_GetTick>
 8002e24:	1bc0      	subs	r0, r0, r7
 8002e26:	2802      	cmp	r0, #2
 8002e28:	f200 812a 	bhi.w	8003080 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2c:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002e30:	079a      	lsls	r2, r3, #30
 8002e32:	d5f5      	bpl.n	8002e20 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	0758      	lsls	r0, r3, #29
 8002e38:	d53e      	bpl.n	8002eb8 <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e3a:	4b66      	ldr	r3, [pc, #408]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
 8002e3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e3e:	00d1      	lsls	r1, r2, #3
 8002e40:	f100 8137 	bmi.w	80030b2 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e46:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002e4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e56:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e58:	4f5f      	ldr	r7, [pc, #380]	@ (8002fd8 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	05da      	lsls	r2, r3, #23
 8002e5e:	f140 8172 	bpl.w	8003146 <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f000 8138 	beq.w	80030da <HAL_RCC_OscConfig+0x3ae>
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	f000 81ec 	beq.w	8003248 <HAL_RCC_OscConfig+0x51c>
 8002e70:	4f58      	ldr	r7, [pc, #352]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
 8002e72:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002e7e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 812c 	bne.w	80030e8 <HAL_RCC_OscConfig+0x3bc>
      tickstart = HAL_GetTick();
 8002e90:	f7ff f844 	bl	8001f1c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e94:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002e98:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e9a:	e006      	b.n	8002eaa <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9c:	f7ff f83e 	bl	8001f1c <HAL_GetTick>
 8002ea0:	eba0 0008 	sub.w	r0, r0, r8
 8002ea4:	4548      	cmp	r0, r9
 8002ea6:	f200 80eb 	bhi.w	8003080 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002eae:	0799      	lsls	r1, r3, #30
 8002eb0:	d4f4      	bmi.n	8002e9c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8002eb2:	2e00      	cmp	r6, #0
 8002eb4:	f040 8159 	bne.w	800316a <HAL_RCC_OscConfig+0x43e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002eba:	b1db      	cbz	r3, 8002ef4 <HAL_RCC_OscConfig+0x1c8>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	f000 816d 	beq.w	800319c <HAL_RCC_OscConfig+0x470>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec2:	2d0c      	cmp	r5, #12
 8002ec4:	f000 8095 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002ec8:	4c42      	ldr	r4, [pc, #264]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ed0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ed2:	f7ff f823 	bl	8001f1c <HAL_GetTick>
 8002ed6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	e005      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1ba>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7ff f81f 	bl	8001f1c <HAL_GetTick>
 8002ede:	1b40      	subs	r0, r0, r5
 8002ee0:	2802      	cmp	r0, #2
 8002ee2:	f200 80cd 	bhi.w	8003080 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	d4f6      	bmi.n	8002eda <HAL_RCC_OscConfig+0x1ae>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eec:	68e2      	ldr	r2, [r4, #12]
 8002eee:	4b3b      	ldr	r3, [pc, #236]	@ (8002fdc <HAL_RCC_OscConfig+0x2b0>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8002ef4:	2000      	movs	r0, #0
}
 8002ef6:	b003      	add	sp, #12
 8002ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002efc:	2d08      	cmp	r5, #8
 8002efe:	d07e      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2d2>
 8002f00:	2d0c      	cmp	r5, #12
 8002f02:	d07a      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f04:	6863      	ldr	r3, [r4, #4]
 8002f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0a:	f000 80bd 	beq.w	8003088 <HAL_RCC_OscConfig+0x35c>
 8002f0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f12:	f000 8136 	beq.w	8003182 <HAL_RCC_OscConfig+0x456>
 8002f16:	4f2f      	ldr	r7, [pc, #188]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f1e:	603a      	str	r2, [r7, #0]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f26:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 80b2 	bne.w	8003092 <HAL_RCC_OscConfig+0x366>
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fff5 	bl	8001f1c <HAL_GetTick>
 8002f32:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f34:	e006      	b.n	8002f44 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f36:	f7fe fff1 	bl	8001f1c <HAL_GetTick>
 8002f3a:	eba0 0008 	sub.w	r0, r0, r8
 8002f3e:	2864      	cmp	r0, #100	@ 0x64
 8002f40:	f200 809e 	bhi.w	8003080 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	0398      	lsls	r0, r3, #14
 8002f48:	d4f5      	bmi.n	8002f36 <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	e731      	b.n	8002db2 <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f4e:	2e01      	cmp	r6, #1
 8002f50:	f47f af03 	bne.w	8002d5a <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f54:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0799      	lsls	r1, r3, #30
 8002f5a:	d447      	bmi.n	8002fec <HAL_RCC_OscConfig+0x2c0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
 8002f5e:	6a20      	ldr	r0, [r4, #32]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	0712      	lsls	r2, r2, #28
 8002f64:	bf56      	itet	pl
 8002f66:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8002f6a:	681b      	ldrmi	r3, [r3, #0]
 8002f6c:	091b      	lsrpl	r3, r3, #4
 8002f6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f72:	4298      	cmp	r0, r3
 8002f74:	f200 80cf 	bhi.w	8003116 <HAL_RCC_OscConfig+0x3ea>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f78:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f042 0208 	orr.w	r2, r2, #8
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002f88:	4302      	orrs	r2, r0
 8002f8a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	69e1      	ldr	r1, [r4, #28]
 8002f90:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002f94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f98:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9a:	2d00      	cmp	r5, #0
 8002f9c:	f000 80eb 	beq.w	8003176 <HAL_RCC_OscConfig+0x44a>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa0:	f7ff fe6a 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_RCC_OscConfig+0x2a8>)
 8002fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8002fe0 <HAL_RCC_OscConfig+0x2b4>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8002fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe4 <HAL_RCC_OscConfig+0x2b8>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8002fba:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <HAL_RCC_OscConfig+0x2bc>)
 8002fbe:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8002fc0:	f7fe ff62 	bl	8001e88 <HAL_InitTick>
        if(status != HAL_OK)
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d196      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x1ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	07d9      	lsls	r1, r3, #31
 8002fcc:	f57f aef1 	bpl.w	8002db2 <HAL_RCC_OscConfig+0x86>
 8002fd0:	e794      	b.n	8002efc <HAL_RCC_OscConfig+0x1d0>
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40007000 	.word	0x40007000
 8002fdc:	feeefffc 	.word	0xfeeefffc
 8002fe0:	08004a74 	.word	0x08004a74
 8002fe4:	20000190 	.word	0x20000190
 8002fe8:	20000034 	.word	0x20000034
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fec:	69a3      	ldr	r3, [r4, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1b4      	bne.n	8002f5c <HAL_RCC_OscConfig+0x230>
    return HAL_ERROR;
 8002ff2:	2001      	movs	r0, #1
}
 8002ff4:	b003      	add	sp, #12
 8002ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ffa:	2e03      	cmp	r6, #3
 8002ffc:	d182      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1d8>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffe:	4a99      	ldr	r2, [pc, #612]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	0392      	lsls	r2, r2, #14
 8003004:	f57f aed5 	bpl.w	8002db2 <HAL_RCC_OscConfig+0x86>
 8003008:	6862      	ldr	r2, [r4, #4]
 800300a:	2a00      	cmp	r2, #0
 800300c:	f47f aed1 	bne.w	8002db2 <HAL_RCC_OscConfig+0x86>
 8003010:	e7ef      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_LSI_DISABLE();
 8003012:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800301e:	f7fe ff7d 	bl	8001f1c <HAL_GetTick>
 8003022:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003024:	e004      	b.n	8003030 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003026:	f7fe ff79 	bl	8001f1c <HAL_GetTick>
 800302a:	1bc0      	subs	r0, r0, r7
 800302c:	2802      	cmp	r0, #2
 800302e:	d827      	bhi.n	8003080 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003030:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8003034:	079b      	lsls	r3, r3, #30
 8003036:	d4f6      	bmi.n	8003026 <HAL_RCC_OscConfig+0x2fa>
 8003038:	e6fc      	b.n	8002e34 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800303a:	2e02      	cmp	r6, #2
 800303c:	f47f aec1 	bne.w	8002dc2 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003040:	4a88      	ldr	r2, [pc, #544]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	0552      	lsls	r2, r2, #21
 8003046:	d502      	bpl.n	800304e <HAL_RCC_OscConfig+0x322>
 8003048:	68e2      	ldr	r2, [r4, #12]
 800304a:	2a00      	cmp	r2, #0
 800304c:	d0d1      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304e:	4985      	ldr	r1, [pc, #532]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 8003050:	6920      	ldr	r0, [r4, #16]
 8003052:	684a      	ldr	r2, [r1, #4]
 8003054:	f022 52f8 	bic.w	r2, r2, #520093696	@ 0x1f000000
 8003058:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800305c:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800305e:	e6ce      	b.n	8002dfe <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8003068:	f7fe ff58 	bl	8001f1c <HAL_GetTick>
 800306c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	0798      	lsls	r0, r3, #30
 8003072:	d5a9      	bpl.n	8002fc8 <HAL_RCC_OscConfig+0x29c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003074:	f7fe ff52 	bl	8001f1c <HAL_GetTick>
 8003078:	eba0 0008 	sub.w	r0, r0, r8
 800307c:	2802      	cmp	r0, #2
 800307e:	d9f6      	bls.n	800306e <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8003080:	2003      	movs	r0, #3
}
 8003082:	b003      	add	sp, #12
 8003084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003088:	4a76      	ldr	r2, [pc, #472]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 800308a:	6813      	ldr	r3, [r2, #0]
 800308c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003090:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003092:	f7fe ff43 	bl	8001f1c <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003096:	f8df 81cc 	ldr.w	r8, [pc, #460]	@ 8003264 <HAL_RCC_OscConfig+0x538>
        tickstart = HAL_GetTick();
 800309a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309c:	e004      	b.n	80030a8 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309e:	f7fe ff3d 	bl	8001f1c <HAL_GetTick>
 80030a2:	1bc0      	subs	r0, r0, r7
 80030a4:	2864      	cmp	r0, #100	@ 0x64
 80030a6:	d8eb      	bhi.n	8003080 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a8:	f8d8 3000 	ldr.w	r3, [r8]
 80030ac:	039b      	lsls	r3, r3, #14
 80030ae:	d5f6      	bpl.n	800309e <HAL_RCC_OscConfig+0x372>
 80030b0:	e74b      	b.n	8002f4a <HAL_RCC_OscConfig+0x21e>
    FlagStatus       pwrclkchanged = RESET;
 80030b2:	2600      	movs	r6, #0
 80030b4:	e6d0      	b.n	8002e58 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80030b6:	6833      	ldr	r3, [r6, #0]
 80030b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030bc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80030be:	f7fe ff2d 	bl	8001f1c <HAL_GetTick>
 80030c2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c4:	e004      	b.n	80030d0 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c6:	f7fe ff29 	bl	8001f1c <HAL_GetTick>
 80030ca:	1bc0      	subs	r0, r0, r7
 80030cc:	2802      	cmp	r0, #2
 80030ce:	d8d7      	bhi.n	8003080 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030d0:	6833      	ldr	r3, [r6, #0]
 80030d2:	0558      	lsls	r0, r3, #21
 80030d4:	d4f7      	bmi.n	80030c6 <HAL_RCC_OscConfig+0x39a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	e691      	b.n	8002dfe <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030da:	4a62      	ldr	r2, [pc, #392]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 80030dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80030e8:	f7fe ff18 	bl	8001f1c <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ec:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 8003264 <HAL_RCC_OscConfig+0x538>
      tickstart = HAL_GetTick();
 80030f0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f2:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f6:	e004      	b.n	8003102 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f8:	f7fe ff10 	bl	8001f1c <HAL_GetTick>
 80030fc:	1bc0      	subs	r0, r0, r7
 80030fe:	4548      	cmp	r0, r9
 8003100:	d8be      	bhi.n	8003080 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003102:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8003106:	0798      	lsls	r0, r3, #30
 8003108:	d5f6      	bpl.n	80030f8 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 800310a:	2e00      	cmp	r6, #0
 800310c:	f43f aed4 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x18c>
 8003110:	e02b      	b.n	800316a <HAL_RCC_OscConfig+0x43e>
    return HAL_ERROR;
 8003112:	2001      	movs	r0, #1
}
 8003114:	4770      	bx	lr
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003116:	f7ff fd69 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 800311a:	2800      	cmp	r0, #0
 800311c:	f47f af69 	bne.w	8002ff2 <HAL_RCC_OscConfig+0x2c6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003120:	4b50      	ldr	r3, [pc, #320]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	f042 0208 	orr.w	r2, r2, #8
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	6a21      	ldr	r1, [r4, #32]
 800312e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	69e1      	ldr	r1, [r4, #28]
 800313a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800313e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	e72c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x274>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800314e:	f7fe fee5 	bl	8001f1c <HAL_GetTick>
 8003152:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	05db      	lsls	r3, r3, #23
 8003158:	f53f ae83 	bmi.w	8002e62 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315c:	f7fe fede 	bl	8001f1c <HAL_GetTick>
 8003160:	eba0 0008 	sub.w	r0, r0, r8
 8003164:	2802      	cmp	r0, #2
 8003166:	d9f5      	bls.n	8003154 <HAL_RCC_OscConfig+0x428>
 8003168:	e78a      	b.n	8003080 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_PWR_CLK_DISABLE();
 800316a:	4a3e      	ldr	r2, [pc, #248]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 800316c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800316e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003172:	6593      	str	r3, [r2, #88]	@ 0x58
 8003174:	e6a0      	b.n	8002eb8 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003176:	f7ff fd39 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 800317a:	2800      	cmp	r0, #0
 800317c:	f43f af10 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x274>
 8003180:	e737      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003182:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003186:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003198:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800319a:	e77a      	b.n	8003092 <HAL_RCC_OscConfig+0x366>
      pll_config = RCC->PLLCFGR;
 800319c:	4e31      	ldr	r6, [pc, #196]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 80031a0:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	f003 0103 	and.w	r1, r3, #3
 80031a6:	4291      	cmp	r1, r2
 80031a8:	d060      	beq.n	800326c <HAL_RCC_OscConfig+0x540>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031aa:	2d0c      	cmp	r5, #12
 80031ac:	f43f af21 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x2c6>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031b0:	4d2c      	ldr	r5, [pc, #176]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 80031b2:	682b      	ldr	r3, [r5, #0]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	f53f af1c 	bmi.w	8002ff2 <HAL_RCC_OscConfig+0x2c6>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031ba:	682b      	ldr	r3, [r5, #0]
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	f53f af18 	bmi.w	8002ff2 <HAL_RCC_OscConfig+0x2c6>
            __HAL_RCC_PLL_DISABLE();
 80031c2:	682b      	ldr	r3, [r5, #0]
 80031c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031c8:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80031ca:	f7fe fea7 	bl	8001f1c <HAL_GetTick>
 80031ce:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d0:	e005      	b.n	80031de <HAL_RCC_OscConfig+0x4b2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fe fea3 	bl	8001f1c <HAL_GetTick>
 80031d6:	1b80      	subs	r0, r0, r6
 80031d8:	2802      	cmp	r0, #2
 80031da:	f63f af51 	bhi.w	8003080 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031de:	682b      	ldr	r3, [r5, #0]
 80031e0:	019f      	lsls	r7, r3, #6
 80031e2:	d4f6      	bmi.n	80031d2 <HAL_RCC_OscConfig+0x4a6>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e4:	68e9      	ldr	r1, [r5, #12]
 80031e6:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <HAL_RCC_OscConfig+0x53c>)
 80031e8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ea:	4e1e      	ldr	r6, [pc, #120]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ec:	400b      	ands	r3, r1
 80031ee:	4313      	orrs	r3, r2
 80031f0:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	@ 0x30
 80031f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80031f8:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 80031fc:	3a01      	subs	r2, #1
 80031fe:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003202:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003204:	0900      	lsrs	r0, r0, #4
 8003206:	0849      	lsrs	r1, r1, #1
 8003208:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 800320c:	3901      	subs	r1, #1
 800320e:	0852      	lsrs	r2, r2, #1
 8003210:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003214:	3a01      	subs	r2, #1
 8003216:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800321a:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 800321c:	682b      	ldr	r3, [r5, #0]
 800321e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003222:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003224:	68eb      	ldr	r3, [r5, #12]
 8003226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800322a:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800322c:	f7fe fe76 	bl	8001f1c <HAL_GetTick>
 8003230:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003232:	e005      	b.n	8003240 <HAL_RCC_OscConfig+0x514>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7fe fe72 	bl	8001f1c <HAL_GetTick>
 8003238:	1b00      	subs	r0, r0, r4
 800323a:	2802      	cmp	r0, #2
 800323c:	f63f af20 	bhi.w	8003080 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003240:	6833      	ldr	r3, [r6, #0]
 8003242:	0198      	lsls	r0, r3, #6
 8003244:	d5f6      	bpl.n	8003234 <HAL_RCC_OscConfig+0x508>
 8003246:	e655      	b.n	8002ef4 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003248:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 800324a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800324e:	f042 0204 	orr.w	r2, r2, #4
 8003252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8003256:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003262:	e741      	b.n	80030e8 <HAL_RCC_OscConfig+0x3bc>
 8003264:	40021000 	.word	0x40021000
 8003268:	f99d808c 	.word	0xf99d808c
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800326c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800326e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003272:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003274:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003278:	d197      	bne.n	80031aa <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800327a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800327c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003280:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003284:	d191      	bne.n	80031aa <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003286:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003288:	3a07      	subs	r2, #7
 800328a:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 800328e:	bf18      	it	ne
 8003290:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003292:	4291      	cmp	r1, r2
 8003294:	d189      	bne.n	80031aa <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003296:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003298:	0852      	lsrs	r2, r2, #1
 800329a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800329e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032a0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80032a4:	d181      	bne.n	80031aa <HAL_RCC_OscConfig+0x47e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032a6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80032a8:	0852      	lsrs	r2, r2, #1
 80032aa:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80032ae:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032b0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80032b4:	f47f af79 	bne.w	80031aa <HAL_RCC_OscConfig+0x47e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b8:	6833      	ldr	r3, [r6, #0]
 80032ba:	0199      	lsls	r1, r3, #6
 80032bc:	f53f ae1a 	bmi.w	8002ef4 <HAL_RCC_OscConfig+0x1c8>
          __HAL_RCC_PLL_ENABLE();
 80032c0:	6833      	ldr	r3, [r6, #0]
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032c6:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032c8:	68f3      	ldr	r3, [r6, #12]
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ce:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 80032d0:	f7fe fe24 	bl	8001f1c <HAL_GetTick>
 80032d4:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d6:	e005      	b.n	80032e4 <HAL_RCC_OscConfig+0x5b8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe fe20 	bl	8001f1c <HAL_GetTick>
 80032dc:	1b03      	subs	r3, r0, r4
 80032de:	2b02      	cmp	r3, #2
 80032e0:	f63f aece 	bhi.w	8003080 <HAL_RCC_OscConfig+0x354>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e4:	6833      	ldr	r3, [r6, #0]
 80032e6:	019a      	lsls	r2, r3, #6
 80032e8:	d5f6      	bpl.n	80032d8 <HAL_RCC_OscConfig+0x5ac>
 80032ea:	e603      	b.n	8002ef4 <HAL_RCC_OscConfig+0x1c8>

080032ec <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f000 80a0 	beq.w	8003432 <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f2:	4a54      	ldr	r2, [pc, #336]	@ (8003444 <HAL_RCC_ClockConfig+0x158>)
 80032f4:	6813      	ldr	r3, [r2, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	428b      	cmp	r3, r1
{
 80032fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003300:	460d      	mov	r5, r1
 8003302:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003304:	d20c      	bcs.n	8003320 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	f023 0307 	bic.w	r3, r3, #7
 800330c:	430b      	orrs	r3, r1
 800330e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	428b      	cmp	r3, r1
 8003318:	d002      	beq.n	8003320 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800331a:	2001      	movs	r0, #1
}
 800331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003324:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	d570      	bpl.n	800340c <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800332a:	4e47      	ldr	r6, [pc, #284]	@ (8003448 <HAL_RCC_ClockConfig+0x15c>)
 800332c:	68a0      	ldr	r0, [r4, #8]
 800332e:	68b1      	ldr	r1, [r6, #8]
 8003330:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 8003334:	4288      	cmp	r0, r1
 8003336:	d904      	bls.n	8003342 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003338:	68b1      	ldr	r1, [r6, #8]
 800333a:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 800333e:	4301      	orrs	r1, r0
 8003340:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003342:	b332      	cbz	r2, 8003392 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003344:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003346:	4b40      	ldr	r3, [pc, #256]	@ (8003448 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003348:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334c:	d065      	beq.n	800341a <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334e:	2a02      	cmp	r2, #2
 8003350:	d06c      	beq.n	800342c <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003352:	2a00      	cmp	r2, #0
 8003354:	d171      	bne.n	800343a <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003356:	079e      	lsls	r6, r3, #30
 8003358:	d5df      	bpl.n	800331a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800335a:	4e3b      	ldr	r6, [pc, #236]	@ (8003448 <HAL_RCC_ClockConfig+0x15c>)
 800335c:	68b3      	ldr	r3, [r6, #8]
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	4313      	orrs	r3, r2
 8003364:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003366:	f7fe fdd9 	bl	8001f1c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800336e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003370:	e004      	b.n	800337c <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003372:	f7fe fdd3 	bl	8001f1c <HAL_GetTick>
 8003376:	1bc0      	subs	r0, r0, r7
 8003378:	4540      	cmp	r0, r8
 800337a:	d85c      	bhi.n	8003436 <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337c:	68b3      	ldr	r3, [r6, #8]
 800337e:	6862      	ldr	r2, [r4, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003388:	d1f3      	bne.n	8003372 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	0799      	lsls	r1, r3, #30
 800338e:	d506      	bpl.n	800339e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003390:	68a0      	ldr	r0, [r4, #8]
 8003392:	492d      	ldr	r1, [pc, #180]	@ (8003448 <HAL_RCC_ClockConfig+0x15c>)
 8003394:	688a      	ldr	r2, [r1, #8]
 8003396:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800339a:	4282      	cmp	r2, r0
 800339c:	d840      	bhi.n	8003420 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339e:	4929      	ldr	r1, [pc, #164]	@ (8003444 <HAL_RCC_ClockConfig+0x158>)
 80033a0:	680a      	ldr	r2, [r1, #0]
 80033a2:	f002 0207 	and.w	r2, r2, #7
 80033a6:	42aa      	cmp	r2, r5
 80033a8:	d909      	bls.n	80033be <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	680a      	ldr	r2, [r1, #0]
 80033ac:	f022 0207 	bic.w	r2, r2, #7
 80033b0:	432a      	orrs	r2, r5
 80033b2:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b4:	680a      	ldr	r2, [r1, #0]
 80033b6:	f002 0207 	and.w	r2, r2, #7
 80033ba:	42aa      	cmp	r2, r5
 80033bc:	d1ad      	bne.n	800331a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033be:	075a      	lsls	r2, r3, #29
 80033c0:	d506      	bpl.n	80033d0 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c2:	4921      	ldr	r1, [pc, #132]	@ (8003448 <HAL_RCC_ClockConfig+0x15c>)
 80033c4:	68e0      	ldr	r0, [r4, #12]
 80033c6:	688a      	ldr	r2, [r1, #8]
 80033c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033cc:	4302      	orrs	r2, r0
 80033ce:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	071b      	lsls	r3, r3, #28
 80033d2:	d507      	bpl.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003448 <HAL_RCC_ClockConfig+0x15c>)
 80033d6:	6921      	ldr	r1, [r4, #16]
 80033d8:	6893      	ldr	r3, [r2, #8]
 80033da:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80033de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80033e2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033e4:	f7ff fc48 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 80033e8:	4a17      	ldr	r2, [pc, #92]	@ (8003448 <HAL_RCC_ClockConfig+0x15c>)
 80033ea:	4c18      	ldr	r4, [pc, #96]	@ (800344c <HAL_RCC_ClockConfig+0x160>)
 80033ec:	6892      	ldr	r2, [r2, #8]
 80033ee:	4918      	ldr	r1, [pc, #96]	@ (8003450 <HAL_RCC_ClockConfig+0x164>)
 80033f0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80033f4:	4603      	mov	r3, r0
 80033f6:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 80033f8:	4816      	ldr	r0, [pc, #88]	@ (8003454 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	40d3      	lsrs	r3, r2
}
 8003400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8003404:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003406:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8003408:	f7fe bd3e 	b.w	8001e88 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340c:	2a00      	cmp	r2, #0
 800340e:	d0c6      	beq.n	800339e <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003410:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003412:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003414:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003418:	d199      	bne.n	800334e <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341a:	019b      	lsls	r3, r3, #6
 800341c:	d49d      	bmi.n	800335a <HAL_RCC_ClockConfig+0x6e>
 800341e:	e77c      	b.n	800331a <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	688a      	ldr	r2, [r1, #8]
 8003422:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003426:	4302      	orrs	r2, r0
 8003428:	608a      	str	r2, [r1, #8]
 800342a:	e7b8      	b.n	800339e <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342c:	039f      	lsls	r7, r3, #14
 800342e:	d494      	bmi.n	800335a <HAL_RCC_ClockConfig+0x6e>
 8003430:	e773      	b.n	800331a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003432:	2001      	movs	r0, #1
}
 8003434:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003436:	2003      	movs	r0, #3
 8003438:	e770      	b.n	800331c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800343a:	0558      	lsls	r0, r3, #21
 800343c:	f57f af6d 	bpl.w	800331a <HAL_RCC_ClockConfig+0x2e>
 8003440:	e78b      	b.n	800335a <HAL_RCC_ClockConfig+0x6e>
 8003442:	bf00      	nop
 8003444:	40022000 	.word	0x40022000
 8003448:	40021000 	.word	0x40021000
 800344c:	08004a74 	.word	0x08004a74
 8003450:	20000034 	.word	0x20000034
 8003454:	20000190 	.word	0x20000190

08003458 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <HAL_RCC_GetPCLK1Freq+0x18>)
 800345a:	4a06      	ldr	r2, [pc, #24]	@ (8003474 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800345c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800345e:	4906      	ldr	r1, [pc, #24]	@ (8003478 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003460:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003464:	6808      	ldr	r0, [r1, #0]
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	f003 031f 	and.w	r3, r3, #31
}
 800346c:	40d8      	lsrs	r0, r3
 800346e:	4770      	bx	lr
 8003470:	40021000 	.word	0x40021000
 8003474:	08004a6c 	.word	0x08004a6c
 8003478:	20000034 	.word	0x20000034

0800347c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_RCC_GetPCLK2Freq+0x18>)
 800347e:	4a06      	ldr	r2, [pc, #24]	@ (8003498 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003480:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003482:	4906      	ldr	r1, [pc, #24]	@ (800349c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003484:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003488:	6808      	ldr	r0, [r1, #0]
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	f003 031f 	and.w	r3, r3, #31
}
 8003490:	40d8      	lsrs	r0, r3
 8003492:	4770      	bx	lr
 8003494:	40021000 	.word	0x40021000
 8003498:	08004a6c 	.word	0x08004a6c
 800349c:	20000034 	.word	0x20000034

080034a0 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a0:	4a45      	ldr	r2, [pc, #276]	@ (80035b8 <RCCEx_PLLSAI1_Config+0x118>)
{
 80034a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a4:	68d6      	ldr	r6, [r2, #12]
{
 80034a6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a8:	07b1      	lsls	r1, r6, #30
{
 80034aa:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034ac:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ae:	d006      	beq.n	80034be <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034b0:	68d1      	ldr	r1, [r2, #12]
 80034b2:	f001 0103 	and.w	r1, r1, #3
 80034b6:	4281      	cmp	r1, r0
 80034b8:	d04c      	beq.n	8003554 <RCCEx_PLLSAI1_Config+0xb4>
 80034ba:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80034bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80034be:	2802      	cmp	r0, #2
 80034c0:	d059      	beq.n	8003576 <RCCEx_PLLSAI1_Config+0xd6>
 80034c2:	2803      	cmp	r0, #3
 80034c4:	d050      	beq.n	8003568 <RCCEx_PLLSAI1_Config+0xc8>
 80034c6:	2801      	cmp	r0, #1
 80034c8:	d1f7      	bne.n	80034ba <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	0793      	lsls	r3, r2, #30
 80034ce:	d5f5      	bpl.n	80034bc <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034d0:	4939      	ldr	r1, [pc, #228]	@ (80035b8 <RCCEx_PLLSAI1_Config+0x118>)
 80034d2:	68ca      	ldr	r2, [r1, #12]
 80034d4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80034d8:	ea42 0300 	orr.w	r3, r2, r0
 80034dc:	6862      	ldr	r2, [r4, #4]
 80034de:	3a01      	subs	r2, #1
 80034e0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80034e4:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80034e6:	4e34      	ldr	r6, [pc, #208]	@ (80035b8 <RCCEx_PLLSAI1_Config+0x118>)
 80034e8:	6833      	ldr	r3, [r6, #0]
 80034ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034ee:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80034f0:	f7fe fd14 	bl	8001f1c <HAL_GetTick>
 80034f4:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034f6:	e004      	b.n	8003502 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034f8:	f7fe fd10 	bl	8001f1c <HAL_GetTick>
 80034fc:	1bc3      	subs	r3, r0, r7
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d83d      	bhi.n	800357e <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003502:	6833      	ldr	r3, [r6, #0]
 8003504:	011a      	lsls	r2, r3, #4
 8003506:	d4f7      	bmi.n	80034f8 <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003508:	68a3      	ldr	r3, [r4, #8]
 800350a:	021a      	lsls	r2, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 800350c:	2d00      	cmp	r5, #0
 800350e:	d138      	bne.n	8003582 <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003510:	6933      	ldr	r3, [r6, #16]
 8003512:	68e1      	ldr	r1, [r4, #12]
 8003514:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003518:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351c:	0909      	lsrs	r1, r1, #4
 800351e:	4313      	orrs	r3, r2
 8003520:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003524:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003526:	4d24      	ldr	r5, [pc, #144]	@ (80035b8 <RCCEx_PLLSAI1_Config+0x118>)
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800352e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003530:	f7fe fcf4 	bl	8001f1c <HAL_GetTick>
 8003534:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003536:	e004      	b.n	8003542 <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003538:	f7fe fcf0 	bl	8001f1c <HAL_GetTick>
 800353c:	1b80      	subs	r0, r0, r6
 800353e:	2802      	cmp	r0, #2
 8003540:	d81d      	bhi.n	800357e <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003542:	682b      	ldr	r3, [r5, #0]
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	d5f7      	bpl.n	8003538 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003548:	692b      	ldr	r3, [r5, #16]
 800354a:	69a2      	ldr	r2, [r4, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	2000      	movs	r0, #0
 8003550:	612b      	str	r3, [r5, #16]
}
 8003552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003554:	2900      	cmp	r1, #0
 8003556:	d0b0      	beq.n	80034ba <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003558:	68d3      	ldr	r3, [r2, #12]
       ||
 800355a:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800355c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003560:	3301      	adds	r3, #1
       ||
 8003562:	4293      	cmp	r3, r2
 8003564:	d1a9      	bne.n	80034ba <RCCEx_PLLSAI1_Config+0x1a>
 8003566:	e7be      	b.n	80034e6 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003568:	6811      	ldr	r1, [r2, #0]
 800356a:	038e      	lsls	r6, r1, #14
 800356c:	d4b0      	bmi.n	80034d0 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	0351      	lsls	r1, r2, #13
 8003572:	d5a2      	bpl.n	80034ba <RCCEx_PLLSAI1_Config+0x1a>
 8003574:	e7ac      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	0557      	lsls	r7, r2, #21
 800357a:	d59e      	bpl.n	80034ba <RCCEx_PLLSAI1_Config+0x1a>
 800357c:	e7a8      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0x30>
 800357e:	2003      	movs	r0, #3
}
 8003580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8003582:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003584:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8003586:	d00b      	beq.n	80035a0 <RCCEx_PLLSAI1_Config+0x100>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003588:	6961      	ldr	r1, [r4, #20]
 800358a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800358e:	0849      	lsrs	r1, r1, #1
 8003590:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003594:	3901      	subs	r1, #1
 8003596:	4313      	orrs	r3, r2
 8003598:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800359c:	6133      	str	r3, [r6, #16]
 800359e:	e7c2      	b.n	8003526 <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a0:	6921      	ldr	r1, [r4, #16]
 80035a2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80035a6:	0849      	lsrs	r1, r1, #1
 80035a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035ac:	3901      	subs	r1, #1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80035b4:	6133      	str	r3, [r6, #16]
 80035b6:	e7b6      	b.n	8003526 <RCCEx_PLLSAI1_Config+0x86>
 80035b8:	40021000 	.word	0x40021000

080035bc <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035bc:	4a3e      	ldr	r2, [pc, #248]	@ (80036b8 <RCCEx_PLLSAI2_Config+0xfc>)
{
 80035be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c0:	68d6      	ldr	r6, [r2, #12]
{
 80035c2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c4:	07b1      	lsls	r1, r6, #30
{
 80035c6:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035c8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ca:	d006      	beq.n	80035da <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035cc:	68d1      	ldr	r1, [r2, #12]
 80035ce:	f001 0103 	and.w	r1, r1, #3
 80035d2:	4281      	cmp	r1, r0
 80035d4:	d04c      	beq.n	8003670 <RCCEx_PLLSAI2_Config+0xb4>
 80035d6:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80035d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 80035da:	2802      	cmp	r0, #2
 80035dc:	d059      	beq.n	8003692 <RCCEx_PLLSAI2_Config+0xd6>
 80035de:	2803      	cmp	r0, #3
 80035e0:	d050      	beq.n	8003684 <RCCEx_PLLSAI2_Config+0xc8>
 80035e2:	2801      	cmp	r0, #1
 80035e4:	d1f7      	bne.n	80035d6 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	0793      	lsls	r3, r2, #30
 80035ea:	d5f5      	bpl.n	80035d8 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035ec:	4932      	ldr	r1, [pc, #200]	@ (80036b8 <RCCEx_PLLSAI2_Config+0xfc>)
 80035ee:	68ca      	ldr	r2, [r1, #12]
 80035f0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80035f4:	ea42 0300 	orr.w	r3, r2, r0
 80035f8:	6862      	ldr	r2, [r4, #4]
 80035fa:	3a01      	subs	r2, #1
 80035fc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003600:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8003602:	4e2d      	ldr	r6, [pc, #180]	@ (80036b8 <RCCEx_PLLSAI2_Config+0xfc>)
 8003604:	6833      	ldr	r3, [r6, #0]
 8003606:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800360a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800360c:	f7fe fc86 	bl	8001f1c <HAL_GetTick>
 8003610:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003612:	e004      	b.n	800361e <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003614:	f7fe fc82 	bl	8001f1c <HAL_GetTick>
 8003618:	1bc3      	subs	r3, r0, r7
 800361a:	2b02      	cmp	r3, #2
 800361c:	d83d      	bhi.n	800369a <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800361e:	6833      	ldr	r3, [r6, #0]
 8003620:	009a      	lsls	r2, r3, #2
 8003622:	d4f7      	bmi.n	8003614 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003624:	68a3      	ldr	r3, [r4, #8]
 8003626:	021a      	lsls	r2, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8003628:	2d00      	cmp	r5, #0
 800362a:	d138      	bne.n	800369e <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800362c:	6973      	ldr	r3, [r6, #20]
 800362e:	68e1      	ldr	r1, [r4, #12]
 8003630:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003638:	0909      	lsrs	r1, r1, #4
 800363a:	4313      	orrs	r3, r2
 800363c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003640:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003642:	4d1d      	ldr	r5, [pc, #116]	@ (80036b8 <RCCEx_PLLSAI2_Config+0xfc>)
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800364a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800364c:	f7fe fc66 	bl	8001f1c <HAL_GetTick>
 8003650:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003652:	e004      	b.n	800365e <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003654:	f7fe fc62 	bl	8001f1c <HAL_GetTick>
 8003658:	1b80      	subs	r0, r0, r6
 800365a:	2802      	cmp	r0, #2
 800365c:	d81d      	bhi.n	800369a <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800365e:	682b      	ldr	r3, [r5, #0]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	d5f7      	bpl.n	8003654 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003664:	696b      	ldr	r3, [r5, #20]
 8003666:	6962      	ldr	r2, [r4, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	2000      	movs	r0, #0
 800366c:	616b      	str	r3, [r5, #20]
}
 800366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003670:	2900      	cmp	r1, #0
 8003672:	d0b0      	beq.n	80035d6 <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003674:	68d3      	ldr	r3, [r2, #12]
       ||
 8003676:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003678:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800367c:	3301      	adds	r3, #1
       ||
 800367e:	4293      	cmp	r3, r2
 8003680:	d1a9      	bne.n	80035d6 <RCCEx_PLLSAI2_Config+0x1a>
 8003682:	e7be      	b.n	8003602 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003684:	6811      	ldr	r1, [r2, #0]
 8003686:	038e      	lsls	r6, r1, #14
 8003688:	d4b0      	bmi.n	80035ec <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	0351      	lsls	r1, r2, #13
 800368e:	d5a2      	bpl.n	80035d6 <RCCEx_PLLSAI2_Config+0x1a>
 8003690:	e7ac      	b.n	80035ec <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	0557      	lsls	r7, r2, #21
 8003696:	d59e      	bpl.n	80035d6 <RCCEx_PLLSAI2_Config+0x1a>
 8003698:	e7a8      	b.n	80035ec <RCCEx_PLLSAI2_Config+0x30>
 800369a:	2003      	movs	r0, #3
}
 800369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800369e:	6973      	ldr	r3, [r6, #20]
 80036a0:	6921      	ldr	r1, [r4, #16]
 80036a2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036a6:	0849      	lsrs	r1, r1, #1
 80036a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036ac:	3901      	subs	r1, #1
 80036ae:	4313      	orrs	r3, r2
 80036b0:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80036b4:	6173      	str	r3, [r6, #20]
 80036b6:	e7c4      	b.n	8003642 <RCCEx_PLLSAI2_Config+0x86>
 80036b8:	40021000 	.word	0x40021000

080036bc <HAL_RCCEx_PeriphCLKConfig>:
{
 80036bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036c0:	6803      	ldr	r3, [r0, #0]
 80036c2:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 80036c6:	b083      	sub	sp, #12
 80036c8:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036ca:	d016      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80036cc:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 80036ce:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80036d2:	f000 81dd 	beq.w	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 80036d6:	f200 8117 	bhi.w	8003908 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80036da:	2900      	cmp	r1, #0
 80036dc:	f000 81ac 	beq.w	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 80036e0:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80036e4:	f040 81c6 	bne.w	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036e8:	2100      	movs	r1, #0
 80036ea:	3020      	adds	r0, #32
 80036ec:	f7ff ff66 	bl	80035bc <RCCEx_PLLSAI2_Config>
 80036f0:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036f2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80036f4:	2e00      	cmp	r6, #0
 80036f6:	f000 81d8 	beq.w	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036fa:	04d8      	lsls	r0, r3, #19
 80036fc:	f140 8115 	bpl.w	800392a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003700:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003702:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8003706:	f000 81c9 	beq.w	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800370a:	f200 816f 	bhi.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0x330>
 800370e:	2900      	cmp	r1, #0
 8003710:	f000 819b 	beq.w	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003714:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8003718:	f040 81ae 	bne.w	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800371c:	2100      	movs	r1, #0
 800371e:	f104 0020 	add.w	r0, r4, #32
 8003722:	f7ff ff4b 	bl	80035bc <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003726:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003728:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 800372a:	2f00      	cmp	r7, #0
 800372c:	f040 8165 	bne.w	80039fa <HAL_RCCEx_PeriphCLKConfig+0x33e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003730:	49b3      	ldr	r1, [pc, #716]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003732:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8003734:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003738:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800373c:	4302      	orrs	r2, r0
 800373e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003742:	0399      	lsls	r1, r3, #14
 8003744:	f100 80f5 	bmi.w	8003932 <HAL_RCCEx_PeriphCLKConfig+0x276>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003748:	07da      	lsls	r2, r3, #31
 800374a:	d508      	bpl.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800374c:	49ac      	ldr	r1, [pc, #688]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800374e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003750:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003754:	f022 0203 	bic.w	r2, r2, #3
 8003758:	4302      	orrs	r2, r0
 800375a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800375e:	079f      	lsls	r7, r3, #30
 8003760:	d508      	bpl.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003762:	49a7      	ldr	r1, [pc, #668]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003764:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003766:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800376a:	f022 020c 	bic.w	r2, r2, #12
 800376e:	4302      	orrs	r2, r0
 8003770:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003774:	075d      	lsls	r5, r3, #29
 8003776:	d508      	bpl.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003778:	49a1      	ldr	r1, [pc, #644]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800377a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800377c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003780:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8003784:	4302      	orrs	r2, r0
 8003786:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800378a:	0718      	lsls	r0, r3, #28
 800378c:	d508      	bpl.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800378e:	499c      	ldr	r1, [pc, #624]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003790:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003792:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003796:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800379a:	4302      	orrs	r2, r0
 800379c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037a0:	06d9      	lsls	r1, r3, #27
 80037a2:	d508      	bpl.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037a4:	4996      	ldr	r1, [pc, #600]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037a6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80037a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80037ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80037b0:	4302      	orrs	r2, r0
 80037b2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b6:	069a      	lsls	r2, r3, #26
 80037b8:	d508      	bpl.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037ba:	4991      	ldr	r1, [pc, #580]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037bc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80037be:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80037c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80037c6:	4302      	orrs	r2, r0
 80037c8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037cc:	059f      	lsls	r7, r3, #22
 80037ce:	d508      	bpl.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037d0:	498b      	ldr	r1, [pc, #556]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037d2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80037d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80037d8:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80037dc:	4302      	orrs	r2, r0
 80037de:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037e2:	055d      	lsls	r5, r3, #21
 80037e4:	d508      	bpl.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037e6:	4986      	ldr	r1, [pc, #536]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037e8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80037ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80037ee:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80037f2:	4302      	orrs	r2, r0
 80037f4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f8:	0658      	lsls	r0, r3, #25
 80037fa:	d508      	bpl.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037fc:	4980      	ldr	r1, [pc, #512]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80037fe:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003800:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003804:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003808:	4302      	orrs	r2, r0
 800380a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800380e:	0619      	lsls	r1, r3, #24
 8003810:	d508      	bpl.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003812:	497b      	ldr	r1, [pc, #492]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003814:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003816:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800381a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800381e:	4302      	orrs	r2, r0
 8003820:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003824:	05da      	lsls	r2, r3, #23
 8003826:	d508      	bpl.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003828:	4975      	ldr	r1, [pc, #468]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800382a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800382c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003830:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003834:	4302      	orrs	r2, r0
 8003836:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800383a:	049f      	lsls	r7, r3, #18
 800383c:	d510      	bpl.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800383e:	4970      	ldr	r1, [pc, #448]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003840:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003842:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003846:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800384a:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800384c:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003850:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003854:	f000 8104 	beq.w	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003858:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800385c:	f000 8132 	beq.w	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003860:	031d      	lsls	r5, r3, #12
 8003862:	d510      	bpl.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003864:	4966      	ldr	r1, [pc, #408]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003866:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003868:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800386c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003870:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003872:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003876:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800387a:	f000 80f6 	beq.w	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800387e:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8003882:	f000 8129 	beq.w	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003886:	0358      	lsls	r0, r3, #13
 8003888:	d510      	bpl.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800388a:	495d      	ldr	r1, [pc, #372]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800388c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800388e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003892:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003896:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003898:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800389c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038a0:	f000 80d9 	beq.w	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038a4:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 80038a8:	f000 8120 	beq.w	8003aec <HAL_RCCEx_PeriphCLKConfig+0x430>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ac:	0459      	lsls	r1, r3, #17
 80038ae:	d510      	bpl.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b0:	4853      	ldr	r0, [pc, #332]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038b2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80038b4:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80038b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80038bc:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038be:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038c2:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038c6:	f000 80d9 	beq.w	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038ca:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80038ce:	f000 80ee 	beq.w	8003aae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038d2:	041a      	lsls	r2, r3, #16
 80038d4:	d508      	bpl.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038d6:	494a      	ldr	r1, [pc, #296]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038d8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80038da:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80038de:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80038e2:	4302      	orrs	r2, r0
 80038e4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038e8:	03db      	lsls	r3, r3, #15
 80038ea:	d509      	bpl.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038ec:	4a44      	ldr	r2, [pc, #272]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038ee:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80038f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80038f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038fa:	430b      	orrs	r3, r1
 80038fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8003900:	4630      	mov	r0, r6
 8003902:	b003      	add	sp, #12
 8003904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8003908:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 800390c:	f040 80b2 	bne.w	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003910:	483b      	ldr	r0, [pc, #236]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003912:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8003916:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800391a:	430a      	orrs	r2, r1
 800391c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003920:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003922:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003926:	f53f aeeb 	bmi.w	8003700 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 800392a:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800392c:	0399      	lsls	r1, r3, #14
 800392e:	f57f af0b 	bpl.w	8003748 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003932:	4b33      	ldr	r3, [pc, #204]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003934:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003936:	00d2      	lsls	r2, r2, #3
 8003938:	d566      	bpl.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    FlagStatus       pwrclkchanged = RESET;
 800393a:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800393e:	4d31      	ldr	r5, [pc, #196]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003946:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003948:	f7fe fae8 	bl	8001f1c <HAL_GetTick>
 800394c:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800394e:	e005      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003950:	f7fe fae4 	bl	8001f1c <HAL_GetTick>
 8003954:	eba0 0309 	sub.w	r3, r0, r9
 8003958:	2b02      	cmp	r3, #2
 800395a:	d861      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	05db      	lsls	r3, r3, #23
 8003960:	d5f6      	bpl.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 8003962:	2f00      	cmp	r7, #0
 8003964:	f040 80cc 	bne.w	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x444>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003968:	4d25      	ldr	r5, [pc, #148]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800396a:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800396e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003972:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003976:	d026      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003978:	4293      	cmp	r3, r2
 800397a:	d024      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800397c:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003980:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003988:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800398c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003994:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003998:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800399a:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 800399e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039a2:	d510      	bpl.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        tickstart = HAL_GetTick();
 80039a4:	f7fe faba 	bl	8001f1c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80039ac:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ae:	e004      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fe fab4 	bl	8001f1c <HAL_GetTick>
 80039b4:	1bc0      	subs	r0, r0, r7
 80039b6:	4548      	cmp	r0, r9
 80039b8:	d832      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x364>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ba:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80039be:	0799      	lsls	r1, r3, #30
 80039c0:	d5f6      	bpl.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c2:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 80039c6:	490e      	ldr	r1, [pc, #56]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039c8:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80039cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039d6:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 80039d8:	f1b8 0f00 	cmp.w	r8, #0
 80039dc:	f43f aeb4 	beq.w	8003748 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e0:	4907      	ldr	r1, [pc, #28]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039e2:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80039e4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80039e8:	658a      	str	r2, [r1, #88]	@ 0x58
 80039ea:	e6ad      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80039ec:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80039f0:	d142      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    switch(PeriphClkInit->Sai1ClockSelection)
 80039f2:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 80039f4:	2f00      	cmp	r7, #0
 80039f6:	f43f ae9b 	beq.w	8003730 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80039fa:	463e      	mov	r6, r7
 80039fc:	e796      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x270>
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a0a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003a0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003a1a:	f04f 0801 	mov.w	r8, #1
 8003a1e:	e78e      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x282>
        ret = HAL_TIMEOUT;
 8003a20:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a22:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8003a24:	f1b8 0f00 	cmp.w	r8, #0
 8003a28:	f43f ae8e 	beq.w	8003748 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2c:	4935      	ldr	r1, [pc, #212]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003a2e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003a30:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003a34:	658a      	str	r2, [r1, #88]	@ 0x58
 8003a36:	e687      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a38:	3004      	adds	r0, #4
 8003a3a:	f7ff fd31 	bl	80034a0 <RCCEx_PLLSAI1_Config>
 8003a3e:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a40:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003a42:	2e00      	cmp	r6, #0
 8003a44:	f47f ae59 	bne.w	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8003a48:	e02f      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a4a:	1d20      	adds	r0, r4, #4
 8003a4c:	f7ff fd28 	bl	80034a0 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a50:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a52:	4607      	mov	r7, r0
      break;
 8003a54:	e669      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a56:	68ca      	ldr	r2, [r1, #12]
 8003a58:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003a5c:	60ca      	str	r2, [r1, #12]
 8003a5e:	e725      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	68ca      	ldr	r2, [r1, #12]
 8003a62:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003a66:	60ca      	str	r2, [r1, #12]
 8003a68:	e6fa      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a6a:	68ca      	ldr	r2, [r1, #12]
 8003a6c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003a70:	60ca      	str	r2, [r1, #12]
 8003a72:	e708      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a74:	2601      	movs	r6, #1
 8003a76:	e640      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003a78:	2601      	movs	r6, #1
 8003a7a:	e756      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x26e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	1d20      	adds	r0, r4, #4
 8003a80:	f7ff fd0e 	bl	80034a0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a84:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003a86:	2800      	cmp	r0, #0
 8003a88:	f43f af23 	beq.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a8c:	4606      	mov	r6, r0
 8003a8e:	e720      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a90:	481c      	ldr	r0, [pc, #112]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003a92:	68c2      	ldr	r2, [r0, #12]
 8003a94:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a98:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8003a9a:	e739      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x254>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a9c:	4919      	ldr	r1, [pc, #100]	@ (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003a9e:	68ca      	ldr	r2, [r1, #12]
 8003aa0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003aa4:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8003aa6:	4637      	mov	r7, r6
 8003aa8:	e7a4      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aaa:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003aac:	e730      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003aae:	2102      	movs	r1, #2
 8003ab0:	f104 0020 	add.w	r0, r4, #32
 8003ab4:	f7ff fd82 	bl	80035bc <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ab8:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003aba:	2800      	cmp	r0, #0
 8003abc:	f43f af09 	beq.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	e706      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x216>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	1d20      	adds	r0, r4, #4
 8003ac8:	f7ff fcea 	bl	80034a0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003acc:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	f43f aec6 	beq.w	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	e6c3      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad8:	2101      	movs	r1, #1
 8003ada:	1d20      	adds	r0, r4, #4
 8003adc:	f7ff fce0 	bl	80034a0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ae0:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	f43f aecf 	beq.w	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ae8:	4606      	mov	r6, r0
 8003aea:	e6cc      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aec:	2101      	movs	r1, #1
 8003aee:	1d20      	adds	r0, r4, #4
 8003af0:	f7ff fcd6 	bl	80034a0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af4:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003af6:	2800      	cmp	r0, #0
 8003af8:	f43f aed8 	beq.w	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003afc:	4606      	mov	r6, r0
 8003afe:	e6d5      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003b00:	463e      	mov	r6, r7
 8003b02:	e78e      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8003b04:	40021000 	.word	0x40021000

08003b08 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	f000 8084 	beq.w	8003c16 <HAL_TIM_Base_Init+0x10e>
{
 8003b0e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b10:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b14:	4604      	mov	r4, r0
 8003b16:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d070      	beq.n	8003c00 <HAL_TIM_Base_Init+0xf8>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b20:	493e      	ldr	r1, [pc, #248]	@ (8003c1c <HAL_TIM_Base_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003b22:	2302      	movs	r3, #2
 8003b24:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b28:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003b2a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b2c:	d054      	beq.n	8003bd8 <HAL_TIM_Base_Init+0xd0>
 8003b2e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003b32:	d024      	beq.n	8003b7e <HAL_TIM_Base_Init+0x76>
 8003b34:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8003b38:	428a      	cmp	r2, r1
 8003b3a:	d020      	beq.n	8003b7e <HAL_TIM_Base_Init+0x76>
 8003b3c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003b40:	428a      	cmp	r2, r1
 8003b42:	d01c      	beq.n	8003b7e <HAL_TIM_Base_Init+0x76>
 8003b44:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003b48:	428a      	cmp	r2, r1
 8003b4a:	d018      	beq.n	8003b7e <HAL_TIM_Base_Init+0x76>
 8003b4c:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8003b50:	428a      	cmp	r2, r1
 8003b52:	d041      	beq.n	8003bd8 <HAL_TIM_Base_Init+0xd0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b54:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 8003b58:	428a      	cmp	r2, r1
 8003b5a:	d056      	beq.n	8003c0a <HAL_TIM_Base_Init+0x102>
 8003b5c:	4930      	ldr	r1, [pc, #192]	@ (8003c20 <HAL_TIM_Base_Init+0x118>)
 8003b5e:	428a      	cmp	r2, r1
 8003b60:	d053      	beq.n	8003c0a <HAL_TIM_Base_Init+0x102>
 8003b62:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003b66:	428a      	cmp	r2, r1
 8003b68:	d04f      	beq.n	8003c0a <HAL_TIM_Base_Init+0x102>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b6a:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6c:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b6e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b74:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003b76:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b78:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b7a:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b7c:	e010      	b.n	8003ba0 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 8003b7e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b80:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b86:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b8c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b94:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b96:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003b98:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003b9a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b9c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b9e:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003bac:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003bb0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003bb4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003bb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003bc4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003bc8:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003bcc:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003bd4:	2000      	movs	r0, #0
}
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003bd8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bda:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003be0:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be8:	69a1      	ldr	r1, [r4, #24]
 8003bea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bee:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003bf0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf2:	68e3      	ldr	r3, [r4, #12]
 8003bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003bf6:	6863      	ldr	r3, [r4, #4]
 8003bf8:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003bfa:	6963      	ldr	r3, [r4, #20]
 8003bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bfe:	e7cf      	b.n	8003ba0 <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 8003c00:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003c04:	f7fd fb6c 	bl	80012e0 <HAL_TIM_Base_MspInit>
 8003c08:	e789      	b.n	8003b1e <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c0a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c0c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c12:	4303      	orrs	r3, r0
 8003c14:	e7e9      	b.n	8003bea <HAL_TIM_Base_Init+0xe2>
    return HAL_ERROR;
 8003c16:	2001      	movs	r0, #1
}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40014400 	.word	0x40014400

08003c24 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003c24:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d126      	bne.n	8003c7a <HAL_TIM_Base_Start_IT+0x56>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c2c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2e:	4919      	ldr	r1, [pc, #100]	@ (8003c94 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	2202      	movs	r2, #2
 8003c32:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c36:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c38:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c40:	d01d      	beq.n	8003c7e <HAL_TIM_Base_Start_IT+0x5a>
 8003c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c46:	d01a      	beq.n	8003c7e <HAL_TIM_Base_Start_IT+0x5a>
 8003c48:	4a13      	ldr	r2, [pc, #76]	@ (8003c98 <HAL_TIM_Base_Start_IT+0x74>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d017      	beq.n	8003c7e <HAL_TIM_Base_Start_IT+0x5a>
 8003c4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_TIM_Base_Start_IT+0x5a>
 8003c56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00f      	beq.n	8003c7e <HAL_TIM_Base_Start_IT+0x5a>
 8003c5e:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <HAL_TIM_Base_Start_IT+0x5a>
 8003c66:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003c76:	2000      	movs	r0, #0
 8003c78:	4770      	bx	lr
    return HAL_ERROR;
 8003c7a:	2001      	movs	r0, #1
}
 8003c7c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	4a06      	ldr	r2, [pc, #24]	@ (8003c9c <HAL_TIM_Base_Start_IT+0x78>)
 8003c82:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c84:	2a06      	cmp	r2, #6
 8003c86:	d0f6      	beq.n	8003c76 <HAL_TIM_Base_Start_IT+0x52>
 8003c88:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003c8c:	d1ef      	bne.n	8003c6e <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 8003c8e:	2000      	movs	r0, #0
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	00010007 	.word	0x00010007

08003ca0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003ca0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d06f      	beq.n	8003d88 <HAL_TIM_ConfigClockSource+0xe8>
 8003ca8:	4602      	mov	r2, r0
{
 8003caa:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003cae:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003cba:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8003df0 <HAL_TIM_ConfigClockSource+0x150>)
 8003cbe:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003cc0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003cc2:	680b      	ldr	r3, [r1, #0]
 8003cc4:	2b60      	cmp	r3, #96	@ 0x60
 8003cc6:	d061      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0xec>
 8003cc8:	d824      	bhi.n	8003d14 <HAL_TIM_ConfigClockSource+0x74>
 8003cca:	2b40      	cmp	r3, #64	@ 0x40
 8003ccc:	d077      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x11e>
 8003cce:	d94a      	bls.n	8003d66 <HAL_TIM_ConfigClockSource+0xc6>
 8003cd0:	2b50      	cmp	r3, #80	@ 0x50
 8003cd2:	d117      	bne.n	8003d04 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8003cd4:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd6:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cd8:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cda:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003cde:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce0:	6a23      	ldr	r3, [r4, #32]
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce8:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cee:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cf2:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003cf4:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf6:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cfc:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d00:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003d06:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003d0c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8003d10:	bc30      	pop	{r4, r5}
 8003d12:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d18:	d0f3      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0x62>
 8003d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d1e:	d110      	bne.n	8003d42 <HAL_TIM_ConfigClockSource+0xa2>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d20:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003d24:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d26:	432b      	orrs	r3, r5
 8003d28:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2a:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003d32:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d34:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d36:	68a3      	ldr	r3, [r4, #8]
 8003d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d3c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e7e0      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003d42:	2b70      	cmp	r3, #112	@ 0x70
 8003d44:	d1de      	bne.n	8003d04 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d46:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003d4a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	432b      	orrs	r3, r5
 8003d4e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d50:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d54:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003d58:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003d5a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003d5c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d5e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003d62:	60a3      	str	r3, [r4, #8]
      break;
 8003d64:	e7cd      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d002      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0xd0>
 8003d6a:	d909      	bls.n	8003d80 <HAL_TIM_ConfigClockSource+0xe0>
 8003d6c:	2b30      	cmp	r3, #48	@ 0x30
 8003d6e:	d1c9      	bne.n	8003d04 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8003d70:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d72:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d76:	430b      	orrs	r3, r1
 8003d78:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003d7c:	60a3      	str	r3, [r4, #8]
}
 8003d7e:	e7c0      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8003d80:	f033 0110 	bics.w	r1, r3, #16
 8003d84:	d1be      	bne.n	8003d04 <HAL_TIM_ConfigClockSource+0x64>
 8003d86:	e7f3      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0xd0>
  __HAL_LOCK(htim);
 8003d88:	2002      	movs	r0, #2
}
 8003d8a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8003d8c:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8003d8e:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003d90:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d92:	6a21      	ldr	r1, [r4, #32]
 8003d94:	f021 0110 	bic.w	r1, r1, #16
 8003d98:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9a:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da0:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da8:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003dac:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8003dae:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003db0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db6:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003dba:	60a3      	str	r3, [r4, #8]
}
 8003dbc:	e7a1      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x62>
                               sClockSourceConfig->ClockPolarity,
 8003dbe:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003dc0:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8003dc2:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dc4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003dc8:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dca:	6a23      	ldr	r3, [r4, #32]
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd2:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003ddc:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003dde:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003de0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de6:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8003dea:	60a3      	str	r3, [r4, #8]
}
 8003dec:	e789      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x62>
 8003dee:	bf00      	nop
 8003df0:	fffe0088 	.word	0xfffe0088

08003df4 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop

08003df8 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop

08003dfc <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop

08003e00 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop

08003e04 <HAL_TIM_IRQHandler>:
{
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003e06:	6803      	ldr	r3, [r0, #0]
 8003e08:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e0a:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e0c:	07a7      	lsls	r7, r4, #30
{
 8003e0e:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e10:	d501      	bpl.n	8003e16 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e12:	07b1      	lsls	r1, r6, #30
 8003e14:	d456      	bmi.n	8003ec4 <HAL_TIM_IRQHandler+0xc0>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e16:	0763      	lsls	r3, r4, #29
 8003e18:	d501      	bpl.n	8003e1e <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e1a:	0777      	lsls	r7, r6, #29
 8003e1c:	d43f      	bmi.n	8003e9e <HAL_TIM_IRQHandler+0x9a>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e1e:	0720      	lsls	r0, r4, #28
 8003e20:	d501      	bpl.n	8003e26 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e22:	0731      	lsls	r1, r6, #28
 8003e24:	d429      	bmi.n	8003e7a <HAL_TIM_IRQHandler+0x76>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e26:	06e3      	lsls	r3, r4, #27
 8003e28:	d501      	bpl.n	8003e2e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e2a:	06f7      	lsls	r7, r6, #27
 8003e2c:	d412      	bmi.n	8003e54 <HAL_TIM_IRQHandler+0x50>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e2e:	07e0      	lsls	r0, r4, #31
 8003e30:	d501      	bpl.n	8003e36 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e32:	07f1      	lsls	r1, r6, #31
 8003e34:	d464      	bmi.n	8003f00 <HAL_TIM_IRQHandler+0xfc>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e36:	0622      	lsls	r2, r4, #24
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e38:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e3c:	d552      	bpl.n	8003ee4 <HAL_TIM_IRQHandler+0xe0>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e3e:	0633      	lsls	r3, r6, #24
 8003e40:	d466      	bmi.n	8003f10 <HAL_TIM_IRQHandler+0x10c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e42:	0660      	lsls	r0, r4, #25
 8003e44:	d501      	bpl.n	8003e4a <HAL_TIM_IRQHandler+0x46>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e46:	0671      	lsls	r1, r6, #25
 8003e48:	d473      	bmi.n	8003f32 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e4a:	06a2      	lsls	r2, r4, #26
 8003e4c:	d501      	bpl.n	8003e52 <HAL_TIM_IRQHandler+0x4e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e4e:	06b3      	lsls	r3, r6, #26
 8003e50:	d44d      	bmi.n	8003eee <HAL_TIM_IRQHandler+0xea>
}
 8003e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	f06f 0210 	mvn.w	r2, #16
 8003e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e68:	d174      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	f7ff ffc3 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f7ff ffc4 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e74:	2300      	movs	r3, #0
 8003e76:	772b      	strb	r3, [r5, #28]
 8003e78:	e7d9      	b.n	8003e2e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	f06f 0208 	mvn.w	r2, #8
 8003e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e82:	2204      	movs	r2, #4
 8003e84:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	079a      	lsls	r2, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e8c:	d15f      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8e:	f7ff ffb1 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e92:	4628      	mov	r0, r5
 8003e94:	f7ff ffb2 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	772b      	strb	r3, [r5, #28]
 8003e9c:	e7c3      	b.n	8003e26 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	f06f 0204 	mvn.w	r2, #4
 8003ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb0:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb2:	d149      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb4:	f7ff ff9e 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f7ff ff9f 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	772b      	strb	r3, [r5, #28]
 8003ec2:	e7ac      	b.n	8003e1e <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ec4:	f06f 0202 	mvn.w	r2, #2
 8003ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eca:	2201      	movs	r2, #1
 8003ecc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	079a      	lsls	r2, r3, #30
 8003ed2:	d136      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed4:	f7ff ff8e 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f7ff ff8f 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	772b      	strb	r3, [r5, #28]
 8003ee2:	e798      	b.n	8003e16 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ee4:	2f00      	cmp	r7, #0
 8003ee6:	d0ac      	beq.n	8003e42 <HAL_TIM_IRQHandler+0x3e>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ee8:	0637      	lsls	r7, r6, #24
 8003eea:	d41a      	bmi.n	8003f22 <HAL_TIM_IRQHandler+0x11e>
 8003eec:	e7a9      	b.n	8003e42 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eee:	682b      	ldr	r3, [r5, #0]
 8003ef0:	f06f 0220 	mvn.w	r2, #32
 8003ef4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003ef6:	4628      	mov	r0, r5
}
 8003ef8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003efc:	f000 b87e 	b.w	8003ffc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	f06f 0201 	mvn.w	r2, #1
 8003f06:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f7fc fd23 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
 8003f0e:	e792      	b.n	8003e36 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f000 f871 	bl	8004000 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003f1e:	2f00      	cmp	r7, #0
 8003f20:	d08f      	beq.n	8003e42 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f22:	682b      	ldr	r3, [r5, #0]
 8003f24:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f86a 	bl	8004004 <HAL_TIMEx_Break2Callback>
 8003f30:	e787      	b.n	8003e42 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f38:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f7ff ff60 	bl	8003e00 <HAL_TIM_TriggerCallback>
 8003f40:	e783      	b.n	8003e4a <HAL_TIM_IRQHandler+0x46>
          HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	f7ff ff59 	bl	8003df8 <HAL_TIM_IC_CaptureCallback>
 8003f46:	e7ca      	b.n	8003ede <HAL_TIM_IRQHandler+0xda>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f48:	f7ff ff56 	bl	8003df8 <HAL_TIM_IC_CaptureCallback>
 8003f4c:	e7b7      	b.n	8003ebe <HAL_TIM_IRQHandler+0xba>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	f7ff ff53 	bl	8003df8 <HAL_TIM_IC_CaptureCallback>
 8003f52:	e7a1      	b.n	8003e98 <HAL_TIM_IRQHandler+0x94>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f54:	f7ff ff50 	bl	8003df8 <HAL_TIM_IC_CaptureCallback>
 8003f58:	e78c      	b.n	8003e74 <HAL_TIM_IRQHandler+0x70>
 8003f5a:	bf00      	nop

08003f5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f5c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003f60:	2a01      	cmp	r2, #1
 8003f62:	d044      	beq.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f64:	6802      	ldr	r2, [r0, #0]
{
 8003f66:	b470      	push	{r4, r5, r6}
 8003f68:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f6a:	4e22      	ldr	r6, [pc, #136]	@ (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	2002      	movs	r0, #2
 8003f6e:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f72:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 8003f74:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f76:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003f78:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f7a:	d026      	beq.n	8003fca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003f7c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8003f80:	42b2      	cmp	r2, r6
 8003f82:	d02b      	beq.n	8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f84:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f88:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8003f8e:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f90:	d00e      	beq.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003f92:	4819      	ldr	r0, [pc, #100]	@ (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003f94:	4282      	cmp	r2, r0
 8003f96:	d00b      	beq.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003f98:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003f9c:	4282      	cmp	r2, r0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003fa0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003fa4:	4282      	cmp	r2, r0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003fa8:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8003fac:	4282      	cmp	r2, r0
 8003fae:	d104      	bne.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fb0:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb2:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fb6:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb8:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003fba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003fc2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003fc6:	bc70      	pop	{r4, r5, r6}
 8003fc8:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fca:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fcc:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fd0:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd2:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd6:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8003fd8:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fda:	e7e9      	b.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fdc:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fde:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fe2:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe4:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe8:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 8003fea:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fec:	e7e0      	b.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 8003fee:	2002      	movs	r0, #2
}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40012c00 	.word	0x40012c00
 8003ff8:	40000400 	.word	0x40000400

08003ffc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop

08004000 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop

08004004 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop

08004008 <HAL_UART_TxCpltCallback>:
/**
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop

0800400c <HAL_UART_ErrorCallback>:
/**
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop

08004010 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004010:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004012:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800401a:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800401e:	f7ff fff5 	bl	800400c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004022:	bd08      	pop	{r3, pc}

08004024 <HAL_UARTEx_RxEventCallback>:
}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop

08004028 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004028:	6803      	ldr	r3, [r0, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800402c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800402e:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 8004032:	ea12 0f0c 	tst.w	r2, ip
{
 8004036:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004038:	689d      	ldr	r5, [r3, #8]
{
 800403a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800403c:	d150      	bne.n	80040e0 <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800403e:	0696      	lsls	r6, r2, #26
 8004040:	d502      	bpl.n	8004048 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004042:	068e      	lsls	r6, r1, #26
 8004044:	f100 80cb 	bmi.w	80041de <HAL_UART_IRQHandler+0x1b6>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004048:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800404a:	2801      	cmp	r0, #1
 800404c:	d024      	beq.n	8004098 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800404e:	02d6      	lsls	r6, r2, #11
 8004050:	d502      	bpl.n	8004058 <HAL_UART_IRQHandler+0x30>
 8004052:	0268      	lsls	r0, r5, #9
 8004054:	f100 80c8 	bmi.w	80041e8 <HAL_UART_IRQHandler+0x1c0>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004058:	0616      	lsls	r6, r2, #24
 800405a:	d414      	bmi.n	8004086 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800405c:	0650      	lsls	r0, r2, #25
 800405e:	d501      	bpl.n	8004064 <HAL_UART_IRQHandler+0x3c>
 8004060:	064a      	lsls	r2, r1, #25
 8004062:	d400      	bmi.n	8004066 <HAL_UART_IRQHandler+0x3e>
}
 8004064:	bd70      	pop	{r4, r5, r6, pc}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800406a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	e843 2100 	strex	r1, r2, [r3]
 8004072:	2900      	cmp	r1, #0
 8004074:	d1f7      	bne.n	8004066 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004076:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004078:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800407a:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->TxISR = NULL;
 800407c:	66e3      	str	r3, [r4, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800407e:	4620      	mov	r0, r4
 8004080:	f7ff ffc2 	bl	8004008 <HAL_UART_TxCpltCallback>
}
 8004084:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004086:	060d      	lsls	r5, r1, #24
 8004088:	d5e8      	bpl.n	800405c <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 800408a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0e9      	beq.n	8004064 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8004090:	4620      	mov	r0, r4
}
 8004092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8004096:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004098:	06d6      	lsls	r6, r2, #27
 800409a:	d5d8      	bpl.n	800404e <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800409c:	06c8      	lsls	r0, r1, #27
 800409e:	d5d6      	bpl.n	800404e <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040a0:	2210      	movs	r2, #16
 80040a2:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	0651      	lsls	r1, r2, #25
 80040a8:	f140 80fb 	bpl.w	80042a2 <HAL_UART_IRQHandler+0x27a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ac:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80040ae:	6801      	ldr	r1, [r0, #0]
 80040b0:	684a      	ldr	r2, [r1, #4]
 80040b2:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80040b4:	2a00      	cmp	r2, #0
 80040b6:	d0d5      	beq.n	8004064 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040b8:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 80040bc:	4295      	cmp	r5, r2
 80040be:	d9d1      	bls.n	8004064 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 80040c0:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040c4:	680a      	ldr	r2, [r1, #0]
 80040c6:	0692      	lsls	r2, r2, #26
 80040c8:	f140 8122 	bpl.w	8004310 <HAL_UART_IRQHandler+0x2e8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040cc:	2302      	movs	r3, #2
 80040ce:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040d0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80040d4:	1ae9      	subs	r1, r5, r3
 80040d6:	4620      	mov	r0, r4
 80040d8:	b289      	uxth	r1, r1
 80040da:	f7ff ffa3 	bl	8004024 <HAL_UARTEx_RxEventCallback>
}
 80040de:	bd70      	pop	{r4, r5, r6, pc}
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040e0:	f015 0601 	ands.w	r6, r5, #1
 80040e4:	f040 80a5 	bne.w	8004232 <HAL_UART_IRQHandler+0x20a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040e8:	48a5      	ldr	r0, [pc, #660]	@ (8004380 <HAL_UART_IRQHandler+0x358>)
 80040ea:	4201      	tst	r1, r0
 80040ec:	d0ac      	beq.n	8004048 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040ee:	07d5      	lsls	r5, r2, #31
 80040f0:	d50f      	bpl.n	8004112 <HAL_UART_IRQHandler+0xea>
 80040f2:	05c8      	lsls	r0, r1, #23
 80040f4:	f140 80d1 	bpl.w	800429a <HAL_UART_IRQHandler+0x272>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040f8:	2001      	movs	r0, #1
 80040fa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040fc:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004100:	f040 0001 	orr.w	r0, r0, #1
 8004104:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004108:	0790      	lsls	r0, r2, #30
 800410a:	d57a      	bpl.n	8004202 <HAL_UART_IRQHandler+0x1da>
 800410c:	2e00      	cmp	r6, #0
 800410e:	f040 8094 	bne.w	800423a <HAL_UART_IRQHandler+0x212>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004112:	0755      	lsls	r5, r2, #29
 8004114:	f140 809b 	bpl.w	800424e <HAL_UART_IRQHandler+0x226>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004118:	0716      	lsls	r6, r2, #28
 800411a:	f100 80bb 	bmi.w	8004294 <HAL_UART_IRQHandler+0x26c>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800411e:	0516      	lsls	r6, r2, #20
 8004120:	d50a      	bpl.n	8004138 <HAL_UART_IRQHandler+0x110>
 8004122:	014d      	lsls	r5, r1, #5
 8004124:	d508      	bpl.n	8004138 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004126:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800412a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800412c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004130:	f040 0020 	orr.w	r0, r0, #32
 8004134:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004138:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800413c:	2800      	cmp	r0, #0
 800413e:	d091      	beq.n	8004064 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004140:	0690      	lsls	r0, r2, #26
 8004142:	d506      	bpl.n	8004152 <HAL_UART_IRQHandler+0x12a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004144:	0689      	lsls	r1, r1, #26
 8004146:	d504      	bpl.n	8004152 <HAL_UART_IRQHandler+0x12a>
        if (huart->RxISR != NULL)
 8004148:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800414a:	b112      	cbz	r2, 8004152 <HAL_UART_IRQHandler+0x12a>
          huart->RxISR(huart);
 800414c:	4620      	mov	r0, r4
 800414e:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004150:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8004152:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004156:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004158:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800415c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8004160:	ea52 0501 	orrs.w	r5, r2, r1
 8004164:	f000 8105 	beq.w	8004372 <HAL_UART_IRQHandler+0x34a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	e843 2100 	strex	r1, r2, [r3]
 8004174:	2900      	cmp	r1, #0
 8004176:	d1f7      	bne.n	8004168 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	f103 0208 	add.w	r2, r3, #8
 800417c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	f103 0008 	add.w	r0, r3, #8
 8004188:	e840 2100 	strex	r1, r2, [r0]
 800418c:	2900      	cmp	r1, #0
 800418e:	d1f3      	bne.n	8004178 <HAL_UART_IRQHandler+0x150>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004190:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004192:	2a01      	cmp	r2, #1
 8004194:	d064      	beq.n	8004260 <HAL_UART_IRQHandler+0x238>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004198:	2120      	movs	r1, #32
 800419a:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419e:	6622      	str	r2, [r4, #96]	@ 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 80041a2:	66a2      	str	r2, [r4, #104]	@ 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	064a      	lsls	r2, r1, #25
 80041a6:	d56c      	bpl.n	8004282 <HAL_UART_IRQHandler+0x25a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	f103 0208 	add.w	r2, r3, #8
 80041ac:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	f103 0008 	add.w	r0, r3, #8
 80041b8:	e840 2100 	strex	r1, r2, [r0]
 80041bc:	2900      	cmp	r1, #0
 80041be:	d1f3      	bne.n	80041a8 <HAL_UART_IRQHandler+0x180>
          if (huart->hdmarx != NULL)
 80041c0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d05d      	beq.n	8004282 <HAL_UART_IRQHandler+0x25a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004384 <HAL_UART_IRQHandler+0x35c>)
 80041c8:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ca:	f7fe f885 	bl	80022d8 <HAL_DMA_Abort_IT>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	f43f af48 	beq.w	8004064 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041d4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
}
 80041d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041da:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80041dc:	4718      	bx	r3
      if (huart->RxISR != NULL)
 80041de:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f47f af56 	bne.w	8004092 <HAL_UART_IRQHandler+0x6a>
 80041e6:	e73d      	b.n	8004064 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80041ec:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041ee:	621a      	str	r2, [r3, #32]
}
 80041f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80041f4:	f000 bb9e 	b.w	8004934 <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041f8:	05c8      	lsls	r0, r1, #23
 80041fa:	f53f af7d 	bmi.w	80040f8 <HAL_UART_IRQHandler+0xd0>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041fe:	0795      	lsls	r5, r2, #30
 8004200:	d41b      	bmi.n	800423a <HAL_UART_IRQHandler+0x212>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004202:	0750      	lsls	r0, r2, #29
 8004204:	d523      	bpl.n	800424e <HAL_UART_IRQHandler+0x226>
 8004206:	2e00      	cmp	r6, #0
 8004208:	d086      	beq.n	8004118 <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800420a:	2004      	movs	r0, #4
 800420c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800420e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004212:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004214:	f040 0002 	orr.w	r0, r0, #2
 8004218:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800421c:	f57f af7f 	bpl.w	800411e <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004220:	2008      	movs	r0, #8
 8004222:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004224:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004228:	f040 0008 	orr.w	r0, r0, #8
 800422c:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8004230:	e775      	b.n	800411e <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004232:	07d0      	lsls	r0, r2, #31
 8004234:	d4e0      	bmi.n	80041f8 <HAL_UART_IRQHandler+0x1d0>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004236:	0795      	lsls	r5, r2, #30
 8004238:	d527      	bpl.n	800428a <HAL_UART_IRQHandler+0x262>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800423a:	2002      	movs	r0, #2
 800423c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800423e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004242:	f040 0004 	orr.w	r0, r0, #4
 8004246:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800424a:	0750      	lsls	r0, r2, #29
 800424c:	d4dd      	bmi.n	800420a <HAL_UART_IRQHandler+0x1e2>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800424e:	0710      	lsls	r0, r2, #28
 8004250:	f57f af65 	bpl.w	800411e <HAL_UART_IRQHandler+0xf6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004254:	f001 0020 	and.w	r0, r1, #32
 8004258:	4330      	orrs	r0, r6
 800425a:	f43f af60 	beq.w	800411e <HAL_UART_IRQHandler+0xf6>
 800425e:	e7df      	b.n	8004220 <HAL_UART_IRQHandler+0x1f8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004264:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	e843 2100 	strex	r1, r2, [r3]
 800426c:	2900      	cmp	r1, #0
 800426e:	d092      	beq.n	8004196 <HAL_UART_IRQHandler+0x16e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	e853 2f00 	ldrex	r2, [r3]
 8004274:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	e843 2100 	strex	r1, r2, [r3]
 800427c:	2900      	cmp	r1, #0
 800427e:	d1ef      	bne.n	8004260 <HAL_UART_IRQHandler+0x238>
 8004280:	e789      	b.n	8004196 <HAL_UART_IRQHandler+0x16e>
            HAL_UART_ErrorCallback(huart);
 8004282:	4620      	mov	r0, r4
 8004284:	f7ff fec2 	bl	800400c <HAL_UART_ErrorCallback>
}
 8004288:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800428a:	0756      	lsls	r6, r2, #29
 800428c:	d4bd      	bmi.n	800420a <HAL_UART_IRQHandler+0x1e2>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800428e:	0710      	lsls	r0, r2, #28
 8004290:	d4c6      	bmi.n	8004220 <HAL_UART_IRQHandler+0x1f8>
 8004292:	e744      	b.n	800411e <HAL_UART_IRQHandler+0xf6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004294:	068d      	lsls	r5, r1, #26
 8004296:	d4c3      	bmi.n	8004220 <HAL_UART_IRQHandler+0x1f8>
 8004298:	e741      	b.n	800411e <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800429a:	0795      	lsls	r5, r2, #30
 800429c:	f53f af39 	bmi.w	8004112 <HAL_UART_IRQHandler+0xea>
 80042a0:	e7af      	b.n	8004202 <HAL_UART_IRQHandler+0x1da>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042a2:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 80042a6:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042aa:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
      if ((huart->RxXferCount > 0U)
 80042ae:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b0:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	f43f aed6 	beq.w	8004064 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042b8:	1a41      	subs	r1, r0, r1
 80042ba:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80042bc:	2900      	cmp	r1, #0
 80042be:	f43f aed1 	beq.w	8004064 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	e843 2000 	strex	r0, r2, [r3]
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d1f7      	bne.n	80042c2 <HAL_UART_IRQHandler+0x29a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	f103 0208 	add.w	r2, r3, #8
 80042d6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	f103 0508 	add.w	r5, r3, #8
 80042e2:	e845 2000 	strex	r0, r2, [r5]
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d1f3      	bne.n	80042d2 <HAL_UART_IRQHandler+0x2aa>
        huart->RxState = HAL_UART_STATE_READY;
 80042ea:	2220      	movs	r2, #32
 80042ec:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
        huart->RxISR = NULL;
 80042f0:	66a0      	str	r0, [r4, #104]	@ 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f2:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	e843 2000 	strex	r0, r2, [r3]
 8004300:	2800      	cmp	r0, #0
 8004302:	d1f7      	bne.n	80042f4 <HAL_UART_IRQHandler+0x2cc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004304:	2302      	movs	r3, #2
 8004306:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004308:	4620      	mov	r0, r4
 800430a:	f7ff fe8b 	bl	8004024 <HAL_UARTEx_RxEventCallback>
}
 800430e:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004314:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	e843 2100 	strex	r1, r2, [r3]
 800431c:	2900      	cmp	r1, #0
 800431e:	d1f7      	bne.n	8004310 <HAL_UART_IRQHandler+0x2e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	f103 0208 	add.w	r2, r3, #8
 8004324:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004328:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	f103 0508 	add.w	r5, r3, #8
 8004330:	e845 2100 	strex	r1, r2, [r5]
 8004334:	2900      	cmp	r1, #0
 8004336:	d1f3      	bne.n	8004320 <HAL_UART_IRQHandler+0x2f8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	f103 0208 	add.w	r2, r3, #8
 800433c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	f103 0508 	add.w	r5, r3, #8
 8004348:	e845 2100 	strex	r1, r2, [r5]
 800434c:	2900      	cmp	r1, #0
 800434e:	d1f3      	bne.n	8004338 <HAL_UART_IRQHandler+0x310>
          huart->RxState = HAL_UART_STATE_READY;
 8004350:	2220      	movs	r2, #32
 8004352:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	e843 2100 	strex	r1, r2, [r3]
 8004364:	2900      	cmp	r1, #0
 8004366:	d1f7      	bne.n	8004358 <HAL_UART_IRQHandler+0x330>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004368:	f7fd ff90 	bl	800228c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800436c:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 8004370:	e6ac      	b.n	80040cc <HAL_UART_IRQHandler+0xa4>
        HAL_UART_ErrorCallback(huart);
 8004372:	4620      	mov	r0, r4
 8004374:	f7ff fe4a 	bl	800400c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004378:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 800437c:	bd70      	pop	{r4, r5, r6, pc}
 800437e:	bf00      	nop
 8004380:	04000120 	.word	0x04000120
 8004384:	08004011 	.word	0x08004011

08004388 <UART_SetConfig>:
{
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800438c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800438e:	6882      	ldr	r2, [r0, #8]
 8004390:	6900      	ldr	r0, [r0, #16]
 8004392:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004394:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004396:	4302      	orrs	r2, r0
 8004398:	430a      	orrs	r2, r1
 800439a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800439c:	4981      	ldr	r1, [pc, #516]	@ (80045a4 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800439e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043a0:	4029      	ands	r1, r5
 80043a2:	430a      	orrs	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	68e1      	ldr	r1, [r4, #12]
 80043aa:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80043ae:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043b0:	497d      	ldr	r1, [pc, #500]	@ (80045a8 <UART_SetConfig+0x220>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b2:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043b4:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b6:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043b8:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043ba:	d03f      	beq.n	800443c <UART_SetConfig+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 80043bc:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043be:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80043c2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043c4:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043c6:	4979      	ldr	r1, [pc, #484]	@ (80045ac <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043c8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ca:	428b      	cmp	r3, r1
 80043cc:	d115      	bne.n	80043fa <UART_SetConfig+0x72>
 80043ce:	4b78      	ldr	r3, [pc, #480]	@ (80045b0 <UART_SetConfig+0x228>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	f000 808d 	beq.w	80044f8 <UART_SetConfig+0x170>
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d077      	beq.n	80044d2 <UART_SetConfig+0x14a>
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d06d      	beq.n	80044c2 <UART_SetConfig+0x13a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80043ea:	f000 80cf 	beq.w	800458c <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ee:	f7ff f845 	bl	800347c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d172      	bne.n	80044dc <UART_SetConfig+0x154>
        pclk = (uint32_t) HSI_VALUE;
 80043f6:	2000      	movs	r0, #0
 80043f8:	e01c      	b.n	8004434 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043fa:	4a6e      	ldr	r2, [pc, #440]	@ (80045b4 <UART_SetConfig+0x22c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10f      	bne.n	8004420 <UART_SetConfig+0x98>
 8004400:	4b6b      	ldr	r3, [pc, #428]	@ (80045b0 <UART_SetConfig+0x228>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b0c      	cmp	r3, #12
 800440c:	d811      	bhi.n	8004432 <UART_SetConfig+0xaa>
 800440e:	e8df f003 	tbb	[pc, r3]
 8004412:	1082      	.short	0x1082
 8004414:	10581010 	.word	0x10581010
 8004418:	10731010 	.word	0x10731010
 800441c:	1010      	.short	0x1010
 800441e:	60          	.byte	0x60
 800441f:	00          	.byte	0x00
 8004420:	4a65      	ldr	r2, [pc, #404]	@ (80045b8 <UART_SetConfig+0x230>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d07d      	beq.n	8004522 <UART_SetConfig+0x19a>
 8004426:	4a65      	ldr	r2, [pc, #404]	@ (80045bc <UART_SetConfig+0x234>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d03f      	beq.n	80044ac <UART_SetConfig+0x124>
 800442c:	4a64      	ldr	r2, [pc, #400]	@ (80045c0 <UART_SetConfig+0x238>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d067      	beq.n	8004502 <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 8004432:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 800443a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800443c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004440:	485b      	ldr	r0, [pc, #364]	@ (80045b0 <UART_SetConfig+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004442:	430a      	orrs	r2, r1
 8004444:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004446:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800444a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800444e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004452:	d07e      	beq.n	8004552 <UART_SetConfig+0x1ca>
 8004454:	d807      	bhi.n	8004466 <UART_SetConfig+0xde>
 8004456:	b323      	cbz	r3, 80044a2 <UART_SetConfig+0x11a>
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445c:	d1e9      	bne.n	8004432 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe fc0b 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004462:	b928      	cbnz	r0, 8004470 <UART_SetConfig+0xe8>
 8004464:	e7c7      	b.n	80043f6 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004466:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800446a:	d1e2      	bne.n	8004432 <UART_SetConfig+0xaa>
        pclk = (uint32_t) LSE_VALUE;
 800446c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004470:	6862      	ldr	r2, [r4, #4]
 8004472:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004476:	4283      	cmp	r3, r0
 8004478:	d8db      	bhi.n	8004432 <UART_SetConfig+0xaa>
 800447a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800447e:	d8d8      	bhi.n	8004432 <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004480:	0851      	lsrs	r1, r2, #1
 8004482:	2300      	movs	r3, #0
 8004484:	468c      	mov	ip, r1
 8004486:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800448a:	4619      	mov	r1, r3
 800448c:	fbe0 c105 	umlal	ip, r1, r0, r5
 8004490:	4660      	mov	r0, ip
 8004492:	f7fb fe99 	bl	80001c8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004496:	4b4b      	ldr	r3, [pc, #300]	@ (80045c4 <UART_SetConfig+0x23c>)
 8004498:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800449c:	429a      	cmp	r2, r3
 800449e:	d8c8      	bhi.n	8004432 <UART_SetConfig+0xaa>
 80044a0:	e027      	b.n	80044f2 <UART_SetConfig+0x16a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a2:	f7fe ffd9 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d1e2      	bne.n	8004470 <UART_SetConfig+0xe8>
 80044aa:	e7a4      	b.n	80043f6 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ac:	4b40      	ldr	r3, [pc, #256]	@ (80045b0 <UART_SetConfig+0x228>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044b6:	2b80      	cmp	r3, #128	@ 0x80
 80044b8:	d01e      	beq.n	80044f8 <UART_SetConfig+0x170>
 80044ba:	d83f      	bhi.n	800453c <UART_SetConfig+0x1b4>
 80044bc:	b35b      	cbz	r3, 8004516 <UART_SetConfig+0x18e>
 80044be:	2b40      	cmp	r3, #64	@ 0x40
 80044c0:	d1b7      	bne.n	8004432 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80044c6:	d069      	beq.n	800459c <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetSysClockFreq();
 80044c8:	f7fe fbd6 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
        break;
 80044cc:	e791      	b.n	80043f2 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ce:	2b30      	cmp	r3, #48	@ 0x30
 80044d0:	d1af      	bne.n	8004432 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80044d6:	d05e      	beq.n	8004596 <UART_SetConfig+0x20e>
        pclk = (uint32_t) LSE_VALUE;
 80044d8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044dc:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044de:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044e2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80044e6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ea:	f1a0 0310 	sub.w	r3, r0, #16
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d89f      	bhi.n	8004432 <UART_SetConfig+0xaa>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	60d8      	str	r0, [r3, #12]
 80044f6:	e77e      	b.n	80043f6 <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044f8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80044fc:	d049      	beq.n	8004592 <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 80044fe:	4832      	ldr	r0, [pc, #200]	@ (80045c8 <UART_SetConfig+0x240>)
 8004500:	e7ec      	b.n	80044dc <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004502:	4b2b      	ldr	r3, [pc, #172]	@ (80045b0 <UART_SetConfig+0x228>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004508:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004510:	d0f2      	beq.n	80044f8 <UART_SetConfig+0x170>
 8004512:	d81a      	bhi.n	800454a <UART_SetConfig+0x1c2>
 8004514:	b9ab      	cbnz	r3, 8004542 <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004516:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800451a:	d01c      	beq.n	8004556 <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 800451c:	f7fe ff9c 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
        break;
 8004520:	e767      	b.n	80043f2 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004522:	4b23      	ldr	r3, [pc, #140]	@ (80045b0 <UART_SetConfig+0x228>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004528:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800452c:	2b20      	cmp	r3, #32
 800452e:	d0e3      	beq.n	80044f8 <UART_SetConfig+0x170>
 8004530:	d8cd      	bhi.n	80044ce <UART_SetConfig+0x146>
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ef      	beq.n	8004516 <UART_SetConfig+0x18e>
 8004536:	2b10      	cmp	r3, #16
 8004538:	d0c3      	beq.n	80044c2 <UART_SetConfig+0x13a>
 800453a:	e77a      	b.n	8004432 <UART_SetConfig+0xaa>
 800453c:	2bc0      	cmp	r3, #192	@ 0xc0
 800453e:	d0c8      	beq.n	80044d2 <UART_SetConfig+0x14a>
 8004540:	e777      	b.n	8004432 <UART_SetConfig+0xaa>
 8004542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004546:	d0bc      	beq.n	80044c2 <UART_SetConfig+0x13a>
 8004548:	e773      	b.n	8004432 <UART_SetConfig+0xaa>
 800454a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800454e:	d0c0      	beq.n	80044d2 <UART_SetConfig+0x14a>
 8004550:	e76f      	b.n	8004432 <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 8004552:	481d      	ldr	r0, [pc, #116]	@ (80045c8 <UART_SetConfig+0x240>)
 8004554:	e78c      	b.n	8004470 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004556:	f7fe ff7f 	bl	8003458 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800455a:	2800      	cmp	r0, #0
 800455c:	f43f af4b 	beq.w	80043f6 <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004560:	0040      	lsls	r0, r0, #1
 8004562:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004564:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004568:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800456c:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004570:	f1a3 0110 	sub.w	r1, r3, #16
 8004574:	4291      	cmp	r1, r2
 8004576:	f63f af5c 	bhi.w	8004432 <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800457a:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800457e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004580:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004582:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004586:	4313      	orrs	r3, r2
 8004588:	60cb      	str	r3, [r1, #12]
 800458a:	e734      	b.n	80043f6 <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7fe ff76 	bl	800347c <HAL_RCC_GetPCLK2Freq>
        break;
 8004590:	e7e3      	b.n	800455a <UART_SetConfig+0x1d2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004592:	480e      	ldr	r0, [pc, #56]	@ (80045cc <UART_SetConfig+0x244>)
 8004594:	e7e5      	b.n	8004562 <UART_SetConfig+0x1da>
 8004596:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800459a:	e7e2      	b.n	8004562 <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetSysClockFreq();
 800459c:	f7fe fb6c 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
        break;
 80045a0:	e7db      	b.n	800455a <UART_SetConfig+0x1d2>
 80045a2:	bf00      	nop
 80045a4:	efff69f3 	.word	0xefff69f3
 80045a8:	40008000 	.word	0x40008000
 80045ac:	40013800 	.word	0x40013800
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40004400 	.word	0x40004400
 80045b8:	40004800 	.word	0x40004800
 80045bc:	40004c00 	.word	0x40004c00
 80045c0:	40005000 	.word	0x40005000
 80045c4:	000ffcff 	.word	0x000ffcff
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	01e84800 	.word	0x01e84800

080045d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045d0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80045d2:	071a      	lsls	r2, r3, #28
{
 80045d4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045d6:	d506      	bpl.n	80045e6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045d8:	6801      	ldr	r1, [r0, #0]
 80045da:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80045dc:	684a      	ldr	r2, [r1, #4]
 80045de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045e2:	4322      	orrs	r2, r4
 80045e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e6:	07dc      	lsls	r4, r3, #31
 80045e8:	d506      	bpl.n	80045f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ea:	6801      	ldr	r1, [r0, #0]
 80045ec:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80045ee:	684a      	ldr	r2, [r1, #4]
 80045f0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80045f4:	4322      	orrs	r2, r4
 80045f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045f8:	0799      	lsls	r1, r3, #30
 80045fa:	d506      	bpl.n	800460a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045fc:	6801      	ldr	r1, [r0, #0]
 80045fe:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8004600:	684a      	ldr	r2, [r1, #4]
 8004602:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004606:	4322      	orrs	r2, r4
 8004608:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800460a:	075a      	lsls	r2, r3, #29
 800460c:	d506      	bpl.n	800461c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800460e:	6801      	ldr	r1, [r0, #0]
 8004610:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004612:	684a      	ldr	r2, [r1, #4]
 8004614:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004618:	4322      	orrs	r2, r4
 800461a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800461c:	06dc      	lsls	r4, r3, #27
 800461e:	d506      	bpl.n	800462e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004620:	6801      	ldr	r1, [r0, #0]
 8004622:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004624:	688a      	ldr	r2, [r1, #8]
 8004626:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800462a:	4322      	orrs	r2, r4
 800462c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800462e:	0699      	lsls	r1, r3, #26
 8004630:	d506      	bpl.n	8004640 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004632:	6801      	ldr	r1, [r0, #0]
 8004634:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004636:	688a      	ldr	r2, [r1, #8]
 8004638:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800463c:	4322      	orrs	r2, r4
 800463e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004640:	065a      	lsls	r2, r3, #25
 8004642:	d509      	bpl.n	8004658 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004644:	6801      	ldr	r1, [r0, #0]
 8004646:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004648:	684a      	ldr	r2, [r1, #4]
 800464a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800464e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004650:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004654:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004656:	d00b      	beq.n	8004670 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	d506      	bpl.n	800466a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800465c:	6802      	ldr	r2, [r0, #0]
 800465e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004660:	6853      	ldr	r3, [r2, #4]
 8004662:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004666:	430b      	orrs	r3, r1
 8004668:	6053      	str	r3, [r2, #4]
}
 800466a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800466e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004670:	684a      	ldr	r2, [r1, #4]
 8004672:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004674:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004678:	4322      	orrs	r2, r4
 800467a:	604a      	str	r2, [r1, #4]
 800467c:	e7ec      	b.n	8004658 <UART_AdvFeatureConfig+0x88>
 800467e:	bf00      	nop

08004680 <UART_CheckIdleState>:
{
 8004680:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	2300      	movs	r3, #0
{
 8004684:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004686:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800468a:	f7fd fc47 	bl	8001f1c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800468e:	6822      	ldr	r2, [r4, #0]
 8004690:	6813      	ldr	r3, [r2, #0]
 8004692:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8004694:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004696:	d40e      	bmi.n	80046b6 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	0759      	lsls	r1, r3, #29
 800469c:	d42f      	bmi.n	80046fe <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80046a0:	2220      	movs	r2, #32
 80046a2:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 80046a4:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80046a6:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046aa:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ac:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 80046ae:	2300      	movs	r3, #0
 80046b0:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 80046b4:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b6:	69d3      	ldr	r3, [r2, #28]
 80046b8:	0298      	lsls	r0, r3, #10
 80046ba:	d4ed      	bmi.n	8004698 <UART_CheckIdleState+0x18>
 80046bc:	e00c      	b.n	80046d8 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	0749      	lsls	r1, r1, #29
 80046c2:	461a      	mov	r2, r3
 80046c4:	d505      	bpl.n	80046d2 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046c6:	69d9      	ldr	r1, [r3, #28]
 80046c8:	0708      	lsls	r0, r1, #28
 80046ca:	d449      	bmi.n	8004760 <UART_CheckIdleState+0xe0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046cc:	69d9      	ldr	r1, [r3, #28]
 80046ce:	0509      	lsls	r1, r1, #20
 80046d0:	d474      	bmi.n	80047bc <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	0298      	lsls	r0, r3, #10
 80046d6:	d4df      	bmi.n	8004698 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d8:	f7fd fc20 	bl	8001f1c <HAL_GetTick>
 80046dc:	1b43      	subs	r3, r0, r5
 80046de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046e2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e4:	d3eb      	bcc.n	80046be <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	e843 2100 	strex	r1, r2, [r3]
 80046f2:	2900      	cmp	r1, #0
 80046f4:	d1f7      	bne.n	80046e6 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80046f6:	2320      	movs	r3, #32
 80046f8:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80046fa:	2003      	movs	r0, #3
 80046fc:	e7d7      	b.n	80046ae <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fe:	69d3      	ldr	r3, [r2, #28]
 8004700:	025b      	lsls	r3, r3, #9
 8004702:	d4cc      	bmi.n	800469e <UART_CheckIdleState+0x1e>
 8004704:	e00d      	b.n	8004722 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	0750      	lsls	r0, r2, #29
 800470a:	d507      	bpl.n	800471c <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	0711      	lsls	r1, r2, #28
 8004710:	f100 8082 	bmi.w	8004818 <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	0512      	lsls	r2, r2, #20
 8004718:	f100 80ac 	bmi.w	8004874 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	025b      	lsls	r3, r3, #9
 8004720:	d4bd      	bmi.n	800469e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004722:	f7fd fbfb 	bl	8001f1c <HAL_GetTick>
 8004726:	1b43      	subs	r3, r0, r5
 8004728:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	d3ea      	bcc.n	8004706 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004734:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	e843 2100 	strex	r1, r2, [r3]
 800473c:	2900      	cmp	r1, #0
 800473e:	d1f7      	bne.n	8004730 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	f103 0208 	add.w	r2, r3, #8
 8004744:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004748:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	f103 0008 	add.w	r0, r3, #8
 8004750:	e840 2100 	strex	r1, r2, [r0]
 8004754:	2900      	cmp	r1, #0
 8004756:	d1f3      	bne.n	8004740 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8004758:	2320      	movs	r3, #32
 800475a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800475e:	e7cc      	b.n	80046fa <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004760:	2208      	movs	r2, #8
 8004762:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004768:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	e843 2100 	strex	r1, r2, [r3]
 8004770:	2900      	cmp	r1, #0
 8004772:	d1f7      	bne.n	8004764 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	f103 0208 	add.w	r2, r3, #8
 8004778:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	f103 0008 	add.w	r0, r3, #8
 8004784:	e840 2100 	strex	r1, r2, [r0]
 8004788:	2900      	cmp	r1, #0
 800478a:	d1f3      	bne.n	8004774 <UART_CheckIdleState+0xf4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800478e:	2a01      	cmp	r2, #1
 8004790:	d00b      	beq.n	80047aa <UART_CheckIdleState+0x12a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004794:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004796:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004798:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 800479c:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479e:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80047a0:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047a4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80047a8:	e79d      	b.n	80046e6 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	e843 2100 	strex	r1, r2, [r3]
 80047b6:	2900      	cmp	r1, #0
 80047b8:	d1f7      	bne.n	80047aa <UART_CheckIdleState+0x12a>
 80047ba:	e7ea      	b.n	8004792 <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047c0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	e843 2100 	strex	r1, r2, [r3]
 80047ce:	2900      	cmp	r1, #0
 80047d0:	d1f7      	bne.n	80047c2 <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	f103 0208 	add.w	r2, r3, #8
 80047d6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047da:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	f103 0008 	add.w	r0, r3, #8
 80047e2:	e840 2100 	strex	r1, r2, [r0]
 80047e6:	2900      	cmp	r1, #0
 80047e8:	d1f3      	bne.n	80047d2 <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ea:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80047ec:	2a01      	cmp	r2, #1
 80047ee:	d00a      	beq.n	8004806 <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80047f2:	2120      	movs	r1, #32
 80047f4:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80047f8:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fa:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80047fc:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004800:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8004804:	e76f      	b.n	80046e6 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	e843 2100 	strex	r1, r2, [r3]
 8004812:	2900      	cmp	r1, #0
 8004814:	d1f7      	bne.n	8004806 <UART_CheckIdleState+0x186>
 8004816:	e7eb      	b.n	80047f0 <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004818:	2208      	movs	r2, #8
 800481a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004820:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	e843 2100 	strex	r1, r2, [r3]
 8004828:	2900      	cmp	r1, #0
 800482a:	d1f7      	bne.n	800481c <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	f103 0208 	add.w	r2, r3, #8
 8004830:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004834:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	f103 0008 	add.w	r0, r3, #8
 800483c:	e840 2100 	strex	r1, r2, [r0]
 8004840:	2900      	cmp	r1, #0
 8004842:	d1f3      	bne.n	800482c <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004844:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004846:	2a01      	cmp	r2, #1
 8004848:	d00b      	beq.n	8004862 <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800484e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004850:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8004854:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8004858:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800485c:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8004860:	e766      	b.n	8004730 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004866:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	e843 2100 	strex	r1, r2, [r3]
 800486e:	2900      	cmp	r1, #0
 8004870:	d1f7      	bne.n	8004862 <UART_CheckIdleState+0x1e2>
 8004872:	e7ea      	b.n	800484a <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004874:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004878:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	e843 2100 	strex	r1, r2, [r3]
 8004886:	2900      	cmp	r1, #0
 8004888:	d1f7      	bne.n	800487a <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	f103 0208 	add.w	r2, r3, #8
 800488e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004892:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	f103 0008 	add.w	r0, r3, #8
 800489a:	e840 2100 	strex	r1, r2, [r0]
 800489e:	2900      	cmp	r1, #0
 80048a0:	d1f3      	bne.n	800488a <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80048a4:	2a01      	cmp	r2, #1
 80048a6:	d00a      	beq.n	80048be <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80048aa:	2120      	movs	r1, #32
 80048ac:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80048b0:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80048b4:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048b8:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80048bc:	e738      	b.n	8004730 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	e843 2100 	strex	r1, r2, [r3]
 80048ca:	2900      	cmp	r1, #0
 80048cc:	d1f7      	bne.n	80048be <UART_CheckIdleState+0x23e>
 80048ce:	e7eb      	b.n	80048a8 <UART_CheckIdleState+0x228>

080048d0 <HAL_UART_Init>:
  if (huart == NULL)
 80048d0:	b370      	cbz	r0, 8004930 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80048d2:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80048d4:	b510      	push	{r4, lr}
 80048d6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80048d8:	b32b      	cbz	r3, 8004926 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 80048da:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 80048de:	2324      	movs	r3, #36	@ 0x24
 80048e0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ea:	b9c1      	cbnz	r1, 800491e <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ec:	4620      	mov	r0, r4
 80048ee:	f7ff fd4b 	bl	8004388 <UART_SetConfig>
 80048f2:	2801      	cmp	r0, #1
 80048f4:	d011      	beq.n	800491a <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004906:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800490e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004916:	f7ff beb3 	b.w	8004680 <UART_CheckIdleState>
}
 800491a:	2001      	movs	r0, #1
 800491c:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800491e:	4620      	mov	r0, r4
 8004920:	f7ff fe56 	bl	80045d0 <UART_AdvFeatureConfig>
 8004924:	e7e2      	b.n	80048ec <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8004926:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800492a:	f7fc fd15 	bl	8001358 <HAL_UART_MspInit>
 800492e:	e7d4      	b.n	80048da <HAL_UART_Init+0xa>
}
 8004930:	2001      	movs	r0, #1
 8004932:	4770      	bx	lr

08004934 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop

08004938 <memset>:
 8004938:	4402      	add	r2, r0
 800493a:	4603      	mov	r3, r0
 800493c:	4293      	cmp	r3, r2
 800493e:	d100      	bne.n	8004942 <memset+0xa>
 8004940:	4770      	bx	lr
 8004942:	f803 1b01 	strb.w	r1, [r3], #1
 8004946:	e7f9      	b.n	800493c <memset+0x4>

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4d0d      	ldr	r5, [pc, #52]	@ (8004980 <__libc_init_array+0x38>)
 800494c:	4c0d      	ldr	r4, [pc, #52]	@ (8004984 <__libc_init_array+0x3c>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	2600      	movs	r6, #0
 8004954:	42a6      	cmp	r6, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	4d0b      	ldr	r5, [pc, #44]	@ (8004988 <__libc_init_array+0x40>)
 800495a:	4c0c      	ldr	r4, [pc, #48]	@ (800498c <__libc_init_array+0x44>)
 800495c:	f000 f818 	bl	8004990 <_init>
 8004960:	1b64      	subs	r4, r4, r5
 8004962:	10a4      	asrs	r4, r4, #2
 8004964:	2600      	movs	r6, #0
 8004966:	42a6      	cmp	r6, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004970:	4798      	blx	r3
 8004972:	3601      	adds	r6, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f855 3b04 	ldr.w	r3, [r5], #4
 800497a:	4798      	blx	r3
 800497c:	3601      	adds	r6, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	08039938 	.word	0x08039938
 8004984:	08039938 	.word	0x08039938
 8004988:	08039938 	.word	0x08039938
 800498c:	0803993c 	.word	0x0803993c

08004990 <_init>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr

0800499c <_fini>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	bf00      	nop
 80049a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a2:	bc08      	pop	{r3}
 80049a4:	469e      	mov	lr, r3
 80049a6:	4770      	bx	lr
