
ECEN-361-Laser-Harp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004954  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00034f80  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08039a5c  08039a5c  00050190  2**0
                  CONTENTS
  4 .ARM          00000008  08039a5c  08039a5c  00049a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08039a64  08039a64  00050190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08039a64  08039a64  00049a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08039a68  08039a68  00049a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08039a6c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000190  08039bfc  00050190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08039bfc  00050480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050190  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000501c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025fd9  00000000  00000000  00050203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e52  00000000  00000000  000761dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00013a5d  00000000  00000000  0007a02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001108  00000000  00000000  0008da90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f61  00000000  00000000  0008eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028379  00000000  00000000  00090af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000274ad  00000000  00000000  000b8e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8476  00000000  00000000  000e031f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003968  00000000  00000000  001d8798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  001dc100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ac4 	.word	0x08004ac4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	08004ac4 	.word	0x08004ac4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	0000      	movs	r0, r0
	...

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b510      	push	{r4, lr}
 80004da:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004dc:	2244      	movs	r2, #68	; 0x44
 80004de:	2100      	movs	r1, #0
 80004e0:	a806      	add	r0, sp, #24
 80004e2:	f004 faaf 	bl	8004a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004e8:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80004f0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80004f4:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004f6:	f002 fb9d 	bl	8002c34 <HAL_PWREx_ControlVoltageScaling>
 80004fa:	b108      	cbz	r0, 8000500 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fe:	e7fe      	b.n	80004fe <SystemClock_Config+0x26>
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000500:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8000558 <SystemClock_Config+0x80>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000504:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000508:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050a:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000512:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000514:	220a      	movs	r2, #10
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000516:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800051c:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800051e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000522:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000524:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f002 fc67 	bl	8002df8 <HAL_RCC_OscConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	b108      	cbz	r0, 8000532 <SystemClock_Config+0x5a>
 800052e:	b672      	cpsid	i
  while (1)
 8000530:	e7fe      	b.n	8000530 <SystemClock_Config+0x58>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000532:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000534:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000538:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053c:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000540:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000544:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000546:	f002 ff3f 	bl	80033c8 <HAL_RCC_ClockConfig>
 800054a:	b108      	cbz	r0, 8000550 <SystemClock_Config+0x78>
 800054c:	b672      	cpsid	i
  while (1)
 800054e:	e7fe      	b.n	800054e <SystemClock_Config+0x76>
}
 8000550:	b018      	add	sp, #96	; 0x60
 8000552:	bd10      	pop	{r4, pc}
 8000554:	f3af 8000 	nop.w
 8000558:	00000007 	.word	0x00000007
 800055c:	00000002 	.word	0x00000002

08000560 <main>:
{
 8000560:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	2400      	movs	r4, #0
{
 8000564:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8000566:	f001 fd19 	bl	8001f9c <HAL_Init>
  SystemClock_Config();
 800056a:	f7ff ffb5 	bl	80004d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b99      	ldr	r3, [pc, #612]	; (80007d8 <main+0x278>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	940c      	str	r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000578:	4898      	ldr	r0, [pc, #608]	; (80007dc <main+0x27c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	f042 0204 	orr.w	r2, r2, #4
 800057e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000582:	f002 0204 	and.w	r2, r2, #4
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800058c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000590:	64da      	str	r2, [r3, #76]	; 0x4c
 8000592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000594:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000598:	9202      	str	r2, [sp, #8]
 800059a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800059e:	f042 0201 	orr.w	r2, r2, #1
 80005a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80005a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005a6:	f002 0201 	and.w	r2, r2, #1
 80005aa:	9203      	str	r2, [sp, #12]
 80005ac:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b0:	f042 0202 	orr.w	r2, r2, #2
 80005b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80005b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b8:	f003 0302 	and.w	r3, r3, #2
 80005bc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 80005be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = B1_Pin;
 80005c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005cc:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f001 ff0f 	bl	80023f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_4_Pin
 80005d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80005d6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005da:	4880      	ldr	r0, [pc, #512]	; (80007dc <main+0x27c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005de:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_4_Pin
 80005e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e4:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e6:	f001 ff03 	bl	80023f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RIGHT_BTN_Pin|LEFT_BTN_Pin|BOTTOM_BTN_Pin|TOP_BTN_Pin;
 80005ea:	2300      	movs	r3, #0
 80005ec:	22f0      	movs	r2, #240	; 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ee:	487c      	ldr	r0, [pc, #496]	; (80007e0 <main+0x280>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f0:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RIGHT_BTN_Pin|LEFT_BTN_Pin|BOTTOM_BTN_Pin|TOP_BTN_Pin;
 80005f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	f001 fefa 	bl	80023f0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005fc:	4622      	mov	r2, r4
 80005fe:	4621      	mov	r1, r4
 8000600:	2006      	movs	r0, #6
 8000602:	f001 fd19 	bl	8002038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000606:	2006      	movs	r0, #6
 8000608:	f001 fd54 	bl	80020b4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800060c:	4622      	mov	r2, r4
 800060e:	4621      	mov	r1, r4
 8000610:	2007      	movs	r0, #7
 8000612:	f001 fd11 	bl	8002038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000616:	2007      	movs	r0, #7
 8000618:	f001 fd4c 	bl	80020b4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800061c:	4622      	mov	r2, r4
 800061e:	4621      	mov	r1, r4
 8000620:	2008      	movs	r0, #8
 8000622:	f001 fd09 	bl	8002038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000626:	2008      	movs	r0, #8
 8000628:	f001 fd44 	bl	80020b4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800062c:	4622      	mov	r2, r4
 800062e:	4621      	mov	r1, r4
 8000630:	2009      	movs	r0, #9
 8000632:	f001 fd01 	bl	8002038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000636:	2009      	movs	r0, #9
 8000638:	f001 fd3c 	bl	80020b4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800063c:	4622      	mov	r2, r4
 800063e:	4621      	mov	r1, r4
 8000640:	200a      	movs	r0, #10
 8000642:	f001 fcf9 	bl	8002038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000646:	200a      	movs	r0, #10
 8000648:	f001 fd34 	bl	80020b4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800064c:	4622      	mov	r2, r4
 800064e:	4621      	mov	r1, r4
 8000650:	2017      	movs	r0, #23
 8000652:	f001 fcf1 	bl	8002038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000656:	2017      	movs	r0, #23
 8000658:	f001 fd2c 	bl	80020b4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800065c:	4622      	mov	r2, r4
 800065e:	4621      	mov	r1, r4
 8000660:	2028      	movs	r0, #40	; 0x28
 8000662:	f001 fce9 	bl	8002038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000666:	2028      	movs	r0, #40	; 0x28
 8000668:	f001 fd24 	bl	80020b4 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 800066c:	485d      	ldr	r0, [pc, #372]	; (80007e4 <main+0x284>)
  huart2.Init.BaudRate = 115200;
 800066e:	4a5e      	ldr	r2, [pc, #376]	; (80007e8 <main+0x288>)
 8000670:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000674:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000678:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067e:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000682:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000686:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068a:	f004 f9a7 	bl	80049dc <HAL_UART_Init>
 800068e:	b108      	cbz	r0, 8000694 <main+0x134>
 8000690:	b672      	cpsid	i
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x132>
  hdac1.Instance = DAC1;
 8000694:	4c55      	ldr	r4, [pc, #340]	; (80007ec <main+0x28c>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000696:	4601      	mov	r1, r0
 8000698:	2224      	movs	r2, #36	; 0x24
 800069a:	a808      	add	r0, sp, #32
 800069c:	f004 f9d2 	bl	8004a44 <memset>
  hdac1.Instance = DAC1;
 80006a0:	4b53      	ldr	r3, [pc, #332]	; (80007f0 <main+0x290>)
 80006a2:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006a4:	4620      	mov	r0, r4
 80006a6:	f001 fd2d 	bl	8002104 <HAL_DAC_Init>
 80006aa:	b108      	cbz	r0, 80006b0 <main+0x150>
 80006ac:	b672      	cpsid	i
  while (1)
 80006ae:	e7fe      	b.n	80006ae <main+0x14e>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006b0:	e9cd 0008 	strd	r0, r0, [sp, #32]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006b4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006b8:	4602      	mov	r2, r0
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006ba:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006bc:	a908      	add	r1, sp, #32
 80006be:	4620      	mov	r0, r4
 80006c0:	f001 fdb2 	bl	8002228 <HAL_DAC_ConfigChannel>
 80006c4:	b108      	cbz	r0, 80006ca <main+0x16a>
 80006c6:	b672      	cpsid	i
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <main+0x168>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006ca:	2210      	movs	r2, #16
 80006cc:	a908      	add	r1, sp, #32
 80006ce:	4620      	mov	r0, r4
 80006d0:	f001 fdaa 	bl	8002228 <HAL_DAC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b9c0      	cbnz	r0, 800070a <main+0x1aa>
  htim15.Instance = TIM15;
 80006d8:	4c46      	ldr	r4, [pc, #280]	; (80007f4 <main+0x294>)
 80006da:	4a47      	ldr	r2, [pc, #284]	; (80007f8 <main+0x298>)
 80006dc:	6022      	str	r2, [r4, #0]
  htim15.Init.Prescaler = 80-1;
 80006de:	224f      	movs	r2, #79	; 0x4f
 80006e0:	6062      	str	r2, [r4, #4]
  htim15.Init.Period = 9;
 80006e2:	2209      	movs	r2, #9
 80006e4:	e9c4 0202 	strd	r0, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e8:	e9cd 0008 	strd	r0, r0, [sp, #32]
 80006ec:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  htim15.Init.RepetitionCounter = 0;
 80006f0:	e9c4 0004 	strd	r0, r0, [r4, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	9005      	str	r0, [sp, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006f6:	2280      	movs	r2, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80006f8:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fa:	e9cd 3306 	strd	r3, r3, [sp, #24]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006fe:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000700:	f003 fa6e 	bl	8003be0 <HAL_TIM_Base_Init>
 8000704:	b118      	cbz	r0, 800070e <main+0x1ae>
 8000706:	b672      	cpsid	i
  while (1)
 8000708:	e7fe      	b.n	8000708 <main+0x1a8>
 800070a:	b672      	cpsid	i
 800070c:	e7fe      	b.n	800070c <main+0x1ac>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000712:	a908      	add	r1, sp, #32
 8000714:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000716:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000718:	f003 fb2c 	bl	8003d74 <HAL_TIM_ConfigClockSource>
 800071c:	4603      	mov	r3, r0
 800071e:	b108      	cbz	r0, 8000724 <main+0x1c4>
 8000720:	b672      	cpsid	i
  while (1)
 8000722:	e7fe      	b.n	8000722 <main+0x1c2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000724:	a905      	add	r1, sp, #20
 8000726:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000728:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072a:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800072c:	f003 fc84 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 8000730:	4603      	mov	r3, r0
 8000732:	b108      	cbz	r0, 8000738 <main+0x1d8>
 8000734:	b672      	cpsid	i
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x1d6>
  hi2c1.Instance = I2C1;
 8000738:	4c30      	ldr	r4, [pc, #192]	; (80007fc <main+0x29c>)
  hi2c1.Init.Timing = 0x10909CEC;
 800073a:	4931      	ldr	r1, [pc, #196]	; (8000800 <main+0x2a0>)
 800073c:	4a31      	ldr	r2, [pc, #196]	; (8000804 <main+0x2a4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073e:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x10909CEC;
 8000742:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000746:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000752:	f002 f81d 	bl	8002790 <HAL_I2C_Init>
 8000756:	4601      	mov	r1, r0
 8000758:	b108      	cbz	r0, 800075e <main+0x1fe>
 800075a:	b672      	cpsid	i
  while (1)
 800075c:	e7fe      	b.n	800075c <main+0x1fc>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075e:	4620      	mov	r0, r4
 8000760:	f002 fa0a 	bl	8002b78 <HAL_I2CEx_ConfigAnalogFilter>
 8000764:	4601      	mov	r1, r0
 8000766:	b108      	cbz	r0, 800076c <main+0x20c>
 8000768:	b672      	cpsid	i
  while (1)
 800076a:	e7fe      	b.n	800076a <main+0x20a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800076c:	4620      	mov	r0, r4
 800076e:	f002 fa2d 	bl	8002bcc <HAL_I2CEx_ConfigDigitalFilter>
 8000772:	b108      	cbz	r0, 8000778 <main+0x218>
 8000774:	b672      	cpsid	i
  while (1)
 8000776:	e7fe      	b.n	8000776 <main+0x216>
  htim16.Instance = TIM16;
 8000778:	4c23      	ldr	r4, [pc, #140]	; (8000808 <main+0x2a8>)
 800077a:	4824      	ldr	r0, [pc, #144]	; (800080c <main+0x2ac>)
  htim16.Init.Prescaler = 3200-1;
 800077c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8000780:	e9c4 0200 	strd	r0, r2, [r4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	2300      	movs	r3, #0
  htim16.Init.Period = 100-1;
 8000786:	2163      	movs	r1, #99	; 0x63
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000788:	2280      	movs	r2, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800078a:	4620      	mov	r0, r4
  htim16.Init.Period = 100-1;
 800078c:	e9c4 3102 	strd	r3, r1, [r4, #8]
  htim16.Init.RepetitionCounter = 0;
 8000790:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000794:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000796:	f003 fa23 	bl	8003be0 <HAL_TIM_Base_Init>
 800079a:	4605      	mov	r5, r0
 800079c:	b108      	cbz	r0, 80007a2 <main+0x242>
 800079e:	b672      	cpsid	i
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x240>
  HAL_TIM_Base_Start_IT(&htim15); // Start the Music Interrupt Timer
 80007a2:	4814      	ldr	r0, [pc, #80]	; (80007f4 <main+0x294>)
 80007a4:	f003 faa8 	bl	8003cf8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16); // Star the Sustain Interrupt Timer
 80007a8:	4620      	mov	r0, r4
 80007aa:	f003 faa5 	bl	8003cf8 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Start one of the dac channels
 80007ae:	2110      	movs	r1, #16
 80007b0:	480e      	ldr	r0, [pc, #56]	; (80007ec <main+0x28c>)
 80007b2:	f001 fcbd 	bl	8002130 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start one of the dac channels
 80007b6:	4629      	mov	r1, r5
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <main+0x28c>)
 80007ba:	f001 fcb9 	bl	8002130 <HAL_DAC_Start>
  tranposition__increment_octave();
 80007be:	f001 f961 	bl	8001a84 <tranposition__increment_octave>
  menu_init();
 80007c2:	f000 f8fd 	bl	80009c0 <menu_init>
  lcd_init();
 80007c6:	f000 fa6f 	bl	8000ca8 <lcd_init>
	  poll_buttons();
 80007ca:	f000 f9d5 	bl	8000b78 <poll_buttons>
	  HAL_Delay(50);
 80007ce:	2032      	movs	r0, #50	; 0x32
 80007d0:	f001 fc0e 	bl	8001ff0 <HAL_Delay>
  while (1)
 80007d4:	e7f9      	b.n	80007ca <main+0x26a>
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000800 	.word	0x48000800
 80007e0:	48000400 	.word	0x48000400
 80007e4:	200002dc 	.word	0x200002dc
 80007e8:	40004400 	.word	0x40004400
 80007ec:	200001dc 	.word	0x200001dc
 80007f0:	40007400 	.word	0x40007400
 80007f4:	20000244 	.word	0x20000244
 80007f8:	40014000 	.word	0x40014000
 80007fc:	200001f0 	.word	0x200001f0
 8000800:	40005400 	.word	0x40005400
 8000804:	10909cec 	.word	0x10909cec
 8000808:	20000290 	.word	0x20000290
 800080c:	40014400 	.word	0x40014400

08000810 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin) {
 8000810:	2840      	cmp	r0, #64	; 0x40
 8000812:	d078      	beq.n	8000906 <HAL_GPIO_EXTI_Callback+0xf6>
 8000814:	d817      	bhi.n	8000846 <HAL_GPIO_EXTI_Callback+0x36>
 8000816:	3801      	subs	r0, #1
 8000818:	b283      	uxth	r3, r0
 800081a:	2b1f      	cmp	r3, #31
 800081c:	d825      	bhi.n	800086a <HAL_GPIO_EXTI_Callback+0x5a>
 800081e:	281f      	cmp	r0, #31
 8000820:	d823      	bhi.n	800086a <HAL_GPIO_EXTI_Callback+0x5a>
 8000822:	e8df f000 	tbb	[pc, r0]
 8000826:	433a      	.short	0x433a
 8000828:	22224c22 	.word	0x22224c22
 800082c:	22225522 	.word	0x22225522
 8000830:	22222222 	.word	0x22222222
 8000834:	22225e22 	.word	0x22225e22
 8000838:	22222222 	.word	0x22222222
 800083c:	22222222 	.word	0x22222222
 8000840:	22222222 	.word	0x22222222
 8000844:	3122      	.short	0x3122
 8000846:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800084a:	d053      	beq.n	80008f4 <HAL_GPIO_EXTI_Callback+0xe4>
 800084c:	d90e      	bls.n	800086c <HAL_GPIO_EXTI_Callback+0x5c>
 800084e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000852:	d061      	beq.n	8000918 <HAL_GPIO_EXTI_Callback+0x108>
 8000854:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000858:	d171      	bne.n	800093e <HAL_GPIO_EXTI_Callback+0x12e>
		active[NOTE_B] = !active[NOTE_B];
 800085a:	4a39      	ldr	r2, [pc, #228]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_B = active[NOTE_B] ? 1 : 0;
 800085c:	4939      	ldr	r1, [pc, #228]	; (8000944 <HAL_GPIO_EXTI_Callback+0x134>)
		active[NOTE_B] = !active[NOTE_B];
 800085e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000860:	fab3 f383 	clz	r3, r3
 8000864:	095b      	lsrs	r3, r3, #5
 8000866:	62d3      	str	r3, [r2, #44]	; 0x2c
		sustain_B = active[NOTE_B] ? 1 : 0;
 8000868:	600b      	str	r3, [r1, #0]
}
 800086a:	4770      	bx	lr
	switch (GPIO_Pin) {
 800086c:	2880      	cmp	r0, #128	; 0x80
 800086e:	d05c      	beq.n	800092a <HAL_GPIO_EXTI_Callback+0x11a>
 8000870:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8000874:	d162      	bne.n	800093c <HAL_GPIO_EXTI_Callback+0x12c>
		active[NOTE_Gs] = !active[NOTE_Gs];
 8000876:	4a32      	ldr	r2, [pc, #200]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_Gs = active[NOTE_Gs] ? 1 : 0;
 8000878:	4933      	ldr	r1, [pc, #204]	; (8000948 <HAL_GPIO_EXTI_Callback+0x138>)
		active[NOTE_Gs] = !active[NOTE_Gs];
 800087a:	6a13      	ldr	r3, [r2, #32]
 800087c:	fab3 f383 	clz	r3, r3
 8000880:	095b      	lsrs	r3, r3, #5
 8000882:	6213      	str	r3, [r2, #32]
		sustain_Gs = active[NOTE_Gs] ? 1 : 0;
 8000884:	600b      	str	r3, [r1, #0]
		break;
 8000886:	4770      	bx	lr
		active[NOTE_F] = !active[NOTE_F];
 8000888:	4a2d      	ldr	r2, [pc, #180]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_F = active[NOTE_F] ? 1 : 0;
 800088a:	4930      	ldr	r1, [pc, #192]	; (800094c <HAL_GPIO_EXTI_Callback+0x13c>)
		active[NOTE_F] = !active[NOTE_F];
 800088c:	6953      	ldr	r3, [r2, #20]
 800088e:	fab3 f383 	clz	r3, r3
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	6153      	str	r3, [r2, #20]
		sustain_F = active[NOTE_F] ? 1 : 0;
 8000896:	600b      	str	r3, [r1, #0]
		break;
 8000898:	4770      	bx	lr
		active[NOTE_C] = !active[NOTE_C];
 800089a:	4a29      	ldr	r2, [pc, #164]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_C = active[NOTE_C] ? 1 : 0; //set sustain_note variables to 1 when the notes are active and 0 when they are inactive
 800089c:	492c      	ldr	r1, [pc, #176]	; (8000950 <HAL_GPIO_EXTI_Callback+0x140>)
		active[NOTE_C] = !active[NOTE_C];
 800089e:	6813      	ldr	r3, [r2, #0]
 80008a0:	fab3 f383 	clz	r3, r3
 80008a4:	095b      	lsrs	r3, r3, #5
 80008a6:	6013      	str	r3, [r2, #0]
		sustain_C = active[NOTE_C] ? 1 : 0; //set sustain_note variables to 1 when the notes are active and 0 when they are inactive
 80008a8:	600b      	str	r3, [r1, #0]
		break;
 80008aa:	4770      	bx	lr
		active[NOTE_Cs] = !active[NOTE_Cs];
 80008ac:	4a24      	ldr	r2, [pc, #144]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_Cs = active[NOTE_Cs] ? 1 : 0;
 80008ae:	4929      	ldr	r1, [pc, #164]	; (8000954 <HAL_GPIO_EXTI_Callback+0x144>)
		active[NOTE_Cs] = !active[NOTE_Cs];
 80008b0:	6853      	ldr	r3, [r2, #4]
 80008b2:	fab3 f383 	clz	r3, r3
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	6053      	str	r3, [r2, #4]
		sustain_Cs = active[NOTE_Cs] ? 1 : 0;
 80008ba:	600b      	str	r3, [r1, #0]
		break;
 80008bc:	4770      	bx	lr
		active[NOTE_D] = !active[NOTE_D];
 80008be:	4a20      	ldr	r2, [pc, #128]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_D = active[NOTE_D] ? 1 : 0;
 80008c0:	4925      	ldr	r1, [pc, #148]	; (8000958 <HAL_GPIO_EXTI_Callback+0x148>)
		active[NOTE_D] = !active[NOTE_D];
 80008c2:	6893      	ldr	r3, [r2, #8]
 80008c4:	fab3 f383 	clz	r3, r3
 80008c8:	095b      	lsrs	r3, r3, #5
 80008ca:	6093      	str	r3, [r2, #8]
		sustain_D = active[NOTE_D] ? 1 : 0;
 80008cc:	600b      	str	r3, [r1, #0]
		break;
 80008ce:	4770      	bx	lr
		active[NOTE_Ds] = !active[NOTE_Ds];
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_Ds = active[NOTE_Ds] ? 1 : 0;
 80008d2:	4922      	ldr	r1, [pc, #136]	; (800095c <HAL_GPIO_EXTI_Callback+0x14c>)
		active[NOTE_Ds] = !active[NOTE_Ds];
 80008d4:	68d3      	ldr	r3, [r2, #12]
 80008d6:	fab3 f383 	clz	r3, r3
 80008da:	095b      	lsrs	r3, r3, #5
 80008dc:	60d3      	str	r3, [r2, #12]
		sustain_Ds = active[NOTE_Ds] ? 1 : 0;
 80008de:	600b      	str	r3, [r1, #0]
		break;
 80008e0:	4770      	bx	lr
		active[NOTE_E] = !active[NOTE_E];
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_E = active[NOTE_E] ? 1 : 0;
 80008e4:	491e      	ldr	r1, [pc, #120]	; (8000960 <HAL_GPIO_EXTI_Callback+0x150>)
		active[NOTE_E] = !active[NOTE_E];
 80008e6:	6913      	ldr	r3, [r2, #16]
 80008e8:	fab3 f383 	clz	r3, r3
 80008ec:	095b      	lsrs	r3, r3, #5
 80008ee:	6113      	str	r3, [r2, #16]
		sustain_E = active[NOTE_E] ? 1 : 0;
 80008f0:	600b      	str	r3, [r1, #0]
		break;
 80008f2:	4770      	bx	lr
		active[NOTE_A] = !active[NOTE_A];
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_A = active[NOTE_A] ? 1 : 0;
 80008f6:	491b      	ldr	r1, [pc, #108]	; (8000964 <HAL_GPIO_EXTI_Callback+0x154>)
		active[NOTE_A] = !active[NOTE_A];
 80008f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80008fa:	fab3 f383 	clz	r3, r3
 80008fe:	095b      	lsrs	r3, r3, #5
 8000900:	6253      	str	r3, [r2, #36]	; 0x24
		sustain_A = active[NOTE_A] ? 1 : 0;
 8000902:	600b      	str	r3, [r1, #0]
		break;
 8000904:	4770      	bx	lr
		active[NOTE_Fs] = !active[NOTE_Fs];
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_Fs = active[NOTE_Fs] ? 1 : 0;
 8000908:	4917      	ldr	r1, [pc, #92]	; (8000968 <HAL_GPIO_EXTI_Callback+0x158>)
		active[NOTE_Fs] = !active[NOTE_Fs];
 800090a:	6993      	ldr	r3, [r2, #24]
 800090c:	fab3 f383 	clz	r3, r3
 8000910:	095b      	lsrs	r3, r3, #5
 8000912:	6193      	str	r3, [r2, #24]
		sustain_Fs = active[NOTE_Fs] ? 1 : 0;
 8000914:	600b      	str	r3, [r1, #0]
		break;
 8000916:	4770      	bx	lr
		active[NOTE_As] = !active[NOTE_As];
 8000918:	4a09      	ldr	r2, [pc, #36]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_As = active[NOTE_As] ? 1 : 0;
 800091a:	4914      	ldr	r1, [pc, #80]	; (800096c <HAL_GPIO_EXTI_Callback+0x15c>)
		active[NOTE_As] = !active[NOTE_As];
 800091c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800091e:	fab3 f383 	clz	r3, r3
 8000922:	095b      	lsrs	r3, r3, #5
 8000924:	6293      	str	r3, [r2, #40]	; 0x28
		sustain_As = active[NOTE_As] ? 1 : 0;
 8000926:	600b      	str	r3, [r1, #0]
		break;
 8000928:	4770      	bx	lr
		active[NOTE_G] = !active[NOTE_G];
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <HAL_GPIO_EXTI_Callback+0x130>)
		sustain_G = active[NOTE_G] ? 1 : 0;
 800092c:	4910      	ldr	r1, [pc, #64]	; (8000970 <HAL_GPIO_EXTI_Callback+0x160>)
		active[NOTE_G] = !active[NOTE_G];
 800092e:	69d3      	ldr	r3, [r2, #28]
 8000930:	fab3 f383 	clz	r3, r3
 8000934:	095b      	lsrs	r3, r3, #5
 8000936:	61d3      	str	r3, [r2, #28]
		sustain_G = active[NOTE_G] ? 1 : 0;
 8000938:	600b      	str	r3, [r1, #0]
		break;
 800093a:	4770      	bx	lr
 800093c:	4770      	bx	lr
 800093e:	4770      	bx	lr
 8000940:	200001ac 	.word	0x200001ac
 8000944:	2000039c 	.word	0x2000039c
 8000948:	200003c0 	.word	0x200003c0
 800094c:	200003b4 	.word	0x200003b4
 8000950:	200003a0 	.word	0x200003a0
 8000954:	200003a4 	.word	0x200003a4
 8000958:	200003a8 	.word	0x200003a8
 800095c:	200003ac 	.word	0x200003ac
 8000960:	200003b0 	.word	0x200003b0
 8000964:	20000394 	.word	0x20000394
 8000968:	200003b8 	.word	0x200003b8
 800096c:	20000398 	.word	0x20000398
 8000970:	200003bc 	.word	0x200003bc

08000974 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim16 )
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000976:	4298      	cmp	r0, r3
 8000978:	d003      	beq.n	8000982 <HAL_TIM_PeriodElapsedCallback+0xe>
	if (htim == &htim15 )
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800097c:	4298      	cmp	r0, r3
 800097e:	d002      	beq.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x12>
 8000980:	4770      	bx	lr
		update_decay_values();
 8000982:	f000 be0b 	b.w	800159c <update_decay_values>
{
 8000986:	b500      	push	{lr}
 8000988:	b083      	sub	sp, #12
		int wave = tranposition__note_update();
 800098a:	f001 f8c7 	bl	8001b1c <tranposition__note_update>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, wave);
 800098e:	2200      	movs	r2, #0
		int wave = tranposition__note_update();
 8000990:	4603      	mov	r3, r0
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, wave);
 8000992:	2110      	movs	r1, #16
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	f001 fbf8 	bl	800218c <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, wave);
 800099c:	2200      	movs	r2, #0
 800099e:	9b01      	ldr	r3, [sp, #4]
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009a2:	4611      	mov	r1, r2
}
 80009a4:	b003      	add	sp, #12
 80009a6:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, wave);
 80009aa:	f001 bbef 	b.w	800218c <HAL_DAC_SetValue>
 80009ae:	bf00      	nop
 80009b0:	20000290 	.word	0x20000290
 80009b4:	20000244 	.word	0x20000244
 80009b8:	200001dc 	.word	0x200001dc

080009bc <Error_Handler>:
 80009bc:	b672      	cpsid	i
  while (1)
 80009be:	e7fe      	b.n	80009be <Error_Handler+0x2>

080009c0 <menu_init>:

char buffer[32];

int sustain_flag = 0;

void menu_init(void) {
 80009c0:	b538      	push	{r3, r4, r5, lr}
    current_menu_item = MENU_ITEM_OCTAVE;
 80009c2:	4c2e      	ldr	r4, [pc, #184]	; (8000a7c <menu_init+0xbc>)
 80009c4:	2300      	movs	r3, #0
 80009c6:	7023      	strb	r3, [r4, #0]
    current_setting_value = 0;
    lcd_init();
 80009c8:	f000 f96e 	bl	8000ca8 <lcd_init>
    }
    menu_update_display();
}

void menu_update_display(void) {
    lcd_clear();
 80009cc:	f000 fc0e 	bl	80011ec <lcd_clear>
    switch (current_menu_item) {
 80009d0:	7823      	ldrb	r3, [r4, #0]
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d851      	bhi.n	8000a7a <menu_init+0xba>
 80009d6:	e8df f003 	tbb	[pc, r3]
 80009da:	2515      	.short	0x2515
 80009dc:	3634      	.short	0x3634
 80009de:	03          	.byte	0x03
 80009df:	00          	.byte	0x00
            }
            lcd_set_cursor(0, 0);
            lcd_write_multiline_string(buffer);
            break;
        case MENU_ITEM_TRANSPOSITION:
            snprintf(buffer, sizeof(buffer), "Transposition: up inc, down dec");
 80009e0:	4d27      	ldr	r5, [pc, #156]	; (8000a80 <menu_init+0xc0>)
 80009e2:	4c28      	ldr	r4, [pc, #160]	; (8000a84 <menu_init+0xc4>)
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            lcd_set_cursor(0, 0);
 80009f0:	2100      	movs	r1, #0
 80009f2:	4608      	mov	r0, r1
 80009f4:	f000 fba4 	bl	8001140 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 80009f8:	f1a4 0010 	sub.w	r0, r4, #16
}
 80009fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000a00:	f000 bae4 	b.w	8000fcc <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <menu_init+0xc8>)
 8000a06:	4c1f      	ldr	r4, [pc, #124]	; (8000a84 <menu_init+0xc4>)
 8000a08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a0c:	c403      	stmia	r4!, {r0, r1}
            lcd_set_cursor(0, 0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000a12:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000a14:	f000 fb94 	bl	8001140 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000a18:	f1a4 0008 	sub.w	r0, r4, #8
}
 8000a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000a20:	f000 bad4 	b.w	8000fcc <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Instrument: ");
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <menu_init+0xcc>)
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000a26:	4c17      	ldr	r4, [pc, #92]	; (8000a84 <menu_init+0xc4>)
 8000a28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a2a:	c407      	stmia	r4!, {r0, r1, r2}
            lcd_set_cursor(0, 0);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000a30:	7023      	strb	r3, [r4, #0]
            lcd_set_cursor(0, 0);
 8000a32:	f000 fb85 	bl	8001140 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000a36:	f1a4 000c 	sub.w	r0, r4, #12
}
 8000a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000a3e:	f000 bac5 	b.w	8000fcc <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <menu_init+0xd0>)
 8000a44:	e7ef      	b.n	8000a26 <menu_init+0x66>
            if (sustain_flag) {
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <menu_init+0xd4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	b183      	cbz	r3, 8000a6e <menu_init+0xae>
                snprintf(buffer, sizeof(buffer), "Sustain: ON 10s duration");
 8000a4c:	4d12      	ldr	r5, [pc, #72]	; (8000a98 <menu_init+0xd8>)
 8000a4e:	4c0d      	ldr	r4, [pc, #52]	; (8000a84 <menu_init+0xc4>)
 8000a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a58:	c403      	stmia	r4!, {r0, r1}
 8000a5a:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4608      	mov	r0, r1
 8000a60:	f000 fb6e 	bl	8001140 <lcd_set_cursor>
}
 8000a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <menu_init+0xc4>)
 8000a6a:	f000 baaf 	b.w	8000fcc <lcd_write_multiline_string>
                snprintf(buffer, sizeof(buffer), "Sustain: OFF");
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <menu_init+0xdc>)
 8000a70:	4c04      	ldr	r4, [pc, #16]	; (8000a84 <menu_init+0xc4>)
 8000a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a74:	c407      	stmia	r4!, {r0, r1, r2}
 8000a76:	7023      	strb	r3, [r4, #0]
 8000a78:	e7f0      	b.n	8000a5c <menu_init+0x9c>
}
 8000a7a:	bd38      	pop	{r3, r4, r5, pc}
 8000a7c:	200003e4 	.word	0x200003e4
 8000a80:	08004b34 	.word	0x08004b34
 8000a84:	200003c4 	.word	0x200003c4
 8000a88:	08004adc 	.word	0x08004adc
 8000a8c:	08004ae8 	.word	0x08004ae8
 8000a90:	08004af8 	.word	0x08004af8
 8000a94:	200003e8 	.word	0x200003e8
 8000a98:	08004b08 	.word	0x08004b08
 8000a9c:	08004b24 	.word	0x08004b24

08000aa0 <menu_update_display>:
void menu_update_display(void) {
 8000aa0:	b538      	push	{r3, r4, r5, lr}
    lcd_clear();
 8000aa2:	f000 fba3 	bl	80011ec <lcd_clear>
    switch (current_menu_item) {
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <menu_update_display+0xb4>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	d851      	bhi.n	8000b52 <menu_update_display+0xb2>
 8000aae:	e8df f003 	tbb	[pc, r3]
 8000ab2:	2515      	.short	0x2515
 8000ab4:	3634      	.short	0x3634
 8000ab6:	03          	.byte	0x03
 8000ab7:	00          	.byte	0x00
            snprintf(buffer, sizeof(buffer), "Transposition: up inc, down dec");
 8000ab8:	4d27      	ldr	r5, [pc, #156]	; (8000b58 <menu_update_display+0xb8>)
 8000aba:	4c28      	ldr	r4, [pc, #160]	; (8000b5c <menu_update_display+0xbc>)
 8000abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            lcd_set_cursor(0, 0);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4608      	mov	r0, r1
 8000acc:	f000 fb38 	bl	8001140 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000ad0:	f1a4 0010 	sub.w	r0, r4, #16
            break;
        default:
            break;
    }
}
 8000ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000ad8:	f000 ba78 	b.w	8000fcc <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <menu_update_display+0xc0>)
 8000ade:	4c1f      	ldr	r4, [pc, #124]	; (8000b5c <menu_update_display+0xbc>)
 8000ae0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ae4:	c403      	stmia	r4!, {r0, r1}
            lcd_set_cursor(0, 0);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Octave: ");
 8000aea:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000aec:	f000 fb28 	bl	8001140 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000af0:	f1a4 0008 	sub.w	r0, r4, #8
}
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000af8:	f000 ba68 	b.w	8000fcc <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Instrument: ");
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <menu_update_display+0xc4>)
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000afe:	4c17      	ldr	r4, [pc, #92]	; (8000b5c <menu_update_display+0xbc>)
 8000b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b02:	c407      	stmia	r4!, {r0, r1, r2}
            lcd_set_cursor(0, 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	4608      	mov	r0, r1
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000b08:	7023      	strb	r3, [r4, #0]
            lcd_set_cursor(0, 0);
 8000b0a:	f000 fb19 	bl	8001140 <lcd_set_cursor>
            lcd_write_multiline_string(buffer);
 8000b0e:	f1a4 000c 	sub.w	r0, r4, #12
}
 8000b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000b16:	f000 ba59 	b.w	8000fcc <lcd_write_multiline_string>
            snprintf(buffer, sizeof(buffer), "Echo/Delay: ");
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <menu_update_display+0xc8>)
 8000b1c:	e7ef      	b.n	8000afe <menu_update_display+0x5e>
            if (sustain_flag) {
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <menu_update_display+0xcc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	b183      	cbz	r3, 8000b46 <menu_update_display+0xa6>
                snprintf(buffer, sizeof(buffer), "Sustain: ON 10s duration");
 8000b24:	4d12      	ldr	r5, [pc, #72]	; (8000b70 <menu_update_display+0xd0>)
 8000b26:	4c0d      	ldr	r4, [pc, #52]	; (8000b5c <menu_update_display+0xbc>)
 8000b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b30:	c403      	stmia	r4!, {r0, r1}
 8000b32:	7022      	strb	r2, [r4, #0]
            lcd_set_cursor(0, 0);
 8000b34:	2100      	movs	r1, #0
 8000b36:	4608      	mov	r0, r1
 8000b38:	f000 fb02 	bl	8001140 <lcd_set_cursor>
}
 8000b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            lcd_write_multiline_string(buffer);
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <menu_update_display+0xbc>)
 8000b42:	f000 ba43 	b.w	8000fcc <lcd_write_multiline_string>
                snprintf(buffer, sizeof(buffer), "Sustain: OFF");
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <menu_update_display+0xd4>)
 8000b48:	4c04      	ldr	r4, [pc, #16]	; (8000b5c <menu_update_display+0xbc>)
 8000b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b4c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b4e:	7023      	strb	r3, [r4, #0]
 8000b50:	e7f0      	b.n	8000b34 <menu_update_display+0x94>
}
 8000b52:	bd38      	pop	{r3, r4, r5, pc}
 8000b54:	200003e4 	.word	0x200003e4
 8000b58:	08004b34 	.word	0x08004b34
 8000b5c:	200003c4 	.word	0x200003c4
 8000b60:	08004adc 	.word	0x08004adc
 8000b64:	08004ae8 	.word	0x08004ae8
 8000b68:	08004af8 	.word	0x08004af8
 8000b6c:	200003e8 	.word	0x200003e8
 8000b70:	08004b08 	.word	0x08004b08
 8000b74:	08004b24 	.word	0x08004b24

08000b78 <poll_buttons>:

void poll_buttons(void) {
 8000b78:	b510      	push	{r4, lr}
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000b7a:	4848      	ldr	r0, [pc, #288]	; (8000c9c <poll_buttons+0x124>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	f001 fd39 	bl	80025f4 <HAL_GPIO_ReadPin>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d062      	beq.n	8000c4c <poll_buttons+0xd4>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
            HAL_Delay(100); // Debounce delay
        }
        menu_update_display();
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000b86:	4845      	ldr	r0, [pc, #276]	; (8000c9c <poll_buttons+0x124>)
 8000b88:	2140      	movs	r1, #64	; 0x40
 8000b8a:	f001 fd33 	bl	80025f4 <HAL_GPIO_ReadPin>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d042      	beq.n	8000c18 <poll_buttons+0xa0>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
            HAL_Delay(100); // Debounce delay
        }
        menu_update_display();
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000b92:	4842      	ldr	r0, [pc, #264]	; (8000c9c <poll_buttons+0x124>)
 8000b94:	2120      	movs	r1, #32
 8000b96:	f001 fd2d 	bl	80025f4 <HAL_GPIO_ReadPin>
 8000b9a:	b9c0      	cbnz	r0, 8000bce <poll_buttons+0x56>
    if (current_menu_item > 0) {
 8000b9c:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <poll_buttons+0x128>)
 8000b9e:	781a      	ldrb	r2, [r3, #0]
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	d136      	bne.n	8000c12 <poll_buttons+0x9a>
        current_menu_item = MENU_ITEM_COUNT - 1;
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	701a      	strb	r2, [r3, #0]
    menu_update_display();
 8000ba8:	f7ff ff7a 	bl	8000aa0 <menu_update_display>
        menu_handle_button_left();
        HAL_Delay(100);
 8000bac:	2064      	movs	r0, #100	; 0x64
 8000bae:	f001 fa1f 	bl	8001ff0 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000bb2:	4c3a      	ldr	r4, [pc, #232]	; (8000c9c <poll_buttons+0x124>)
 8000bb4:	e001      	b.n	8000bba <poll_buttons+0x42>
            HAL_Delay(100); // Debounce delay
 8000bb6:	f001 fa1b 	bl	8001ff0 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f001 fd19 	bl	80025f4 <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000bc4:	2064      	movs	r0, #100	; 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET) {
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f5      	beq.n	8000bb6 <poll_buttons+0x3e>
        }
        menu_update_display();
 8000bca:	f7ff ff69 	bl	8000aa0 <menu_update_display>
    }
    if (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000bce:	4833      	ldr	r0, [pc, #204]	; (8000c9c <poll_buttons+0x124>)
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	f001 fd0f 	bl	80025f4 <HAL_GPIO_ReadPin>
 8000bd6:	b9d8      	cbnz	r0, 8000c10 <poll_buttons+0x98>
    if (current_menu_item < MENU_ITEM_COUNT - 1) {
 8000bd8:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <poll_buttons+0x128>)
        menu_handle_button_right();
        HAL_Delay(100);
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000bda:	4c30      	ldr	r4, [pc, #192]	; (8000c9c <poll_buttons+0x124>)
    if (current_menu_item < MENU_ITEM_COUNT - 1) {
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	2a03      	cmp	r2, #3
        current_menu_item++;
 8000be0:	bf9c      	itt	ls
 8000be2:	3201      	addls	r2, #1
 8000be4:	b2d0      	uxtbls	r0, r2
 8000be6:	7018      	strb	r0, [r3, #0]
    menu_update_display();
 8000be8:	f7ff ff5a 	bl	8000aa0 <menu_update_display>
        HAL_Delay(100);
 8000bec:	2064      	movs	r0, #100	; 0x64
 8000bee:	f001 f9ff 	bl	8001ff0 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000bf2:	e001      	b.n	8000bf8 <poll_buttons+0x80>
            HAL_Delay(100); // Debounce delay
 8000bf4:	f001 f9fc 	bl	8001ff0 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f001 fcfa 	bl	80025f4 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000c02:	2064      	movs	r0, #100	; 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET) {
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f5      	beq.n	8000bf4 <poll_buttons+0x7c>
        }
        menu_update_display();
    }
}
 8000c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        menu_update_display();
 8000c0c:	f7ff bf48 	b.w	8000aa0 <menu_update_display>
}
 8000c10:	bd10      	pop	{r4, pc}
        current_menu_item--;
 8000c12:	3a01      	subs	r2, #1
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	e7c6      	b.n	8000ba6 <poll_buttons+0x2e>
    switch (current_menu_item) {
 8000c18:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <poll_buttons+0x128>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d039      	beq.n	8000c94 <poll_buttons+0x11c>
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d030      	beq.n	8000c86 <poll_buttons+0x10e>
    menu_update_display();
 8000c24:	f7ff ff3c 	bl	8000aa0 <menu_update_display>
        HAL_Delay(100);
 8000c28:	2064      	movs	r0, #100	; 0x64
 8000c2a:	f001 f9e1 	bl	8001ff0 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000c2e:	4c1b      	ldr	r4, [pc, #108]	; (8000c9c <poll_buttons+0x124>)
 8000c30:	e001      	b.n	8000c36 <poll_buttons+0xbe>
            HAL_Delay(100); // Debounce delay
 8000c32:	f001 f9dd 	bl	8001ff0 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f001 fcdb 	bl	80025f4 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000c40:	2064      	movs	r0, #100	; 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET) {
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0f5      	beq.n	8000c32 <poll_buttons+0xba>
        menu_update_display();
 8000c46:	f7ff ff2b 	bl	8000aa0 <menu_update_display>
 8000c4a:	e7a2      	b.n	8000b92 <poll_buttons+0x1a>
    switch (current_menu_item) {
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <poll_buttons+0x128>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d01b      	beq.n	8000c8c <poll_buttons+0x114>
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d013      	beq.n	8000c80 <poll_buttons+0x108>
    menu_update_display();
 8000c58:	f7ff ff22 	bl	8000aa0 <menu_update_display>
        HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f001 f9c7 	bl	8001ff0 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000c62:	4c0e      	ldr	r4, [pc, #56]	; (8000c9c <poll_buttons+0x124>)
 8000c64:	e001      	b.n	8000c6a <poll_buttons+0xf2>
            HAL_Delay(100); // Debounce delay
 8000c66:	f001 f9c3 	bl	8001ff0 <HAL_Delay>
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000c6a:	2180      	movs	r1, #128	; 0x80
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f001 fcc1 	bl	80025f4 <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
            HAL_Delay(100); // Debounce delay
 8000c74:	2064      	movs	r0, #100	; 0x64
        while (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET) {
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f5      	beq.n	8000c66 <poll_buttons+0xee>
        menu_update_display();
 8000c7a:	f7ff ff11 	bl	8000aa0 <menu_update_display>
 8000c7e:	e782      	b.n	8000b86 <poll_buttons+0xe>
            tranposition__increment_octave();
 8000c80:	f000 ff00 	bl	8001a84 <tranposition__increment_octave>
            break;
 8000c84:	e7e8      	b.n	8000c58 <poll_buttons+0xe0>
            tranposition__decrement_octave();
 8000c86:	f000 ff23 	bl	8001ad0 <tranposition__decrement_octave>
            break;
 8000c8a:	e7cb      	b.n	8000c24 <poll_buttons+0xac>
            sustain_flag = 1;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <poll_buttons+0x12c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
            break;
 8000c92:	e7e1      	b.n	8000c58 <poll_buttons+0xe0>
            sustain_flag = 0;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <poll_buttons+0x12c>)
 8000c96:	6018      	str	r0, [r3, #0]
            break;
 8000c98:	e7c4      	b.n	8000c24 <poll_buttons+0xac>
 8000c9a:	bf00      	nop
 8000c9c:	48000400 	.word	0x48000400
 8000ca0:	200003e4 	.word	0x200003e4
 8000ca4:	200003e8 	.word	0x200003e8

08000ca8 <lcd_init>:
    lcd_write_nibble(upper_nibble, 1);
    lcd_write_nibble(lower_nibble, 1);
}

void lcd_init()
{
 8000ca8:	b570      	push	{r4, r5, r6, lr}
    data |= backlight_state << BL_BIT;
 8000caa:	4ec6      	ldr	r6, [pc, #792]	; (8000fc4 <lcd_init+0x31c>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cac:	4cc6      	ldr	r4, [pc, #792]	; (8000fc8 <lcd_init+0x320>)
{
 8000cae:	b084      	sub	sp, #16
    HAL_Delay(50);
 8000cb0:	2032      	movs	r0, #50	; 0x32
 8000cb2:	f001 f99d 	bl	8001ff0 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000cb6:	7833      	ldrb	r3, [r6, #0]
 8000cb8:	00db      	lsls	r3, r3, #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cba:	2564      	movs	r5, #100	; 0x64
    data |= 1 << EN_BIT;
 8000cbc:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cc0:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000cc4:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cc8:	214e      	movs	r1, #78	; 0x4e
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9500      	str	r5, [sp, #0]
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f001 fdb8 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f001 f98b 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000cda:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cde:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000ce0:	f023 0304 	bic.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ce4:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000ce8:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cec:	214e      	movs	r1, #78	; 0x4e
 8000cee:	2301      	movs	r3, #1
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f001 fda7 	bl	8002844 <HAL_I2C_Master_Transmit>
    lcd_write_nibble(0x03, 0);
    HAL_Delay(5);
 8000cf6:	2005      	movs	r0, #5
 8000cf8:	f001 f97a 	bl	8001ff0 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000cfc:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000cfe:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000d00:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000d02:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d06:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000d0a:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d0e:	214e      	movs	r1, #78	; 0x4e
 8000d10:	2301      	movs	r3, #1
 8000d12:	4620      	mov	r0, r4
 8000d14:	f001 fd96 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f001 f969 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000d1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d22:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000d24:	f023 0304 	bic.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d28:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000d2c:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d30:	214e      	movs	r1, #78	; 0x4e
 8000d32:	2301      	movs	r3, #1
 8000d34:	4620      	mov	r0, r4
 8000d36:	f001 fd85 	bl	8002844 <HAL_I2C_Master_Transmit>
    lcd_write_nibble(0x03, 0);
    HAL_Delay(1);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f001 f958 	bl	8001ff0 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000d40:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d42:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000d44:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000d46:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d4a:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000d4e:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d52:	214e      	movs	r1, #78	; 0x4e
 8000d54:	2301      	movs	r3, #1
 8000d56:	4620      	mov	r0, r4
 8000d58:	f001 fd74 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f001 f947 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000d62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d66:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000d68:	f023 0304 	bic.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d6c:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000d70:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d74:	214e      	movs	r1, #78	; 0x4e
 8000d76:	2301      	movs	r3, #1
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f001 fd63 	bl	8002844 <HAL_I2C_Master_Transmit>
    lcd_write_nibble(0x03, 0);
    HAL_Delay(1);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f001 f936 	bl	8001ff0 <HAL_Delay>
    data |= backlight_state << BL_BIT;
 8000d84:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d86:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000d88:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000d8a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d8e:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000d92:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000d96:	214e      	movs	r1, #78	; 0x4e
 8000d98:	2301      	movs	r3, #1
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f001 fd52 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f001 f925 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000da6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000daa:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000dac:	f023 0304 	bic.w	r3, r3, #4
 8000db0:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000db4:	f10d 020f 	add.w	r2, sp, #15
 8000db8:	2301      	movs	r3, #1
 8000dba:	214e      	movs	r1, #78	; 0x4e
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f001 fd41 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000dc2:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dc4:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000dc6:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000dc8:	f043 0324 	orr.w	r3, r3, #36	; 0x24
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dcc:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000dd0:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000dd4:	214e      	movs	r1, #78	; 0x4e
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f001 fd33 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f001 f906 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000de4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000de8:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000dea:	f023 0304 	bic.w	r3, r3, #4
 8000dee:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000df2:	f10d 020f 	add.w	r2, sp, #15
 8000df6:	2301      	movs	r3, #1
 8000df8:	214e      	movs	r1, #78	; 0x4e
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f001 fd22 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000e00:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e02:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000e04:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000e06:	f063 037b 	orn	r3, r3, #123	; 0x7b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e0a:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000e0e:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e12:	214e      	movs	r1, #78	; 0x4e
 8000e14:	2301      	movs	r3, #1
 8000e16:	4620      	mov	r0, r4
 8000e18:	f001 fd14 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f001 f8e7 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000e22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e26:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000e28:	f023 0304 	bic.w	r3, r3, #4
 8000e2c:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e30:	f10d 020f 	add.w	r2, sp, #15
 8000e34:	2301      	movs	r3, #1
 8000e36:	214e      	movs	r1, #78	; 0x4e
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f001 fd03 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000e3e:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e40:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000e42:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000e44:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e48:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000e4c:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e50:	214e      	movs	r1, #78	; 0x4e
 8000e52:	2301      	movs	r3, #1
 8000e54:	4620      	mov	r0, r4
 8000e56:	f001 fcf5 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f001 f8c8 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000e60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e64:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000e66:	f023 0304 	bic.w	r3, r3, #4
 8000e6a:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e6e:	f10d 020f 	add.w	r2, sp, #15
 8000e72:	2301      	movs	r3, #1
 8000e74:	214e      	movs	r1, #78	; 0x4e
 8000e76:	4620      	mov	r0, r4
 8000e78:	f001 fce4 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000e7c:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e7e:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000e80:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000e82:	f063 033b 	orn	r3, r3, #59	; 0x3b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e86:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000e8a:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000e8e:	214e      	movs	r1, #78	; 0x4e
 8000e90:	2301      	movs	r3, #1
 8000e92:	4620      	mov	r0, r4
 8000e94:	f001 fcd6 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f001 f8a9 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000e9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ea2:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000ea4:	f023 0304 	bic.w	r3, r3, #4
 8000ea8:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000eac:	f10d 020f 	add.w	r2, sp, #15
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	214e      	movs	r1, #78	; 0x4e
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f001 fcc5 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000eba:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ebc:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000ebe:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ec4:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000ec8:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ecc:	214e      	movs	r1, #78	; 0x4e
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f001 fcb7 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f001 f88a 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000edc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ee0:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000ee2:	f023 0304 	bic.w	r3, r3, #4
 8000ee6:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000eea:	f10d 020f 	add.w	r2, sp, #15
 8000eee:	2301      	movs	r3, #1
 8000ef0:	214e      	movs	r1, #78	; 0x4e
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f001 fca6 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000ef8:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000efa:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000efc:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000efe:	432b      	orrs	r3, r5
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f00:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000f04:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f08:	214e      	movs	r1, #78	; 0x4e
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f001 fc99 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f001 f86c 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000f18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f1c:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000f1e:	f023 0304 	bic.w	r3, r3, #4
 8000f22:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f26:	f10d 020f 	add.w	r2, sp, #15
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	214e      	movs	r1, #78	; 0x4e
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f001 fc88 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000f34:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f36:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000f38:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f3e:	f10d 020f 	add.w	r2, sp, #15
    data |= 1 << EN_BIT;
 8000f42:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f46:	214e      	movs	r1, #78	; 0x4e
 8000f48:	2301      	movs	r3, #1
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f001 fc7a 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f001 f84d 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000f56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f5a:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000f5c:	f023 0304 	bic.w	r3, r3, #4
 8000f60:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f64:	f10d 020f 	add.w	r2, sp, #15
 8000f68:	2301      	movs	r3, #1
 8000f6a:	214e      	movs	r1, #78	; 0x4e
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f001 fc69 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8000f72:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f74:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8000f76:	00d2      	lsls	r2, r2, #3
    data |= 1 << EN_BIT;
 8000f78:	f042 0214 	orr.w	r2, r2, #20
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f7c:	2301      	movs	r3, #1
    data |= 1 << EN_BIT;
 8000f7e:	f88d 200f 	strb.w	r2, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f82:	214e      	movs	r1, #78	; 0x4e
 8000f84:	f10d 020f 	add.w	r2, sp, #15
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f001 fc5b 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f001 f82e 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8000f94:	f89d 100f 	ldrb.w	r1, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f98:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8000f9a:	f021 0104 	bic.w	r1, r1, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8000fa4:	f88d 100f 	strb.w	r1, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fa8:	4620      	mov	r0, r4
 8000faa:	214e      	movs	r1, #78	; 0x4e
 8000fac:	f001 fc4a 	bl	8002844 <HAL_I2C_Master_Transmit>
        HAL_Delay(2);
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f001 f81d 	bl	8001ff0 <HAL_Delay>
    lcd_write_nibble(0x02, 0);
    lcd_send_cmd(0x28);
    lcd_send_cmd(0x0C);
    lcd_send_cmd(0x06);
    lcd_send_cmd(0x01);
    HAL_Delay(2);
 8000fb6:	2002      	movs	r0, #2
}
 8000fb8:	b004      	add	sp, #16
 8000fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(2);
 8000fbe:	f001 b817 	b.w	8001ff0 <HAL_Delay>
 8000fc2:	bf00      	nop
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	200001f0 	.word	0x200001f0

08000fcc <lcd_write_multiline_string>:
        lcd_send_data(*str++);
    }
}

void lcd_write_multiline_string(char *str)
{
 8000fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fd0:	b08b      	sub	sp, #44	; 0x2c
 8000fd2:	9003      	str	r0, [sp, #12]
    int line = 0;
    int len = strlen(str);
 8000fd4:	f7ff f8f8 	bl	80001c8 <strlen>
    int pos = 0;

    while (pos < len && line < 2) {
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	f000 80aa 	beq.w	8001132 <lcd_write_multiline_string+0x166>
 8000fde:	4f56      	ldr	r7, [pc, #344]	; (8001138 <lcd_write_multiline_string+0x16c>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000fe0:	4e56      	ldr	r6, [pc, #344]	; (800113c <lcd_write_multiline_string+0x170>)
 8000fe2:	4683      	mov	fp, r0
    int line = 0;
 8000fe4:	f04f 0900 	mov.w	r9, #0
        char buffer[LCD_WIDTH + 1];
        strncpy(buffer, str + pos, LCD_WIDTH);
 8000fe8:	9b03      	ldr	r3, [sp, #12]
 8000fea:	2210      	movs	r2, #16
 8000fec:	eb03 1109 	add.w	r1, r3, r9, lsl #4
 8000ff0:	a805      	add	r0, sp, #20
 8000ff2:	f003 fd2f 	bl	8004a54 <strncpy>
        buffer[LCD_WIDTH] = '\0';
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    data |= backlight_state << BL_BIT;
 8000ffc:	783b      	ldrb	r3, [r7, #0]
 8000ffe:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8001000:	ea43 1389 	orr.w	r3, r3, r9, lsl #6
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001004:	2464      	movs	r4, #100	; 0x64
    data |= 1 << EN_BIT;
 8001006:	f063 037b 	orn	r3, r3, #123	; 0x7b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800100a:	f10d 0213 	add.w	r2, sp, #19
 800100e:	214e      	movs	r1, #78	; 0x4e
    data |= 1 << EN_BIT;
 8001010:	f88d 3013 	strb.w	r3, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001014:	9400      	str	r4, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	4630      	mov	r0, r6
 800101a:	f001 fc13 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 ffe6 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8001024:	f89d 3013 	ldrb.w	r3, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001028:	9400      	str	r4, [sp, #0]
    data &= ~(1 << EN_BIT);
 800102a:	f023 0304 	bic.w	r3, r3, #4
 800102e:	f88d 3013 	strb.w	r3, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001032:	f10d 0213 	add.w	r2, sp, #19
 8001036:	2301      	movs	r3, #1
 8001038:	214e      	movs	r1, #78	; 0x4e
 800103a:	4630      	mov	r0, r6
 800103c:	f001 fc02 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8001040:	783b      	ldrb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001042:	9400      	str	r4, [sp, #0]
    data |= backlight_state << BL_BIT;
 8001044:	00db      	lsls	r3, r3, #3
    data |= 1 << EN_BIT;
 8001046:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800104a:	f10d 0213 	add.w	r2, sp, #19
 800104e:	214e      	movs	r1, #78	; 0x4e
    data |= 1 << EN_BIT;
 8001050:	f88d 3013 	strb.w	r3, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001054:	4630      	mov	r0, r6
 8001056:	2301      	movs	r3, #1
 8001058:	f001 fbf4 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f000 ffc7 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8001062:	f89d 2013 	ldrb.w	r2, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001066:	9400      	str	r4, [sp, #0]
    data &= ~(1 << EN_BIT);
 8001068:	f022 0204 	bic.w	r2, r2, #4
 800106c:	f88d 2013 	strb.w	r2, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001070:	2301      	movs	r3, #1
 8001072:	f10d 0213 	add.w	r2, sp, #19
 8001076:	214e      	movs	r1, #78	; 0x4e
 8001078:	4630      	mov	r0, r6
 800107a:	f001 fbe3 	bl	8002844 <HAL_I2C_Master_Transmit>
    while (*str)
 800107e:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8001082:	ea4f 1a09 	mov.w	sl, r9, lsl #4
 8001086:	2c00      	cmp	r4, #0
 8001088:	d049      	beq.n	800111e <lcd_write_multiline_string+0x152>
 800108a:	f10d 0814 	add.w	r8, sp, #20
    data |= backlight_state << BL_BIT;
 800108e:	783a      	ldrb	r2, [r7, #0]
    uint8_t data = nibble << D4_BIT;
 8001090:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
    data |= 1 << EN_BIT;
 8001094:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001098:	2564      	movs	r5, #100	; 0x64
    data |= 1 << EN_BIT;
 800109a:	f043 0305 	orr.w	r3, r3, #5
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800109e:	f10d 0213 	add.w	r2, sp, #19
 80010a2:	214e      	movs	r1, #78	; 0x4e
    data |= 1 << EN_BIT;
 80010a4:	f88d 3013 	strb.w	r3, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010a8:	9500      	str	r5, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	4630      	mov	r0, r6
 80010ae:	f001 fbc9 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 ff9c 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 80010b8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010bc:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 80010be:	f022 0204 	bic.w	r2, r2, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010c2:	2301      	movs	r3, #1
    data &= ~(1 << EN_BIT);
 80010c4:	f88d 2013 	strb.w	r2, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010c8:	214e      	movs	r1, #78	; 0x4e
 80010ca:	f10d 0213 	add.w	r2, sp, #19
 80010ce:	4630      	mov	r0, r6
 80010d0:	f001 fbb8 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 80010d4:	783b      	ldrb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010d6:	9500      	str	r5, [sp, #0]
    data |= 1 << EN_BIT;
 80010d8:	0124      	lsls	r4, r4, #4
 80010da:	ea44 04c3 	orr.w	r4, r4, r3, lsl #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010de:	f10d 0213 	add.w	r2, sp, #19
 80010e2:	2301      	movs	r3, #1
 80010e4:	214e      	movs	r1, #78	; 0x4e
    data |= 1 << EN_BIT;
 80010e6:	f044 0405 	orr.w	r4, r4, #5
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010ea:	4630      	mov	r0, r6
    data |= 1 << EN_BIT;
 80010ec:	f88d 4013 	strb.w	r4, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010f0:	f001 fba8 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f000 ff7b 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 80010fa:	f89d 0013 	ldrb.w	r0, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80010fe:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 8001100:	f020 0004 	bic.w	r0, r0, #4
 8001104:	f88d 0013 	strb.w	r0, [sp, #19]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001108:	2301      	movs	r3, #1
 800110a:	f10d 0213 	add.w	r2, sp, #19
 800110e:	214e      	movs	r1, #78	; 0x4e
 8001110:	4630      	mov	r0, r6
 8001112:	f001 fb97 	bl	8002844 <HAL_I2C_Master_Transmit>
    while (*str)
 8001116:	f818 4f01 	ldrb.w	r4, [r8, #1]!
 800111a:	2c00      	cmp	r4, #0
 800111c:	d1b7      	bne.n	800108e <lcd_write_multiline_string+0xc2>
    while (pos < len && line < 2) {
 800111e:	f10a 0a10 	add.w	sl, sl, #16
 8001122:	45d3      	cmp	fp, sl
 8001124:	dd05      	ble.n	8001132 <lcd_write_multiline_string+0x166>
 8001126:	f1b9 0f00 	cmp.w	r9, #0
 800112a:	d102      	bne.n	8001132 <lcd_write_multiline_string+0x166>
 800112c:	f04f 0901 	mov.w	r9, #1
 8001130:	e75a      	b.n	8000fe8 <lcd_write_multiline_string+0x1c>
        lcd_set_cursor(line, 0);
        lcd_write_string(buffer);
        pos += LCD_WIDTH;
        line++;
    }
}
 8001132:	b00b      	add	sp, #44	; 0x2c
 8001134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001138:	20000000 	.word	0x20000000
 800113c:	200001f0 	.word	0x200001f0

08001140 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t address;
    switch (row)
 8001142:	f1a0 0001 	sub.w	r0, r0, #1
    data |= backlight_state << BL_BIT;
 8001146:	4e27      	ldr	r6, [pc, #156]	; (80011e4 <lcd_set_cursor+0xa4>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001148:	4d27      	ldr	r5, [pc, #156]	; (80011e8 <lcd_set_cursor+0xa8>)
    data |= backlight_state << BL_BIT;
 800114a:	7832      	ldrb	r2, [r6, #0]
    switch (row)
 800114c:	fab0 f080 	clz	r0, r0
 8001150:	0940      	lsrs	r0, r0, #5
            address = 0x40;
            break;
        default:
            address = 0x00;
    }
    address += column;
 8001152:	eb01 1180 	add.w	r1, r1, r0, lsl #6
    data |= 1 << EN_BIT;
 8001156:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
{
 800115a:	b085      	sub	sp, #20
    data |= 1 << EN_BIT;
 800115c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001160:	2764      	movs	r7, #100	; 0x64
    data |= 1 << EN_BIT;
 8001162:	f063 037b 	orn	r3, r3, #123	; 0x7b
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001166:	f10d 020f 	add.w	r2, sp, #15
    address += column;
 800116a:	b2cc      	uxtb	r4, r1
    data |= 1 << EN_BIT;
 800116c:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001170:	214e      	movs	r1, #78	; 0x4e
 8001172:	2301      	movs	r3, #1
 8001174:	9700      	str	r7, [sp, #0]
 8001176:	4628      	mov	r0, r5
 8001178:	f001 fb64 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f000 ff37 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8001182:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001186:	9700      	str	r7, [sp, #0]
    data &= ~(1 << EN_BIT);
 8001188:	f023 0304 	bic.w	r3, r3, #4
 800118c:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001190:	f10d 020f 	add.w	r2, sp, #15
 8001194:	2301      	movs	r3, #1
 8001196:	214e      	movs	r1, #78	; 0x4e
 8001198:	4628      	mov	r0, r5
 800119a:	f001 fb53 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 800119e:	7833      	ldrb	r3, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011a0:	9700      	str	r7, [sp, #0]
    data |= backlight_state << BL_BIT;
 80011a2:	0121      	lsls	r1, r4, #4
 80011a4:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
    data |= 1 << EN_BIT;
 80011a8:	f041 0104 	orr.w	r1, r1, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011ac:	f10d 020f 	add.w	r2, sp, #15
 80011b0:	2301      	movs	r3, #1
    data |= 1 << EN_BIT;
 80011b2:	f88d 100f 	strb.w	r1, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011b6:	4628      	mov	r0, r5
 80011b8:	214e      	movs	r1, #78	; 0x4e
 80011ba:	f001 fb43 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f000 ff16 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 80011c4:	f89d 400f 	ldrb.w	r4, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011c8:	9700      	str	r7, [sp, #0]
    data &= ~(1 << EN_BIT);
 80011ca:	f024 0404 	bic.w	r4, r4, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011ce:	2301      	movs	r3, #1
 80011d0:	f10d 020f 	add.w	r2, sp, #15
 80011d4:	214e      	movs	r1, #78	; 0x4e
 80011d6:	4628      	mov	r0, r5
    data &= ~(1 << EN_BIT);
 80011d8:	f88d 400f 	strb.w	r4, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011dc:	f001 fb32 	bl	8002844 <HAL_I2C_Master_Transmit>
    lcd_send_cmd(0x80 | address);
}
 80011e0:	b005      	add	sp, #20
 80011e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e4:	20000000 	.word	0x20000000
 80011e8:	200001f0 	.word	0x200001f0

080011ec <lcd_clear>:

void lcd_clear(void)
{
 80011ec:	b570      	push	{r4, r5, r6, lr}
    data |= backlight_state << BL_BIT;
 80011ee:	4e24      	ldr	r6, [pc, #144]	; (8001280 <lcd_clear+0x94>)
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011f0:	4c24      	ldr	r4, [pc, #144]	; (8001284 <lcd_clear+0x98>)
    data |= backlight_state << BL_BIT;
 80011f2:	7833      	ldrb	r3, [r6, #0]
{
 80011f4:	b084      	sub	sp, #16
    data |= backlight_state << BL_BIT;
 80011f6:	00db      	lsls	r3, r3, #3
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011f8:	2564      	movs	r5, #100	; 0x64
    data |= 1 << EN_BIT;
 80011fa:	f043 0304 	orr.w	r3, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80011fe:	f10d 020f 	add.w	r2, sp, #15
 8001202:	9500      	str	r5, [sp, #0]
    data |= 1 << EN_BIT;
 8001204:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001208:	214e      	movs	r1, #78	; 0x4e
 800120a:	2301      	movs	r3, #1
 800120c:	4620      	mov	r0, r4
 800120e:	f001 fb19 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8001212:	2001      	movs	r0, #1
 8001214:	f000 feec 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8001218:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800121c:	9500      	str	r5, [sp, #0]
    data &= ~(1 << EN_BIT);
 800121e:	f023 0304 	bic.w	r3, r3, #4
 8001222:	f88d 300f 	strb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001226:	f10d 020f 	add.w	r2, sp, #15
 800122a:	2301      	movs	r3, #1
 800122c:	214e      	movs	r1, #78	; 0x4e
 800122e:	4620      	mov	r0, r4
 8001230:	f001 fb08 	bl	8002844 <HAL_I2C_Master_Transmit>
    data |= backlight_state << BL_BIT;
 8001234:	7832      	ldrb	r2, [r6, #0]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001236:	9500      	str	r5, [sp, #0]
    data |= backlight_state << BL_BIT;
 8001238:	00d2      	lsls	r2, r2, #3
    data |= 1 << EN_BIT;
 800123a:	f042 0214 	orr.w	r2, r2, #20
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800123e:	2301      	movs	r3, #1
    data |= 1 << EN_BIT;
 8001240:	f88d 200f 	strb.w	r2, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001244:	214e      	movs	r1, #78	; 0x4e
 8001246:	f10d 020f 	add.w	r2, sp, #15
 800124a:	4620      	mov	r0, r4
 800124c:	f001 fafa 	bl	8002844 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 8001250:	2001      	movs	r0, #1
 8001252:	f000 fecd 	bl	8001ff0 <HAL_Delay>
    data &= ~(1 << EN_BIT);
 8001256:	f89d 300f 	ldrb.w	r3, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800125a:	9500      	str	r5, [sp, #0]
 800125c:	f10d 020f 	add.w	r2, sp, #15
    data &= ~(1 << EN_BIT);
 8001260:	f023 0504 	bic.w	r5, r3, #4
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8001264:	214e      	movs	r1, #78	; 0x4e
 8001266:	2301      	movs	r3, #1
 8001268:	4620      	mov	r0, r4
    data &= ~(1 << EN_BIT);
 800126a:	f88d 500f 	strb.w	r5, [sp, #15]
    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 800126e:	f001 fae9 	bl	8002844 <HAL_I2C_Master_Transmit>
        HAL_Delay(2);
 8001272:	2002      	movs	r0, #2
    lcd_send_cmd(0x01);
}
 8001274:	b004      	add	sp, #16
 8001276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_Delay(2);
 800127a:	f000 beb9 	b.w	8001ff0 <HAL_Delay>
 800127e:	bf00      	nop
 8001280:	20000000 	.word	0x20000000
 8001284:	200001f0 	.word	0x200001f0

08001288 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_MspInit+0x2c>)
 800128a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	661a      	str	r2, [r3, #96]	; 0x60
 8001292:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001294:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	f002 0201 	and.w	r2, r2, #1
 800129a:	9200      	str	r2, [sp, #0]
 800129c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012a4:	659a      	str	r2, [r3, #88]	; 0x58
 80012a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b0:	b002      	add	sp, #8
 80012b2:	4770      	bx	lr
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012b8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_DAC_MspInit+0x6c>)
 80012bc:	6802      	ldr	r2, [r0, #0]
{
 80012be:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	2400      	movs	r4, #0
  if(hdac->Instance==DAC1)
 80012c2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80012c8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80012cc:	9406      	str	r4, [sp, #24]
  if(hdac->Instance==DAC1)
 80012ce:	d001      	beq.n	80012d4 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80012d0:	b008      	add	sp, #32
 80012d2:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012d4:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012e0:	659a      	str	r2, [r3, #88]	; 0x58
 80012e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012e4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80012e8:	9200      	str	r2, [sp, #0]
 80012ea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012fc:	2230      	movs	r2, #48	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001302:	2303      	movs	r3, #3
 8001304:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f001 f871 	bl	80023f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800130e:	4622      	mov	r2, r4
 8001310:	4621      	mov	r1, r4
 8001312:	2036      	movs	r0, #54	; 0x36
 8001314:	f000 fe90 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001318:	2036      	movs	r0, #54	; 0x36
 800131a:	f000 fecb 	bl	80020b4 <HAL_NVIC_EnableIRQ>
}
 800131e:	b008      	add	sp, #32
 8001320:	bd10      	pop	{r4, pc}
 8001322:	bf00      	nop
 8001324:	40007400 	.word	0x40007400

08001328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001328:	b510      	push	{r4, lr}
 800132a:	4604      	mov	r4, r0
 800132c:	b0aa      	sub	sp, #168	; 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	2288      	movs	r2, #136	; 0x88
 8001332:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001338:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800133c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133e:	f003 fb81 	bl	8004a44 <memset>
  if(hi2c->Instance==I2C1)
 8001342:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_I2C_MspInit+0x80>)
 8001344:	6822      	ldr	r2, [r4, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d001      	beq.n	800134e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800134a:	b02a      	add	sp, #168	; 0xa8
 800134c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800134e:	2340      	movs	r3, #64	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001350:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001352:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001354:	f002 fa24 	bl	80037a0 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	bb18      	cbnz	r0, 80013a2 <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4c14      	ldr	r4, [pc, #80]	; (80013ac <HAL_I2C_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	4814      	ldr	r0, [pc, #80]	; (80013b0 <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001366:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800136e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001372:	2312      	movs	r3, #18
 8001374:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001378:	2200      	movs	r2, #0
 800137a:	2303      	movs	r3, #3
 800137c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001382:	2304      	movs	r3, #4
 8001384:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f001 f832 	bl	80023f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800138c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800138e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001392:	65a3      	str	r3, [r4, #88]	; 0x58
 8001394:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	9b01      	ldr	r3, [sp, #4]
}
 800139e:	b02a      	add	sp, #168	; 0xa8
 80013a0:	bd10      	pop	{r4, pc}
      Error_Handler();
 80013a2:	f7ff fb0b 	bl	80009bc <Error_Handler>
 80013a6:	e7d8      	b.n	800135a <HAL_I2C_MspInit+0x32>
 80013a8:	40005400 	.word	0x40005400
 80013ac:	40021000 	.word	0x40021000
 80013b0:	48000400 	.word	0x48000400

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b500      	push	{lr}
  if(htim_base->Instance==TIM15)
 80013b6:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <HAL_TIM_Base_MspInit+0x6c>)
 80013b8:	6803      	ldr	r3, [r0, #0]
 80013ba:	4293      	cmp	r3, r2
{
 80013bc:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM15)
 80013be:	d005      	beq.n	80013cc <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_TIM_Base_MspInit+0x70>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d017      	beq.n	80013f6 <HAL_TIM_Base_MspInit+0x42>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80013c6:	b003      	add	sp, #12
 80013c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM15_CLK_ENABLE();
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013ce:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80013d0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80013d4:	6619      	str	r1, [r3, #96]	; 0x60
 80013d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80013e0:	2018      	movs	r0, #24
 80013e2:	4611      	mov	r1, r2
    __HAL_RCC_TIM15_CLK_ENABLE();
 80013e4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80013e6:	f000 fe27 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80013ea:	2018      	movs	r0, #24
}
 80013ec:	b003      	add	sp, #12
 80013ee:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013f2:	f000 be5f 	b.w	80020b4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_TIM_Base_MspInit+0x74>)
 80013f8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80013fa:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80013fe:	6619      	str	r1, [r3, #96]	; 0x60
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800140a:	2019      	movs	r0, #25
 800140c:	4611      	mov	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 800140e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001410:	f000 fe12 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001414:	2019      	movs	r0, #25
}
 8001416:	b003      	add	sp, #12
 8001418:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800141c:	f000 be4a 	b.w	80020b4 <HAL_NVIC_EnableIRQ>
 8001420:	40014000 	.word	0x40014000
 8001424:	40014400 	.word	0x40014400
 8001428:	40021000 	.word	0x40021000
 800142c:	00000000 	.word	0x00000000

08001430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b510      	push	{r4, lr}
 8001432:	4604      	mov	r4, r0
 8001434:	b0aa      	sub	sp, #168	; 0xa8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	2288      	movs	r2, #136	; 0x88
 800143a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001440:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001444:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001446:	f003 fafd 	bl	8004a44 <memset>
  if(huart->Instance==USART2)
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <HAL_UART_MspInit+0xa0>)
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d001      	beq.n	8001456 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001452:	b02a      	add	sp, #168	; 0xa8
 8001454:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001456:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001458:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800145a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f002 f9a0 	bl	80037a0 <HAL_RCCEx_PeriphCLKConfig>
 8001460:	bb58      	cbnz	r0, 80014ba <HAL_UART_MspInit+0x8a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_UART_MspInit+0xa4>)
 8001464:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001466:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800146a:	659a      	str	r2, [r3, #88]	; 0x58
 800146c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800146e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001472:	9200      	str	r2, [sp, #0]
 8001474:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001478:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80014c0 <HAL_UART_MspInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	f042 0201 	orr.w	r2, r2, #1
 8001480:	64da      	str	r2, [r3, #76]	; 0x4c
 8001482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001484:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001488:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80014c8 <HAL_UART_MspInit+0x98>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001494:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800149a:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149e:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f000 ffa5 	bl	80023f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	4611      	mov	r1, r2
 80014aa:	2026      	movs	r0, #38	; 0x26
 80014ac:	f000 fdc4 	bl	8002038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014b0:	2026      	movs	r0, #38	; 0x26
 80014b2:	f000 fdff 	bl	80020b4 <HAL_NVIC_EnableIRQ>
}
 80014b6:	b02a      	add	sp, #168	; 0xa8
 80014b8:	bd10      	pop	{r4, pc}
      Error_Handler();
 80014ba:	f7ff fa7f 	bl	80009bc <Error_Handler>
 80014be:	e7d0      	b.n	8001462 <HAL_UART_MspInit+0x32>
 80014c0:	0000000c 	.word	0x0000000c
 80014c4:	00000002 	.word	0x00000002
 80014c8:	00000000 	.word	0x00000000
 80014cc:	00000003 	.word	0x00000003
 80014d0:	40004400 	.word	0x40004400
 80014d4:	40021000 	.word	0x40021000

080014d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler>
 80014da:	bf00      	nop

080014dc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <HardFault_Handler>
 80014de:	bf00      	nop

080014e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler>
 80014e2:	bf00      	nop

080014e4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <BusFault_Handler>
 80014e6:	bf00      	nop

080014e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler>
 80014ea:	bf00      	nop

080014ec <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <DebugMon_Handler>:
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <PendSV_Handler>:
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f000 bd68 	b.w	8001fcc <HAL_IncTick>

080014fc <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_1_Pin);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f001 b87f 	b.w	8002600 <HAL_GPIO_EXTI_IRQHandler>
 8001502:	bf00      	nop

08001504 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_2_Pin);
 8001504:	2002      	movs	r0, #2
 8001506:	f001 b87b 	b.w	8002600 <HAL_GPIO_EXTI_IRQHandler>
 800150a:	bf00      	nop

0800150c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_3_Pin);
 800150c:	2004      	movs	r0, #4
 800150e:	f001 b877 	b.w	8002600 <HAL_GPIO_EXTI_IRQHandler>
 8001512:	bf00      	nop

08001514 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_4_Pin);
 8001514:	2008      	movs	r0, #8
 8001516:	f001 b873 	b.w	8002600 <HAL_GPIO_EXTI_IRQHandler>
 800151a:	bf00      	nop

0800151c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_5_Pin);
 800151c:	2010      	movs	r0, #16
 800151e:	f001 b86f 	b.w	8002600 <HAL_GPIO_EXTI_IRQHandler>
 8001522:	bf00      	nop

08001524 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001524:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_6_Pin);
 8001526:	2020      	movs	r0, #32
 8001528:	f001 f86a 	bl	8002600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_7_Pin);
 800152c:	2040      	movs	r0, #64	; 0x40
 800152e:	f001 f867 	bl	8002600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_8_Pin);
 8001532:	2080      	movs	r0, #128	; 0x80
 8001534:	f001 f864 	bl	8002600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_9_Pin);
 8001538:	f44f 7080 	mov.w	r0, #256	; 0x100
 800153c:	f001 f860 	bl	8002600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_10_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001540:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(NOTE_10_Pin);
 8001544:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001548:	f001 b85a 	b.w	8002600 <HAL_GPIO_EXTI_IRQHandler>

0800154c <TIM1_BRK_TIM15_IRQHandler>:
void TIM1_BRK_TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800154c:	4801      	ldr	r0, [pc, #4]	; (8001554 <TIM1_BRK_TIM15_IRQHandler+0x8>)
 800154e:	f002 bcc9 	b.w	8003ee4 <HAL_TIM_IRQHandler>
 8001552:	bf00      	nop
 8001554:	20000244 	.word	0x20000244

08001558 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001558:	4801      	ldr	r0, [pc, #4]	; (8001560 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800155a:	f002 bcc3 	b.w	8003ee4 <HAL_TIM_IRQHandler>
 800155e:	bf00      	nop
 8001560:	20000290 	.word	0x20000290

08001564 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001564:	4801      	ldr	r0, [pc, #4]	; (800156c <USART2_IRQHandler+0x8>)
 8001566:	f002 bdc7 	b.w	80040f8 <HAL_UART_IRQHandler>
 800156a:	bf00      	nop
 800156c:	200002dc 	.word	0x200002dc

08001570 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001570:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_11_Pin);
 8001572:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001576:	f001 f843 	bl	8002600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_12_Pin);
 800157a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800157e:	f001 f83f 	bl	8002600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001586:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800158a:	f001 b839 	b.w	8002600 <HAL_GPIO_EXTI_IRQHandler>
 800158e:	bf00      	nop

08001590 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001590:	4801      	ldr	r0, [pc, #4]	; (8001598 <TIM6_DAC_IRQHandler+0x8>)
 8001592:	f000 be15 	b.w	80021c0 <HAL_DAC_IRQHandler>
 8001596:	bf00      	nop
 8001598:	200001dc 	.word	0x200001dc

0800159c <update_decay_values>:
int decay_index_B = 0;

void update_decay_values()
{
	// sustain_flag is the on/off switch. up button sets it true(on) and down button sets it false(off)
	if(sustain_flag)
 800159c:	4b94      	ldr	r3, [pc, #592]	; (80017f0 <update_decay_values+0x254>)
 800159e:	681b      	ldr	r3, [r3, #0]
{
 80015a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(sustain_flag)
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f040 8081 	bne.w	80016ac <update_decay_values+0x110>
		}

		if(sustain_B)
		{
			decay_value_B = decay_table[NOTE_B];
			decay_index_B++;
 80015aa:	4b92      	ldr	r3, [pc, #584]	; (80017f4 <update_decay_values+0x258>)
 80015ac:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8001898 <update_decay_values+0x2fc>
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 800189c <update_decay_values+0x300>
 80015b6:	4b90      	ldr	r3, [pc, #576]	; (80017f8 <update_decay_values+0x25c>)
 80015b8:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 80018a0 <update_decay_values+0x304>
 80015bc:	4f8f      	ldr	r7, [pc, #572]	; (80017fc <update_decay_values+0x260>)
 80015be:	4e90      	ldr	r6, [pc, #576]	; (8001800 <update_decay_values+0x264>)
 80015c0:	4d90      	ldr	r5, [pc, #576]	; (8001804 <update_decay_values+0x268>)
 80015c2:	4c91      	ldr	r4, [pc, #580]	; (8001808 <update_decay_values+0x26c>)
 80015c4:	4891      	ldr	r0, [pc, #580]	; (800180c <update_decay_values+0x270>)
 80015c6:	4992      	ldr	r1, [pc, #584]	; (8001810 <update_decay_values+0x274>)
		}

	}

	// if the index has reached the end of the decay table then the note should not be sustained anymore
	if(decay_index_C > 2500-1)
 80015c8:	f8d8 9000 	ldr.w	r9, [r8]
 80015cc:	f640 18c3 	movw	r8, #2499	; 0x9c3
 80015d0:	45c1      	cmp	r9, r8
 80015d2:	dd05      	ble.n	80015e0 <update_decay_values+0x44>
	{
		sustain_C = 0;
 80015d4:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8001844 <update_decay_values+0x2a8>
 80015d8:	f04f 0900 	mov.w	r9, #0
 80015dc:	f8c8 9000 	str.w	r9, [r8]
	}

	if(decay_index_Cs > 2500-1)
 80015e0:	f8d3 8000 	ldr.w	r8, [r3]
 80015e4:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80015e8:	4598      	cmp	r8, r3
 80015ea:	dd04      	ble.n	80015f6 <update_decay_values+0x5a>
	{
		sustain_Cs = 0;
 80015ec:	4b89      	ldr	r3, [pc, #548]	; (8001814 <update_decay_values+0x278>)
 80015ee:	f04f 0800 	mov.w	r8, #0
 80015f2:	f8c3 8000 	str.w	r8, [r3]
	}

	if(decay_index_D > 2500-1)
 80015f6:	f8de e000 	ldr.w	lr, [lr]
 80015fa:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80015fe:	459e      	cmp	lr, r3
 8001600:	dd04      	ble.n	800160c <update_decay_values+0x70>
	{
		sustain_D = 0;
 8001602:	4b85      	ldr	r3, [pc, #532]	; (8001818 <update_decay_values+0x27c>)
 8001604:	f04f 0e00 	mov.w	lr, #0
 8001608:	f8c3 e000 	str.w	lr, [r3]
	}

	if(decay_index_Ds > 2500-1)
 800160c:	4b83      	ldr	r3, [pc, #524]	; (800181c <update_decay_values+0x280>)
 800160e:	f8d3 e000 	ldr.w	lr, [r3]
 8001612:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001616:	459e      	cmp	lr, r3
 8001618:	dd04      	ble.n	8001624 <update_decay_values+0x88>
	{
		sustain_Ds = 0;
 800161a:	4b81      	ldr	r3, [pc, #516]	; (8001820 <update_decay_values+0x284>)
 800161c:	f04f 0e00 	mov.w	lr, #0
 8001620:	f8c3 e000 	str.w	lr, [r3]
	}

	if(decay_index_E > 2500-1)
 8001624:	f8dc c000 	ldr.w	ip, [ip]
 8001628:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800162c:	459c      	cmp	ip, r3
 800162e:	dd04      	ble.n	800163a <update_decay_values+0x9e>
	{
		sustain_E = 0;
 8001630:	4b7c      	ldr	r3, [pc, #496]	; (8001824 <update_decay_values+0x288>)
 8001632:	f04f 0c00 	mov.w	ip, #0
 8001636:	f8c3 c000 	str.w	ip, [r3]
	}

	if(decay_index_F > 2500-1)
 800163a:	683f      	ldr	r7, [r7, #0]
 800163c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001640:	429f      	cmp	r7, r3
 8001642:	dd02      	ble.n	800164a <update_decay_values+0xae>
	{
		sustain_F = 0;
 8001644:	4b78      	ldr	r3, [pc, #480]	; (8001828 <update_decay_values+0x28c>)
 8001646:	2700      	movs	r7, #0
 8001648:	601f      	str	r7, [r3, #0]
	}

	if(decay_index_Fs > 2500-1)
 800164a:	6836      	ldr	r6, [r6, #0]
 800164c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001650:	429e      	cmp	r6, r3
 8001652:	dd02      	ble.n	800165a <update_decay_values+0xbe>
	{
		sustain_Fs = 0;
 8001654:	4b75      	ldr	r3, [pc, #468]	; (800182c <update_decay_values+0x290>)
 8001656:	2600      	movs	r6, #0
 8001658:	601e      	str	r6, [r3, #0]
	}

	if(decay_index_G > 2500-1)
 800165a:	682d      	ldr	r5, [r5, #0]
 800165c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001660:	429d      	cmp	r5, r3
 8001662:	dd02      	ble.n	800166a <update_decay_values+0xce>
	{
		sustain_G = 0;
 8001664:	4b72      	ldr	r3, [pc, #456]	; (8001830 <update_decay_values+0x294>)
 8001666:	2500      	movs	r5, #0
 8001668:	601d      	str	r5, [r3, #0]
	}

	if(decay_index_Gs > 2500-1)
 800166a:	6824      	ldr	r4, [r4, #0]
 800166c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001670:	429c      	cmp	r4, r3
 8001672:	dd02      	ble.n	800167a <update_decay_values+0xde>
	{
		sustain_Gs = 0;
 8001674:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <update_decay_values+0x298>)
 8001676:	2400      	movs	r4, #0
 8001678:	601c      	str	r4, [r3, #0]
	}

	if(decay_index_A > 2500-1)
 800167a:	6800      	ldr	r0, [r0, #0]
 800167c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001680:	4298      	cmp	r0, r3
 8001682:	dd02      	ble.n	800168a <update_decay_values+0xee>
	{
		sustain_A = 0;
 8001684:	4b6c      	ldr	r3, [pc, #432]	; (8001838 <update_decay_values+0x29c>)
 8001686:	2000      	movs	r0, #0
 8001688:	6018      	str	r0, [r3, #0]
	}

	if(decay_index_As > 2500-1)
 800168a:	6809      	ldr	r1, [r1, #0]
 800168c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001690:	4299      	cmp	r1, r3
 8001692:	dd02      	ble.n	800169a <update_decay_values+0xfe>
	{
		sustain_As = 0;
 8001694:	4b69      	ldr	r3, [pc, #420]	; (800183c <update_decay_values+0x2a0>)
 8001696:	2100      	movs	r1, #0
 8001698:	6019      	str	r1, [r3, #0]
	}

	if(decay_index_B > 2500-1)
 800169a:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800169e:	429a      	cmp	r2, r3
 80016a0:	dd02      	ble.n	80016a8 <update_decay_values+0x10c>
	{
		sustain_B = 0;
 80016a2:	4b67      	ldr	r3, [pc, #412]	; (8001840 <update_decay_values+0x2a4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
	}



}
 80016a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(sustain_C)
 80016ac:	4b65      	ldr	r3, [pc, #404]	; (8001844 <update_decay_values+0x2a8>)
				decay_index_C++;
 80016ae:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8001898 <update_decay_values+0x2fc>
		if(sustain_C)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b143      	cbz	r3, 80016c8 <update_decay_values+0x12c>
				decay_index_C++;
 80016b6:	f8d8 3000 	ldr.w	r3, [r8]
				decay_value_C = decay_table[NOTE_C];
 80016ba:	4a63      	ldr	r2, [pc, #396]	; (8001848 <update_decay_values+0x2ac>)
 80016bc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
				decay_index_C++;
 80016c0:	3301      	adds	r3, #1
				decay_value_C = decay_table[NOTE_C];
 80016c2:	6011      	str	r1, [r2, #0]
				decay_index_C++;
 80016c4:	f8c8 3000 	str.w	r3, [r8]
		if(sustain_Cs)
 80016c8:	4b52      	ldr	r3, [pc, #328]	; (8001814 <update_decay_values+0x278>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d166      	bne.n	800179e <update_decay_values+0x202>
 80016d0:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <update_decay_values+0x25c>)
		if(sustain_D)
 80016d2:	4a51      	ldr	r2, [pc, #324]	; (8001818 <update_decay_values+0x27c>)
			decay_index_D++;
 80016d4:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 800189c <update_decay_values+0x300>
		if(sustain_D)
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	b13a      	cbz	r2, 80016ec <update_decay_values+0x150>
			decay_value_D = decay_table[NOTE_D];
 80016dc:	4a5b      	ldr	r2, [pc, #364]	; (800184c <update_decay_values+0x2b0>)
 80016de:	495c      	ldr	r1, [pc, #368]	; (8001850 <update_decay_values+0x2b4>)
 80016e0:	6011      	str	r1, [r2, #0]
			decay_index_D++;
 80016e2:	f8de 2000 	ldr.w	r2, [lr]
 80016e6:	3201      	adds	r2, #1
 80016e8:	f8ce 2000 	str.w	r2, [lr]
		if(sustain_Ds)
 80016ec:	4a4c      	ldr	r2, [pc, #304]	; (8001820 <update_decay_values+0x284>)
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	b12a      	cbz	r2, 80016fe <update_decay_values+0x162>
			decay_value_Ds = decay_table[NOTE_Ds];
 80016f2:	4a58      	ldr	r2, [pc, #352]	; (8001854 <update_decay_values+0x2b8>)
 80016f4:	4958      	ldr	r1, [pc, #352]	; (8001858 <update_decay_values+0x2bc>)
 80016f6:	6011      	str	r1, [r2, #0]
			decay_index_Cs++;
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	3201      	adds	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
		if(sustain_E)
 80016fe:	4a49      	ldr	r2, [pc, #292]	; (8001824 <update_decay_values+0x288>)
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	2a00      	cmp	r2, #0
 8001704:	d168      	bne.n	80017d8 <update_decay_values+0x23c>
 8001706:	f8df c198 	ldr.w	ip, [pc, #408]	; 80018a0 <update_decay_values+0x304>
		if(sustain_F)
 800170a:	4a47      	ldr	r2, [pc, #284]	; (8001828 <update_decay_values+0x28c>)
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	2a00      	cmp	r2, #0
 8001710:	d15a      	bne.n	80017c8 <update_decay_values+0x22c>
 8001712:	4f3a      	ldr	r7, [pc, #232]	; (80017fc <update_decay_values+0x260>)
		if(sustain_Fs)
 8001714:	4a45      	ldr	r2, [pc, #276]	; (800182c <update_decay_values+0x290>)
			decay_index_Fs++;
 8001716:	4e3a      	ldr	r6, [pc, #232]	; (8001800 <update_decay_values+0x264>)
		if(sustain_Fs)
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	b12a      	cbz	r2, 8001728 <update_decay_values+0x18c>
			decay_index_Fs++;
 800171c:	6832      	ldr	r2, [r6, #0]
			decay_value_Fs = decay_table[NOTE_Fs];
 800171e:	494f      	ldr	r1, [pc, #316]	; (800185c <update_decay_values+0x2c0>)
			decay_index_Fs++;
 8001720:	3201      	adds	r2, #1
 8001722:	6032      	str	r2, [r6, #0]
			decay_value_Fs = decay_table[NOTE_Fs];
 8001724:	4a4e      	ldr	r2, [pc, #312]	; (8001860 <update_decay_values+0x2c4>)
 8001726:	600a      	str	r2, [r1, #0]
		if(sustain_G)
 8001728:	4a41      	ldr	r2, [pc, #260]	; (8001830 <update_decay_values+0x294>)
			decay_index_G++;
 800172a:	4d36      	ldr	r5, [pc, #216]	; (8001804 <update_decay_values+0x268>)
		if(sustain_G)
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	b12a      	cbz	r2, 800173c <update_decay_values+0x1a0>
			decay_index_G++;
 8001730:	682a      	ldr	r2, [r5, #0]
			decay_value_G = decay_table[NOTE_G];
 8001732:	494c      	ldr	r1, [pc, #304]	; (8001864 <update_decay_values+0x2c8>)
			decay_index_G++;
 8001734:	3201      	adds	r2, #1
 8001736:	602a      	str	r2, [r5, #0]
			decay_value_G = decay_table[NOTE_G];
 8001738:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <update_decay_values+0x2cc>)
 800173a:	600a      	str	r2, [r1, #0]
		if(sustain_Gs)
 800173c:	4a3d      	ldr	r2, [pc, #244]	; (8001834 <update_decay_values+0x298>)
			decay_index_Gs++;
 800173e:	4c32      	ldr	r4, [pc, #200]	; (8001808 <update_decay_values+0x26c>)
		if(sustain_Gs)
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	b12a      	cbz	r2, 8001750 <update_decay_values+0x1b4>
			decay_index_Gs++;
 8001744:	6822      	ldr	r2, [r4, #0]
			decay_value_Gs = decay_table[NOTE_Gs];
 8001746:	4949      	ldr	r1, [pc, #292]	; (800186c <update_decay_values+0x2d0>)
			decay_index_Gs++;
 8001748:	3201      	adds	r2, #1
 800174a:	6022      	str	r2, [r4, #0]
			decay_value_Gs = decay_table[NOTE_Gs];
 800174c:	4a48      	ldr	r2, [pc, #288]	; (8001870 <update_decay_values+0x2d4>)
 800174e:	600a      	str	r2, [r1, #0]
		if(sustain_A)
 8001750:	4a39      	ldr	r2, [pc, #228]	; (8001838 <update_decay_values+0x29c>)
			decay_index_A++;
 8001752:	482e      	ldr	r0, [pc, #184]	; (800180c <update_decay_values+0x270>)
		if(sustain_A)
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	b12a      	cbz	r2, 8001764 <update_decay_values+0x1c8>
			decay_index_A++;
 8001758:	6802      	ldr	r2, [r0, #0]
			decay_value_A = decay_table[NOTE_A];
 800175a:	4946      	ldr	r1, [pc, #280]	; (8001874 <update_decay_values+0x2d8>)
			decay_index_A++;
 800175c:	3201      	adds	r2, #1
 800175e:	6002      	str	r2, [r0, #0]
			decay_value_A = decay_table[NOTE_A];
 8001760:	4a45      	ldr	r2, [pc, #276]	; (8001878 <update_decay_values+0x2dc>)
 8001762:	600a      	str	r2, [r1, #0]
		if(sustain_As)
 8001764:	4a35      	ldr	r2, [pc, #212]	; (800183c <update_decay_values+0x2a0>)
			decay_index_As++;
 8001766:	492a      	ldr	r1, [pc, #168]	; (8001810 <update_decay_values+0x274>)
		if(sustain_As)
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	b13a      	cbz	r2, 800177c <update_decay_values+0x1e0>
			decay_index_As++;
 800176c:	680a      	ldr	r2, [r1, #0]
			decay_value_As = decay_table[NOTE_As];
 800176e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80018a4 <update_decay_values+0x308>
			decay_index_As++;
 8001772:	3201      	adds	r2, #1
 8001774:	600a      	str	r2, [r1, #0]
			decay_value_As = decay_table[NOTE_As];
 8001776:	4a41      	ldr	r2, [pc, #260]	; (800187c <update_decay_values+0x2e0>)
 8001778:	f8c9 2000 	str.w	r2, [r9]
		if(sustain_B)
 800177c:	4a30      	ldr	r2, [pc, #192]	; (8001840 <update_decay_values+0x2a4>)
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	b1aa      	cbz	r2, 80017ae <update_decay_values+0x212>
			decay_index_B++;
 8001782:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80017f4 <update_decay_values+0x258>
			decay_value_B = decay_table[NOTE_B];
 8001786:	f8df a120 	ldr.w	sl, [pc, #288]	; 80018a8 <update_decay_values+0x30c>
			decay_index_B++;
 800178a:	f8d9 2000 	ldr.w	r2, [r9]
 800178e:	3201      	adds	r2, #1
 8001790:	f8c9 2000 	str.w	r2, [r9]
			decay_value_B = decay_table[NOTE_B];
 8001794:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80018ac <update_decay_values+0x310>
 8001798:	f8ca 9000 	str.w	r9, [sl]
			decay_index_B++;
 800179c:	e714      	b.n	80015c8 <update_decay_values+0x2c>
			decay_index_Cs++;
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <update_decay_values+0x25c>)
			decay_value_Cs = decay_table[NOTE_Cs];
 80017a0:	4937      	ldr	r1, [pc, #220]	; (8001880 <update_decay_values+0x2e4>)
			decay_index_Cs++;
 80017a2:	681a      	ldr	r2, [r3, #0]
			decay_value_Cs = decay_table[NOTE_Cs];
 80017a4:	4837      	ldr	r0, [pc, #220]	; (8001884 <update_decay_values+0x2e8>)
 80017a6:	6008      	str	r0, [r1, #0]
			decay_index_Cs++;
 80017a8:	3201      	adds	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e791      	b.n	80016d2 <update_decay_values+0x136>
			decay_index_B++;
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <update_decay_values+0x258>)
			decay_value_C = 1;
 80017b0:	f8df b094 	ldr.w	fp, [pc, #148]	; 8001848 <update_decay_values+0x2ac>
			decay_value_Cs = 1;
 80017b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001880 <update_decay_values+0x2e4>
			decay_index_B++;
 80017b8:	6812      	ldr	r2, [r2, #0]
			decay_value_C = 1;
 80017ba:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 80017be:	f8cb 9000 	str.w	r9, [fp]
			decay_value_Cs = 1;
 80017c2:	f8ca 9000 	str.w	r9, [sl]
 80017c6:	e6ff      	b.n	80015c8 <update_decay_values+0x2c>
			decay_value_F = decay_table[NOTE_F];
 80017c8:	4a2f      	ldr	r2, [pc, #188]	; (8001888 <update_decay_values+0x2ec>)
			decay_index_F++;
 80017ca:	4f0c      	ldr	r7, [pc, #48]	; (80017fc <update_decay_values+0x260>)
			decay_value_F = decay_table[NOTE_F];
 80017cc:	492f      	ldr	r1, [pc, #188]	; (800188c <update_decay_values+0x2f0>)
 80017ce:	6011      	str	r1, [r2, #0]
			decay_index_F++;
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	3201      	adds	r2, #1
 80017d4:	603a      	str	r2, [r7, #0]
 80017d6:	e79d      	b.n	8001714 <update_decay_values+0x178>
			decay_value_E = decay_table[NOTE_E];
 80017d8:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <update_decay_values+0x2f4>)
			decay_index_E++;
 80017da:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 80018a0 <update_decay_values+0x304>
			decay_value_E = decay_table[NOTE_E];
 80017de:	492d      	ldr	r1, [pc, #180]	; (8001894 <update_decay_values+0x2f8>)
 80017e0:	6011      	str	r1, [r2, #0]
			decay_index_E++;
 80017e2:	f8dc 2000 	ldr.w	r2, [ip]
 80017e6:	3201      	adds	r2, #1
 80017e8:	f8cc 2000 	str.w	r2, [ip]
 80017ec:	e78d      	b.n	800170a <update_decay_values+0x16e>
 80017ee:	bf00      	nop
 80017f0:	200003e8 	.word	0x200003e8
 80017f4:	200003f4 	.word	0x200003f4
 80017f8:	200003fc 	.word	0x200003fc
 80017fc:	2000040c 	.word	0x2000040c
 8001800:	20000410 	.word	0x20000410
 8001804:	20000414 	.word	0x20000414
 8001808:	20000418 	.word	0x20000418
 800180c:	200003ec 	.word	0x200003ec
 8001810:	200003f0 	.word	0x200003f0
 8001814:	200003a4 	.word	0x200003a4
 8001818:	200003a8 	.word	0x200003a8
 800181c:	20000404 	.word	0x20000404
 8001820:	200003ac 	.word	0x200003ac
 8001824:	200003b0 	.word	0x200003b0
 8001828:	200003b4 	.word	0x200003b4
 800182c:	200003b8 	.word	0x200003b8
 8001830:	200003bc 	.word	0x200003bc
 8001834:	200003c0 	.word	0x200003c0
 8001838:	20000394 	.word	0x20000394
 800183c:	20000398 	.word	0x20000398
 8001840:	2000039c 	.word	0x2000039c
 8001844:	200003a0 	.word	0x200003a0
 8001848:	20000010 	.word	0x20000010
 800184c:	20000018 	.word	0x20000018
 8001850:	3f7df5ce 	.word	0x3f7df5ce
 8001854:	2000001c 	.word	0x2000001c
 8001858:	3f7cf245 	.word	0x3f7cf245
 800185c:	20000028 	.word	0x20000028
 8001860:	3f79eddc 	.word	0x3f79eddc
 8001864:	2000002c 	.word	0x2000002c
 8001868:	3f78ee72 	.word	0x3f78ee72
 800186c:	20000030 	.word	0x20000030
 8001870:	3f77f00c 	.word	0x3f77f00c
 8001874:	20000004 	.word	0x20000004
 8001878:	3f76f2ab 	.word	0x3f76f2ab
 800187c:	3f75f64c 	.word	0x3f75f64c
 8001880:	20000014 	.word	0x20000014
 8001884:	3f7efa61 	.word	0x3f7efa61
 8001888:	20000024 	.word	0x20000024
 800188c:	3f7aee4d 	.word	0x3f7aee4d
 8001890:	20000020 	.word	0x20000020
 8001894:	3f7befc5 	.word	0x3f7befc5
 8001898:	200003f8 	.word	0x200003f8
 800189c:	20000400 	.word	0x20000400
 80018a0:	20000408 	.word	0x20000408
 80018a4:	20000008 	.word	0x20000008
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	3f74faef 	.word	0x3f74faef

080018b0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018b0:	4a03      	ldr	r2, [pc, #12]	; (80018c0 <SystemInit+0x10>)
 80018b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <update_note_tables>:
	}

	update_note_tables();
}

void update_note_tables(){
 80018c4:	b430      	push	{r4, r5}
	 * This function takes the current octave and uses it to update our current
	 * note and sample information.
	 * The NOTE_TABLES are found in sine_tables.h
	 *
	 */
	current_C_TABLE = C_TABLES[activeOctave];
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <update_note_tables+0xfc>)
 80018c8:	4d3e      	ldr	r5, [pc, #248]	; (80019c4 <update_note_tables+0x100>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4a3e      	ldr	r2, [pc, #248]	; (80019c8 <update_note_tables+0x104>)
 80018ce:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 80018d2:	483e      	ldr	r0, [pc, #248]	; (80019cc <update_note_tables+0x108>)
	current_C_TABLE = C_TABLES[activeOctave];
 80018d4:	6015      	str	r5, [r2, #0]
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 80018d6:	4a3e      	ldr	r2, [pc, #248]	; (80019d0 <update_note_tables+0x10c>)
 80018d8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_D_TABLE = D_TABLES[activeOctave];
 80018dc:	493d      	ldr	r1, [pc, #244]	; (80019d4 <update_note_tables+0x110>)
	current_Cs_TABLE = Cs_TABLES[activeOctave];
 80018de:	6010      	str	r0, [r2, #0]
	current_D_TABLE = D_TABLES[activeOctave];
 80018e0:	4a3d      	ldr	r2, [pc, #244]	; (80019d8 <update_note_tables+0x114>)
 80018e2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 80018e6:	4c3d      	ldr	r4, [pc, #244]	; (80019dc <update_note_tables+0x118>)
	current_D_TABLE = D_TABLES[activeOctave];
 80018e8:	6011      	str	r1, [r2, #0]
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 80018ea:	4a3d      	ldr	r2, [pc, #244]	; (80019e0 <update_note_tables+0x11c>)
 80018ec:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_E_TABLE = E_TABLES[activeOctave];
 80018f0:	483c      	ldr	r0, [pc, #240]	; (80019e4 <update_note_tables+0x120>)
	current_Ds_TABLE = Ds_TABLES[activeOctave];
 80018f2:	6015      	str	r5, [r2, #0]
	current_E_TABLE = E_TABLES[activeOctave];
 80018f4:	4a3c      	ldr	r2, [pc, #240]	; (80019e8 <update_note_tables+0x124>)
 80018f6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_F_TABLE = F_TABLES[activeOctave];
 80018fa:	493c      	ldr	r1, [pc, #240]	; (80019ec <update_note_tables+0x128>)
	current_E_TABLE = E_TABLES[activeOctave];
 80018fc:	6010      	str	r0, [r2, #0]
	current_F_TABLE = F_TABLES[activeOctave];
 80018fe:	4a3c      	ldr	r2, [pc, #240]	; (80019f0 <update_note_tables+0x12c>)
 8001900:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 8001904:	4c3b      	ldr	r4, [pc, #236]	; (80019f4 <update_note_tables+0x130>)
	current_F_TABLE = F_TABLES[activeOctave];
 8001906:	6011      	str	r1, [r2, #0]
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 8001908:	4a3b      	ldr	r2, [pc, #236]	; (80019f8 <update_note_tables+0x134>)
 800190a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_G_TABLE = G_TABLES[activeOctave];
 800190e:	483b      	ldr	r0, [pc, #236]	; (80019fc <update_note_tables+0x138>)
	current_Fs_TABLE = Fs_TABLES[activeOctave];
 8001910:	6015      	str	r5, [r2, #0]
	current_G_TABLE = G_TABLES[activeOctave];
 8001912:	4a3b      	ldr	r2, [pc, #236]	; (8001a00 <update_note_tables+0x13c>)
 8001914:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 8001918:	493a      	ldr	r1, [pc, #232]	; (8001a04 <update_note_tables+0x140>)
	current_G_TABLE = G_TABLES[activeOctave];
 800191a:	6010      	str	r0, [r2, #0]
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 800191c:	4a3a      	ldr	r2, [pc, #232]	; (8001a08 <update_note_tables+0x144>)
 800191e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_A_TABLE = A_TABLES[activeOctave];
 8001922:	4c3a      	ldr	r4, [pc, #232]	; (8001a0c <update_note_tables+0x148>)
	current_Gs_TABLE = Gs_TABLES[activeOctave];
 8001924:	6011      	str	r1, [r2, #0]
	current_A_TABLE = A_TABLES[activeOctave];
 8001926:	4a3a      	ldr	r2, [pc, #232]	; (8001a10 <update_note_tables+0x14c>)
 8001928:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_As_TABLE = As_TABLES[activeOctave];
 800192c:	4839      	ldr	r0, [pc, #228]	; (8001a14 <update_note_tables+0x150>)
	current_A_TABLE = A_TABLES[activeOctave];
 800192e:	6015      	str	r5, [r2, #0]
	current_As_TABLE = As_TABLES[activeOctave];
 8001930:	4a39      	ldr	r2, [pc, #228]	; (8001a18 <update_note_tables+0x154>)
 8001932:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_B_TABLE = B_TABLES[activeOctave];
 8001936:	4939      	ldr	r1, [pc, #228]	; (8001a1c <update_note_tables+0x158>)
	current_As_TABLE = As_TABLES[activeOctave];
 8001938:	6010      	str	r0, [r2, #0]
	current_B_TABLE = B_TABLES[activeOctave];
 800193a:	4a39      	ldr	r2, [pc, #228]	; (8001a20 <update_note_tables+0x15c>)
 800193c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]

	current_C_SAMPLES = C_SAMPLES[activeOctave];
 8001940:	4c38      	ldr	r4, [pc, #224]	; (8001a24 <update_note_tables+0x160>)
	current_B_TABLE = B_TABLES[activeOctave];
 8001942:	6011      	str	r1, [r2, #0]
	current_C_SAMPLES = C_SAMPLES[activeOctave];
 8001944:	4a38      	ldr	r2, [pc, #224]	; (8001a28 <update_note_tables+0x164>)
 8001946:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 800194a:	4838      	ldr	r0, [pc, #224]	; (8001a2c <update_note_tables+0x168>)
	current_C_SAMPLES = C_SAMPLES[activeOctave];
 800194c:	6015      	str	r5, [r2, #0]
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 800194e:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <update_note_tables+0x16c>)
 8001950:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 8001954:	4937      	ldr	r1, [pc, #220]	; (8001a34 <update_note_tables+0x170>)
	current_Cs_SAMPLES = Cs_SAMPLES[activeOctave];
 8001956:	6010      	str	r0, [r2, #0]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 8001958:	4c37      	ldr	r4, [pc, #220]	; (8001a38 <update_note_tables+0x174>)
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 800195a:	4a38      	ldr	r2, [pc, #224]	; (8001a3c <update_note_tables+0x178>)
 800195c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 8001960:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	current_D_SAMPLES = D_SAMPLES[activeOctave];
 8001964:	6011      	str	r1, [r2, #0]
	current_E_SAMPLES = E_SAMPLES[activeOctave];
 8001966:	4936      	ldr	r1, [pc, #216]	; (8001a40 <update_note_tables+0x17c>)
 8001968:	4a36      	ldr	r2, [pc, #216]	; (8001a44 <update_note_tables+0x180>)
 800196a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 800196e:	4836      	ldr	r0, [pc, #216]	; (8001a48 <update_note_tables+0x184>)
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 8001970:	4d36      	ldr	r5, [pc, #216]	; (8001a4c <update_note_tables+0x188>)
	current_E_SAMPLES = E_SAMPLES[activeOctave];
 8001972:	6011      	str	r1, [r2, #0]
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 8001974:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <update_note_tables+0x18c>)
 8001976:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
	current_Ds_SAMPLES = Ds_SAMPLES[activeOctave];
 800197a:	6004      	str	r4, [r0, #0]
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 800197c:	4835      	ldr	r0, [pc, #212]	; (8001a54 <update_note_tables+0x190>)
	current_F_SAMPLES = F_SAMPLES[activeOctave];
 800197e:	6015      	str	r5, [r2, #0]
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 8001980:	4a35      	ldr	r2, [pc, #212]	; (8001a58 <update_note_tables+0x194>)
 8001982:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 8001986:	4935      	ldr	r1, [pc, #212]	; (8001a5c <update_note_tables+0x198>)
	current_Fs_SAMPLES = Fs_SAMPLES[activeOctave];
 8001988:	6010      	str	r0, [r2, #0]
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 800198a:	4a35      	ldr	r2, [pc, #212]	; (8001a60 <update_note_tables+0x19c>)
 800198c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 8001990:	4c34      	ldr	r4, [pc, #208]	; (8001a64 <update_note_tables+0x1a0>)
	current_G_SAMPLES = G_SAMPLES[activeOctave];
 8001992:	6011      	str	r1, [r2, #0]
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 8001994:	4934      	ldr	r1, [pc, #208]	; (8001a68 <update_note_tables+0x1a4>)
 8001996:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 800199a:	4c34      	ldr	r4, [pc, #208]	; (8001a6c <update_note_tables+0x1a8>)
	current_Gs_SAMPLES = Gs_SAMPLES[activeOctave];
 800199c:	600d      	str	r5, [r1, #0]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 800199e:	4834      	ldr	r0, [pc, #208]	; (8001a70 <update_note_tables+0x1ac>)
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 80019a0:	4934      	ldr	r1, [pc, #208]	; (8001a74 <update_note_tables+0x1b0>)
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 80019a2:	4a35      	ldr	r2, [pc, #212]	; (8001a78 <update_note_tables+0x1b4>)
	current_A_SAMPLES = A_SAMPLES[activeOctave];
 80019a4:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80019a8:	600c      	str	r4, [r1, #0]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 80019aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 80019ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 80019b2:	4932      	ldr	r1, [pc, #200]	; (8001a7c <update_note_tables+0x1b8>)
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 80019b4:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <update_note_tables+0x1bc>)
	current_As_SAMPLES = As_SAMPLES[activeOctave];
 80019b6:	6008      	str	r0, [r1, #0]

}
 80019b8:	bc30      	pop	{r4, r5}
	current_B_SAMPLES = B_SAMPLES[activeOctave];
 80019ba:	601a      	str	r2, [r3, #0]
}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000188 	.word	0x20000188
 80019c4:	2000008c 	.word	0x2000008c
 80019c8:	20000438 	.word	0x20000438
 80019cc:	200000a8 	.word	0x200000a8
 80019d0:	20000440 	.word	0x20000440
 80019d4:	200000c4 	.word	0x200000c4
 80019d8:	20000448 	.word	0x20000448
 80019dc:	200000e0 	.word	0x200000e0
 80019e0:	20000450 	.word	0x20000450
 80019e4:	200000fc 	.word	0x200000fc
 80019e8:	20000458 	.word	0x20000458
 80019ec:	20000118 	.word	0x20000118
 80019f0:	20000460 	.word	0x20000460
 80019f4:	20000134 	.word	0x20000134
 80019f8:	20000468 	.word	0x20000468
 80019fc:	20000150 	.word	0x20000150
 8001a00:	20000470 	.word	0x20000470
 8001a04:	2000016c 	.word	0x2000016c
 8001a08:	20000478 	.word	0x20000478
 8001a0c:	20000038 	.word	0x20000038
 8001a10:	20000420 	.word	0x20000420
 8001a14:	20000054 	.word	0x20000054
 8001a18:	20000428 	.word	0x20000428
 8001a1c:	20000070 	.word	0x20000070
 8001a20:	20000430 	.word	0x20000430
 8001a24:	08014acc 	.word	0x08014acc
 8001a28:	20000434 	.word	0x20000434
 8001a2c:	0801a478 	.word	0x0801a478
 8001a30:	2000043c 	.word	0x2000043c
 8001a34:	0801f920 	.word	0x0801f920
 8001a38:	08024904 	.word	0x08024904
 8001a3c:	20000444 	.word	0x20000444
 8001a40:	0802946c 	.word	0x0802946c
 8001a44:	20000454 	.word	0x20000454
 8001a48:	2000044c 	.word	0x2000044c
 8001a4c:	0802db9c 	.word	0x0802db9c
 8001a50:	2000045c 	.word	0x2000045c
 8001a54:	08031ed4 	.word	0x08031ed4
 8001a58:	20000464 	.word	0x20000464
 8001a5c:	08035e44 	.word	0x08035e44
 8001a60:	2000046c 	.word	0x2000046c
 8001a64:	08039a2c 	.word	0x08039a2c
 8001a68:	20000474 	.word	0x20000474
 8001a6c:	0800840c 	.word	0x0800840c
 8001a70:	0800b970 	.word	0x0800b970
 8001a74:	2000041c 	.word	0x2000041c
 8001a78:	0800ebd0 	.word	0x0800ebd0
 8001a7c:	20000424 	.word	0x20000424
 8001a80:	2000042c 	.word	0x2000042c

08001a84 <tranposition__increment_octave>:
	switch (activeOctave) {
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <tranposition__increment_octave+0x48>)
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	2a05      	cmp	r2, #5
 8001a8a:	d81c      	bhi.n	8001ac6 <tranposition__increment_octave+0x42>
 8001a8c:	e8df f002 	tbb	[pc, r2]
 8001a90:	130f0307 	.word	0x130f0307
 8001a94:	0b17      	.short	0x0b17
 8001a96:	2202      	movs	r2, #2
		activeOctave = OCTAVE_2;
 8001a98:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001a9a:	f7ff bf13 	b.w	80018c4 <update_note_tables>
	switch (activeOctave) {
 8001a9e:	2201      	movs	r2, #1
		activeOctave = OCTAVE_2;
 8001aa0:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001aa2:	f7ff bf0f 	b.w	80018c4 <update_note_tables>
		break;
 8001aa6:	2206      	movs	r2, #6
		activeOctave = OCTAVE_2;
 8001aa8:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001aaa:	f7ff bf0b 	b.w	80018c4 <update_note_tables>
		break;
 8001aae:	2203      	movs	r2, #3
		activeOctave = OCTAVE_2;
 8001ab0:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001ab2:	f7ff bf07 	b.w	80018c4 <update_note_tables>
		break;
 8001ab6:	2204      	movs	r2, #4
		activeOctave = OCTAVE_2;
 8001ab8:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001aba:	f7ff bf03 	b.w	80018c4 <update_note_tables>
		break;
 8001abe:	2205      	movs	r2, #5
		activeOctave = OCTAVE_2;
 8001ac0:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001ac2:	f7ff beff 	b.w	80018c4 <update_note_tables>
		break;
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	e7e6      	b.n	8001a98 <tranposition__increment_octave+0x14>
 8001aca:	bf00      	nop
 8001acc:	20000188 	.word	0x20000188

08001ad0 <tranposition__decrement_octave>:
	switch (activeOctave) {
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <tranposition__decrement_octave+0x48>)
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	2a05      	cmp	r2, #5
 8001ad6:	d81c      	bhi.n	8001b12 <tranposition__decrement_octave+0x42>
 8001ad8:	e8df f002 	tbb	[pc, r2]
 8001adc:	130f0307 	.word	0x130f0307
 8001ae0:	0b17      	.short	0x0b17
 8001ae2:	2200      	movs	r2, #0
		activeOctave = OCTAVE_7;
 8001ae4:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001ae6:	f7ff beed 	b.w	80018c4 <update_note_tables>
	switch (activeOctave) {
 8001aea:	2206      	movs	r2, #6
		activeOctave = OCTAVE_7;
 8001aec:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001aee:	f7ff bee9 	b.w	80018c4 <update_note_tables>
		break;
 8001af2:	2204      	movs	r2, #4
		activeOctave = OCTAVE_7;
 8001af4:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001af6:	f7ff bee5 	b.w	80018c4 <update_note_tables>
		break;
 8001afa:	2201      	movs	r2, #1
		activeOctave = OCTAVE_7;
 8001afc:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001afe:	f7ff bee1 	b.w	80018c4 <update_note_tables>
		break;
 8001b02:	2202      	movs	r2, #2
		activeOctave = OCTAVE_7;
 8001b04:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001b06:	f7ff bedd 	b.w	80018c4 <update_note_tables>
		break;
 8001b0a:	2203      	movs	r2, #3
		activeOctave = OCTAVE_7;
 8001b0c:	701a      	strb	r2, [r3, #0]
	update_note_tables();
 8001b0e:	f7ff bed9 	b.w	80018c4 <update_note_tables>
		break;
 8001b12:	2205      	movs	r2, #5
 8001b14:	e7e6      	b.n	8001ae4 <tranposition__decrement_octave+0x14>
 8001b16:	bf00      	nop
 8001b18:	20000188 	.word	0x20000188

08001b1c <tranposition__note_update>:
	/****************************************************************
		 This first section of Code is to handle the reseting of each index.
		 Normally this would be done at the end, but since we might be switching octaves
		 we need to make sure that our indexes are restarted.
	*********************************************************************/
		if (my_index[NOTE_C] > current_C_SAMPLES)
 8001b1c:	4bad      	ldr	r3, [pc, #692]	; (8001dd4 <tranposition__note_update+0x2b8>)
 8001b1e:	4aae      	ldr	r2, [pc, #696]	; (8001dd8 <tranposition__note_update+0x2bc>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	6812      	ldr	r2, [r2, #0]
			my_index[NOTE_C] = 0;
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001b24:	6859      	ldr	r1, [r3, #4]
		if (my_index[NOTE_C] > current_C_SAMPLES)
 8001b26:	4290      	cmp	r0, r2
			my_index[NOTE_C] = 0;
 8001b28:	bfc8      	it	gt
 8001b2a:	2000      	movgt	r0, #0
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001b2c:	4aab      	ldr	r2, [pc, #684]	; (8001ddc <tranposition__note_update+0x2c0>)
int tranposition__note_update() {
 8001b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			my_index[NOTE_C] = 0;
 8001b32:	bfc8      	it	gt
 8001b34:	6018      	strgt	r0, [r3, #0]
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001b36:	6812      	ldr	r2, [r2, #0]
			my_index[NOTE_Cs] = 0;
		if (my_index[NOTE_D] > current_D_SAMPLES)
 8001b38:	689c      	ldr	r4, [r3, #8]
			my_index[NOTE_D] = 0;
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001b3a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
		if (my_index[NOTE_Cs] > current_Cs_SAMPLES)
 8001b3e:	4291      	cmp	r1, r2
			my_index[NOTE_Cs] = 0;
 8001b40:	bfc8      	it	gt
 8001b42:	2100      	movgt	r1, #0
		if (my_index[NOTE_D] > current_D_SAMPLES)
 8001b44:	4aa6      	ldr	r2, [pc, #664]	; (8001de0 <tranposition__note_update+0x2c4>)
			my_index[NOTE_Cs] = 0;
 8001b46:	bfc8      	it	gt
 8001b48:	6059      	strgt	r1, [r3, #4]
		if (my_index[NOTE_D] > current_D_SAMPLES)
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	4294      	cmp	r4, r2
			my_index[NOTE_D] = 0;
 8001b4e:	bfc8      	it	gt
 8001b50:	2400      	movgt	r4, #0
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001b52:	4aa4      	ldr	r2, [pc, #656]	; (8001de4 <tranposition__note_update+0x2c8>)
			my_index[NOTE_D] = 0;
 8001b54:	bfc8      	it	gt
 8001b56:	609c      	strgt	r4, [r3, #8]
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	4592      	cmp	sl, r2
int tranposition__note_update() {
 8001b5c:	b08f      	sub	sp, #60	; 0x3c
		if (my_index[NOTE_Ds] > current_Ds_SAMPLES)
 8001b5e:	dd02      	ble.n	8001b66 <tranposition__note_update+0x4a>
			my_index[NOTE_Ds] = 0;
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	4692      	mov	sl, r2
		if (my_index[NOTE_E] > current_E_SAMPLES)
 8001b66:	4aa0      	ldr	r2, [pc, #640]	; (8001de8 <tranposition__note_update+0x2cc>)
 8001b68:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	4591      	cmp	r9, r2
 8001b70:	dd02      	ble.n	8001b78 <tranposition__note_update+0x5c>
			my_index[NOTE_E] = 0;
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	4691      	mov	r9, r2
		if (my_index[NOTE_F] > current_F_SAMPLES)
 8001b78:	4a9c      	ldr	r2, [pc, #624]	; (8001dec <tranposition__note_update+0x2d0>)
 8001b7a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	4590      	cmp	r8, r2
 8001b82:	dd02      	ble.n	8001b8a <tranposition__note_update+0x6e>
			my_index[NOTE_F] = 0;
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	4690      	mov	r8, r2
		if (my_index[NOTE_Fs] > current_Fs_SAMPLES)
 8001b8a:	4a99      	ldr	r2, [pc, #612]	; (8001df0 <tranposition__note_update+0x2d4>)
 8001b8c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	4596      	cmp	lr, r2
 8001b94:	dd02      	ble.n	8001b9c <tranposition__note_update+0x80>
			my_index[NOTE_Fs] = 0;
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
 8001b9a:	4696      	mov	lr, r2
		if (my_index[NOTE_G] > current_G_SAMPLES)
 8001b9c:	4a95      	ldr	r2, [pc, #596]	; (8001df4 <tranposition__note_update+0x2d8>)
 8001b9e:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	4594      	cmp	ip, r2
 8001ba6:	dd02      	ble.n	8001bae <tranposition__note_update+0x92>
			my_index[NOTE_G] = 0;
 8001ba8:	2200      	movs	r2, #0
 8001baa:	61da      	str	r2, [r3, #28]
 8001bac:	4694      	mov	ip, r2
		if (my_index[NOTE_Gs] > current_Gs_SAMPLES)
 8001bae:	4a92      	ldr	r2, [pc, #584]	; (8001df8 <tranposition__note_update+0x2dc>)
 8001bb0:	6a1f      	ldr	r7, [r3, #32]
 8001bb2:	6812      	ldr	r2, [r2, #0]
			my_index[NOTE_Gs] = 0;
		if (my_index[NOTE_A] > current_A_SAMPLES)
 8001bb4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
			my_index[NOTE_A] = 0;
		if (my_index[NOTE_As] > current_As_SAMPLES)
 8001bb6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
		if (my_index[NOTE_Gs] > current_Gs_SAMPLES)
 8001bb8:	4297      	cmp	r7, r2
			my_index[NOTE_Gs] = 0;
 8001bba:	bfc8      	it	gt
 8001bbc:	2700      	movgt	r7, #0
		if (my_index[NOTE_A] > current_A_SAMPLES)
 8001bbe:	4a8f      	ldr	r2, [pc, #572]	; (8001dfc <tranposition__note_update+0x2e0>)
			my_index[NOTE_Gs] = 0;
 8001bc0:	bfc8      	it	gt
 8001bc2:	621f      	strgt	r7, [r3, #32]
		if (my_index[NOTE_A] > current_A_SAMPLES)
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	4296      	cmp	r6, r2
			my_index[NOTE_A] = 0;
 8001bc8:	bfc8      	it	gt
 8001bca:	2600      	movgt	r6, #0
		if (my_index[NOTE_As] > current_As_SAMPLES)
 8001bcc:	4a8c      	ldr	r2, [pc, #560]	; (8001e00 <tranposition__note_update+0x2e4>)
			my_index[NOTE_A] = 0;
 8001bce:	bfc8      	it	gt
 8001bd0:	625e      	strgt	r6, [r3, #36]	; 0x24
		if (my_index[NOTE_As] > current_As_SAMPLES)
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	9500      	str	r5, [sp, #0]
 8001bd6:	4295      	cmp	r5, r2
 8001bd8:	dd02      	ble.n	8001be0 <tranposition__note_update+0xc4>
			my_index[NOTE_As] = 0;
 8001bda:	2200      	movs	r2, #0
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
 8001bde:	9200      	str	r2, [sp, #0]
		if (my_index[NOTE_B] > current_B_SAMPLES)
 8001be0:	4a88      	ldr	r2, [pc, #544]	; (8001e04 <tranposition__note_update+0x2e8>)
 8001be2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	9501      	str	r5, [sp, #4]
 8001be8:	4295      	cmp	r5, r2
 8001bea:	dd02      	ble.n	8001bf2 <tranposition__note_update+0xd6>
			my_index[NOTE_B] = 0;
 8001bec:	2200      	movs	r2, #0
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bf0:	9201      	str	r2, [sp, #4]
	 * This first batch of values is to look update the value for each Note.
	 * By using a list and different indexes we can speed up the program with good spatial locality
	 * If the note is active then we update the value. Otherwise we return a zero.
	 ***************************************************************************/
	int wave_out =0;
	wave_out	+= active[NOTE_C] ? (current_C_TABLE[my_index[NOTE_C]] * decay_value_C) : 0;
 8001bf2:	4a85      	ldr	r2, [pc, #532]	; (8001e08 <tranposition__note_update+0x2ec>)
 8001bf4:	6815      	ldr	r5, [r2, #0]
 8001bf6:	9502      	str	r5, [sp, #8]
 8001bf8:	2d00      	cmp	r5, #0
 8001bfa:	f000 8177 	beq.w	8001eec <tranposition__note_update+0x3d0>
 8001bfe:	4d83      	ldr	r5, [pc, #524]	; (8001e0c <tranposition__note_update+0x2f0>)
 8001c00:	682d      	ldr	r5, [r5, #0]
 8001c02:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8001c06:	edd5 7a00 	vldr	s15, [r5]
 8001c0a:	4d81      	ldr	r5, [pc, #516]	; (8001e10 <tranposition__note_update+0x2f4>)
 8001c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c10:	ed95 7a00 	vldr	s14, [r5]
 8001c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out	+= active[NOTE_Cs] ? (current_Cs_TABLE[my_index[NOTE_Cs]] * decay_value_Cs) : 0;
 8001c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c20:	6855      	ldr	r5, [r2, #4]
 8001c22:	9503      	str	r5, [sp, #12]
 8001c24:	b165      	cbz	r5, 8001c40 <tranposition__note_update+0x124>
 8001c26:	4d7b      	ldr	r5, [pc, #492]	; (8001e14 <tranposition__note_update+0x2f8>)
 8001c28:	682d      	ldr	r5, [r5, #0]
 8001c2a:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8001c2e:	ed95 7a00 	vldr	s14, [r5]
 8001c32:	4d79      	ldr	r5, [pc, #484]	; (8001e18 <tranposition__note_update+0x2fc>)
 8001c34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c38:	edd5 6a00 	vldr	s13, [r5]
 8001c3c:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_D] ? (current_D_TABLE[my_index[NOTE_D]] * decay_value_D) : 0;
 8001c40:	6895      	ldr	r5, [r2, #8]
 8001c42:	9504      	str	r5, [sp, #16]
	wave_out	+= active[NOTE_Cs] ? (current_Cs_TABLE[my_index[NOTE_Cs]] * decay_value_Cs) : 0;
 8001c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_D] ? (current_D_TABLE[my_index[NOTE_D]] * decay_value_D) : 0;
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	b165      	cbz	r5, 8001c68 <tranposition__note_update+0x14c>
 8001c4e:	4d73      	ldr	r5, [pc, #460]	; (8001e1c <tranposition__note_update+0x300>)
 8001c50:	682d      	ldr	r5, [r5, #0]
 8001c52:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8001c56:	ed95 7a00 	vldr	s14, [r5]
 8001c5a:	4d71      	ldr	r5, [pc, #452]	; (8001e20 <tranposition__note_update+0x304>)
 8001c5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c60:	edd5 6a00 	vldr	s13, [r5]
 8001c64:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_Ds] ? (current_Ds_TABLE[my_index[NOTE_Ds]] *decay_value_Ds) : 0;
 8001c68:	68d5      	ldr	r5, [r2, #12]
 8001c6a:	9505      	str	r5, [sp, #20]
	wave_out 	+= active[NOTE_D] ? (current_D_TABLE[my_index[NOTE_D]] * decay_value_D) : 0;
 8001c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_Ds] ? (current_Ds_TABLE[my_index[NOTE_Ds]] *decay_value_Ds) : 0;
 8001c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c74:	b165      	cbz	r5, 8001c90 <tranposition__note_update+0x174>
 8001c76:	4d6b      	ldr	r5, [pc, #428]	; (8001e24 <tranposition__note_update+0x308>)
 8001c78:	682d      	ldr	r5, [r5, #0]
 8001c7a:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 8001c7e:	ed95 7a00 	vldr	s14, [r5]
 8001c82:	4d69      	ldr	r5, [pc, #420]	; (8001e28 <tranposition__note_update+0x30c>)
 8001c84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c88:	edd5 6a00 	vldr	s13, [r5]
 8001c8c:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_E] ? (current_E_TABLE[my_index[NOTE_E]] * decay_value_E) : 0;
 8001c90:	6915      	ldr	r5, [r2, #16]
 8001c92:	9506      	str	r5, [sp, #24]
	wave_out 	+= active[NOTE_Ds] ? (current_Ds_TABLE[my_index[NOTE_Ds]] *decay_value_Ds) : 0;
 8001c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_E] ? (current_E_TABLE[my_index[NOTE_E]] * decay_value_E) : 0;
 8001c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9c:	b165      	cbz	r5, 8001cb8 <tranposition__note_update+0x19c>
 8001c9e:	4d63      	ldr	r5, [pc, #396]	; (8001e2c <tranposition__note_update+0x310>)
 8001ca0:	682d      	ldr	r5, [r5, #0]
 8001ca2:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001ca6:	ed95 7a00 	vldr	s14, [r5]
 8001caa:	4d61      	ldr	r5, [pc, #388]	; (8001e30 <tranposition__note_update+0x314>)
 8001cac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001cb0:	edd5 6a00 	vldr	s13, [r5]
 8001cb4:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_F] ? (current_F_TABLE[my_index[NOTE_F]] * decay_value_F) : 0;
 8001cb8:	6955      	ldr	r5, [r2, #20]
 8001cba:	9507      	str	r5, [sp, #28]
	wave_out 	+= active[NOTE_E] ? (current_E_TABLE[my_index[NOTE_E]] * decay_value_E) : 0;
 8001cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_F] ? (current_F_TABLE[my_index[NOTE_F]] * decay_value_F) : 0;
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	b165      	cbz	r5, 8001ce0 <tranposition__note_update+0x1c4>
 8001cc6:	4d5b      	ldr	r5, [pc, #364]	; (8001e34 <tranposition__note_update+0x318>)
 8001cc8:	682d      	ldr	r5, [r5, #0]
 8001cca:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 8001cce:	ed95 7a00 	vldr	s14, [r5]
 8001cd2:	4d59      	ldr	r5, [pc, #356]	; (8001e38 <tranposition__note_update+0x31c>)
 8001cd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001cd8:	edd5 6a00 	vldr	s13, [r5]
 8001cdc:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_Fs] ? (current_Fs_TABLE[my_index[NOTE_Fs]] * decay_value_Fs) : 0;
 8001ce0:	6995      	ldr	r5, [r2, #24]
 8001ce2:	9508      	str	r5, [sp, #32]
	wave_out 	+= active[NOTE_F] ? (current_F_TABLE[my_index[NOTE_F]] * decay_value_F) : 0;
 8001ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_Fs] ? (current_Fs_TABLE[my_index[NOTE_Fs]] * decay_value_Fs) : 0;
 8001ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cec:	b165      	cbz	r5, 8001d08 <tranposition__note_update+0x1ec>
 8001cee:	4d53      	ldr	r5, [pc, #332]	; (8001e3c <tranposition__note_update+0x320>)
 8001cf0:	682d      	ldr	r5, [r5, #0]
 8001cf2:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8001cf6:	ed95 7a00 	vldr	s14, [r5]
 8001cfa:	4d51      	ldr	r5, [pc, #324]	; (8001e40 <tranposition__note_update+0x324>)
 8001cfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d00:	edd5 6a00 	vldr	s13, [r5]
 8001d04:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_G] ? (current_G_TABLE[my_index[NOTE_G]] * decay_value_G) : 0;
 8001d08:	69d5      	ldr	r5, [r2, #28]
 8001d0a:	9509      	str	r5, [sp, #36]	; 0x24
	wave_out 	+= active[NOTE_Fs] ? (current_Fs_TABLE[my_index[NOTE_Fs]] * decay_value_Fs) : 0;
 8001d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_G] ? (current_G_TABLE[my_index[NOTE_G]] * decay_value_G) : 0;
 8001d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d14:	b165      	cbz	r5, 8001d30 <tranposition__note_update+0x214>
 8001d16:	4d4b      	ldr	r5, [pc, #300]	; (8001e44 <tranposition__note_update+0x328>)
 8001d18:	682d      	ldr	r5, [r5, #0]
 8001d1a:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8001d1e:	ed95 7a00 	vldr	s14, [r5]
 8001d22:	4d49      	ldr	r5, [pc, #292]	; (8001e48 <tranposition__note_update+0x32c>)
 8001d24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d28:	edd5 6a00 	vldr	s13, [r5]
 8001d2c:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_Gs] ? (current_Gs_TABLE[my_index[NOTE_Gs]] * decay_value_Gs): 0;
 8001d30:	6a15      	ldr	r5, [r2, #32]
 8001d32:	950a      	str	r5, [sp, #40]	; 0x28
	wave_out 	+= active[NOTE_G] ? (current_G_TABLE[my_index[NOTE_G]] * decay_value_G) : 0;
 8001d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_Gs] ? (current_Gs_TABLE[my_index[NOTE_Gs]] * decay_value_Gs): 0;
 8001d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3c:	b165      	cbz	r5, 8001d58 <tranposition__note_update+0x23c>
 8001d3e:	4d43      	ldr	r5, [pc, #268]	; (8001e4c <tranposition__note_update+0x330>)
 8001d40:	682d      	ldr	r5, [r5, #0]
 8001d42:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8001d46:	ed95 7a00 	vldr	s14, [r5]
 8001d4a:	4d41      	ldr	r5, [pc, #260]	; (8001e50 <tranposition__note_update+0x334>)
 8001d4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d50:	edd5 6a00 	vldr	s13, [r5]
 8001d54:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_A] ? (current_A_TABLE[my_index[NOTE_A]] * decay_value_A) : 0;
 8001d58:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8001d5a:	950b      	str	r5, [sp, #44]	; 0x2c
	wave_out 	+= active[NOTE_Gs] ? (current_Gs_TABLE[my_index[NOTE_Gs]] * decay_value_Gs): 0;
 8001d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_A] ? (current_A_TABLE[my_index[NOTE_A]] * decay_value_A) : 0;
 8001d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d64:	b165      	cbz	r5, 8001d80 <tranposition__note_update+0x264>
 8001d66:	4d3b      	ldr	r5, [pc, #236]	; (8001e54 <tranposition__note_update+0x338>)
 8001d68:	682d      	ldr	r5, [r5, #0]
 8001d6a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8001d6e:	ed95 7a00 	vldr	s14, [r5]
 8001d72:	4d39      	ldr	r5, [pc, #228]	; (8001e58 <tranposition__note_update+0x33c>)
 8001d74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d78:	edd5 6a00 	vldr	s13, [r5]
 8001d7c:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_As] ? (current_As_TABLE[my_index[NOTE_As]] * decay_value_As) : 0;
 8001d80:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8001d82:	950c      	str	r5, [sp, #48]	; 0x30
	wave_out 	+= active[NOTE_A] ? (current_A_TABLE[my_index[NOTE_A]] * decay_value_A) : 0;
 8001d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_As] ? (current_As_TABLE[my_index[NOTE_As]] * decay_value_As) : 0;
 8001d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8c:	b185      	cbz	r5, 8001db0 <tranposition__note_update+0x294>
 8001d8e:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8001e5c <tranposition__note_update+0x340>
 8001d92:	9d00      	ldr	r5, [sp, #0]
 8001d94:	f8db b000 	ldr.w	fp, [fp]
 8001d98:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8001d9c:	ed95 7a00 	vldr	s14, [r5]
 8001da0:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 8001e60 <tranposition__note_update+0x344>
 8001da4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001da8:	eddb 6a00 	vldr	s13, [fp]
 8001dac:	eee7 7a26 	vfma.f32	s15, s14, s13
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8001db0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001db2:	920d      	str	r2, [sp, #52]	; 0x34
	wave_out 	+= active[NOTE_As] ? (current_As_TABLE[my_index[NOTE_As]] * decay_value_As) : 0;
 8001db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	2a00      	cmp	r2, #0
 8001dbe:	d05b      	beq.n	8001e78 <tranposition__note_update+0x35c>
 8001dc0:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8001e64 <tranposition__note_update+0x348>
 8001dc4:	9a01      	ldr	r2, [sp, #4]
 8001dc6:	f8db b000 	ldr.w	fp, [fp]
 8001dca:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8001dce:	ed92 7a00 	vldr	s14, [r2]
 8001dd2:	e049      	b.n	8001e68 <tranposition__note_update+0x34c>
 8001dd4:	20000364 	.word	0x20000364
 8001dd8:	20000434 	.word	0x20000434
 8001ddc:	2000043c 	.word	0x2000043c
 8001de0:	20000444 	.word	0x20000444
 8001de4:	2000044c 	.word	0x2000044c
 8001de8:	20000454 	.word	0x20000454
 8001dec:	2000045c 	.word	0x2000045c
 8001df0:	20000464 	.word	0x20000464
 8001df4:	2000046c 	.word	0x2000046c
 8001df8:	20000474 	.word	0x20000474
 8001dfc:	2000041c 	.word	0x2000041c
 8001e00:	20000424 	.word	0x20000424
 8001e04:	2000042c 	.word	0x2000042c
 8001e08:	200001ac 	.word	0x200001ac
 8001e0c:	20000438 	.word	0x20000438
 8001e10:	20000010 	.word	0x20000010
 8001e14:	20000440 	.word	0x20000440
 8001e18:	20000014 	.word	0x20000014
 8001e1c:	20000448 	.word	0x20000448
 8001e20:	20000018 	.word	0x20000018
 8001e24:	20000450 	.word	0x20000450
 8001e28:	2000001c 	.word	0x2000001c
 8001e2c:	20000458 	.word	0x20000458
 8001e30:	20000020 	.word	0x20000020
 8001e34:	20000460 	.word	0x20000460
 8001e38:	20000024 	.word	0x20000024
 8001e3c:	20000468 	.word	0x20000468
 8001e40:	20000028 	.word	0x20000028
 8001e44:	20000470 	.word	0x20000470
 8001e48:	2000002c 	.word	0x2000002c
 8001e4c:	20000478 	.word	0x20000478
 8001e50:	20000030 	.word	0x20000030
 8001e54:	20000420 	.word	0x20000420
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	20000428 	.word	0x20000428
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000430 	.word	0x20000430
 8001e68:	f8df b08c 	ldr.w	fp, [pc, #140]	; 8001ef8 <tranposition__note_update+0x3dc>
 8001e6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e70:	eddb 6a00 	vldr	s13, [fp]
 8001e74:	eee7 7a26 	vfma.f32	s15, s14, s13

	/* ***************************************************************
	 This batch of code is to just update the index if the note is active.
	 Since the active list should only ever hold a 0 or a 1, this code works. Avoid if statements
	 ***************************************************************************/
	my_index[NOTE_C] += active[NOTE_C];
 8001e78:	9a02      	ldr	r2, [sp, #8]
	my_index[NOTE_F] += active[NOTE_F];
	my_index[NOTE_Fs] += active[NOTE_Fs];
	my_index[NOTE_G] += active[NOTE_G];
	my_index[NOTE_Gs] += active[NOTE_Gs];
	my_index[NOTE_A] += active[NOTE_A];
	my_index[NOTE_As] += active[NOTE_As];
 8001e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	my_index[NOTE_C] += active[NOTE_C];
 8001e7c:	4402      	add	r2, r0
 8001e7e:	4610      	mov	r0, r2
	my_index[NOTE_Cs] += active[NOTE_Cs];
 8001e80:	9a03      	ldr	r2, [sp, #12]
 8001e82:	440a      	add	r2, r1
 8001e84:	4693      	mov	fp, r2
	my_index[NOTE_D] += active[NOTE_D];
 8001e86:	9a04      	ldr	r2, [sp, #16]
	my_index[NOTE_B] += active[NOTE_B];
 8001e88:	990d      	ldr	r1, [sp, #52]	; 0x34
	my_index[NOTE_D] += active[NOTE_D];
 8001e8a:	4422      	add	r2, r4
 8001e8c:	4614      	mov	r4, r2
	my_index[NOTE_Ds] += active[NOTE_Ds];
 8001e8e:	9a05      	ldr	r2, [sp, #20]
 8001e90:	4452      	add	r2, sl
 8001e92:	4692      	mov	sl, r2
	my_index[NOTE_E] += active[NOTE_E];
 8001e94:	9a06      	ldr	r2, [sp, #24]
 8001e96:	444a      	add	r2, r9
 8001e98:	4691      	mov	r9, r2
	my_index[NOTE_F] += active[NOTE_F];
 8001e9a:	9a07      	ldr	r2, [sp, #28]
 8001e9c:	4442      	add	r2, r8
 8001e9e:	4690      	mov	r8, r2
	my_index[NOTE_Fs] += active[NOTE_Fs];
 8001ea0:	9a08      	ldr	r2, [sp, #32]
 8001ea2:	4472      	add	r2, lr
 8001ea4:	4696      	mov	lr, r2
	my_index[NOTE_G] += active[NOTE_G];
 8001ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ea8:	4462      	add	r2, ip
 8001eaa:	4694      	mov	ip, r2
	my_index[NOTE_Gs] += active[NOTE_Gs];
 8001eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001eae:	443a      	add	r2, r7
 8001eb0:	4617      	mov	r7, r2
	my_index[NOTE_A] += active[NOTE_A];
 8001eb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001eb4:	4432      	add	r2, r6
 8001eb6:	4616      	mov	r6, r2
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8001eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	my_index[NOTE_As] += active[NOTE_As];
 8001ebc:	9a00      	ldr	r2, [sp, #0]
 8001ebe:	4415      	add	r5, r2
	my_index[NOTE_B] += active[NOTE_B];
 8001ec0:	9a01      	ldr	r2, [sp, #4]
	my_index[NOTE_Gs] += active[NOTE_Gs];
 8001ec2:	621f      	str	r7, [r3, #32]
	my_index[NOTE_Cs] += active[NOTE_Cs];
 8001ec4:	e9c3 0b00 	strd	r0, fp, [r3]
	wave_out 	+= active[NOTE_B] ? (current_B_TABLE[my_index[NOTE_B]] * decay_value_B) : 0;
 8001ec8:	ee17 0a90 	vmov	r0, s15



	return	wave_out * 12;
 8001ecc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	my_index[NOTE_B] += active[NOTE_B];
 8001ed0:	4411      	add	r1, r2

}
 8001ed2:	0080      	lsls	r0, r0, #2
	my_index[NOTE_Ds] += active[NOTE_Ds];
 8001ed4:	e9c3 4a02 	strd	r4, sl, [r3, #8]
	my_index[NOTE_F] += active[NOTE_F];
 8001ed8:	e9c3 9804 	strd	r9, r8, [r3, #16]
	my_index[NOTE_G] += active[NOTE_G];
 8001edc:	e9c3 ec06 	strd	lr, ip, [r3, #24]
	my_index[NOTE_B] += active[NOTE_B];
 8001ee0:	e9c3 510a 	strd	r5, r1, [r3, #40]	; 0x28
	my_index[NOTE_A] += active[NOTE_A];
 8001ee4:	625e      	str	r6, [r3, #36]	; 0x24
}
 8001ee6:	b00f      	add	sp, #60	; 0x3c
 8001ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eec:	eddf 7a01 	vldr	s15, [pc, #4]	; 8001ef4 <tranposition__note_update+0x3d8>
 8001ef0:	e696      	b.n	8001c20 <tranposition__note_update+0x104>
 8001ef2:	bf00      	nop
 8001ef4:	00000000 	.word	0x00000000
 8001ef8:	2000000c 	.word	0x2000000c

08001efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f00:	f7ff fcd6 	bl	80018b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	; (8001f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <LoopForever+0xe>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <LoopForever+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f002 fda7 	bl	8004a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f2e:	f7fe fb17 	bl	8000560 <main>

08001f32 <LoopForever>:

LoopForever:
    b LoopForever
 8001f32:	e7fe      	b.n	8001f32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001f40:	08039a6c 	.word	0x08039a6c
  ldr r2, =_sbss
 8001f44:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001f48:	20000480 	.word	0x20000480

08001f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC1_2_IRQHandler>
	...

08001f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_InitTick+0x40>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b90b      	cbnz	r3, 8001f5c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f58:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001f5a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f5c:	490d      	ldr	r1, [pc, #52]	; (8001f94 <HAL_InitTick+0x44>)
 8001f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f62:	4605      	mov	r5, r0
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	6808      	ldr	r0, [r1, #0]
 8001f6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f6e:	f000 f8af 	bl	80020d0 <HAL_SYSTICK_Config>
 8001f72:	4604      	mov	r4, r0
 8001f74:	2800      	cmp	r0, #0
 8001f76:	d1ef      	bne.n	8001f58 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f78:	2d0f      	cmp	r5, #15
 8001f7a:	d8ed      	bhi.n	8001f58 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4629      	mov	r1, r5
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f000 f858 	bl	8002038 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_InitTick+0x48>)
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	601d      	str	r5, [r3, #0]
}
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
 8001f90:	20000189 	.word	0x20000189
 8001f94:	20000034 	.word	0x20000034
 8001f98:	2000018c 	.word	0x2000018c

08001f9c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <HAL_Init+0x2c>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001fa4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001faa:	f000 f833 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7ff ffce 	bl	8001f50 <HAL_InitTick>
 8001fb4:	b110      	cbz	r0, 8001fbc <HAL_Init+0x20>
    status = HAL_ERROR;
 8001fb6:	2401      	movs	r4, #1
}
 8001fb8:	4620      	mov	r0, r4
 8001fba:	bd10      	pop	{r4, pc}
 8001fbc:	4604      	mov	r4, r0
    HAL_MspInit();
 8001fbe:	f7ff f963 	bl	8001288 <HAL_MspInit>
}
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	bd10      	pop	{r4, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001fcc:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_IncTick+0x10>)
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <HAL_IncTick+0x14>)
 8001fd0:	6811      	ldr	r1, [r2, #0]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	440b      	add	r3, r1
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	2000047c 	.word	0x2000047c
 8001fe0:	20000189 	.word	0x20000189

08001fe4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fe4:	4b01      	ldr	r3, [pc, #4]	; (8001fec <HAL_GetTick+0x8>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	2000047c 	.word	0x2000047c

08001ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff0:	b538      	push	{r3, r4, r5, lr}
 8001ff2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff fff6 	bl	8001fe4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001ffa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001ffc:	d002      	beq.n	8002004 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <HAL_Delay+0x20>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002004:	f7ff ffee 	bl	8001fe4 <HAL_GetTick>
 8002008:	1b43      	subs	r3, r0, r5
 800200a:	42a3      	cmp	r3, r4
 800200c:	d3fa      	bcc.n	8002004 <HAL_Delay+0x14>
  {
  }
}
 800200e:	bd38      	pop	{r3, r4, r5, pc}
 8002010:	20000189 	.word	0x20000189

08002014 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4907      	ldr	r1, [pc, #28]	; (8002034 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002016:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002026:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800202a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800202e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <HAL_NVIC_SetPriority+0x74>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002040:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002042:	f1c3 0e07 	rsb	lr, r3, #7
 8002046:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204e:	bf28      	it	cs
 8002050:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002054:	f1bc 0f06 	cmp.w	ip, #6
 8002058:	d91b      	bls.n	8002092 <HAL_NVIC_SetPriority+0x5a>
 800205a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 3cff 	mov.w	ip, #4294967295
 8002060:	fa0c fc03 	lsl.w	ip, ip, r3
 8002064:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 3cff 	mov.w	ip, #4294967295
 800206c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002070:	ea21 010c 	bic.w	r1, r1, ip
 8002074:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002076:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800207c:	db0c      	blt.n	8002098 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002082:	0109      	lsls	r1, r1, #4
 8002084:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002088:	b2c9      	uxtb	r1, r1
 800208a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800208e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002092:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002094:	4613      	mov	r3, r2
 8002096:	e7e7      	b.n	8002068 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_NVIC_SetPriority+0x78>)
 800209a:	f000 000f 	and.w	r0, r0, #15
 800209e:	0109      	lsls	r1, r1, #4
 80020a0:	4403      	add	r3, r0
 80020a2:	b2c9      	uxtb	r1, r1
 80020a4:	7619      	strb	r1, [r3, #24]
 80020a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00
 80020b0:	e000ecfc 	.word	0xe000ecfc

080020b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020b4:	2800      	cmp	r0, #0
 80020b6:	db07      	blt.n	80020c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_NVIC_EnableIRQ+0x18>)
 80020ba:	0941      	lsrs	r1, r0, #5
 80020bc:	2301      	movs	r3, #1
 80020be:	f000 001f 	and.w	r0, r0, #31
 80020c2:	4083      	lsls	r3, r0
 80020c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d0:	3801      	subs	r0, #1
 80020d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80020d6:	d210      	bcs.n	80020fa <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d8:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	4c08      	ldr	r4, [pc, #32]	; (8002100 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80020e6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ea:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ec:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ee:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80020f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	6119      	str	r1, [r3, #16]
 80020f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2001      	movs	r0, #1
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8002104:	b188      	cbz	r0, 800212a <HAL_DAC_Init+0x26>
{
 8002106:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002108:	7903      	ldrb	r3, [r0, #4]
 800210a:	4604      	mov	r4, r0
 800210c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002110:	b13b      	cbz	r3, 8002122 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002112:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002114:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002116:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002118:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800211a:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800211c:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800211e:	4618      	mov	r0, r3
}
 8002120:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8002122:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002124:	f7ff f8c8 	bl	80012b8 <HAL_DAC_MspInit>
 8002128:	e7f3      	b.n	8002112 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 800212a:	2001      	movs	r0, #1
}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002130:	7943      	ldrb	r3, [r0, #5]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d027      	beq.n	8002186 <HAL_DAC_Start+0x56>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002136:	6802      	ldr	r2, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002138:	2302      	movs	r3, #2
{
 800213a:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 800213c:	7103      	strb	r3, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800213e:	6814      	ldr	r4, [r2, #0]
 8002140:	f001 0c10 	and.w	ip, r1, #16
 8002144:	2301      	movs	r3, #1
 8002146:	fa03 f30c 	lsl.w	r3, r3, ip
 800214a:	4323      	orrs	r3, r4
 800214c:	6013      	str	r3, [r2, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800214e:	6813      	ldr	r3, [r2, #0]
  if(Channel == DAC_CHANNEL_1)
 8002150:	b979      	cbnz	r1, 8002172 <HAL_DAC_Start+0x42>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002152:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002156:	2b04      	cmp	r3, #4
 8002158:	d103      	bne.n	8002162 <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800215a:	6853      	ldr	r3, [r2, #4]
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6053      	str	r3, [r2, #4]
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002162:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 8002164:	2201      	movs	r2, #1
 8002166:	7102      	strb	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8002168:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
}
 800216a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800216e:	4618      	mov	r0, r3
}
 8002170:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002172:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002176:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800217a:	d1f2      	bne.n	8002162 <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800217c:	6853      	ldr	r3, [r2, #4]
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	6053      	str	r3, [r2, #4]
 8002184:	e7ed      	b.n	8002162 <HAL_DAC_Start+0x32>
  __HAL_LOCK(hdac);
 8002186:	2002      	movs	r0, #2
}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800218c:	b410      	push	{r4}
 800218e:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002190:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0;
 8002192:	2400      	movs	r4, #0
 8002194:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8002196:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8002198:	b951      	cbnz	r1, 80021b0 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800219a:	9901      	ldr	r1, [sp, #4]
 800219c:	3108      	adds	r1, #8
 800219e:	440a      	add	r2, r1
 80021a0:	9201      	str	r2, [sp, #4]
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80021a2:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 80021a4:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	b003      	add	sp, #12
 80021aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021ae:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80021b0:	9901      	ldr	r1, [sp, #4]
 80021b2:	3114      	adds	r1, #20
 80021b4:	440a      	add	r2, r1
 80021b6:	9201      	str	r2, [sp, #4]
 80021b8:	e7f3      	b.n	80021a2 <HAL_DAC_SetValue+0x16>
 80021ba:	bf00      	nop

080021bc <HAL_DAC_DMAUnderrunCallbackCh1>:
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop

080021c0 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80021c0:	6803      	ldr	r3, [r0, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	0491      	lsls	r1, r2, #18
{
 80021c6:	b510      	push	{r4, lr}
 80021c8:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80021ca:	d502      	bpl.n	80021d2 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80021cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ce:	0492      	lsls	r2, r2, #18
 80021d0:	d418      	bmi.n	8002204 <HAL_DAC_IRQHandler+0x44>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	0091      	lsls	r1, r2, #2
 80021d6:	d502      	bpl.n	80021de <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80021d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	d400      	bmi.n	80021e0 <HAL_DAC_IRQHandler+0x20>
}
 80021de:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80021e0:	2204      	movs	r2, #4
 80021e2:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80021e4:	6922      	ldr	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80021e6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80021ea:	f042 0202 	orr.w	r2, r2, #2
 80021ee:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80021f0:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80021f8:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002200:	f000 b8a8 	b.w	8002354 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002204:	2204      	movs	r2, #4
 8002206:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002208:	6902      	ldr	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800220a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002214:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800221c:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800221e:	f7ff ffcd 	bl	80021bc <HAL_DAC_DMAUnderrunCallbackCh1>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	e7d5      	b.n	80021d2 <HAL_DAC_IRQHandler+0x12>
 8002226:	bf00      	nop

08002228 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800222a:	7943      	ldrb	r3, [r0, #5]
 800222c:	2b01      	cmp	r3, #1
{
 800222e:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002230:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8002232:	f000 8085 	beq.w	8002340 <HAL_DAC_ConfigChannel+0x118>
 8002236:	2301      	movs	r3, #1
 8002238:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800223a:	2904      	cmp	r1, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 800223c:	f04f 0302 	mov.w	r3, #2
 8002240:	4605      	mov	r5, r0
 8002242:	4614      	mov	r4, r2
 8002244:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002246:	d038      	beq.n	80022ba <HAL_DAC_ConfigChannel+0x92>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002248:	6800      	ldr	r0, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800224a:	f002 0210 	and.w	r2, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800224e:	6933      	ldr	r3, [r6, #16]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_DAC_ConfigChannel+0x3e>
    tmpreg1 = hdac->Instance->CCR;
 8002254:	6b84      	ldr	r4, [r0, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002256:	6973      	ldr	r3, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002258:	271f      	movs	r7, #31
 800225a:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800225c:	4093      	lsls	r3, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800225e:	ea24 0407 	bic.w	r4, r4, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002262:	4323      	orrs	r3, r4
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002264:	6383      	str	r3, [r0, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002266:	e9d6 3402 	ldrd	r3, r4, [r6, #8]
 800226a:	4323      	orrs	r3, r4
 800226c:	430b      	orrs	r3, r1
  tmpreg1 = hdac->Instance->MCR;
 800226e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002270:	6871      	ldr	r1, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002272:	2607      	movs	r6, #7
 8002274:	4096      	lsls	r6, r2
 8002276:	ea24 0406 	bic.w	r4, r4, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800227a:	4093      	lsls	r3, r2
 800227c:	4323      	orrs	r3, r4
  hdac->Instance->MCR = tmpreg1;
 800227e:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002280:	6803      	ldr	r3, [r0, #0]
 8002282:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 8002286:	4094      	lsls	r4, r2
 8002288:	ea23 0304 	bic.w	r3, r3, r4
 800228c:	6003      	str	r3, [r0, #0]
  tmpreg1 = hdac->Instance->CR;
 800228e:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002290:	f640 74fc 	movw	r4, #4092	; 0xffc
 8002294:	4094      	lsls	r4, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002296:	4091      	lsls	r1, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002298:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800229c:	430b      	orrs	r3, r1
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800229e:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80022a0:	6803      	ldr	r3, [r0, #0]
 80022a2:	21c0      	movs	r1, #192	; 0xc0
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	ea23 0302 	bic.w	r3, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022ac:	2100      	movs	r1, #0
  hdac->State = HAL_DAC_STATE_READY;
 80022ae:	2201      	movs	r2, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80022b0:	6003      	str	r3, [r0, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80022b2:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 80022b4:	7169      	strb	r1, [r5, #5]

  /* Return function status */
  return HAL_OK;
 80022b6:	4608      	mov	r0, r1
}
 80022b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 80022ba:	f7ff fe93 	bl	8001fe4 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022be:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80022c0:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 80022c4:	b154      	cbz	r4, 80022dc <HAL_DAC_ConfigChannel+0xb4>
 80022c6:	e01c      	b.n	8002302 <HAL_DAC_ConfigChannel+0xda>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022c8:	f7ff fe8c 	bl	8001fe4 <HAL_GetTick>
 80022cc:	1bc3      	subs	r3, r0, r7
 80022ce:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022d0:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022d2:	d902      	bls.n	80022da <HAL_DAC_ConfigChannel+0xb2>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d6:	0412      	lsls	r2, r2, #16
 80022d8:	d434      	bmi.n	8002344 <HAL_DAC_ConfigChannel+0x11c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	d4f3      	bmi.n	80022c8 <HAL_DAC_ConfigChannel+0xa0>
      HAL_Delay(1);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7ff fe85 	bl	8001ff0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022e6:	6828      	ldr	r0, [r5, #0]
 80022e8:	69b3      	ldr	r3, [r6, #24]
 80022ea:	6403      	str	r3, [r0, #64]	; 0x40
 80022ec:	e011      	b.n	8002312 <HAL_DAC_ConfigChannel+0xea>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022ee:	f7ff fe79 	bl	8001fe4 <HAL_GetTick>
 80022f2:	1bc3      	subs	r3, r0, r7
 80022f4:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022f6:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022f8:	d902      	bls.n	8002300 <HAL_DAC_ConfigChannel+0xd8>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fc:	2a00      	cmp	r2, #0
 80022fe:	db21      	blt.n	8002344 <HAL_DAC_ConfigChannel+0x11c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	2b00      	cmp	r3, #0
 8002304:	dbf3      	blt.n	80022ee <HAL_DAC_ConfigChannel+0xc6>
      HAL_Delay(1U);
 8002306:	2001      	movs	r0, #1
 8002308:	f7ff fe72 	bl	8001ff0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800230c:	6828      	ldr	r0, [r5, #0]
 800230e:	69b3      	ldr	r3, [r6, #24]
 8002310:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002312:	f004 0210 	and.w	r2, r4, #16
 8002316:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002318:	69f1      	ldr	r1, [r6, #28]
 800231a:	f240 34ff 	movw	r4, #1023	; 0x3ff
 800231e:	4094      	lsls	r4, r2
 8002320:	4091      	lsls	r1, r2
 8002322:	ea23 0304 	bic.w	r3, r3, r4
 8002326:	430b      	orrs	r3, r1
 8002328:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800232a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800232c:	6a31      	ldr	r1, [r6, #32]
 800232e:	24ff      	movs	r4, #255	; 0xff
 8002330:	4094      	lsls	r4, r2
 8002332:	4091      	lsls	r1, r2
 8002334:	ea23 0304 	bic.w	r3, r3, r4
 8002338:	430b      	orrs	r3, r1
 800233a:	64c3      	str	r3, [r0, #76]	; 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800233c:	6831      	ldr	r1, [r6, #0]
 800233e:	e786      	b.n	800224e <HAL_DAC_ConfigChannel+0x26>
  __HAL_LOCK(hdac);
 8002340:	2002      	movs	r0, #2
}
 8002342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002344:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002346:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800234e:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8002350:	4610      	mov	r0, r2
}
 8002352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002354 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop

08002358 <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002358:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800235c:	2a02      	cmp	r2, #2
{
 800235e:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002360:	d006      	beq.n	8002370 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002362:	2204      	movs	r2, #4
 8002364:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002366:	2200      	movs	r2, #0

    return HAL_ERROR;
 8002368:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 800236e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002370:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002372:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002374:	6808      	ldr	r0, [r1, #0]
 8002376:	f020 000e 	bic.w	r0, r0, #14
 800237a:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800237c:	6808      	ldr	r0, [r1, #0]
 800237e:	f020 0001 	bic.w	r0, r0, #1
 8002382:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002384:	f04f 0c01 	mov.w	ip, #1
 8002388:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800238a:	f002 021c 	and.w	r2, r2, #28
 800238e:	fa0c f202 	lsl.w	r2, ip, r2
 8002392:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002394:	2200      	movs	r2, #0
    return status;
 8002396:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002398:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800239c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop

080023a4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80023a4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80023a8:	2a02      	cmp	r2, #2
 80023aa:	d003      	beq.n	80023b4 <HAL_DMA_Abort_IT+0x10>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ac:	2204      	movs	r2, #4
 80023ae:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80023b0:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80023b2:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b4:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80023b8:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ba:	680c      	ldr	r4, [r1, #0]
 80023bc:	f024 040e 	bic.w	r4, r4, #14
 80023c0:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80023c2:	680c      	ldr	r4, [r1, #0]
 80023c4:	f024 0401 	bic.w	r4, r4, #1
 80023c8:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ca:	f002 021c 	and.w	r2, r2, #28
 80023ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80023d0:	2101      	movs	r1, #1
 80023d2:	fa01 f202 	lsl.w	r2, r1, r2
 80023d6:	6062      	str	r2, [r4, #4]
    if (hdma->XferAbortCallback != NULL)
 80023d8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80023da:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80023de:	2400      	movs	r4, #0
 80023e0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80023e4:	b112      	cbz	r2, 80023ec <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80023e6:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	4620      	mov	r0, r4
}
 80023ea:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80023ec:	4610      	mov	r0, r2
}
 80023ee:	bd10      	pop	{r4, pc}

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f4:	680c      	ldr	r4, [r1, #0]
{
 80023f6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f8:	2c00      	cmp	r4, #0
 80023fa:	f000 808e 	beq.w	800251a <HAL_GPIO_Init+0x12a>
 80023fe:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002402:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 80025f0 <HAL_GPIO_Init+0x200>
  uint32_t position = 0x00u;
 8002406:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002408:	f04f 0a01 	mov.w	sl, #1
 800240c:	4688      	mov	r8, r1
 800240e:	fa0a f603 	lsl.w	r6, sl, r3
    if (iocurrent != 0x00u)
 8002412:	ea16 0904 	ands.w	r9, r6, r4
 8002416:	d079      	beq.n	800250c <HAL_GPIO_Init+0x11c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002418:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800241c:	f001 0203 	and.w	r2, r1, #3
 8002420:	1e55      	subs	r5, r2, #1
 8002422:	2d01      	cmp	r5, #1
 8002424:	d97c      	bls.n	8002520 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002426:	2a03      	cmp	r2, #3
 8002428:	f040 80b7 	bne.w	800259a <HAL_GPIO_Init+0x1aa>
        temp = GPIOx->ASCR;
 800242c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800242e:	ea25 0606 	bic.w	r6, r5, r6
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002432:	f3c1 05c0 	ubfx	r5, r1, #3, #1
 8002436:	409d      	lsls	r5, r3
 8002438:	4335      	orrs	r5, r6
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800243a:	fa02 f20c 	lsl.w	r2, r2, ip
        GPIOx->ASCR = temp;
 800243e:	62c5      	str	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002440:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8002442:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002444:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002446:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002448:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 800244c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800244e:	d05d      	beq.n	800250c <HAL_GPIO_Init+0x11c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002450:	4d60      	ldr	r5, [pc, #384]	; (80025d4 <HAL_GPIO_Init+0x1e4>)
 8002452:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	662a      	str	r2, [r5, #96]	; 0x60
 800245a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800245c:	f002 0201 	and.w	r2, r2, #1
 8002460:	9203      	str	r2, [sp, #12]
 8002462:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002464:	f023 0203 	bic.w	r2, r3, #3
 8002468:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800246c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002470:	f003 0603 	and.w	r6, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002474:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002476:	00b6      	lsls	r6, r6, #2
 8002478:	270f      	movs	r7, #15
 800247a:	40b7      	lsls	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800247c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002480:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002484:	d01b      	beq.n	80024be <HAL_GPIO_Init+0xce>
 8002486:	4f54      	ldr	r7, [pc, #336]	; (80025d8 <HAL_GPIO_Init+0x1e8>)
 8002488:	42b8      	cmp	r0, r7
 800248a:	f000 8090 	beq.w	80025ae <HAL_GPIO_Init+0x1be>
 800248e:	4f53      	ldr	r7, [pc, #332]	; (80025dc <HAL_GPIO_Init+0x1ec>)
 8002490:	42b8      	cmp	r0, r7
 8002492:	f000 8090 	beq.w	80025b6 <HAL_GPIO_Init+0x1c6>
 8002496:	4f52      	ldr	r7, [pc, #328]	; (80025e0 <HAL_GPIO_Init+0x1f0>)
 8002498:	42b8      	cmp	r0, r7
 800249a:	f000 8083 	beq.w	80025a4 <HAL_GPIO_Init+0x1b4>
 800249e:	4f51      	ldr	r7, [pc, #324]	; (80025e4 <HAL_GPIO_Init+0x1f4>)
 80024a0:	42b8      	cmp	r0, r7
 80024a2:	f000 808d 	beq.w	80025c0 <HAL_GPIO_Init+0x1d0>
 80024a6:	4f50      	ldr	r7, [pc, #320]	; (80025e8 <HAL_GPIO_Init+0x1f8>)
 80024a8:	42b8      	cmp	r0, r7
 80024aa:	f000 808e 	beq.w	80025ca <HAL_GPIO_Init+0x1da>
 80024ae:	4f4f      	ldr	r7, [pc, #316]	; (80025ec <HAL_GPIO_Init+0x1fc>)
 80024b0:	42b8      	cmp	r0, r7
 80024b2:	bf0c      	ite	eq
 80024b4:	2706      	moveq	r7, #6
 80024b6:	2707      	movne	r7, #7
 80024b8:	fa07 f606 	lsl.w	r6, r7, r6
 80024bc:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024be:	6095      	str	r5, [r2, #8]
        temp = EXTI->RTSR1;
 80024c0:	f8db 2008 	ldr.w	r2, [fp, #8]
        temp &= ~(iocurrent);
 80024c4:	ea6f 0509 	mvn.w	r5, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c8:	02ce      	lsls	r6, r1, #11
        temp &= ~(iocurrent);
 80024ca:	bf54      	ite	pl
 80024cc:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80024ce:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR1 = temp;
 80024d2:	f8cb 2008 	str.w	r2, [fp, #8]

        temp = EXTI->FTSR1;
 80024d6:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024da:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 80024dc:	bf54      	ite	pl
 80024de:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80024e0:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->FTSR1 = temp;
 80024e4:	f8cb 200c 	str.w	r2, [fp, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024e8:	f8db 2004 	ldr.w	r2, [fp, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ec:	038e      	lsls	r6, r1, #14
        temp &= ~(iocurrent);
 80024ee:	bf54      	ite	pl
 80024f0:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 80024f2:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR1 = temp;
 80024f6:	f8cb 2004 	str.w	r2, [fp, #4]

        temp = EXTI->IMR1;
 80024fa:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fe:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8002500:	bf54      	ite	pl
 8002502:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8002504:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR1 = temp;
 8002508:	f8cb 2000 	str.w	r2, [fp]
      }
    }

    position++;
 800250c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250e:	fa34 f203 	lsrs.w	r2, r4, r3
 8002512:	f10c 0c02 	add.w	ip, ip, #2
 8002516:	f47f af7a 	bne.w	800240e <HAL_GPIO_Init+0x1e>
  }
}
 800251a:	b005      	add	sp, #20
 800251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002520:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002524:	f8d8 500c 	ldr.w	r5, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002528:	2703      	movs	r7, #3
 800252a:	fa07 f70c 	lsl.w	r7, r7, ip
 800252e:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002532:	fa05 f50c 	lsl.w	r5, r5, ip
 8002536:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OSPEEDR = temp;
 800253a:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800253c:	43fd      	mvns	r5, r7
        temp = GPIOx->OTYPER;
 800253e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002540:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002544:	f3c1 1600 	ubfx	r6, r1, #4, #1
 8002548:	409e      	lsls	r6, r3
 800254a:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800254c:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800254e:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002550:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002554:	402f      	ands	r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002556:	fa06 f60c 	lsl.w	r6, r6, ip
 800255a:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800255e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002560:	fa02 f20c 	lsl.w	r2, r2, ip
 8002564:	f47f af6d 	bne.w	8002442 <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3u];
 8002568:	08df      	lsrs	r7, r3, #3
 800256a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800256e:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002572:	6a3e      	ldr	r6, [r7, #32]
 8002574:	9600      	str	r6, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002576:	f8d8 6010 	ldr.w	r6, [r8, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800257a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800257e:	fa06 f60e 	lsl.w	r6, r6, lr
 8002582:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002584:	260f      	movs	r6, #15
 8002586:	fa06 fe0e 	lsl.w	lr, r6, lr
 800258a:	9e00      	ldr	r6, [sp, #0]
 800258c:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002590:	9e01      	ldr	r6, [sp, #4]
 8002592:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002596:	623e      	str	r6, [r7, #32]
 8002598:	e753      	b.n	8002442 <HAL_GPIO_Init+0x52>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800259a:	2503      	movs	r5, #3
 800259c:	fa05 f50c 	lsl.w	r5, r5, ip
 80025a0:	43ed      	mvns	r5, r5
 80025a2:	e7d4      	b.n	800254e <HAL_GPIO_Init+0x15e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025a4:	2703      	movs	r7, #3
 80025a6:	fa07 f606 	lsl.w	r6, r7, r6
 80025aa:	4335      	orrs	r5, r6
 80025ac:	e787      	b.n	80024be <HAL_GPIO_Init+0xce>
 80025ae:	fa0a f606 	lsl.w	r6, sl, r6
 80025b2:	4335      	orrs	r5, r6
 80025b4:	e783      	b.n	80024be <HAL_GPIO_Init+0xce>
 80025b6:	2702      	movs	r7, #2
 80025b8:	fa07 f606 	lsl.w	r6, r7, r6
 80025bc:	4335      	orrs	r5, r6
 80025be:	e77e      	b.n	80024be <HAL_GPIO_Init+0xce>
 80025c0:	2704      	movs	r7, #4
 80025c2:	fa07 f606 	lsl.w	r6, r7, r6
 80025c6:	4335      	orrs	r5, r6
 80025c8:	e779      	b.n	80024be <HAL_GPIO_Init+0xce>
 80025ca:	2705      	movs	r7, #5
 80025cc:	fa07 f606 	lsl.w	r6, r7, r6
 80025d0:	4335      	orrs	r5, r6
 80025d2:	e774      	b.n	80024be <HAL_GPIO_Init+0xce>
 80025d4:	40021000 	.word	0x40021000
 80025d8:	48000400 	.word	0x48000400
 80025dc:	48000800 	.word	0x48000800
 80025e0:	48000c00 	.word	0x48000c00
 80025e4:	48001000 	.word	0x48001000
 80025e8:	48001400 	.word	0x48001400
 80025ec:	48001800 	.word	0x48001800
 80025f0:	40010400 	.word	0x40010400

080025f4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025f4:	6903      	ldr	r3, [r0, #16]
 80025f6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80025f8:	bf14      	ite	ne
 80025fa:	2001      	movne	r0, #1
 80025fc:	2000      	moveq	r0, #0
 80025fe:	4770      	bx	lr

08002600 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002602:	6951      	ldr	r1, [r2, #20]
 8002604:	4201      	tst	r1, r0
 8002606:	d100      	bne.n	800260a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002608:	4770      	bx	lr
{
 800260a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800260c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800260e:	f7fe f8ff 	bl	8000810 <HAL_GPIO_EXTI_Callback>
  }
}
 8002612:	bd08      	pop	{r3, pc}
 8002614:	40010400 	.word	0x40010400

08002618 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800261c:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800261e:	6800      	ldr	r0, [r0, #0]
{
 8002620:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002622:	6982      	ldr	r2, [r0, #24]
 8002624:	0694      	lsls	r4, r2, #26
 8002626:	d464      	bmi.n	80026f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
 8002628:	460f      	mov	r7, r1
 800262a:	4603      	mov	r3, r0
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800262c:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8002630:	6984      	ldr	r4, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002632:	f014 0410 	ands.w	r4, r4, #16
 8002636:	d072      	beq.n	800271e <I2C_WaitOnSTOPFlagUntilTimeout+0x106>
  uint32_t error_code = 0;
 8002638:	2500      	movs	r5, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800263a:	f8c0 901c 	str.w	r9, [r0, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800263e:	4603      	mov	r3, r0
  uint32_t tickstart = Tickstart;
 8002640:	4644      	mov	r4, r8
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	46aa      	mov	sl, r5
 8002644:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	d16b      	bne.n	8002722 <I2C_WaitOnSTOPFlagUntilTimeout+0x10a>
 800264a:	0690      	lsls	r0, r2, #26
 800264c:	f100 8098 	bmi.w	8002780 <I2C_WaitOnSTOPFlagUntilTimeout+0x168>
 8002650:	f1ba 0f00 	cmp.w	sl, #0
 8002654:	d104      	bne.n	8002660 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 8002656:	699c      	ldr	r4, [r3, #24]
 8002658:	06a1      	lsls	r1, r4, #26
 800265a:	d5fc      	bpl.n	8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800265c:	2220      	movs	r2, #32
 800265e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002660:	f045 0404 	orr.w	r4, r5, #4

    status = HAL_ERROR;
 8002664:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002666:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002668:	05d0      	lsls	r0, r2, #23
 800266a:	d530      	bpl.n	80026ce <I2C_WaitOnSTOPFlagUntilTimeout+0xb6>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800266c:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002670:	0555      	lsls	r5, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002672:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002674:	f044 0401 	orr.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002678:	d504      	bpl.n	8002684 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800267a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800267e:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8002680:	f044 0408 	orr.w	r4, r4, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002684:	0597      	lsls	r7, r2, #22
 8002686:	d504      	bpl.n	8002692 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002688:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800268c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002690:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002696:	bf44      	itt	mi
 8002698:	2200      	movmi	r2, #0
 800269a:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	07d1      	lsls	r1, r2, #31
 80026a0:	d403      	bmi.n	80026aa <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026a2:	699a      	ldr	r2, [r3, #24]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4837      	ldr	r0, [pc, #220]	; (800278c <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
 80026ae:	4002      	ands	r2, r0
 80026b0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80026b2:	6c73      	ldr	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80026b8:	4323      	orrs	r3, r4
 80026ba:	6473      	str	r3, [r6, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026bc:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
      return HAL_ERROR;
 80026c8:	2001      	movs	r0, #1
}
 80026ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026ce:	0550      	lsls	r0, r2, #21
 80026d0:	d4d3      	bmi.n	800267a <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026d2:	0595      	lsls	r5, r2, #22
 80026d4:	d4d8      	bmi.n	8002688 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
 80026d6:	2900      	cmp	r1, #0
 80026d8:	d1db      	bne.n	8002692 <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7ff fc83 	bl	8001fe4 <HAL_GetTick>
 80026de:	eba0 0008 	sub.w	r0, r0, r8
 80026e2:	42b8      	cmp	r0, r7
 80026e4:	d808      	bhi.n	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe0>
 80026e6:	b13f      	cbz	r7, 80026f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe0>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026e8:	6833      	ldr	r3, [r6, #0]
 80026ea:	4618      	mov	r0, r3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ec:	6982      	ldr	r2, [r0, #24]
 80026ee:	0692      	lsls	r2, r2, #26
 80026f0:	d59e      	bpl.n	8002630 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 80026f2:	2000      	movs	r0, #0
}
 80026f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80026f8:	6830      	ldr	r0, [r6, #0]
 80026fa:	6982      	ldr	r2, [r0, #24]
 80026fc:	f012 0220 	ands.w	r2, r2, #32
 8002700:	4603      	mov	r3, r0
 8002702:	d1f3      	bne.n	80026ec <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	6c73      	ldr	r3, [r6, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8002706:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800270a:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800270c:	430b      	orrs	r3, r1
 800270e:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002710:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002714:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002718:	2001      	movs	r0, #1
}
 800271a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	4621      	mov	r1, r4
 8002720:	e7a1      	b.n	8002666 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002722:	0692      	lsls	r2, r2, #26
 8002724:	d42c      	bmi.n	8002780 <I2C_WaitOnSTOPFlagUntilTimeout+0x168>
 8002726:	f1ba 0f00 	cmp.w	sl, #0
 800272a:	d199      	bne.n	8002660 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800272c:	f7ff fc5a 	bl	8001fe4 <HAL_GetTick>
 8002730:	1b00      	subs	r0, r0, r4
 8002732:	4287      	cmp	r7, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002734:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002736:	d301      	bcc.n	800273c <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 8002738:	2f00      	cmp	r7, #0
 800273a:	d183      	bne.n	8002644 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800273c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800273e:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002742:	6999      	ldr	r1, [r3, #24]
 8002744:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 8002746:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002748:	d501      	bpl.n	800274e <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
 800274a:	0441      	lsls	r1, r0, #17
 800274c:	d50d      	bpl.n	800276a <I2C_WaitOnSTOPFlagUntilTimeout+0x152>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	0690      	lsls	r0, r2, #26
 8002752:	f53f af77 	bmi.w	8002644 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002756:	f7ff fc45 	bl	8001fe4 <HAL_GetTick>
 800275a:	1b00      	subs	r0, r0, r4
 800275c:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800275e:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002760:	d9f5      	bls.n	800274e <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002762:	2520      	movs	r5, #32
              status = HAL_ERROR;
 8002764:	f04f 0a01 	mov.w	sl, #1
 8002768:	e76c      	b.n	8002644 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
              (tmp1 != I2C_CR2_STOP) && \
 800276a:	2a20      	cmp	r2, #32
 800276c:	d0ef      	beq.n	800274e <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002774:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002776:	f7ff fc35 	bl	8001fe4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800277a:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
 800277c:	4604      	mov	r4, r0
 800277e:	e7e6      	b.n	800274e <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
    if (status == HAL_OK)
 8002780:	f1ba 0f00 	cmp.w	sl, #0
 8002784:	f43f af6a 	beq.w	800265c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
 8002788:	e76a      	b.n	8002660 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 800278a:	bf00      	nop
 800278c:	fe00e800 	.word	0xfe00e800

08002790 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002790:	2800      	cmp	r0, #0
 8002792:	d054      	beq.n	800283e <HAL_I2C_Init+0xae>
{
 8002794:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002796:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800279a:	4604      	mov	r4, r0
 800279c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d047      	beq.n	8002834 <HAL_I2C_Init+0xa4>
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a6:	2224      	movs	r2, #36	; 0x24
 80027a8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80027ac:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027ae:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 80027b0:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80027b8:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027ba:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027bc:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027be:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027c4:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027c6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027c8:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ca:	d009      	beq.n	80027e0 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027cc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027d0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027d2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027d4:	d107      	bne.n	80027e6 <HAL_I2C_Init+0x56>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	e006      	b.n	80027ee <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027e4:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ec:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ee:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027f0:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027f2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80027f6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80027fa:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027fc:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027fe:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002800:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002802:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002804:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002808:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800280c:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800280e:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002810:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002812:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002814:	4301      	orrs	r1, r0
 8002816:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002818:	6819      	ldr	r1, [r3, #0]
 800281a:	f041 0101 	orr.w	r1, r1, #1
 800281e:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002820:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002822:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002826:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800282a:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800282c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8002830:	4610      	mov	r0, r2
}
 8002832:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002834:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002838:	f7fe fd76 	bl	8001328 <HAL_I2C_MspInit>
 800283c:	e7b2      	b.n	80027a4 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800283e:	2001      	movs	r0, #1
}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop

08002844 <HAL_I2C_Master_Transmit>:
{
 8002844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002848:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800284a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800284e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002850:	2b20      	cmp	r3, #32
 8002852:	d129      	bne.n	80028a8 <HAL_I2C_Master_Transmit+0x64>
    __HAL_LOCK(hi2c);
 8002854:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002858:	2b01      	cmp	r3, #1
 800285a:	4604      	mov	r4, r0
 800285c:	d024      	beq.n	80028a8 <HAL_I2C_Master_Transmit+0x64>
 800285e:	2301      	movs	r3, #1
 8002860:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002864:	468b      	mov	fp, r1
 8002866:	4615      	mov	r5, r2
 8002868:	f7ff fbbc 	bl	8001fe4 <HAL_GetTick>
 800286c:	4681      	mov	r9, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	6983      	ldr	r3, [r0, #24]
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	d51b      	bpl.n	80028ae <HAL_I2C_Master_Transmit+0x6a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7ff fbb5 	bl	8001fe4 <HAL_GetTick>
 800287a:	eba0 0009 	sub.w	r0, r0, r9
 800287e:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002880:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002882:	d9f5      	bls.n	8002870 <HAL_I2C_Master_Transmit+0x2c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002884:	6983      	ldr	r3, [r0, #24]
 8002886:	0419      	lsls	r1, r3, #16
 8002888:	d5f2      	bpl.n	8002870 <HAL_I2C_Master_Transmit+0x2c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800288a:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800288e:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 8002892:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002894:	6463      	str	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8002896:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 800289a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800289e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      return HAL_ERROR;
 80028a2:	2001      	movs	r0, #1
}
 80028a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 80028a8:	2002      	movs	r0, #2
}
 80028aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028ae:	2221      	movs	r2, #33	; 0x21
 80028b0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b4:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028b6:	2210      	movs	r2, #16
 80028b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028bc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80028be:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028c0:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80028c4:	6265      	str	r5, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2bff      	cmp	r3, #255	; 0xff
 80028ca:	d86d      	bhi.n	80029a8 <HAL_I2C_Master_Transmit+0x164>
      hi2c->XferSize = hi2c->XferCount;
 80028cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
 80028d0:	8523      	strh	r3, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 8142 	bne.w	8002b5c <HAL_I2C_Master_Transmit+0x318>
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028d8:	6842      	ldr	r2, [r0, #4]
 80028da:	4ba4      	ldr	r3, [pc, #656]	; (8002b6c <HAL_I2C_Master_Transmit+0x328>)
 80028dc:	401a      	ands	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028de:	f3cb 0309 	ubfx	r3, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028ec:	6043      	str	r3, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ee:	f3cb 0b09 	ubfx	fp, fp, #0, #10
    while (hi2c->XferCount > 0U)
 80028f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80e0 	beq.w	8002abc <HAL_I2C_Master_Transmit+0x278>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028fc:	f04f 0a20 	mov.w	sl, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002900:	6985      	ldr	r5, [r0, #24]
 8002902:	f015 0502 	ands.w	r5, r5, #2
 8002906:	f040 80c3 	bne.w	8002a90 <HAL_I2C_Master_Transmit+0x24c>
  uint32_t itflag   = hi2c->Instance->ISR;
 800290a:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800290c:	f013 0310 	ands.w	r3, r3, #16
 8002910:	f000 808c 	beq.w	8002a2c <HAL_I2C_Master_Transmit+0x1e8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002914:	2310      	movs	r3, #16
 8002916:	61c3      	str	r3, [r0, #28]
  uint32_t tickstart = Tickstart;
 8002918:	464f      	mov	r7, r9
  HAL_StatusTypeDef status = HAL_OK;
 800291a:	46a8      	mov	r8, r5
 800291c:	1c72      	adds	r2, r6, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800291e:	6983      	ldr	r3, [r0, #24]
 8002920:	f040 8086 	bne.w	8002a30 <HAL_I2C_Master_Transmit+0x1ec>
 8002924:	0699      	lsls	r1, r3, #26
 8002926:	f100 8103 	bmi.w	8002b30 <HAL_I2C_Master_Transmit+0x2ec>
 800292a:	f1b8 0f00 	cmp.w	r8, #0
 800292e:	d104      	bne.n	800293a <HAL_I2C_Master_Transmit+0xf6>
 8002930:	6983      	ldr	r3, [r0, #24]
 8002932:	069a      	lsls	r2, r3, #26
 8002934:	d5fc      	bpl.n	8002930 <HAL_I2C_Master_Transmit+0xec>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002936:	f8c0 a01c 	str.w	sl, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800293a:	f045 0304 	orr.w	r3, r5, #4
    status = HAL_ERROR;
 800293e:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8002940:	6982      	ldr	r2, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002942:	05d7      	lsls	r7, r2, #23
 8002944:	d54f      	bpl.n	80029e6 <HAL_I2C_Master_Transmit+0x1a2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002946:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800294a:	0556      	lsls	r6, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800294c:	61c1      	str	r1, [r0, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800294e:	f043 0301 	orr.w	r3, r3, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002952:	d504      	bpl.n	800295e <HAL_I2C_Master_Transmit+0x11a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002958:	61c1      	str	r1, [r0, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800295a:	f043 0308 	orr.w	r3, r3, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800295e:	0591      	lsls	r1, r2, #22
 8002960:	d504      	bpl.n	800296c <HAL_I2C_Master_Transmit+0x128>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002962:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002966:	f043 0302 	orr.w	r3, r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800296a:	61c2      	str	r2, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800296c:	6982      	ldr	r2, [r0, #24]
 800296e:	0797      	lsls	r7, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8002970:	bf44      	itt	mi
 8002972:	2200      	movmi	r2, #0
 8002974:	6282      	strmi	r2, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002976:	6982      	ldr	r2, [r0, #24]
 8002978:	07d6      	lsls	r6, r2, #31
 800297a:	d403      	bmi.n	8002984 <HAL_I2C_Master_Transmit+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800297c:	6982      	ldr	r2, [r0, #24]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	6182      	str	r2, [r0, #24]
    I2C_RESET_CR2(hi2c);
 8002984:	6842      	ldr	r2, [r0, #4]
 8002986:	4d7a      	ldr	r5, [pc, #488]	; (8002b70 <HAL_I2C_Master_Transmit+0x32c>)
 8002988:	402a      	ands	r2, r5
 800298a:	6042      	str	r2, [r0, #4]
    hi2c->ErrorCode |= error_code;
 800298c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002990:	2020      	movs	r0, #32
    hi2c->ErrorCode |= error_code;
 8002992:	4313      	orrs	r3, r2
 8002994:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002996:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800299a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800299e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        return HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
}
 80029a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029a8:	23ff      	movs	r3, #255	; 0xff
 80029aa:	8523      	strh	r3, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ac:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80029b0:	23fe      	movs	r3, #254	; 0xfe
      xfermode = I2C_RELOAD_MODE;
 80029b2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029b6:	f815 cb01 	ldrb.w	ip, [r5], #1
 80029ba:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
      hi2c->XferSize--;
 80029be:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80029c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80029c2:	6265      	str	r5, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	8563      	strh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80029ca:	6845      	ldr	r5, [r0, #4]
 80029cc:	4f67      	ldr	r7, [pc, #412]	; (8002b6c <HAL_I2C_Master_Transmit+0x328>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029ce:	f3cb 0309 	ubfx	r3, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80029d2:	403d      	ands	r5, r7
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029d4:	4313      	orrs	r3, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 80029d6:	432b      	orrs	r3, r5
 80029d8:	430b      	orrs	r3, r1
 80029da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029de:	6043      	str	r3, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029e0:	f3cb 0b09 	ubfx	fp, fp, #0, #10
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029e4:	e785      	b.n	80028f2 <HAL_I2C_Master_Transmit+0xae>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029e6:	0555      	lsls	r5, r2, #21
 80029e8:	d4b4      	bmi.n	8002954 <HAL_I2C_Master_Transmit+0x110>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029ea:	0592      	lsls	r2, r2, #22
 80029ec:	d4b9      	bmi.n	8002962 <HAL_I2C_Master_Transmit+0x11e>
  if (status != HAL_OK)
 80029ee:	2900      	cmp	r1, #0
 80029f0:	d1bc      	bne.n	800296c <HAL_I2C_Master_Transmit+0x128>
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	1c75      	adds	r5, r6, #1
 80029f4:	d084      	beq.n	8002900 <HAL_I2C_Master_Transmit+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7ff faf5 	bl	8001fe4 <HAL_GetTick>
 80029fa:	eba0 0009 	sub.w	r0, r0, r9
 80029fe:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a00:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	d302      	bcc.n	8002a0a <HAL_I2C_Master_Transmit+0x1c6>
 8002a04:	2e00      	cmp	r6, #0
 8002a06:	f47f af7b 	bne.w	8002900 <HAL_I2C_Master_Transmit+0xbc>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a0a:	6983      	ldr	r3, [r0, #24]
 8002a0c:	f013 0302 	ands.w	r3, r3, #2
 8002a10:	f47f af76 	bne.w	8002900 <HAL_I2C_Master_Transmit+0xbc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a14:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8002a16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	6462      	str	r2, [r4, #68]	; 0x44
          return HAL_ERROR;
 8002a20:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
 8002a2a:	e73e      	b.n	80028aa <HAL_I2C_Master_Transmit+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	e787      	b.n	8002940 <HAL_I2C_Master_Transmit+0xfc>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a30:	069b      	lsls	r3, r3, #26
 8002a32:	d47d      	bmi.n	8002b30 <HAL_I2C_Master_Transmit+0x2ec>
 8002a34:	f1b8 0f00 	cmp.w	r8, #0
 8002a38:	f47f af7f 	bne.w	800293a <HAL_I2C_Master_Transmit+0xf6>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	f7ff fad2 	bl	8001fe4 <HAL_GetTick>
 8002a40:	1bc0      	subs	r0, r0, r7
 8002a42:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a44:	6820      	ldr	r0, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	d302      	bcc.n	8002a4e <HAL_I2C_Master_Transmit+0x20a>
 8002a48:	2e00      	cmp	r6, #0
 8002a4a:	f47f af67 	bne.w	800291c <HAL_I2C_Master_Transmit+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a4e:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 8002a50:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a54:	6982      	ldr	r2, [r0, #24]
 8002a56:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 8002a58:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a5a:	d50b      	bpl.n	8002a74 <HAL_I2C_Master_Transmit+0x230>
 8002a5c:	044a      	lsls	r2, r1, #17
 8002a5e:	d409      	bmi.n	8002a74 <HAL_I2C_Master_Transmit+0x230>
              (tmp1 != I2C_CR2_STOP) && \
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d007      	beq.n	8002a74 <HAL_I2C_Master_Transmit+0x230>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a64:	6843      	ldr	r3, [r0, #4]
 8002a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a6a:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 8002a6c:	f7ff faba 	bl	8001fe4 <HAL_GetTick>
 8002a70:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a72:	6820      	ldr	r0, [r4, #0]
 8002a74:	6983      	ldr	r3, [r0, #24]
 8002a76:	0699      	lsls	r1, r3, #26
 8002a78:	f53f af50 	bmi.w	800291c <HAL_I2C_Master_Transmit+0xd8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a7c:	f7ff fab2 	bl	8001fe4 <HAL_GetTick>
 8002a80:	1bc0      	subs	r0, r0, r7
 8002a82:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a84:	6820      	ldr	r0, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a86:	d9f5      	bls.n	8002a74 <HAL_I2C_Master_Transmit+0x230>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a88:	2520      	movs	r5, #32
              status = HAL_ERROR;
 8002a8a:	f04f 0801 	mov.w	r8, #1
 8002a8e:	e745      	b.n	800291c <HAL_I2C_Master_Transmit+0xd8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a90:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002a92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a98:	6282      	str	r2, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002a9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002a9c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002a9e:	3a01      	subs	r2, #1
 8002aa0:	b292      	uxth	r2, r2
 8002aa2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aa4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aaa:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8002aac:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aae:	b102      	cbz	r2, 8002ab2 <HAL_I2C_Master_Transmit+0x26e>
 8002ab0:	b343      	cbz	r3, 8002b04 <HAL_I2C_Master_Transmit+0x2c0>
    while (hi2c->XferCount > 0U)
 8002ab2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f47f af22 	bne.w	8002900 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abc:	464a      	mov	r2, r9
 8002abe:	4631      	mov	r1, r6
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7ff fda9 	bl	8002618 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d146      	bne.n	8002b58 <HAL_I2C_Master_Transmit+0x314>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aca:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002acc:	4d28      	ldr	r5, [pc, #160]	; (8002b70 <HAL_I2C_Master_Transmit+0x32c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ace:	2120      	movs	r1, #32
 8002ad0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	402a      	ands	r2, r5
 8002ad6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002adc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ae0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002ae4:	e6e1      	b.n	80028aa <HAL_I2C_Master_Transmit+0x66>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae6:	6983      	ldr	r3, [r0, #24]
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	d410      	bmi.n	8002b0e <HAL_I2C_Master_Transmit+0x2ca>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aec:	f7ff fa7a 	bl	8001fe4 <HAL_GetTick>
 8002af0:	eba0 0009 	sub.w	r0, r0, r9
 8002af4:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002af6:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af8:	d300      	bcc.n	8002afc <HAL_I2C_Master_Transmit+0x2b8>
 8002afa:	b91e      	cbnz	r6, 8002b04 <HAL_I2C_Master_Transmit+0x2c0>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002afc:	6983      	ldr	r3, [r0, #24]
 8002afe:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002b02:	d087      	beq.n	8002a14 <HAL_I2C_Master_Transmit+0x1d0>
 8002b04:	1c71      	adds	r1, r6, #1
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_I2C_Master_Transmit+0x2a2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b08:	6983      	ldr	r3, [r0, #24]
 8002b0a:	061a      	lsls	r2, r3, #24
 8002b0c:	d5fc      	bpl.n	8002b08 <HAL_I2C_Master_Transmit+0x2c4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2bff      	cmp	r3, #255	; 0xff
 8002b14:	d911      	bls.n	8002b3a <HAL_I2C_Master_Transmit+0x2f6>
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b16:	6843      	ldr	r3, [r0, #4]
 8002b18:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_I2C_Master_Transmit+0x330>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	ea4b 0303 	orr.w	r3, fp, r3
 8002b20:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b28:	22ff      	movs	r2, #255	; 0xff
 8002b2a:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b2c:	6043      	str	r3, [r0, #4]
}
 8002b2e:	e7c0      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x26e>
    if (status == HAL_OK)
 8002b30:	f1b8 0f00 	cmp.w	r8, #0
 8002b34:	f43f aeff 	beq.w	8002936 <HAL_I2C_Master_Transmit+0xf2>
 8002b38:	e6ff      	b.n	800293a <HAL_I2C_Master_Transmit+0xf6>
          hi2c->XferSize = hi2c->XferCount;
 8002b3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b3c:	490d      	ldr	r1, [pc, #52]	; (8002b74 <HAL_I2C_Master_Transmit+0x330>)
          hi2c->XferSize = hi2c->XferCount;
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b42:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b44:	6843      	ldr	r3, [r0, #4]
 8002b46:	400b      	ands	r3, r1
 8002b48:	ea4b 0303 	orr.w	r3, fp, r3
 8002b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b54:	6043      	str	r3, [r0, #4]
}
 8002b56:	e7ac      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x26e>
      return HAL_ERROR;
 8002b58:	2001      	movs	r0, #1
 8002b5a:	e6a6      	b.n	80028aa <HAL_I2C_Master_Transmit+0x66>
      hi2c->XferSize--;
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29b      	uxth	r3, r3
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002b60:	1c5a      	adds	r2, r3, #1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	0412      	lsls	r2, r2, #16
      xfermode = I2C_AUTOEND_MODE;
 8002b66:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b6a:	e724      	b.n	80029b6 <HAL_I2C_Master_Transmit+0x172>
 8002b6c:	fc009800 	.word	0xfc009800
 8002b70:	fe00e800 	.word	0xfe00e800
 8002b74:	fc009c00 	.word	0xfc009c00

08002b78 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b78:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002b7c:	2a20      	cmp	r2, #32
 8002b7e:	d123      	bne.n	8002bc8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002b80:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b84:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002b88:	2a01      	cmp	r2, #1
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	d01c      	beq.n	8002bc8 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b8e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b90:	2024      	movs	r0, #36	; 0x24
{
 8002b92:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b94:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002b98:	6810      	ldr	r0, [r2, #0]
 8002b9a:	f020 0001 	bic.w	r0, r0, #1
 8002b9e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ba0:	6810      	ldr	r0, [r2, #0]
 8002ba2:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8002ba6:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ba8:	6810      	ldr	r0, [r2, #0]
 8002baa:	4301      	orrs	r1, r0
 8002bac:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bae:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8002bb4:	f041 0101 	orr.w	r1, r1, #1
 8002bb8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002bbe:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc2:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002bc4:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8002bc8:	2002      	movs	r0, #2
}
 8002bca:	4770      	bx	lr

08002bcc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bcc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002bd0:	2a20      	cmp	r2, #32
 8002bd2:	d122      	bne.n	8002c1a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8002bd4:	b500      	push	{lr}
 8002bd6:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bda:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002bde:	2a01      	cmp	r2, #1
 8002be0:	4603      	mov	r3, r0
 8002be2:	d01c      	beq.n	8002c1e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002be4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be6:	2024      	movs	r0, #36	; 0x24
 8002be8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002bec:	6810      	ldr	r0, [r2, #0]
 8002bee:	f020 0001 	bic.w	r0, r0, #1
 8002bf2:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bf4:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bf6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bfa:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bfe:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c00:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c02:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8002c06:	f041 0101 	orr.w	r1, r1, #1
 8002c0a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002c10:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 8002c14:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002c16:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8002c1a:	2002      	movs	r0, #2
}
 8002c1c:	4770      	bx	lr
    return HAL_BUSY;
 8002c1e:	2002      	movs	r0, #2
}
 8002c20:	f85d fb04 	ldr.w	pc, [sp], #4

08002c24 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c24:	4b02      	ldr	r3, [pc, #8]	; (8002c30 <HAL_PWREx_GetVoltageRange+0xc>)
 8002c26:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002c28:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40007000 	.word	0x40007000

08002c34 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c34:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002c38:	d00e      	beq.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c3c:	6813      	ldr	r3, [r2, #0]
 8002c3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c46:	d02d      	beq.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c48:	6813      	ldr	r3, [r2, #0]
 8002c4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c52:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c58:	4914      	ldr	r1, [pc, #80]	; (8002cac <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c5a:	680b      	ldr	r3, [r1, #0]
 8002c5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c64:	d01e      	beq.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c66:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c68:	4a11      	ldr	r2, [pc, #68]	; (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c72:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c74:	6813      	ldr	r3, [r2, #0]
 8002c76:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8002c78:	2032      	movs	r0, #50	; 0x32
 8002c7a:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7e:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c86:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c88:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c8c:	d506      	bpl.n	8002c9c <HAL_PWREx_ControlVoltageScaling+0x68>
 8002c8e:	e000      	b.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8002c90:	b123      	cbz	r3, 8002c9c <HAL_PWREx_ControlVoltageScaling+0x68>
 8002c92:	694a      	ldr	r2, [r1, #20]
 8002c94:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8002c96:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c9a:	d4f9      	bmi.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	055b      	lsls	r3, r3, #21
 8002ca2:	d401      	bmi.n	8002ca8 <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002ca8:	2003      	movs	r0, #3
}
 8002caa:	4770      	bx	lr
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	20000034 	.word	0x20000034
 8002cb4:	431bde83 	.word	0x431bde83

08002cb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cb8:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cba:	4d20      	ldr	r5, [pc, #128]	; (8002d3c <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002cbc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002cbe:	00db      	lsls	r3, r3, #3
{
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cc4:	d51c      	bpl.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cc6:	f7ff ffad 	bl	8002c24 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002cce:	d029      	beq.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cd0:	2c80      	cmp	r4, #128	; 0x80
 8002cd2:	d813      	bhi.n	8002cfc <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cd4:	d02f      	beq.n	8002d36 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cd6:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 8002cda:	fab4 f484 	clz	r4, r4
 8002cde:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ce0:	4917      	ldr	r1, [pc, #92]	; (8002d40 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002ce2:	680b      	ldr	r3, [r1, #0]
 8002ce4:	f023 0307 	bic.w	r3, r3, #7
 8002ce8:	4323      	orrs	r3, r4
 8002cea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cec:	6808      	ldr	r0, [r1, #0]
 8002cee:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002cf2:	1b00      	subs	r0, r0, r4
 8002cf4:	bf18      	it	ne
 8002cf6:	2001      	movne	r0, #1
 8002cf8:	b003      	add	sp, #12
 8002cfa:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cfc:	2403      	movs	r4, #3
 8002cfe:	e7ef      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d06:	65ab      	str	r3, [r5, #88]	; 0x58
 8002d08:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002d12:	f7ff ff87 	bl	8002c24 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d16:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d18:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d20:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d22:	d1d5      	bne.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8002d24:	2c80      	cmp	r4, #128	; 0x80
 8002d26:	d904      	bls.n	8002d32 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d28:	2ca0      	cmp	r4, #160	; 0xa0
 8002d2a:	bf8c      	ite	hi
 8002d2c:	2402      	movhi	r4, #2
 8002d2e:	2401      	movls	r4, #1
 8002d30:	e7d6      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d32:	2400      	movs	r4, #0
 8002d34:	e7d4      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d36:	2402      	movs	r4, #2
 8002d38:	e7d2      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40022000 	.word	0x40022000

08002d44 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d44:	4a28      	ldr	r2, [pc, #160]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d46:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d48:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d4a:	f013 030c 	ands.w	r3, r3, #12
 8002d4e:	d008      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1e>
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d038      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d034      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	4824      	ldr	r0, [pc, #144]	; (8002dec <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d5c:	bf18      	it	ne
 8002d5e:	2000      	movne	r0, #0
 8002d60:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d62:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d64:	6811      	ldr	r1, [r2, #0]
 8002d66:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d68:	bf54      	ite	pl
 8002d6a:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d6e:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8002d70:	491f      	ldr	r1, [pc, #124]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d72:	bf54      	ite	pl
 8002d74:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d78:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8002d7c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d80:	b303      	cbz	r3, 8002dc4 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d12d      	bne.n	8002de2 <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d025      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x9a>
 8002d92:	4a16      	ldr	r2, [pc, #88]	; (8002dec <HAL_RCC_GetSysClockFreq+0xa8>)
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	bf08      	it	eq
 8002d98:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d9c:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d9e:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002da6:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002daa:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dae:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002db0:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db4:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002db6:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002db8:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002dbc:	fbb2 f0f3 	udiv	r0, r2, r3
 8002dc0:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002dc2:	480c      	ldr	r0, [pc, #48]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 8002dc4:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dc6:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dca:	2a01      	cmp	r2, #1
 8002dcc:	d0c9      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002dd6:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dd8:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8002ddc:	d1d9      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8002dde:	4805      	ldr	r0, [pc, #20]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002de0:	e7db      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x56>
 8002de2:	2000      	movs	r0, #0
  return sysclockfreq;
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	007a1200 	.word	0x007a1200
 8002df0:	08004b6c 	.word	0x08004b6c
 8002df4:	00f42400 	.word	0x00f42400

08002df8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	f000 824a 	beq.w	8003292 <HAL_RCC_OscConfig+0x49a>
{
 8002dfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e02:	4aa8      	ldr	r2, [pc, #672]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e04:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e06:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e08:	68d6      	ldr	r6, [r2, #12]
 8002e0a:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e0c:	06d8      	lsls	r0, r3, #27
{
 8002e0e:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e10:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e14:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e18:	d52e      	bpl.n	8002e78 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e1a:	2d00      	cmp	r5, #0
 8002e1c:	f000 8103 	beq.w	8003026 <HAL_RCC_OscConfig+0x22e>
 8002e20:	2d0c      	cmp	r5, #12
 8002e22:	f000 80fd 	beq.w	8003020 <HAL_RCC_OscConfig+0x228>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e26:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8002e28:	4f9e      	ldr	r7, [pc, #632]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 81d7 	beq.w	80031de <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_MSI_ENABLE();
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8002e38:	f7ff f8d4 	bl	8001fe4 <HAL_GetTick>
 8002e3c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e3e:	e006      	b.n	8002e4e <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e40:	f7ff f8d0 	bl	8001fe4 <HAL_GetTick>
 8002e44:	eba0 0008 	sub.w	r0, r0, r8
 8002e48:	2802      	cmp	r0, #2
 8002e4a:	f200 81d9 	bhi.w	8003200 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	079b      	lsls	r3, r3, #30
 8002e52:	d5f5      	bpl.n	8002e40 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6a22      	ldr	r2, [r4, #32]
 8002e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e64:	4313      	orrs	r3, r2
 8002e66:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69e2      	ldr	r2, [r4, #28]
 8002e6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e74:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	07d9      	lsls	r1, r3, #31
 8002e7a:	f100 80a6 	bmi.w	8002fca <HAL_RCC_OscConfig+0x1d2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	0799      	lsls	r1, r3, #30
 8002e80:	d523      	bpl.n	8002eca <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e82:	2d04      	cmp	r5, #4
 8002e84:	f000 819a 	beq.w	80031bc <HAL_RCC_OscConfig+0x3c4>
 8002e88:	2d0c      	cmp	r5, #12
 8002e8a:	f000 8194 	beq.w	80031b6 <HAL_RCC_OscConfig+0x3be>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8e:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8002e90:	4e84      	ldr	r6, [pc, #528]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 81cf 	beq.w	8003236 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_HSI_ENABLE();
 8002e98:	6833      	ldr	r3, [r6, #0]
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002ea0:	f7ff f8a0 	bl	8001fe4 <HAL_GetTick>
 8002ea4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7ff f89c 	bl	8001fe4 <HAL_GetTick>
 8002eac:	1bc0      	subs	r0, r0, r7
 8002eae:	2802      	cmp	r0, #2
 8002eb0:	f200 81a6 	bhi.w	8003200 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb4:	6833      	ldr	r3, [r6, #0]
 8002eb6:	055b      	lsls	r3, r3, #21
 8002eb8:	d5f6      	bpl.n	8002ea8 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	6873      	ldr	r3, [r6, #4]
 8002ebc:	6922      	ldr	r2, [r4, #16]
 8002ebe:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002ec2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ec6:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	0719      	lsls	r1, r3, #28
 8002ecc:	d519      	bpl.n	8002f02 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ece:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002ed0:	4e74      	ldr	r6, [pc, #464]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 815b 	beq.w	800318e <HAL_RCC_OscConfig+0x396>
      __HAL_RCC_LSI_ENABLE();
 8002ed8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002ee4:	f7ff f87e 	bl	8001fe4 <HAL_GetTick>
 8002ee8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eec:	f7ff f87a 	bl	8001fe4 <HAL_GetTick>
 8002ef0:	1bc0      	subs	r0, r0, r7
 8002ef2:	2802      	cmp	r0, #2
 8002ef4:	f200 8184 	bhi.w	8003200 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef8:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8002efc:	079a      	lsls	r2, r3, #30
 8002efe:	d5f5      	bpl.n	8002eec <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	075f      	lsls	r7, r3, #29
 8002f04:	d53e      	bpl.n	8002f84 <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f06:	4b67      	ldr	r3, [pc, #412]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f0a:	00d6      	lsls	r6, r2, #3
 8002f0c:	f100 8191 	bmi.w	8003232 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f16:	659a      	str	r2, [r3, #88]	; 0x58
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f22:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f24:	4f60      	ldr	r7, [pc, #384]	; (80030a8 <HAL_RCC_OscConfig+0x2b0>)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	05d8      	lsls	r0, r3, #23
 8002f2a:	f140 81cc 	bpl.w	80032c6 <HAL_RCC_OscConfig+0x4ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2e:	68a3      	ldr	r3, [r4, #8]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	f000 8192 	beq.w	800325a <HAL_RCC_OscConfig+0x462>
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	f000 81f0 	beq.w	800331c <HAL_RCC_OscConfig+0x524>
 8002f3c:	4f59      	ldr	r7, [pc, #356]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002f4a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002f4e:	f022 0204 	bic.w	r2, r2, #4
 8002f52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f040 8186 	bne.w	8003268 <HAL_RCC_OscConfig+0x470>
      tickstart = HAL_GetTick();
 8002f5c:	f7ff f842 	bl	8001fe4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f64:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f66:	e006      	b.n	8002f76 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7ff f83c 	bl	8001fe4 <HAL_GetTick>
 8002f6c:	eba0 0008 	sub.w	r0, r0, r8
 8002f70:	4548      	cmp	r0, r9
 8002f72:	f200 8145 	bhi.w	8003200 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f7a:	079b      	lsls	r3, r3, #30
 8002f7c:	d4f4      	bmi.n	8002f68 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8002f7e:	2e00      	cmp	r6, #0
 8002f80:	f040 81b3 	bne.w	80032ea <HAL_RCC_OscConfig+0x4f2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80f0 	beq.w	800316c <HAL_RCC_OscConfig+0x374>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	f000 809c 	beq.w	80030ca <HAL_RCC_OscConfig+0x2d2>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f92:	2d0c      	cmp	r5, #12
 8002f94:	f000 8095 	beq.w	80030c2 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 8002f98:	4c42      	ldr	r4, [pc, #264]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fa2:	f7ff f81f 	bl	8001fe4 <HAL_GetTick>
 8002fa6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa8:	e005      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1be>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002faa:	f7ff f81b 	bl	8001fe4 <HAL_GetTick>
 8002fae:	1b40      	subs	r0, r0, r5
 8002fb0:	2802      	cmp	r0, #2
 8002fb2:	f200 8125 	bhi.w	8003200 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	d1f5      	bne.n	8002faa <HAL_RCC_OscConfig+0x1b2>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fbe:	68e1      	ldr	r1, [r4, #12]
 8002fc0:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <HAL_RCC_OscConfig+0x2b4>)
 8002fc2:	400a      	ands	r2, r1
  return HAL_OK;
 8002fc4:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fc6:	60e2      	str	r2, [r4, #12]
 8002fc8:	e0d1      	b.n	800316e <HAL_RCC_OscConfig+0x376>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fca:	2d08      	cmp	r5, #8
 8002fcc:	f000 80d5 	beq.w	800317a <HAL_RCC_OscConfig+0x382>
 8002fd0:	2d0c      	cmp	r5, #12
 8002fd2:	f000 80cf 	beq.w	8003174 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd6:	6863      	ldr	r3, [r4, #4]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	f000 8114 	beq.w	8003208 <HAL_RCC_OscConfig+0x410>
 8002fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe4:	f000 818d 	beq.w	8003302 <HAL_RCC_OscConfig+0x50a>
 8002fe8:	4f2e      	ldr	r7, [pc, #184]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ff0:	603a      	str	r2, [r7, #0]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ff8:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 8109 	bne.w	8003212 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8003000:	f7fe fff0 	bl	8001fe4 <HAL_GetTick>
 8003004:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003006:	e006      	b.n	8003016 <HAL_RCC_OscConfig+0x21e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe ffec 	bl	8001fe4 <HAL_GetTick>
 800300c:	eba0 0008 	sub.w	r0, r0, r8
 8003010:	2864      	cmp	r0, #100	; 0x64
 8003012:	f200 80f5 	bhi.w	8003200 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	0398      	lsls	r0, r3, #14
 800301a:	d4f5      	bmi.n	8003008 <HAL_RCC_OscConfig+0x210>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	e72e      	b.n	8002e7e <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003020:	2e01      	cmp	r6, #1
 8003022:	f47f af00 	bne.w	8002e26 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003026:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0799      	lsls	r1, r3, #30
 800302c:	d446      	bmi.n	80030bc <HAL_RCC_OscConfig+0x2c4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800302e:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	6a20      	ldr	r0, [r4, #32]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	0712      	lsls	r2, r2, #28
 8003036:	bf56      	itet	pl
 8003038:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 800303c:	681b      	ldrmi	r3, [r3, #0]
 800303e:	091b      	lsrpl	r3, r3, #4
 8003040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003044:	4298      	cmp	r0, r3
 8003046:	f200 8126 	bhi.w	8003296 <HAL_RCC_OscConfig+0x49e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f042 0208 	orr.w	r2, r2, #8
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800305a:	4302      	orrs	r2, r0
 800305c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	69e1      	ldr	r1, [r4, #28]
 8003062:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003066:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800306a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800306c:	2d00      	cmp	r5, #0
 800306e:	f000 8142 	beq.w	80032f6 <HAL_RCC_OscConfig+0x4fe>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003072:	f7ff fe67 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_RCC_OscConfig+0x2b8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003080:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8003082:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <HAL_RCC_OscConfig+0x2bc>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800308c:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <HAL_RCC_OscConfig+0x2c0>)
 8003090:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8003092:	f7fe ff5d 	bl	8001f50 <HAL_InitTick>
        if(status != HAL_OK)
 8003096:	2800      	cmp	r0, #0
 8003098:	d169      	bne.n	800316e <HAL_RCC_OscConfig+0x376>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	07d9      	lsls	r1, r3, #31
 800309e:	f57f aeee 	bpl.w	8002e7e <HAL_RCC_OscConfig+0x86>
 80030a2:	e792      	b.n	8002fca <HAL_RCC_OscConfig+0x1d2>
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40007000 	.word	0x40007000
 80030ac:	feeefffc 	.word	0xfeeefffc
 80030b0:	08004b54 	.word	0x08004b54
 80030b4:	2000018c 	.word	0x2000018c
 80030b8:	20000034 	.word	0x20000034
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030bc:	69a3      	ldr	r3, [r4, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1b5      	bne.n	800302e <HAL_RCC_OscConfig+0x236>
    return HAL_ERROR;
 80030c2:	2001      	movs	r0, #1
}
 80030c4:	b003      	add	sp, #12
 80030c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pll_config = RCC->PLLCFGR;
 80030ca:	4e9b      	ldr	r6, [pc, #620]	; (8003338 <HAL_RCC_OscConfig+0x540>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 80030ce:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d0:	f003 0103 	and.w	r1, r3, #3
 80030d4:	4291      	cmp	r1, r2
 80030d6:	f000 8133 	beq.w	8003340 <HAL_RCC_OscConfig+0x548>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030da:	2d0c      	cmp	r5, #12
 80030dc:	d0f1      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2ca>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030de:	4d96      	ldr	r5, [pc, #600]	; (8003338 <HAL_RCC_OscConfig+0x540>)
 80030e0:	682b      	ldr	r3, [r5, #0]
 80030e2:	015f      	lsls	r7, r3, #5
 80030e4:	d4ed      	bmi.n	80030c2 <HAL_RCC_OscConfig+0x2ca>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030e6:	682b      	ldr	r3, [r5, #0]
 80030e8:	00de      	lsls	r6, r3, #3
 80030ea:	d4ea      	bmi.n	80030c2 <HAL_RCC_OscConfig+0x2ca>
            __HAL_RCC_PLL_DISABLE();
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f2:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80030f4:	f7fe ff76 	bl	8001fe4 <HAL_GetTick>
 80030f8:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fa:	e004      	b.n	8003106 <HAL_RCC_OscConfig+0x30e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fe ff72 	bl	8001fe4 <HAL_GetTick>
 8003100:	1b80      	subs	r0, r0, r6
 8003102:	2802      	cmp	r0, #2
 8003104:	d87c      	bhi.n	8003200 <HAL_RCC_OscConfig+0x408>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	0198      	lsls	r0, r3, #6
 800310a:	d4f7      	bmi.n	80030fc <HAL_RCC_OscConfig+0x304>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310c:	68e9      	ldr	r1, [r5, #12]
 800310e:	4b8b      	ldr	r3, [pc, #556]	; (800333c <HAL_RCC_OscConfig+0x544>)
 8003110:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	4e89      	ldr	r6, [pc, #548]	; (8003338 <HAL_RCC_OscConfig+0x540>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003114:	400b      	ands	r3, r1
 8003116:	4313      	orrs	r3, r2
 8003118:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	; 0x30
 800311c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003120:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8003124:	3a01      	subs	r2, #1
 8003126:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800312a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800312c:	0900      	lsrs	r0, r0, #4
 800312e:	0849      	lsrs	r1, r1, #1
 8003130:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8003134:	3901      	subs	r1, #1
 8003136:	0852      	lsrs	r2, r2, #1
 8003138:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800313c:	3a01      	subs	r2, #1
 800313e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003142:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800314c:	68eb      	ldr	r3, [r5, #12]
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003152:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8003154:	f7fe ff46 	bl	8001fe4 <HAL_GetTick>
 8003158:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315a:	e004      	b.n	8003166 <HAL_RCC_OscConfig+0x36e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315c:	f7fe ff42 	bl	8001fe4 <HAL_GetTick>
 8003160:	1b00      	subs	r0, r0, r4
 8003162:	2802      	cmp	r0, #2
 8003164:	d84c      	bhi.n	8003200 <HAL_RCC_OscConfig+0x408>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	6833      	ldr	r3, [r6, #0]
 8003168:	0199      	lsls	r1, r3, #6
 800316a:	d5f7      	bpl.n	800315c <HAL_RCC_OscConfig+0x364>
  return HAL_OK;
 800316c:	2000      	movs	r0, #0
}
 800316e:	b003      	add	sp, #12
 8003170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003174:	2e03      	cmp	r6, #3
 8003176:	f47f af2e 	bne.w	8002fd6 <HAL_RCC_OscConfig+0x1de>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317a:	4a6f      	ldr	r2, [pc, #444]	; (8003338 <HAL_RCC_OscConfig+0x540>)
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	0392      	lsls	r2, r2, #14
 8003180:	f57f ae7d 	bpl.w	8002e7e <HAL_RCC_OscConfig+0x86>
 8003184:	6862      	ldr	r2, [r4, #4]
 8003186:	2a00      	cmp	r2, #0
 8003188:	f47f ae79 	bne.w	8002e7e <HAL_RCC_OscConfig+0x86>
 800318c:	e799      	b.n	80030c2 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_LSI_DISABLE();
 800318e:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800319a:	f7fe ff23 	bl	8001fe4 <HAL_GetTick>
 800319e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a0:	e004      	b.n	80031ac <HAL_RCC_OscConfig+0x3b4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a2:	f7fe ff1f 	bl	8001fe4 <HAL_GetTick>
 80031a6:	1bc0      	subs	r0, r0, r7
 80031a8:	2802      	cmp	r0, #2
 80031aa:	d829      	bhi.n	8003200 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ac:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80031b0:	079b      	lsls	r3, r3, #30
 80031b2:	d4f6      	bmi.n	80031a2 <HAL_RCC_OscConfig+0x3aa>
 80031b4:	e6a4      	b.n	8002f00 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031b6:	2e02      	cmp	r6, #2
 80031b8:	f47f ae69 	bne.w	8002e8e <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031bc:	4a5e      	ldr	r2, [pc, #376]	; (8003338 <HAL_RCC_OscConfig+0x540>)
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	0552      	lsls	r2, r2, #21
 80031c2:	d503      	bpl.n	80031cc <HAL_RCC_OscConfig+0x3d4>
 80031c4:	68e2      	ldr	r2, [r4, #12]
 80031c6:	2a00      	cmp	r2, #0
 80031c8:	f43f af7b 	beq.w	80030c2 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031cc:	495a      	ldr	r1, [pc, #360]	; (8003338 <HAL_RCC_OscConfig+0x540>)
 80031ce:	6920      	ldr	r0, [r4, #16]
 80031d0:	684a      	ldr	r2, [r1, #4]
 80031d2:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 80031d6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80031da:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031dc:	e675      	b.n	8002eca <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80031e6:	f7fe fefd 	bl	8001fe4 <HAL_GetTick>
 80031ea:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	0798      	lsls	r0, r3, #30
 80031f0:	f57f af53 	bpl.w	800309a <HAL_RCC_OscConfig+0x2a2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f4:	f7fe fef6 	bl	8001fe4 <HAL_GetTick>
 80031f8:	eba0 0008 	sub.w	r0, r0, r8
 80031fc:	2802      	cmp	r0, #2
 80031fe:	d9f5      	bls.n	80031ec <HAL_RCC_OscConfig+0x3f4>
            return HAL_TIMEOUT;
 8003200:	2003      	movs	r0, #3
}
 8003202:	b003      	add	sp, #12
 8003204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003208:	4a4b      	ldr	r2, [pc, #300]	; (8003338 <HAL_RCC_OscConfig+0x540>)
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003212:	f7fe fee7 	bl	8001fe4 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003216:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8003338 <HAL_RCC_OscConfig+0x540>
        tickstart = HAL_GetTick();
 800321a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321c:	e004      	b.n	8003228 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321e:	f7fe fee1 	bl	8001fe4 <HAL_GetTick>
 8003222:	1bc0      	subs	r0, r0, r7
 8003224:	2864      	cmp	r0, #100	; 0x64
 8003226:	d8eb      	bhi.n	8003200 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003228:	f8d8 3000 	ldr.w	r3, [r8]
 800322c:	039b      	lsls	r3, r3, #14
 800322e:	d5f6      	bpl.n	800321e <HAL_RCC_OscConfig+0x426>
 8003230:	e6f4      	b.n	800301c <HAL_RCC_OscConfig+0x224>
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2600      	movs	r6, #0
 8003234:	e676      	b.n	8002f24 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8003236:	6833      	ldr	r3, [r6, #0]
 8003238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800323c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800323e:	f7fe fed1 	bl	8001fe4 <HAL_GetTick>
 8003242:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003244:	e004      	b.n	8003250 <HAL_RCC_OscConfig+0x458>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003246:	f7fe fecd 	bl	8001fe4 <HAL_GetTick>
 800324a:	1bc0      	subs	r0, r0, r7
 800324c:	2802      	cmp	r0, #2
 800324e:	d8d7      	bhi.n	8003200 <HAL_RCC_OscConfig+0x408>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003250:	6833      	ldr	r3, [r6, #0]
 8003252:	0558      	lsls	r0, r3, #21
 8003254:	d4f7      	bmi.n	8003246 <HAL_RCC_OscConfig+0x44e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	e637      	b.n	8002eca <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325a:	4a37      	ldr	r2, [pc, #220]	; (8003338 <HAL_RCC_OscConfig+0x540>)
 800325c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003268:	f7fe febc 	bl	8001fe4 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8003338 <HAL_RCC_OscConfig+0x540>
      tickstart = HAL_GetTick();
 8003270:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003276:	e004      	b.n	8003282 <HAL_RCC_OscConfig+0x48a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fe feb4 	bl	8001fe4 <HAL_GetTick>
 800327c:	1bc0      	subs	r0, r0, r7
 800327e:	4548      	cmp	r0, r9
 8003280:	d8be      	bhi.n	8003200 <HAL_RCC_OscConfig+0x408>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003282:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8003286:	079a      	lsls	r2, r3, #30
 8003288:	d5f6      	bpl.n	8003278 <HAL_RCC_OscConfig+0x480>
    if(pwrclkchanged == SET)
 800328a:	2e00      	cmp	r6, #0
 800328c:	f43f ae7a 	beq.w	8002f84 <HAL_RCC_OscConfig+0x18c>
 8003290:	e02b      	b.n	80032ea <HAL_RCC_OscConfig+0x4f2>
    return HAL_ERROR;
 8003292:	2001      	movs	r0, #1
}
 8003294:	4770      	bx	lr
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003296:	f7ff fd0f 	bl	8002cb8 <RCC_SetFlashLatencyFromMSIRange>
 800329a:	2800      	cmp	r0, #0
 800329c:	f47f af11 	bne.w	80030c2 <HAL_RCC_OscConfig+0x2ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a0:	4b25      	ldr	r3, [pc, #148]	; (8003338 <HAL_RCC_OscConfig+0x540>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	f042 0208 	orr.w	r2, r2, #8
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	6a21      	ldr	r1, [r4, #32]
 80032ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80032b2:	430a      	orrs	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	69e1      	ldr	r1, [r4, #28]
 80032ba:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80032be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	e6d5      	b.n	8003072 <HAL_RCC_OscConfig+0x27a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80032ce:	f7fe fe89 	bl	8001fe4 <HAL_GetTick>
 80032d2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	05d9      	lsls	r1, r3, #23
 80032d8:	f53f ae29 	bmi.w	8002f2e <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032dc:	f7fe fe82 	bl	8001fe4 <HAL_GetTick>
 80032e0:	eba0 0008 	sub.w	r0, r0, r8
 80032e4:	2802      	cmp	r0, #2
 80032e6:	d9f5      	bls.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
 80032e8:	e78a      	b.n	8003200 <HAL_RCC_OscConfig+0x408>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ea:	4a13      	ldr	r2, [pc, #76]	; (8003338 <HAL_RCC_OscConfig+0x540>)
 80032ec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80032ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f2:	6593      	str	r3, [r2, #88]	; 0x58
 80032f4:	e646      	b.n	8002f84 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032f6:	f7ff fcdf 	bl	8002cb8 <RCC_SetFlashLatencyFromMSIRange>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	f43f aeb9 	beq.w	8003072 <HAL_RCC_OscConfig+0x27a>
 8003300:	e6df      	b.n	80030c2 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003302:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003306:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003318:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800331a:	e77a      	b.n	8003212 <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_RCC_OscConfig+0x540>)
 800331e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003322:	f042 0204 	orr.w	r2, r2, #4
 8003326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800332a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003336:	e797      	b.n	8003268 <HAL_RCC_OscConfig+0x470>
 8003338:	40021000 	.word	0x40021000
 800333c:	f99d808c 	.word	0xf99d808c
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003340:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003342:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003346:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003348:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800334c:	f47f aec5 	bne.w	80030da <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003352:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003356:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800335a:	f47f aebe 	bne.w	80030da <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800335e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003360:	3a07      	subs	r2, #7
 8003362:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8003366:	bf18      	it	ne
 8003368:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	4291      	cmp	r1, r2
 800336c:	f47f aeb5 	bne.w	80030da <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003370:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003372:	0852      	lsrs	r2, r2, #1
 8003374:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003378:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800337a:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800337e:	f47f aeac 	bne.w	80030da <HAL_RCC_OscConfig+0x2e2>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003382:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003384:	0852      	lsrs	r2, r2, #1
 8003386:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800338a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003390:	f47f aea3 	bne.w	80030da <HAL_RCC_OscConfig+0x2e2>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003394:	6833      	ldr	r3, [r6, #0]
 8003396:	019a      	lsls	r2, r3, #6
 8003398:	f53f aee8 	bmi.w	800316c <HAL_RCC_OscConfig+0x374>
          __HAL_RCC_PLL_ENABLE();
 800339c:	6833      	ldr	r3, [r6, #0]
 800339e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a2:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033a4:	68f3      	ldr	r3, [r6, #12]
 80033a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033aa:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 80033ac:	f7fe fe1a 	bl	8001fe4 <HAL_GetTick>
 80033b0:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b2:	e005      	b.n	80033c0 <HAL_RCC_OscConfig+0x5c8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe fe16 	bl	8001fe4 <HAL_GetTick>
 80033b8:	1b00      	subs	r0, r0, r4
 80033ba:	2802      	cmp	r0, #2
 80033bc:	f63f af20 	bhi.w	8003200 <HAL_RCC_OscConfig+0x408>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c0:	6833      	ldr	r3, [r6, #0]
 80033c2:	019b      	lsls	r3, r3, #6
 80033c4:	d5f6      	bpl.n	80033b4 <HAL_RCC_OscConfig+0x5bc>
 80033c6:	e6d1      	b.n	800316c <HAL_RCC_OscConfig+0x374>

080033c8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80033c8:	2800      	cmp	r0, #0
 80033ca:	f000 809f 	beq.w	800350c <HAL_RCC_ClockConfig+0x144>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ce:	4a53      	ldr	r2, [pc, #332]	; (800351c <HAL_RCC_ClockConfig+0x154>)
 80033d0:	6813      	ldr	r3, [r2, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	428b      	cmp	r3, r1
{
 80033d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033dc:	460d      	mov	r5, r1
 80033de:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	d20c      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	6813      	ldr	r3, [r2, #0]
 80033e4:	f023 0307 	bic.w	r3, r3, #7
 80033e8:	430b      	orrs	r3, r1
 80033ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ec:	6813      	ldr	r3, [r2, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	428b      	cmp	r3, r1
 80033f4:	d002      	beq.n	80033fc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80033f6:	2001      	movs	r0, #1
}
 80033f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	079e      	lsls	r6, r3, #30
 8003400:	d571      	bpl.n	80034e6 <HAL_RCC_ClockConfig+0x11e>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003402:	4847      	ldr	r0, [pc, #284]	; (8003520 <HAL_RCC_ClockConfig+0x158>)
 8003404:	68a1      	ldr	r1, [r4, #8]
 8003406:	6882      	ldr	r2, [r0, #8]
 8003408:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800340c:	4291      	cmp	r1, r2
 800340e:	d904      	bls.n	800341a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	6882      	ldr	r2, [r0, #8]
 8003412:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003416:	430a      	orrs	r2, r1
 8003418:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	07da      	lsls	r2, r3, #31
 800341c:	d526      	bpl.n	800346c <HAL_RCC_ClockConfig+0xa4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341e:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003420:	4b3f      	ldr	r3, [pc, #252]	; (8003520 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003422:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003424:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003426:	d065      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x12c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003428:	2a02      	cmp	r2, #2
 800342a:	d06c      	beq.n	8003506 <HAL_RCC_ClockConfig+0x13e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800342c:	2a00      	cmp	r2, #0
 800342e:	d171      	bne.n	8003514 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003430:	079b      	lsls	r3, r3, #30
 8003432:	d5e0      	bpl.n	80033f6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003434:	4e3a      	ldr	r6, [pc, #232]	; (8003520 <HAL_RCC_ClockConfig+0x158>)
 8003436:	68b3      	ldr	r3, [r6, #8]
 8003438:	f023 0303 	bic.w	r3, r3, #3
 800343c:	4313      	orrs	r3, r2
 800343e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003440:	f7fe fdd0 	bl	8001fe4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003444:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003448:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	e004      	b.n	8003456 <HAL_RCC_ClockConfig+0x8e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344c:	f7fe fdca 	bl	8001fe4 <HAL_GetTick>
 8003450:	1bc0      	subs	r0, r0, r7
 8003452:	4540      	cmp	r0, r8
 8003454:	d85c      	bhi.n	8003510 <HAL_RCC_ClockConfig+0x148>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003456:	68b3      	ldr	r3, [r6, #8]
 8003458:	6862      	ldr	r2, [r4, #4]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003462:	d1f3      	bne.n	800344c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	079e      	lsls	r6, r3, #30
 8003468:	d506      	bpl.n	8003478 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800346a:	68a1      	ldr	r1, [r4, #8]
 800346c:	482c      	ldr	r0, [pc, #176]	; (8003520 <HAL_RCC_ClockConfig+0x158>)
 800346e:	6882      	ldr	r2, [r0, #8]
 8003470:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003474:	428a      	cmp	r2, r1
 8003476:	d840      	bhi.n	80034fa <HAL_RCC_ClockConfig+0x132>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003478:	4928      	ldr	r1, [pc, #160]	; (800351c <HAL_RCC_ClockConfig+0x154>)
 800347a:	680a      	ldr	r2, [r1, #0]
 800347c:	f002 0207 	and.w	r2, r2, #7
 8003480:	42aa      	cmp	r2, r5
 8003482:	d909      	bls.n	8003498 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003484:	680a      	ldr	r2, [r1, #0]
 8003486:	f022 0207 	bic.w	r2, r2, #7
 800348a:	432a      	orrs	r2, r5
 800348c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	680a      	ldr	r2, [r1, #0]
 8003490:	f002 0207 	and.w	r2, r2, #7
 8003494:	42aa      	cmp	r2, r5
 8003496:	d1ae      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	075d      	lsls	r5, r3, #29
 800349a:	d506      	bpl.n	80034aa <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800349c:	4920      	ldr	r1, [pc, #128]	; (8003520 <HAL_RCC_ClockConfig+0x158>)
 800349e:	68e0      	ldr	r0, [r4, #12]
 80034a0:	688a      	ldr	r2, [r1, #8]
 80034a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034a6:	4302      	orrs	r2, r0
 80034a8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034aa:	0718      	lsls	r0, r3, #28
 80034ac:	d507      	bpl.n	80034be <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_RCC_ClockConfig+0x158>)
 80034b0:	6921      	ldr	r1, [r4, #16]
 80034b2:	6893      	ldr	r3, [r2, #8]
 80034b4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80034b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034bc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034be:	f7ff fc41 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_RCC_ClockConfig+0x158>)
 80034c4:	4c17      	ldr	r4, [pc, #92]	; (8003524 <HAL_RCC_ClockConfig+0x15c>)
 80034c6:	6892      	ldr	r2, [r2, #8]
 80034c8:	4917      	ldr	r1, [pc, #92]	; (8003528 <HAL_RCC_ClockConfig+0x160>)
 80034ca:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80034ce:	4603      	mov	r3, r0
 80034d0:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 80034d2:	4816      	ldr	r0, [pc, #88]	; (800352c <HAL_RCC_ClockConfig+0x164>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034d4:	f002 021f 	and.w	r2, r2, #31
 80034d8:	40d3      	lsrs	r3, r2
}
 80034da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80034de:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034e0:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80034e2:	f7fe bd35 	b.w	8001f50 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	07d9      	lsls	r1, r3, #31
 80034e8:	d5c6      	bpl.n	8003478 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ea:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ee:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f0:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f2:	d199      	bne.n	8003428 <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f4:	0198      	lsls	r0, r3, #6
 80034f6:	d49d      	bmi.n	8003434 <HAL_RCC_ClockConfig+0x6c>
 80034f8:	e77d      	b.n	80033f6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fa:	6882      	ldr	r2, [r0, #8]
 80034fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003500:	430a      	orrs	r2, r1
 8003502:	6082      	str	r2, [r0, #8]
 8003504:	e7b8      	b.n	8003478 <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003506:	0399      	lsls	r1, r3, #14
 8003508:	d494      	bmi.n	8003434 <HAL_RCC_ClockConfig+0x6c>
 800350a:	e774      	b.n	80033f6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800350c:	2001      	movs	r0, #1
}
 800350e:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003510:	2003      	movs	r0, #3
 8003512:	e771      	b.n	80033f8 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003514:	055f      	lsls	r7, r3, #21
 8003516:	f57f af6e 	bpl.w	80033f6 <HAL_RCC_ClockConfig+0x2e>
 800351a:	e78b      	b.n	8003434 <HAL_RCC_ClockConfig+0x6c>
 800351c:	40022000 	.word	0x40022000
 8003520:	40021000 	.word	0x40021000
 8003524:	08004b54 	.word	0x08004b54
 8003528:	20000034 	.word	0x20000034
 800352c:	2000018c 	.word	0x2000018c

08003530 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003532:	4a06      	ldr	r2, [pc, #24]	; (800354c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003534:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003536:	4906      	ldr	r1, [pc, #24]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003538:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800353c:	6808      	ldr	r0, [r1, #0]
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	f003 031f 	and.w	r3, r3, #31
}
 8003544:	40d8      	lsrs	r0, r3
 8003546:	4770      	bx	lr
 8003548:	40021000 	.word	0x40021000
 800354c:	08004b64 	.word	0x08004b64
 8003550:	20000034 	.word	0x20000034

08003554 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003556:	4a06      	ldr	r2, [pc, #24]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003558:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800355a:	4906      	ldr	r1, [pc, #24]	; (8003574 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800355c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003560:	6808      	ldr	r0, [r1, #0]
 8003562:	5cd3      	ldrb	r3, [r2, r3]
 8003564:	f003 031f 	and.w	r3, r3, #31
}
 8003568:	40d8      	lsrs	r0, r3
 800356a:	4770      	bx	lr
 800356c:	40021000 	.word	0x40021000
 8003570:	08004b64 	.word	0x08004b64
 8003574:	20000034 	.word	0x20000034

08003578 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800357a:	4b47      	ldr	r3, [pc, #284]	; (8003698 <RCCEx_PLLSAI1_Config+0x120>)
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	0792      	lsls	r2, r2, #30
{
 8003580:	4604      	mov	r4, r0
 8003582:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003584:	d007      	beq.n	8003596 <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	6801      	ldr	r1, [r0, #0]
 800358a:	f002 0203 	and.w	r2, r2, #3
 800358e:	428a      	cmp	r2, r1
 8003590:	d04c      	beq.n	800362c <RCCEx_PLLSAI1_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003592:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8003596:	6800      	ldr	r0, [r0, #0]
 8003598:	2802      	cmp	r0, #2
 800359a:	d058      	beq.n	800364e <RCCEx_PLLSAI1_Config+0xd6>
 800359c:	2803      	cmp	r0, #3
 800359e:	d04f      	beq.n	8003640 <RCCEx_PLLSAI1_Config+0xc8>
 80035a0:	2801      	cmp	r0, #1
 80035a2:	d1f6      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	079b      	lsls	r3, r3, #30
 80035a8:	d5f4      	bpl.n	8003594 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035aa:	493b      	ldr	r1, [pc, #236]	; (8003698 <RCCEx_PLLSAI1_Config+0x120>)
 80035ac:	6862      	ldr	r2, [r4, #4]
 80035ae:	68cb      	ldr	r3, [r1, #12]
 80035b0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80035b4:	4303      	orrs	r3, r0
 80035b6:	3a01      	subs	r2, #1
 80035b8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80035bc:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80035be:	4d36      	ldr	r5, [pc, #216]	; (8003698 <RCCEx_PLLSAI1_Config+0x120>)
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035c6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80035c8:	f7fe fd0c 	bl	8001fe4 <HAL_GetTick>
 80035cc:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ce:	e004      	b.n	80035da <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d0:	f7fe fd08 	bl	8001fe4 <HAL_GetTick>
 80035d4:	1b83      	subs	r3, r0, r6
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d83d      	bhi.n	8003656 <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035da:	682b      	ldr	r3, [r5, #0]
 80035dc:	011a      	lsls	r2, r3, #4
 80035de:	d4f7      	bmi.n	80035d0 <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 80035e0:	2f00      	cmp	r7, #0
 80035e2:	d13a      	bne.n	800365a <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035e4:	692b      	ldr	r3, [r5, #16]
 80035e6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80035ea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035f6:	0912      	lsrs	r2, r2, #4
 80035f8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80035fc:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80035fe:	4d26      	ldr	r5, [pc, #152]	; (8003698 <RCCEx_PLLSAI1_Config+0x120>)
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003606:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003608:	f7fe fcec 	bl	8001fe4 <HAL_GetTick>
 800360c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800360e:	e004      	b.n	800361a <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003610:	f7fe fce8 	bl	8001fe4 <HAL_GetTick>
 8003614:	1b83      	subs	r3, r0, r6
 8003616:	2b02      	cmp	r3, #2
 8003618:	d81d      	bhi.n	8003656 <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800361a:	682b      	ldr	r3, [r5, #0]
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	d5f7      	bpl.n	8003610 <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003620:	692b      	ldr	r3, [r5, #16]
 8003622:	69a2      	ldr	r2, [r4, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	2000      	movs	r0, #0
 8003628:	612b      	str	r3, [r5, #16]
}
 800362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800362c:	2a00      	cmp	r2, #0
 800362e:	d0b0      	beq.n	8003592 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003630:	68db      	ldr	r3, [r3, #12]
       ||
 8003632:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003634:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003638:	3301      	adds	r3, #1
       ||
 800363a:	4293      	cmp	r3, r2
 800363c:	d1a9      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0x1a>
 800363e:	e7be      	b.n	80035be <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	0395      	lsls	r5, r2, #14
 8003644:	d4b1      	bmi.n	80035aa <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0359      	lsls	r1, r3, #13
 800364a:	d5a2      	bpl.n	8003592 <RCCEx_PLLSAI1_Config+0x1a>
 800364c:	e7ad      	b.n	80035aa <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	055e      	lsls	r6, r3, #21
 8003652:	d59e      	bpl.n	8003592 <RCCEx_PLLSAI1_Config+0x1a>
 8003654:	e7a9      	b.n	80035aa <RCCEx_PLLSAI1_Config+0x32>
    switch(PllSai1->PLLSAI1Source)
 8003656:	2003      	movs	r0, #3
}
 8003658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800365a:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800365c:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800365e:	d00d      	beq.n	800367c <RCCEx_PLLSAI1_Config+0x104>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003660:	6962      	ldr	r2, [r4, #20]
 8003662:	68a1      	ldr	r1, [r4, #8]
 8003664:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003668:	0852      	lsrs	r2, r2, #1
 800366a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800366e:	3a01      	subs	r2, #1
 8003670:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003674:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003678:	612b      	str	r3, [r5, #16]
 800367a:	e7c0      	b.n	80035fe <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800367c:	6922      	ldr	r2, [r4, #16]
 800367e:	68a1      	ldr	r1, [r4, #8]
 8003680:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003684:	0852      	lsrs	r2, r2, #1
 8003686:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800368a:	3a01      	subs	r2, #1
 800368c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003690:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003694:	612b      	str	r3, [r5, #16]
 8003696:	e7b2      	b.n	80035fe <RCCEx_PLLSAI1_Config+0x86>
 8003698:	40021000 	.word	0x40021000

0800369c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800369e:	4b3f      	ldr	r3, [pc, #252]	; (800379c <RCCEx_PLLSAI2_Config+0x100>)
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	0792      	lsls	r2, r2, #30
{
 80036a4:	4604      	mov	r4, r0
 80036a6:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036a8:	d007      	beq.n	80036ba <RCCEx_PLLSAI2_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	6801      	ldr	r1, [r0, #0]
 80036ae:	f002 0203 	and.w	r2, r2, #3
 80036b2:	428a      	cmp	r2, r1
 80036b4:	d04c      	beq.n	8003750 <RCCEx_PLLSAI2_Config+0xb4>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80036b6:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80036b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 80036ba:	6800      	ldr	r0, [r0, #0]
 80036bc:	2802      	cmp	r0, #2
 80036be:	d058      	beq.n	8003772 <RCCEx_PLLSAI2_Config+0xd6>
 80036c0:	2803      	cmp	r0, #3
 80036c2:	d04f      	beq.n	8003764 <RCCEx_PLLSAI2_Config+0xc8>
 80036c4:	2801      	cmp	r0, #1
 80036c6:	d1f6      	bne.n	80036b6 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	079b      	lsls	r3, r3, #30
 80036cc:	d5f4      	bpl.n	80036b8 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ce:	4933      	ldr	r1, [pc, #204]	; (800379c <RCCEx_PLLSAI2_Config+0x100>)
 80036d0:	6862      	ldr	r2, [r4, #4]
 80036d2:	68cb      	ldr	r3, [r1, #12]
 80036d4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80036d8:	4303      	orrs	r3, r0
 80036da:	3a01      	subs	r2, #1
 80036dc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80036e0:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 80036e2:	4d2e      	ldr	r5, [pc, #184]	; (800379c <RCCEx_PLLSAI2_Config+0x100>)
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ea:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80036ec:	f7fe fc7a 	bl	8001fe4 <HAL_GetTick>
 80036f0:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036f2:	e004      	b.n	80036fe <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036f4:	f7fe fc76 	bl	8001fe4 <HAL_GetTick>
 80036f8:	1b83      	subs	r3, r0, r6
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d83d      	bhi.n	800377a <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036fe:	682b      	ldr	r3, [r5, #0]
 8003700:	009a      	lsls	r2, r3, #2
 8003702:	d4f7      	bmi.n	80036f4 <RCCEx_PLLSAI2_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 8003704:	2f00      	cmp	r7, #0
 8003706:	d13a      	bne.n	800377e <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003708:	696b      	ldr	r3, [r5, #20]
 800370a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800370e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003716:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800371a:	0912      	lsrs	r2, r2, #4
 800371c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003720:	616b      	str	r3, [r5, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003722:	4d1e      	ldr	r5, [pc, #120]	; (800379c <RCCEx_PLLSAI2_Config+0x100>)
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800372c:	f7fe fc5a 	bl	8001fe4 <HAL_GetTick>
 8003730:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003732:	e004      	b.n	800373e <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003734:	f7fe fc56 	bl	8001fe4 <HAL_GetTick>
 8003738:	1b83      	subs	r3, r0, r6
 800373a:	2b02      	cmp	r3, #2
 800373c:	d81d      	bhi.n	800377a <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800373e:	682b      	ldr	r3, [r5, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	d5f7      	bpl.n	8003734 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003744:	696b      	ldr	r3, [r5, #20]
 8003746:	6962      	ldr	r2, [r4, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	2000      	movs	r0, #0
 800374c:	616b      	str	r3, [r5, #20]
}
 800374e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003750:	2a00      	cmp	r2, #0
 8003752:	d0b0      	beq.n	80036b6 <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003754:	68db      	ldr	r3, [r3, #12]
       ||
 8003756:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003758:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800375c:	3301      	adds	r3, #1
       ||
 800375e:	4293      	cmp	r3, r2
 8003760:	d1a9      	bne.n	80036b6 <RCCEx_PLLSAI2_Config+0x1a>
 8003762:	e7be      	b.n	80036e2 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	0395      	lsls	r5, r2, #14
 8003768:	d4b1      	bmi.n	80036ce <RCCEx_PLLSAI2_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	0359      	lsls	r1, r3, #13
 800376e:	d5a2      	bpl.n	80036b6 <RCCEx_PLLSAI2_Config+0x1a>
 8003770:	e7ad      	b.n	80036ce <RCCEx_PLLSAI2_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	055e      	lsls	r6, r3, #21
 8003776:	d59e      	bpl.n	80036b6 <RCCEx_PLLSAI2_Config+0x1a>
 8003778:	e7a9      	b.n	80036ce <RCCEx_PLLSAI2_Config+0x32>
    switch(PllSai2->PLLSAI2Source)
 800377a:	2003      	movs	r0, #3
}
 800377c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800377e:	696b      	ldr	r3, [r5, #20]
 8003780:	6922      	ldr	r2, [r4, #16]
 8003782:	68a1      	ldr	r1, [r4, #8]
 8003784:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003788:	0852      	lsrs	r2, r2, #1
 800378a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800378e:	3a01      	subs	r2, #1
 8003790:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003794:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003798:	616b      	str	r3, [r5, #20]
 800379a:	e7c2      	b.n	8003722 <RCCEx_PLLSAI2_Config+0x86>
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80037a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037a4:	6803      	ldr	r3, [r0, #0]
 80037a6:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
{
 80037aa:	b083      	sub	sp, #12
 80037ac:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037ae:	d020      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai1ClockSelection)
 80037b0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80037b2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80037b6:	f000 81d4 	beq.w	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80037ba:	f200 8122 	bhi.w	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80037be:	2900      	cmp	r1, #0
 80037c0:	f000 81ab 	beq.w	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80037c4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80037c8:	f040 811f 	bne.w	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037cc:	2100      	movs	r1, #0
 80037ce:	3020      	adds	r0, #32
 80037d0:	f7ff ff64 	bl	800369c <RCCEx_PLLSAI2_Config>
 80037d4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80037d6:	2d00      	cmp	r5, #0
 80037d8:	f040 81d0 	bne.w	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037dc:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037de:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037e0:	48ae      	ldr	r0, [pc, #696]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80037e2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80037e6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80037ea:	430a      	orrs	r2, r1
 80037ec:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 80037f0:	2500      	movs	r5, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037f2:	04d8      	lsls	r0, r3, #19
 80037f4:	f140 810e 	bpl.w	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x274>
    switch(PeriphClkInit->Sai2ClockSelection)
 80037f8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80037fa:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80037fe:	f000 81b6 	beq.w	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003802:	f200 816c 	bhi.w	8003ade <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003806:	2900      	cmp	r1, #0
 8003808:	f000 8181 	beq.w	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800380c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003810:	f040 819a 	bne.w	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003814:	2100      	movs	r1, #0
 8003816:	f104 0020 	add.w	r0, r4, #32
 800381a:	f7ff ff3f 	bl	800369c <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800381e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003820:	4680      	mov	r8, r0
    if(ret == HAL_OK)
 8003822:	f1b8 0f00 	cmp.w	r8, #0
 8003826:	f040 8162 	bne.w	8003aee <HAL_RCCEx_PeriphCLKConfig+0x34e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800382a:	499c      	ldr	r1, [pc, #624]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800382c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800382e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003832:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003836:	4302      	orrs	r2, r0
 8003838:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800383c:	0399      	lsls	r1, r3, #14
 800383e:	f100 80ed 	bmi.w	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003842:	07da      	lsls	r2, r3, #31
 8003844:	d508      	bpl.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003846:	4995      	ldr	r1, [pc, #596]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003848:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800384a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800384e:	f022 0203 	bic.w	r2, r2, #3
 8003852:	4302      	orrs	r2, r0
 8003854:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003858:	079f      	lsls	r7, r3, #30
 800385a:	d508      	bpl.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800385c:	498f      	ldr	r1, [pc, #572]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800385e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003860:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003864:	f022 020c 	bic.w	r2, r2, #12
 8003868:	4302      	orrs	r2, r0
 800386a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800386e:	075e      	lsls	r6, r3, #29
 8003870:	d508      	bpl.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003872:	498a      	ldr	r1, [pc, #552]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003874:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003876:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800387a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800387e:	4302      	orrs	r2, r0
 8003880:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003884:	0718      	lsls	r0, r3, #28
 8003886:	d508      	bpl.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003888:	4984      	ldr	r1, [pc, #528]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800388a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800388c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003890:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003894:	4302      	orrs	r2, r0
 8003896:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800389a:	06d9      	lsls	r1, r3, #27
 800389c:	d508      	bpl.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800389e:	497f      	ldr	r1, [pc, #508]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80038a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038aa:	4302      	orrs	r2, r0
 80038ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038b0:	069a      	lsls	r2, r3, #26
 80038b2:	d508      	bpl.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038b4:	4979      	ldr	r1, [pc, #484]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038b6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80038b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80038c0:	4302      	orrs	r2, r0
 80038c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038c6:	059f      	lsls	r7, r3, #22
 80038c8:	d508      	bpl.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ca:	4974      	ldr	r1, [pc, #464]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038cc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80038ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038d2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80038d6:	4302      	orrs	r2, r0
 80038d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038dc:	055e      	lsls	r6, r3, #21
 80038de:	d508      	bpl.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038e0:	496e      	ldr	r1, [pc, #440]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038e2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80038e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038e8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80038ec:	4302      	orrs	r2, r0
 80038ee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f2:	0658      	lsls	r0, r3, #25
 80038f4:	d508      	bpl.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038f6:	4969      	ldr	r1, [pc, #420]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80038fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80038fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003902:	4302      	orrs	r2, r0
 8003904:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003908:	0619      	lsls	r1, r3, #24
 800390a:	d508      	bpl.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800390c:	4963      	ldr	r1, [pc, #396]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800390e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003910:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003914:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003918:	4302      	orrs	r2, r0
 800391a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800391e:	05da      	lsls	r2, r3, #23
 8003920:	d508      	bpl.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003922:	495e      	ldr	r1, [pc, #376]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003926:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800392a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800392e:	4302      	orrs	r2, r0
 8003930:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003934:	049f      	lsls	r7, r3, #18
 8003936:	d510      	bpl.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003938:	4958      	ldr	r1, [pc, #352]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800393a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800393c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003940:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003944:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003946:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800394a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800394e:	f000 80f1 	beq.w	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x394>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003952:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8003956:	f000 8128 	beq.w	8003baa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800395a:	031e      	lsls	r6, r3, #12
 800395c:	d510      	bpl.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800395e:	494f      	ldr	r1, [pc, #316]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003960:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003962:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003966:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800396a:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800396c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003970:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003974:	f000 80e3 	beq.w	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003978:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800397c:	f000 811f 	beq.w	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003980:	0358      	lsls	r0, r3, #13
 8003982:	d510      	bpl.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003984:	4945      	ldr	r1, [pc, #276]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003986:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003988:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800398c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003990:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003992:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003996:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800399a:	f000 80c6 	beq.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800399e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 80039a2:	f000 80f8 	beq.w	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a6:	0459      	lsls	r1, r3, #17
 80039a8:	d510      	bpl.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039aa:	483c      	ldr	r0, [pc, #240]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80039ac:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80039ae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80039b2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039b6:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039b8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039bc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039c0:	f000 80c5 	beq.w	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039c4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80039c8:	f000 80da 	beq.w	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039cc:	041a      	lsls	r2, r3, #16
 80039ce:	d508      	bpl.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039d0:	4932      	ldr	r1, [pc, #200]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80039d2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80039d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80039d8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80039dc:	4302      	orrs	r2, r0
 80039de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039e2:	03db      	lsls	r3, r3, #15
 80039e4:	d509      	bpl.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039e6:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80039e8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80039ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039f4:	430b      	orrs	r3, r1
 80039f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80039fa:	4628      	mov	r0, r5
 80039fc:	b003      	add	sp, #12
 80039fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a02:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003a06:	f43f aeeb 	beq.w	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a0a:	04d8      	lsls	r0, r3, #19
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a0c:	f04f 0501 	mov.w	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a10:	f53f aef2 	bmi.w	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003a14:	46a8      	mov	r8, r5
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a16:	0399      	lsls	r1, r3, #14
 8003a18:	f57f af13 	bpl.w	8003842 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a1c:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a20:	00d2      	lsls	r2, r2, #3
 8003a22:	d566      	bpl.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x352>
    FlagStatus       pwrclkchanged = RESET;
 8003a24:	f04f 0900 	mov.w	r9, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a28:	4e1d      	ldr	r6, [pc, #116]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a2a:	6833      	ldr	r3, [r6, #0]
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a30:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003a32:	f7fe fad7 	bl	8001fe4 <HAL_GetTick>
 8003a36:	4607      	mov	r7, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a38:	e004      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3a:	f7fe fad3 	bl	8001fe4 <HAL_GetTick>
 8003a3e:	1bc3      	subs	r3, r0, r7
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d862      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	05db      	lsls	r3, r3, #23
 8003a48:	d5f7      	bpl.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    if(ret == HAL_OK)
 8003a4a:	f1b8 0f00 	cmp.w	r8, #0
 8003a4e:	f040 80c0 	bne.w	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a52:	4e12      	ldr	r6, [pc, #72]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003a54:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a58:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003a5c:	d02b      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003a5e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d029      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x31a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a66:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a6a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a72:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a76:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7e:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a82:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a84:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 8003a88:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a8c:	f140 80a3 	bpl.w	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x436>
        tickstart = HAL_GetTick();
 8003a90:	f7fe faa8 	bl	8001fe4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003a98:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fe fa9e 	bl	8001fe4 <HAL_GetTick>
 8003aa8:	1bc0      	subs	r0, r0, r7
 8003aaa:	4540      	cmp	r0, r8
 8003aac:	d82d      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aae:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003ab2:	0799      	lsls	r1, r3, #30
 8003ab4:	d5f6      	bpl.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003aba:	4948      	ldr	r1, [pc, #288]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003abc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ac0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 8003aca:	f1b9 0f00 	cmp.w	r9, #0
 8003ace:	d004      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x33a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad0:	4a42      	ldr	r2, [pc, #264]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003ad2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	e6b1      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003ade:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003ae2:	d131      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003ae4:	46a8      	mov	r8, r5
    if(ret == HAL_OK)
 8003ae6:	f1b8 0f00 	cmp.w	r8, #0
 8003aea:	f43f ae9e 	beq.w	800382a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003aee:	4645      	mov	r5, r8
 8003af0:	e791      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x276>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003af4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003af8:	659a      	str	r2, [r3, #88]	; 0x58
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b04:	f04f 0901 	mov.w	r9, #1
 8003b08:	e78e      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = HAL_TIMEOUT;
 8003b0a:	2503      	movs	r5, #3
 8003b0c:	e7dd      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x32a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b0e:	1d20      	adds	r0, r4, #4
 8003b10:	f7ff fd32 	bl	8003578 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b14:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b16:	4680      	mov	r8, r0
      break;
 8003b18:	e683      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x82>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b1a:	3004      	adds	r0, #4
 8003b1c:	f7ff fd2c 	bl	8003578 <RCCEx_PLLSAI1_Config>
 8003b20:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b22:	2d00      	cmp	r5, #0
 8003b24:	f43f ae5a 	beq.w	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003b28:	e028      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2a:	68ca      	ldr	r2, [r1, #12]
 8003b2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b30:	60ca      	str	r2, [r1, #12]
 8003b32:	e738      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b34:	68ca      	ldr	r2, [r1, #12]
 8003b36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b3a:	60ca      	str	r2, [r1, #12]
 8003b3c:	e70d      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3e:	68ca      	ldr	r2, [r1, #12]
 8003b40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b44:	60ca      	str	r2, [r1, #12]
 8003b46:	e71b      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003b48:	2501      	movs	r5, #1
 8003b4a:	46a8      	mov	r8, r5
 8003b4c:	e763      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x276>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b4e:	2102      	movs	r1, #2
 8003b50:	1d20      	adds	r0, r4, #4
 8003b52:	f7ff fd11 	bl	8003578 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b56:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	f43f af37 	beq.w	80039cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b5e:	4605      	mov	r5, r0
 8003b60:	e734      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b62:	481e      	ldr	r0, [pc, #120]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003b64:	68c2      	ldr	r2, [r0, #12]
 8003b66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b6a:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8003b6c:	e638      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b6e:	491b      	ldr	r1, [pc, #108]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8003b70:	68ca      	ldr	r2, [r1, #12]
 8003b72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b76:	60ca      	str	r2, [r1, #12]
      break;
 8003b78:	46a8      	mov	r8, r5
 8003b7a:	e652      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x82>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	e638      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b80:	2102      	movs	r1, #2
 8003b82:	f104 0020 	add.w	r0, r4, #32
 8003b86:	f7ff fd89 	bl	800369c <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b8a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	f43f af1d 	beq.w	80039cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b92:	4605      	mov	r5, r0
 8003b94:	e71a      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b96:	2101      	movs	r1, #1
 8003b98:	1d20      	adds	r0, r4, #4
 8003b9a:	f7ff fced 	bl	8003578 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b9e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	f43f af00 	beq.w	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba6:	4605      	mov	r5, r0
 8003ba8:	e6fd      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003baa:	2101      	movs	r1, #1
 8003bac:	1d20      	adds	r0, r4, #4
 8003bae:	f7ff fce3 	bl	8003578 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bb2:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	f43f aed0 	beq.w	800395a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bba:	4605      	mov	r5, r0
 8003bbc:	e6cd      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	1d20      	adds	r0, r4, #4
 8003bc2:	f7ff fcd9 	bl	8003578 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bc6:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	f43f aed9 	beq.w	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bce:	4605      	mov	r5, r0
 8003bd0:	e6d6      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8003bd2:	4645      	mov	r5, r8
 8003bd4:	e779      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	e76f      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be0:	2800      	cmp	r0, #0
 8003be2:	f000 8085 	beq.w	8003cf0 <HAL_TIM_Base_Init+0x110>
{
 8003be6:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003bec:	4604      	mov	r4, r0
 8003bee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d071      	beq.n	8003cda <HAL_TIM_Base_Init+0xfa>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf6:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf8:	493e      	ldr	r1, [pc, #248]	; (8003cf4 <HAL_TIM_Base_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c00:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003c02:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c04:	d055      	beq.n	8003cb2 <HAL_TIM_Base_Init+0xd2>
 8003c06:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003c0a:	d025      	beq.n	8003c58 <HAL_TIM_Base_Init+0x78>
 8003c0c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003c10:	428a      	cmp	r2, r1
 8003c12:	d021      	beq.n	8003c58 <HAL_TIM_Base_Init+0x78>
 8003c14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003c18:	428a      	cmp	r2, r1
 8003c1a:	d01d      	beq.n	8003c58 <HAL_TIM_Base_Init+0x78>
 8003c1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003c20:	428a      	cmp	r2, r1
 8003c22:	d019      	beq.n	8003c58 <HAL_TIM_Base_Init+0x78>
 8003c24:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8003c28:	428a      	cmp	r2, r1
 8003c2a:	d042      	beq.n	8003cb2 <HAL_TIM_Base_Init+0xd2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2c:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8003c30:	428a      	cmp	r2, r1
 8003c32:	d057      	beq.n	8003ce4 <HAL_TIM_Base_Init+0x104>
 8003c34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003c38:	428a      	cmp	r2, r1
 8003c3a:	d053      	beq.n	8003ce4 <HAL_TIM_Base_Init+0x104>
 8003c3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003c40:	428a      	cmp	r2, r1
 8003c42:	d04f      	beq.n	8003ce4 <HAL_TIM_Base_Init+0x104>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c44:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c46:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8003c4e:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c50:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c52:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c54:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c56:	e010      	b.n	8003c7a <HAL_TIM_Base_Init+0x9a>
    tmpcr1 |= Structure->CounterMode;
 8003c58:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c60:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c66:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c68:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c70:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003c72:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003c74:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c76:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c78:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c7e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003c86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003c8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003c92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ca2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003ca6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003caa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003cae:	2000      	movs	r0, #0
}
 8003cb0:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8003cb2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cb4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003cba:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc2:	69a1      	ldr	r1, [r4, #24]
 8003cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003cca:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ccc:	68e3      	ldr	r3, [r4, #12]
 8003cce:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003cd0:	6863      	ldr	r3, [r4, #4]
 8003cd2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd4:	6963      	ldr	r3, [r4, #20]
 8003cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd8:	e7cf      	b.n	8003c7a <HAL_TIM_Base_Init+0x9a>
    htim->Lock = HAL_UNLOCKED;
 8003cda:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003cde:	f7fd fb69 	bl	80013b4 <HAL_TIM_Base_MspInit>
 8003ce2:	e788      	b.n	8003bf6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cec:	4303      	orrs	r3, r0
 8003cee:	e7e9      	b.n	8003cc4 <HAL_TIM_Base_Init+0xe4>
    return HAL_ERROR;
 8003cf0:	2001      	movs	r0, #1
}
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00

08003cf8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003cf8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d126      	bne.n	8003d4e <HAL_TIM_Base_Start_IT+0x56>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d00:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d02:	4919      	ldr	r1, [pc, #100]	; (8003d68 <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	2202      	movs	r2, #2
 8003d06:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d0a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d14:	d01d      	beq.n	8003d52 <HAL_TIM_Base_Start_IT+0x5a>
 8003d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1a:	d01a      	beq.n	8003d52 <HAL_TIM_Base_Start_IT+0x5a>
 8003d1c:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <HAL_TIM_Base_Start_IT+0x74>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d017      	beq.n	8003d52 <HAL_TIM_Base_Start_IT+0x5a>
 8003d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_TIM_Base_Start_IT+0x5a>
 8003d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00f      	beq.n	8003d52 <HAL_TIM_Base_Start_IT+0x5a>
 8003d32:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <HAL_TIM_Base_Start_IT+0x5a>
 8003d3a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_TIM_Base_Start_IT+0x5a>
    __HAL_TIM_ENABLE(htim);
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8003d48:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	4770      	bx	lr
    return HAL_ERROR;
 8003d4e:	2001      	movs	r0, #1
 8003d50:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d52:	6899      	ldr	r1, [r3, #8]
 8003d54:	4a06      	ldr	r2, [pc, #24]	; (8003d70 <HAL_TIM_Base_Start_IT+0x78>)
 8003d56:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	2a06      	cmp	r2, #6
 8003d5a:	d002      	beq.n	8003d62 <HAL_TIM_Base_Start_IT+0x6a>
 8003d5c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003d60:	d1ef      	bne.n	8003d42 <HAL_TIM_Base_Start_IT+0x4a>
  return HAL_OK;
 8003d62:	2000      	movs	r0, #0
}
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	00010007 	.word	0x00010007

08003d74 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003d74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d073      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0xf0>
 8003d7c:	4602      	mov	r2, r0
{
 8003d7e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003d82:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003d8e:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d90:	4b4f      	ldr	r3, [pc, #316]	; (8003ed0 <HAL_TIM_ConfigClockSource+0x15c>)
 8003d92:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003d94:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003d96:	680b      	ldr	r3, [r1, #0]
 8003d98:	2b60      	cmp	r3, #96	; 0x60
 8003d9a:	d065      	beq.n	8003e68 <HAL_TIM_ConfigClockSource+0xf4>
 8003d9c:	d824      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x74>
 8003d9e:	2b40      	cmp	r3, #64	; 0x40
 8003da0:	d07c      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x128>
 8003da2:	d94b      	bls.n	8003e3c <HAL_TIM_ConfigClockSource+0xc8>
 8003da4:	2b50      	cmp	r3, #80	; 0x50
 8003da6:	d117      	bne.n	8003dd8 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8003da8:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003daa:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dac:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003db2:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db4:	6a23      	ldr	r3, [r4, #32]
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dbc:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dc6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dca:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8003dd4:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd6:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003dda:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003de0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8003de4:	bc30      	pop	{r4, r5}
 8003de6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dec:	d038      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0xec>
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df2:	d110      	bne.n	8003e16 <HAL_TIM_ConfigClockSource+0xa2>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003df8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dfa:	432b      	orrs	r3, r5
 8003dfc:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfe:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003e06:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e08:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e12:	60a3      	str	r3, [r4, #8]
      break;
 8003e14:	e7e0      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003e16:	2b70      	cmp	r3, #112	; 0x70
 8003e18:	d1de      	bne.n	8003dd8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e1a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003e1e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e20:	432b      	orrs	r3, r5
 8003e22:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e24:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e28:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003e2c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003e2e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003e30:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8003e38:	60a3      	str	r3, [r4, #8]
      break;
 8003e3a:	e7cd      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d002      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xd2>
 8003e40:	d90a      	bls.n	8003e58 <HAL_TIM_ConfigClockSource+0xe4>
 8003e42:	2b30      	cmp	r3, #48	; 0x30
 8003e44:	d1c8      	bne.n	8003dd8 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8003e46:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e48:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8003e52:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003e54:	60a3      	str	r3, [r4, #8]
}
 8003e56:	e7bf      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8003e58:	f033 0110 	bics.w	r1, r3, #16
 8003e5c:	d1bc      	bne.n	8003dd8 <HAL_TIM_ConfigClockSource+0x64>
 8003e5e:	e7f2      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0xd2>
  HAL_StatusTypeDef status = HAL_OK;
 8003e60:	2000      	movs	r0, #0
 8003e62:	e7b9      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8003e64:	2002      	movs	r0, #2
}
 8003e66:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8003e68:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8003e6a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6e:	6a21      	ldr	r1, [r4, #32]
 8003e70:	f021 0110 	bic.w	r1, r1, #16
 8003e74:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e76:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e7c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e80:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e84:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003e88:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8003e8a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003e8c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e92:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003e98:	60a3      	str	r3, [r4, #8]
}
 8003e9a:	e79d      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 8003e9c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003e9e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003ea0:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ea2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003ea6:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea8:	6a23      	ldr	r3, [r4, #32]
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb0:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003eba:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003ebe:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8003ec8:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003eca:	60a3      	str	r3, [r4, #8]
}
 8003ecc:	e784      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x64>
 8003ece:	bf00      	nop
 8003ed0:	fffe0088 	.word	0xfffe0088

08003ed4 <HAL_TIM_OC_DelayElapsedCallback>:
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop

08003ed8 <HAL_TIM_IC_CaptureCallback>:
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop

08003edc <HAL_TIM_PWM_PulseFinishedCallback>:
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop

08003ee0 <HAL_TIM_TriggerCallback>:
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop

08003ee4 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8003ee4:	6803      	ldr	r3, [r0, #0]
{
 8003ee6:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003ee8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003eea:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003eec:	07a1      	lsls	r1, r4, #30
{
 8003eee:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ef0:	d501      	bpl.n	8003ef6 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ef2:	07b2      	lsls	r2, r6, #30
 8003ef4:	d454      	bmi.n	8003fa0 <HAL_TIM_IRQHandler+0xbc>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ef6:	0762      	lsls	r2, r4, #29
 8003ef8:	d501      	bpl.n	8003efe <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003efa:	0773      	lsls	r3, r6, #29
 8003efc:	d43d      	bmi.n	8003f7a <HAL_TIM_IRQHandler+0x96>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003efe:	0720      	lsls	r0, r4, #28
 8003f00:	d501      	bpl.n	8003f06 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f02:	0731      	lsls	r1, r6, #28
 8003f04:	d427      	bmi.n	8003f56 <HAL_TIM_IRQHandler+0x72>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f06:	06e3      	lsls	r3, r4, #27
 8003f08:	d501      	bpl.n	8003f0e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f0a:	06f0      	lsls	r0, r6, #27
 8003f0c:	d410      	bmi.n	8003f30 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f0e:	07e1      	lsls	r1, r4, #31
 8003f10:	d501      	bpl.n	8003f16 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f12:	07f2      	lsls	r2, r6, #31
 8003f14:	d462      	bmi.n	8003fdc <HAL_TIM_IRQHandler+0xf8>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f16:	0623      	lsls	r3, r4, #24
 8003f18:	d552      	bpl.n	8003fc0 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f1a:	0630      	lsls	r0, r6, #24
 8003f1c:	d466      	bmi.n	8003fec <HAL_TIM_IRQHandler+0x108>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f1e:	0660      	lsls	r0, r4, #25
 8003f20:	d501      	bpl.n	8003f26 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f22:	0671      	lsls	r1, r6, #25
 8003f24:	d473      	bmi.n	800400e <HAL_TIM_IRQHandler+0x12a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f26:	06a2      	lsls	r2, r4, #26
 8003f28:	d501      	bpl.n	8003f2e <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f2a:	06b3      	lsls	r3, r6, #26
 8003f2c:	d44d      	bmi.n	8003fca <HAL_TIM_IRQHandler+0xe6>
}
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	f06f 0210 	mvn.w	r2, #16
 8003f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f38:	2208      	movs	r2, #8
 8003f3a:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f44:	d174      	bne.n	8004030 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	f7ff ffc5 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f7ff ffc6 	bl	8003edc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f50:	2300      	movs	r3, #0
 8003f52:	772b      	strb	r3, [r5, #28]
 8003f54:	e7db      	b.n	8003f0e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f56:	682b      	ldr	r3, [r5, #0]
 8003f58:	f06f 0208 	mvn.w	r2, #8
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f5e:	2204      	movs	r2, #4
 8003f60:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	079a      	lsls	r2, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f68:	d15f      	bne.n	800402a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6a:	f7ff ffb3 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f7ff ffb4 	bl	8003edc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f74:	2300      	movs	r3, #0
 8003f76:	772b      	strb	r3, [r5, #28]
 8003f78:	e7c5      	b.n	8003f06 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f7a:	682b      	ldr	r3, [r5, #0]
 8003f7c:	f06f 0204 	mvn.w	r2, #4
 8003f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f82:	2202      	movs	r2, #2
 8003f84:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8c:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f8e:	d149      	bne.n	8004024 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f90:	f7ff ffa0 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	4628      	mov	r0, r5
 8003f96:	f7ff ffa1 	bl	8003edc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	772b      	strb	r3, [r5, #28]
 8003f9e:	e7ae      	b.n	8003efe <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa0:	f06f 0202 	mvn.w	r2, #2
 8003fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	0799      	lsls	r1, r3, #30
 8003fae:	d136      	bne.n	800401e <HAL_TIM_IRQHandler+0x13a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb0:	f7ff ff90 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	f7ff ff91 	bl	8003edc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	772b      	strb	r3, [r5, #28]
 8003fbe:	e79a      	b.n	8003ef6 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003fc0:	05e2      	lsls	r2, r4, #23
 8003fc2:	d5ac      	bpl.n	8003f1e <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fc4:	0633      	lsls	r3, r6, #24
 8003fc6:	d41a      	bmi.n	8003ffe <HAL_TIM_IRQHandler+0x11a>
 8003fc8:	e7a9      	b.n	8003f1e <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fca:	682b      	ldr	r3, [r5, #0]
 8003fcc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003fd0:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fd2:	611a      	str	r2, [r3, #16]
}
 8003fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003fd8:	f000 b878 	b.w	80040cc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	f06f 0201 	mvn.w	r2, #1
 8003fe2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f7fc fcc5 	bl	8000974 <HAL_TIM_PeriodElapsedCallback>
 8003fea:	e794      	b.n	8003f16 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ff2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f000 f86b 	bl	80040d0 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ffa:	05e1      	lsls	r1, r4, #23
 8003ffc:	d58f      	bpl.n	8003f1e <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ffe:	682b      	ldr	r3, [r5, #0]
 8004000:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004004:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004006:	4628      	mov	r0, r5
 8004008:	f000 f864 	bl	80040d4 <HAL_TIMEx_Break2Callback>
 800400c:	e787      	b.n	8003f1e <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800400e:	682b      	ldr	r3, [r5, #0]
 8004010:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004014:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004016:	4628      	mov	r0, r5
 8004018:	f7ff ff62 	bl	8003ee0 <HAL_TIM_TriggerCallback>
 800401c:	e783      	b.n	8003f26 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_IC_CaptureCallback(htim);
 800401e:	f7ff ff5b 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8004022:	e7ca      	b.n	8003fba <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004024:	f7ff ff58 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8004028:	e7b7      	b.n	8003f9a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800402a:	f7ff ff55 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 800402e:	e7a1      	b.n	8003f74 <HAL_TIM_IRQHandler+0x90>
        HAL_TIM_IC_CaptureCallback(htim);
 8004030:	f7ff ff52 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8004034:	e78c      	b.n	8003f50 <HAL_TIM_IRQHandler+0x6c>
 8004036:	bf00      	nop

08004038 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004038:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d03e      	beq.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8004040:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004042:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004044:	4d1f      	ldr	r5, [pc, #124]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004046:	2302      	movs	r3, #2
 8004048:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800404c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800404e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004050:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004052:	d02a      	beq.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004054:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004058:	42aa      	cmp	r2, r5
 800405a:	d026      	beq.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800405c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004062:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8004068:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406a:	d010      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800406c:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800406e:	429a      	cmp	r2, r3
 8004070:	d00d      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004076:	429a      	cmp	r2, r3
 8004078:	d009      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800407a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800407e:	429a      	cmp	r2, r3
 8004080:	d005      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004082:	42aa      	cmp	r2, r5
 8004084:	d003      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004086:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800408a:	429a      	cmp	r2, r3
 800408c:	d104      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800408e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004090:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004094:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004096:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004098:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800409a:	2201      	movs	r2, #1
 800409c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80040a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80040a4:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80040a6:	4618      	mov	r0, r3
}
 80040a8:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040aa:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040b0:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b8:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80040ba:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040bc:	e7e7      	b.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x56>
  __HAL_LOCK(htim);
 80040be:	2002      	movs	r0, #2
}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40000400 	.word	0x40000400

080040cc <HAL_TIMEx_CommutCallback>:
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop

080040d0 <HAL_TIMEx_BreakCallback>:
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop

080040d4 <HAL_TIMEx_Break2Callback>:
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop

080040d8 <HAL_UART_TxCpltCallback>:
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop

080040dc <HAL_UART_ErrorCallback>:
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop

080040e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040ea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ee:	f7ff fff5 	bl	80040dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f2:	bd08      	pop	{r3, pc}

080040f4 <HAL_UARTEx_RxEventCallback>:
}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop

080040f8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040f8:	6803      	ldr	r3, [r0, #0]
 80040fa:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040fc:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040fe:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8004102:	ea12 0f0c 	tst.w	r2, ip
{
 8004106:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004108:	689d      	ldr	r5, [r3, #8]
{
 800410a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800410c:	d150      	bne.n	80041b0 <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800410e:	0696      	lsls	r6, r2, #26
 8004110:	d502      	bpl.n	8004118 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004112:	068e      	lsls	r6, r1, #26
 8004114:	f100 80e7 	bmi.w	80042e6 <HAL_UART_IRQHandler+0x1ee>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004118:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800411a:	2801      	cmp	r0, #1
 800411c:	d024      	beq.n	8004168 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800411e:	02d6      	lsls	r6, r2, #11
 8004120:	d502      	bpl.n	8004128 <HAL_UART_IRQHandler+0x30>
 8004122:	0268      	lsls	r0, r5, #9
 8004124:	f100 80e4 	bmi.w	80042f0 <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004128:	0616      	lsls	r6, r2, #24
 800412a:	d414      	bmi.n	8004156 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800412c:	0650      	lsls	r0, r2, #25
 800412e:	d501      	bpl.n	8004134 <HAL_UART_IRQHandler+0x3c>
 8004130:	064a      	lsls	r2, r1, #25
 8004132:	d400      	bmi.n	8004136 <HAL_UART_IRQHandler+0x3e>
}
 8004134:	bd70      	pop	{r4, r5, r6, pc}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800413a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	e843 2100 	strex	r1, r2, [r3]
 8004142:	2900      	cmp	r1, #0
 8004144:	d1f7      	bne.n	8004136 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004146:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004148:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800414a:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 800414c:	66e3      	str	r3, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800414e:	4620      	mov	r0, r4
 8004150:	f7ff ffc2 	bl	80040d8 <HAL_UART_TxCpltCallback>
}
 8004154:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004156:	060d      	lsls	r5, r1, #24
 8004158:	d5e8      	bpl.n	800412c <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 800415a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0e9      	beq.n	8004134 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8004160:	4620      	mov	r0, r4
}
 8004162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8004166:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004168:	06d6      	lsls	r6, r2, #27
 800416a:	d5d8      	bpl.n	800411e <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800416c:	06c8      	lsls	r0, r1, #27
 800416e:	d5d6      	bpl.n	800411e <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004170:	2210      	movs	r2, #16
 8004172:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	0651      	lsls	r1, r2, #25
 8004178:	f140 80d7 	bpl.w	800432a <HAL_UART_IRQHandler+0x232>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800417c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800417e:	6801      	ldr	r1, [r0, #0]
 8004180:	684a      	ldr	r2, [r1, #4]
 8004182:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004184:	2a00      	cmp	r2, #0
 8004186:	d0d5      	beq.n	8004134 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004188:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 800418c:	4295      	cmp	r5, r2
 800418e:	d9d1      	bls.n	8004134 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8004190:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004194:	680a      	ldr	r2, [r1, #0]
 8004196:	0692      	lsls	r2, r2, #26
 8004198:	f140 80fe 	bpl.w	8004398 <HAL_UART_IRQHandler+0x2a0>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800419c:	2302      	movs	r3, #2
 800419e:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041a0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80041a4:	1ae9      	subs	r1, r5, r3
 80041a6:	4620      	mov	r0, r4
 80041a8:	b289      	uxth	r1, r1
 80041aa:	f7ff ffa3 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
}
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041b0:	4895      	ldr	r0, [pc, #596]	; (8004408 <HAL_UART_IRQHandler+0x310>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041b2:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041b6:	4008      	ands	r0, r1
 80041b8:	4330      	orrs	r0, r6
 80041ba:	d0ad      	beq.n	8004118 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041bc:	07d5      	lsls	r5, r2, #31
 80041be:	d509      	bpl.n	80041d4 <HAL_UART_IRQHandler+0xdc>
 80041c0:	05c8      	lsls	r0, r1, #23
 80041c2:	d507      	bpl.n	80041d4 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041c4:	2001      	movs	r0, #1
 80041c6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041c8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80041cc:	f040 0001 	orr.w	r0, r0, #1
 80041d0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041d4:	0795      	lsls	r5, r2, #30
 80041d6:	f140 8081 	bpl.w	80042dc <HAL_UART_IRQHandler+0x1e4>
 80041da:	b18e      	cbz	r6, 8004200 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041dc:	2002      	movs	r0, #2
 80041de:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041e0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80041e4:	f040 0004 	orr.w	r0, r0, #4
 80041e8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041ec:	0750      	lsls	r0, r2, #29
 80041ee:	d507      	bpl.n	8004200 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041f0:	2004      	movs	r0, #4
 80041f2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041f4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80041f8:	f040 0002 	orr.w	r0, r0, #2
 80041fc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004200:	0710      	lsls	r0, r2, #28
 8004202:	d50b      	bpl.n	800421c <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004204:	f001 0020 	and.w	r0, r1, #32
 8004208:	4330      	orrs	r0, r6
 800420a:	d007      	beq.n	800421c <HAL_UART_IRQHandler+0x124>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800420c:	2008      	movs	r0, #8
 800420e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004210:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004214:	f040 0008 	orr.w	r0, r0, #8
 8004218:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800421c:	0516      	lsls	r6, r2, #20
 800421e:	d50a      	bpl.n	8004236 <HAL_UART_IRQHandler+0x13e>
 8004220:	014d      	lsls	r5, r1, #5
 8004222:	d508      	bpl.n	8004236 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004224:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004228:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800422a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800422e:	f040 0020 	orr.w	r0, r0, #32
 8004232:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004236:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800423a:	2800      	cmp	r0, #0
 800423c:	f43f af7a 	beq.w	8004134 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004240:	0690      	lsls	r0, r2, #26
 8004242:	d506      	bpl.n	8004252 <HAL_UART_IRQHandler+0x15a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004244:	0689      	lsls	r1, r1, #26
 8004246:	d504      	bpl.n	8004252 <HAL_UART_IRQHandler+0x15a>
        if (huart->RxISR != NULL)
 8004248:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800424a:	b112      	cbz	r2, 8004252 <HAL_UART_IRQHandler+0x15a>
          huart->RxISR(huart);
 800424c:	4620      	mov	r0, r4
 800424e:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004250:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8004252:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004256:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004258:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800425c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004260:	ea52 0501 	orrs.w	r5, r2, r1
 8004264:	f000 80c9 	beq.w	80043fa <HAL_UART_IRQHandler+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	e843 2100 	strex	r1, r2, [r3]
 8004274:	2900      	cmp	r1, #0
 8004276:	d1f7      	bne.n	8004268 <HAL_UART_IRQHandler+0x170>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	f103 0208 	add.w	r2, r3, #8
 800427c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004280:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	f103 0008 	add.w	r0, r3, #8
 8004288:	e840 2100 	strex	r1, r2, [r0]
 800428c:	2900      	cmp	r1, #0
 800428e:	d1f3      	bne.n	8004278 <HAL_UART_IRQHandler+0x180>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004290:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004292:	2a01      	cmp	r2, #1
 8004294:	d034      	beq.n	8004300 <HAL_UART_IRQHandler+0x208>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004296:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004298:	2120      	movs	r1, #32
 800429a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429e:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 80042a2:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a4:	064a      	lsls	r2, r1, #25
 80042a6:	d53c      	bpl.n	8004322 <HAL_UART_IRQHandler+0x22a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	f103 0208 	add.w	r2, r3, #8
 80042ac:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	f103 0008 	add.w	r0, r3, #8
 80042b8:	e840 2100 	strex	r1, r2, [r0]
 80042bc:	2900      	cmp	r1, #0
 80042be:	d1f3      	bne.n	80042a8 <HAL_UART_IRQHandler+0x1b0>
          if (huart->hdmarx != NULL)
 80042c0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80042c2:	b370      	cbz	r0, 8004322 <HAL_UART_IRQHandler+0x22a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042c4:	4b51      	ldr	r3, [pc, #324]	; (800440c <HAL_UART_IRQHandler+0x314>)
 80042c6:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042c8:	f7fe f86c 	bl	80023a4 <HAL_DMA_Abort_IT>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	f43f af31 	beq.w	8004134 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042d2:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 80042d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042da:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042dc:	0755      	lsls	r5, r2, #29
 80042de:	d58f      	bpl.n	8004200 <HAL_UART_IRQHandler+0x108>
 80042e0:	2e00      	cmp	r6, #0
 80042e2:	d185      	bne.n	80041f0 <HAL_UART_IRQHandler+0xf8>
 80042e4:	e78c      	b.n	8004200 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 80042e6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f af3a 	bne.w	8004162 <HAL_UART_IRQHandler+0x6a>
 80042ee:	e721      	b.n	8004134 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80042f4:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80042fc:	f000 bba0 	b.w	8004a40 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004304:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	e843 2100 	strex	r1, r2, [r3]
 800430c:	2900      	cmp	r1, #0
 800430e:	d0c2      	beq.n	8004296 <HAL_UART_IRQHandler+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	e853 2f00 	ldrex	r2, [r3]
 8004314:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	e843 2100 	strex	r1, r2, [r3]
 800431c:	2900      	cmp	r1, #0
 800431e:	d1ef      	bne.n	8004300 <HAL_UART_IRQHandler+0x208>
 8004320:	e7b9      	b.n	8004296 <HAL_UART_IRQHandler+0x19e>
            HAL_UART_ErrorCallback(huart);
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff feda 	bl	80040dc <HAL_UART_ErrorCallback>
}
 8004328:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800432a:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 800432e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004332:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8004336:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004338:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800433a:	2a00      	cmp	r2, #0
 800433c:	f43f aefa 	beq.w	8004134 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004340:	1a41      	subs	r1, r0, r1
 8004342:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004344:	2900      	cmp	r1, #0
 8004346:	f43f aef5 	beq.w	8004134 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800434e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	e843 2000 	strex	r0, r2, [r3]
 8004356:	2800      	cmp	r0, #0
 8004358:	d1f7      	bne.n	800434a <HAL_UART_IRQHandler+0x252>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	f103 0208 	add.w	r2, r3, #8
 800435e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004362:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	f103 0508 	add.w	r5, r3, #8
 800436a:	e845 2000 	strex	r0, r2, [r5]
 800436e:	2800      	cmp	r0, #0
 8004370:	d1f3      	bne.n	800435a <HAL_UART_IRQHandler+0x262>
        huart->RxState = HAL_UART_STATE_READY;
 8004372:	2220      	movs	r2, #32
 8004374:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 8004378:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437a:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004380:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	e843 2000 	strex	r0, r2, [r3]
 8004388:	2800      	cmp	r0, #0
 800438a:	d1f7      	bne.n	800437c <HAL_UART_IRQHandler+0x284>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800438c:	2302      	movs	r3, #2
 800438e:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004390:	4620      	mov	r0, r4
 8004392:	f7ff feaf 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
}
 8004396:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800439c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	e843 2100 	strex	r1, r2, [r3]
 80043a4:	2900      	cmp	r1, #0
 80043a6:	d1f7      	bne.n	8004398 <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	f103 0208 	add.w	r2, r3, #8
 80043ac:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	f103 0508 	add.w	r5, r3, #8
 80043b8:	e845 2100 	strex	r1, r2, [r5]
 80043bc:	2900      	cmp	r1, #0
 80043be:	d1f3      	bne.n	80043a8 <HAL_UART_IRQHandler+0x2b0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	f103 0208 	add.w	r2, r3, #8
 80043c4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	f103 0508 	add.w	r5, r3, #8
 80043d0:	e845 2100 	strex	r1, r2, [r5]
 80043d4:	2900      	cmp	r1, #0
 80043d6:	d1f3      	bne.n	80043c0 <HAL_UART_IRQHandler+0x2c8>
          huart->RxState = HAL_UART_STATE_READY;
 80043d8:	2220      	movs	r2, #32
 80043da:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043de:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	e843 2100 	strex	r1, r2, [r3]
 80043ec:	2900      	cmp	r1, #0
 80043ee:	d1f7      	bne.n	80043e0 <HAL_UART_IRQHandler+0x2e8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043f0:	f7fd ffb2 	bl	8002358 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043f4:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 80043f8:	e6d0      	b.n	800419c <HAL_UART_IRQHandler+0xa4>
        HAL_UART_ErrorCallback(huart);
 80043fa:	4620      	mov	r0, r4
 80043fc:	f7ff fe6e 	bl	80040dc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004400:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8004404:	bd70      	pop	{r4, r5, r6, pc}
 8004406:	bf00      	nop
 8004408:	04000120 	.word	0x04000120
 800440c:	080040e1 	.word	0x080040e1

08004410 <UART_SetConfig>:
{
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004414:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004416:	6882      	ldr	r2, [r0, #8]
 8004418:	6900      	ldr	r0, [r0, #16]
 800441a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800441c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800441e:	4302      	orrs	r2, r0
 8004420:	430a      	orrs	r2, r1
 8004422:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004424:	499f      	ldr	r1, [pc, #636]	; (80046a4 <UART_SetConfig+0x294>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004426:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004428:	4029      	ands	r1, r5
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	68e1      	ldr	r1, [r4, #12]
 8004432:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004436:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004438:	499b      	ldr	r1, [pc, #620]	; (80046a8 <UART_SetConfig+0x298>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800443a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800443c:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800443e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004440:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004442:	d071      	beq.n	8004528 <UART_SetConfig+0x118>
    tmpreg |= huart->Init.OneBitSampling;
 8004444:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004446:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800444a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800444c:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800444e:	4997      	ldr	r1, [pc, #604]	; (80046ac <UART_SetConfig+0x29c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004450:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004452:	428b      	cmp	r3, r1
 8004454:	d024      	beq.n	80044a0 <UART_SetConfig+0x90>
 8004456:	4a96      	ldr	r2, [pc, #600]	; (80046b0 <UART_SetConfig+0x2a0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d043      	beq.n	80044e4 <UART_SetConfig+0xd4>
 800445c:	4a95      	ldr	r2, [pc, #596]	; (80046b4 <UART_SetConfig+0x2a4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	f000 80d7 	beq.w	8004612 <UART_SetConfig+0x202>
 8004464:	4a94      	ldr	r2, [pc, #592]	; (80046b8 <UART_SetConfig+0x2a8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	f000 80a1 	beq.w	80045ae <UART_SetConfig+0x19e>
 800446c:	4a93      	ldr	r2, [pc, #588]	; (80046bc <UART_SetConfig+0x2ac>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d111      	bne.n	8004496 <UART_SetConfig+0x86>
 8004472:	4b93      	ldr	r3, [pc, #588]	; (80046c0 <UART_SetConfig+0x2b0>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004480:	f000 80ff 	beq.w	8004682 <UART_SetConfig+0x272>
 8004484:	f200 80be 	bhi.w	8004604 <UART_SetConfig+0x1f4>
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80dc 	beq.w	8004646 <UART_SetConfig+0x236>
 800448e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004492:	f000 8099 	beq.w	80045c8 <UART_SetConfig+0x1b8>
        ret = HAL_ERROR;
 8004496:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004498:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 800449a:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
}
 800449e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a0:	4b87      	ldr	r3, [pc, #540]	; (80046c0 <UART_SetConfig+0x2b0>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d978      	bls.n	80045a2 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80044b4:	f000 80f0 	beq.w	8004698 <UART_SetConfig+0x288>
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b8:	f7ff f84c 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80044bc:	2800      	cmp	r0, #0
 80044be:	d048      	beq.n	8004552 <UART_SetConfig+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044c0:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c2:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044c6:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 80044ca:	fbb0 f2f2 	udiv	r2, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ce:	f1a2 0310 	sub.w	r3, r2, #16
 80044d2:	428b      	cmp	r3, r1
 80044d4:	d8df      	bhi.n	8004496 <UART_SetConfig+0x86>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 80044da:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80044dc:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
 80044e0:	2000      	movs	r0, #0
}
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044e4:	4b76      	ldr	r3, [pc, #472]	; (80046c0 <UART_SetConfig+0x2b0>)
 80044e6:	4a77      	ldr	r2, [pc, #476]	; (80046c4 <UART_SetConfig+0x2b4>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80044f6:	d06d      	beq.n	80045d4 <UART_SetConfig+0x1c4>
    switch (clocksource)
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d8cc      	bhi.n	8004496 <UART_SetConfig+0x86>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0xf4>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	0800460d 	.word	0x0800460d
 8004508:	080044b9 	.word	0x080044b9
 800450c:	08004689 	.word	0x08004689
 8004510:	08004497 	.word	0x08004497
 8004514:	080045cf 	.word	0x080045cf
 8004518:	08004497 	.word	0x08004497
 800451c:	08004497 	.word	0x08004497
 8004520:	08004497 	.word	0x08004497
 8004524:	08004637 	.word	0x08004637
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004528:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800452c:	4864      	ldr	r0, [pc, #400]	; (80046c0 <UART_SetConfig+0x2b0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800452e:	430a      	orrs	r2, r1
 8004530:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004532:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004536:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800453a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453e:	f000 8080 	beq.w	8004642 <UART_SetConfig+0x232>
 8004542:	d80b      	bhi.n	800455c <UART_SetConfig+0x14c>
 8004544:	b383      	cbz	r3, 80045a8 <UART_SetConfig+0x198>
 8004546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454a:	d1a4      	bne.n	8004496 <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetSysClockFreq();
 800454c:	f7fe fbfa 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004550:	b948      	cbnz	r0, 8004566 <UART_SetConfig+0x156>
  huart->RxISR = NULL;
 8004552:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8004554:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
 8004558:	2000      	movs	r0, #0
}
 800455a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800455c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004560:	d199      	bne.n	8004496 <UART_SetConfig+0x86>
        pclk = (uint32_t) LSE_VALUE;
 8004562:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004566:	6862      	ldr	r2, [r4, #4]
 8004568:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800456c:	4283      	cmp	r3, r0
 800456e:	d892      	bhi.n	8004496 <UART_SetConfig+0x86>
 8004570:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004574:	d88f      	bhi.n	8004496 <UART_SetConfig+0x86>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004576:	2500      	movs	r5, #0
 8004578:	0853      	lsrs	r3, r2, #1
 800457a:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800457e:	4629      	mov	r1, r5
 8004580:	fbe0 310c 	umlal	r3, r1, r0, ip
 8004584:	4618      	mov	r0, r3
 8004586:	462b      	mov	r3, r5
 8004588:	f7fb fe26 	bl	80001d8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800458c:	4a4e      	ldr	r2, [pc, #312]	; (80046c8 <UART_SetConfig+0x2b8>)
 800458e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8004592:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004594:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004596:	f63f af7e 	bhi.w	8004496 <UART_SetConfig+0x86>
          huart->Instance->BRR = usartdiv;
 800459a:	6822      	ldr	r2, [r4, #0]
 800459c:	4628      	mov	r0, r5
 800459e:	60d3      	str	r3, [r2, #12]
 80045a0:	e77a      	b.n	8004498 <UART_SetConfig+0x88>
 80045a2:	4a4a      	ldr	r2, [pc, #296]	; (80046cc <UART_SetConfig+0x2bc>)
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80045a6:	e7a4      	b.n	80044f2 <UART_SetConfig+0xe2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80045a8:	f7fe ffc2 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
        break;
 80045ac:	e7d0      	b.n	8004550 <UART_SetConfig+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ae:	4b44      	ldr	r3, [pc, #272]	; (80046c0 <UART_SetConfig+0x2b0>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d062      	beq.n	8004682 <UART_SetConfig+0x272>
 80045bc:	d83e      	bhi.n	800463c <UART_SetConfig+0x22c>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d041      	beq.n	8004646 <UART_SetConfig+0x236>
 80045c2:	2b40      	cmp	r3, #64	; 0x40
 80045c4:	f47f af67 	bne.w	8004496 <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045cc:	d05e      	beq.n	800468c <UART_SetConfig+0x27c>
        pclk = HAL_RCC_GetSysClockFreq();
 80045ce:	f7fe fbb9 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
        break;
 80045d2:	e773      	b.n	80044bc <UART_SetConfig+0xac>
    switch (clocksource)
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	f63f af5e 	bhi.w	8004496 <UART_SetConfig+0x86>
 80045da:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <UART_SetConfig+0x1d0>)
 80045dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e0:	0800464d 	.word	0x0800464d
 80045e4:	08004699 	.word	0x08004699
 80045e8:	0800469f 	.word	0x0800469f
 80045ec:	08004497 	.word	0x08004497
 80045f0:	0800468d 	.word	0x0800468d
 80045f4:	08004497 	.word	0x08004497
 80045f8:	08004497 	.word	0x08004497
 80045fc:	08004497 	.word	0x08004497
 8004600:	08004693 	.word	0x08004693
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004608:	d012      	beq.n	8004630 <UART_SetConfig+0x220>
 800460a:	e744      	b.n	8004496 <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7fe ff90 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
        break;
 8004610:	e754      	b.n	80044bc <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004612:	4b2b      	ldr	r3, [pc, #172]	; (80046c0 <UART_SetConfig+0x2b0>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800461c:	2b20      	cmp	r3, #32
 800461e:	d030      	beq.n	8004682 <UART_SetConfig+0x272>
 8004620:	d803      	bhi.n	800462a <UART_SetConfig+0x21a>
 8004622:	b183      	cbz	r3, 8004646 <UART_SetConfig+0x236>
 8004624:	2b10      	cmp	r3, #16
 8004626:	d0cf      	beq.n	80045c8 <UART_SetConfig+0x1b8>
 8004628:	e735      	b.n	8004496 <UART_SetConfig+0x86>
 800462a:	2b30      	cmp	r3, #48	; 0x30
 800462c:	f47f af33 	bne.w	8004496 <UART_SetConfig+0x86>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004630:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004634:	d02d      	beq.n	8004692 <UART_SetConfig+0x282>
    switch (clocksource)
 8004636:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800463a:	e741      	b.n	80044c0 <UART_SetConfig+0xb0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800463c:	2bc0      	cmp	r3, #192	; 0xc0
 800463e:	d0f7      	beq.n	8004630 <UART_SetConfig+0x220>
 8004640:	e729      	b.n	8004496 <UART_SetConfig+0x86>
 8004642:	4823      	ldr	r0, [pc, #140]	; (80046d0 <UART_SetConfig+0x2c0>)
 8004644:	e78f      	b.n	8004566 <UART_SetConfig+0x156>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004646:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800464a:	d1df      	bne.n	800460c <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 800464c:	f7fe ff70 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004650:	2800      	cmp	r0, #0
 8004652:	f43f af7e 	beq.w	8004552 <UART_SetConfig+0x142>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004656:	0043      	lsls	r3, r0, #1
 8004658:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465a:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800465e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004662:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004666:	f1a3 0210 	sub.w	r2, r3, #16
 800466a:	428a      	cmp	r2, r1
 800466c:	f63f af13 	bhi.w	8004496 <UART_SetConfig+0x86>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004670:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8004674:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004676:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004678:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800467c:	4313      	orrs	r3, r2
 800467e:	60cb      	str	r3, [r1, #12]
 8004680:	e767      	b.n	8004552 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004682:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004686:	d00a      	beq.n	800469e <UART_SetConfig+0x28e>
        pclk = (uint32_t) HSI_VALUE;
 8004688:	4811      	ldr	r0, [pc, #68]	; (80046d0 <UART_SetConfig+0x2c0>)
 800468a:	e719      	b.n	80044c0 <UART_SetConfig+0xb0>
        pclk = HAL_RCC_GetSysClockFreq();
 800468c:	f7fe fb5a 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
        break;
 8004690:	e7de      	b.n	8004650 <UART_SetConfig+0x240>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004696:	e7df      	b.n	8004658 <UART_SetConfig+0x248>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004698:	f7fe ff5c 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
        break;
 800469c:	e7d8      	b.n	8004650 <UART_SetConfig+0x240>
    switch (clocksource)
 800469e:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <UART_SetConfig+0x2c4>)
 80046a0:	e7da      	b.n	8004658 <UART_SetConfig+0x248>
 80046a2:	bf00      	nop
 80046a4:	efff69f3 	.word	0xefff69f3
 80046a8:	40008000 	.word	0x40008000
 80046ac:	40013800 	.word	0x40013800
 80046b0:	40004400 	.word	0x40004400
 80046b4:	40004800 	.word	0x40004800
 80046b8:	40004c00 	.word	0x40004c00
 80046bc:	40005000 	.word	0x40005000
 80046c0:	40021000 	.word	0x40021000
 80046c4:	08039a4c 	.word	0x08039a4c
 80046c8:	000ffcff 	.word	0x000ffcff
 80046cc:	08039a48 	.word	0x08039a48
 80046d0:	00f42400 	.word	0x00f42400
 80046d4:	01e84800 	.word	0x01e84800

080046d8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046da:	071a      	lsls	r2, r3, #28
{
 80046dc:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046de:	d506      	bpl.n	80046ee <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046e0:	6801      	ldr	r1, [r0, #0]
 80046e2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80046e4:	684a      	ldr	r2, [r1, #4]
 80046e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ea:	4322      	orrs	r2, r4
 80046ec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ee:	07dc      	lsls	r4, r3, #31
 80046f0:	d506      	bpl.n	8004700 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046f2:	6801      	ldr	r1, [r0, #0]
 80046f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80046f6:	684a      	ldr	r2, [r1, #4]
 80046f8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80046fc:	4322      	orrs	r2, r4
 80046fe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004700:	0799      	lsls	r1, r3, #30
 8004702:	d506      	bpl.n	8004712 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004704:	6801      	ldr	r1, [r0, #0]
 8004706:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004708:	684a      	ldr	r2, [r1, #4]
 800470a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800470e:	4322      	orrs	r2, r4
 8004710:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004712:	075a      	lsls	r2, r3, #29
 8004714:	d506      	bpl.n	8004724 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004716:	6801      	ldr	r1, [r0, #0]
 8004718:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800471a:	684a      	ldr	r2, [r1, #4]
 800471c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004720:	4322      	orrs	r2, r4
 8004722:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004724:	06dc      	lsls	r4, r3, #27
 8004726:	d506      	bpl.n	8004736 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004728:	6801      	ldr	r1, [r0, #0]
 800472a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800472c:	688a      	ldr	r2, [r1, #8]
 800472e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004732:	4322      	orrs	r2, r4
 8004734:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004736:	0699      	lsls	r1, r3, #26
 8004738:	d506      	bpl.n	8004748 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800473a:	6801      	ldr	r1, [r0, #0]
 800473c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800473e:	688a      	ldr	r2, [r1, #8]
 8004740:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004744:	4322      	orrs	r2, r4
 8004746:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004748:	065a      	lsls	r2, r3, #25
 800474a:	d509      	bpl.n	8004760 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800474c:	6801      	ldr	r1, [r0, #0]
 800474e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004750:	684a      	ldr	r2, [r1, #4]
 8004752:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004756:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004758:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800475c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800475e:	d00b      	beq.n	8004778 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	d506      	bpl.n	8004772 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004764:	6802      	ldr	r2, [r0, #0]
 8004766:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004768:	6853      	ldr	r3, [r2, #4]
 800476a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800476e:	430b      	orrs	r3, r1
 8004770:	6053      	str	r3, [r2, #4]
}
 8004772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004776:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004778:	684a      	ldr	r2, [r1, #4]
 800477a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800477c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004780:	4322      	orrs	r2, r4
 8004782:	604a      	str	r2, [r1, #4]
 8004784:	e7ec      	b.n	8004760 <UART_AdvFeatureConfig+0x88>
 8004786:	bf00      	nop

08004788 <UART_CheckIdleState>:
{
 8004788:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478a:	2300      	movs	r3, #0
{
 800478c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8004792:	f7fd fc27 	bl	8001fe4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004796:	6822      	ldr	r2, [r4, #0]
 8004798:	6813      	ldr	r3, [r2, #0]
 800479a:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 800479c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800479e:	d40e      	bmi.n	80047be <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047a0:	6813      	ldr	r3, [r2, #0]
 80047a2:	0759      	lsls	r1, r3, #29
 80047a4:	d42f      	bmi.n	8004806 <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	2220      	movs	r2, #32
 80047aa:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 80047ac:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80047ae:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b2:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b4:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 80047b6:	2300      	movs	r3, #0
 80047b8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047be:	69d3      	ldr	r3, [r2, #28]
 80047c0:	0298      	lsls	r0, r3, #10
 80047c2:	d4ed      	bmi.n	80047a0 <UART_CheckIdleState+0x18>
 80047c4:	e00c      	b.n	80047e0 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	0749      	lsls	r1, r1, #29
 80047ca:	461a      	mov	r2, r3
 80047cc:	d505      	bpl.n	80047da <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	0708      	lsls	r0, r1, #28
 80047d2:	d44a      	bmi.n	800486a <UART_CheckIdleState+0xe2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d4:	69d9      	ldr	r1, [r3, #28]
 80047d6:	0509      	lsls	r1, r1, #20
 80047d8:	d475      	bmi.n	80048c6 <UART_CheckIdleState+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	0298      	lsls	r0, r3, #10
 80047de:	d4df      	bmi.n	80047a0 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e0:	f7fd fc00 	bl	8001fe4 <HAL_GetTick>
 80047e4:	1b43      	subs	r3, r0, r5
 80047e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	d3eb      	bcc.n	80047c6 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	e843 2100 	strex	r1, r2, [r3]
 80047fa:	2900      	cmp	r1, #0
 80047fc:	d1f7      	bne.n	80047ee <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80047fe:	2320      	movs	r3, #32
 8004800:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8004802:	2003      	movs	r0, #3
 8004804:	e7d7      	b.n	80047b6 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004806:	69d3      	ldr	r3, [r2, #28]
 8004808:	025b      	lsls	r3, r3, #9
 800480a:	d4cc      	bmi.n	80047a6 <UART_CheckIdleState+0x1e>
 800480c:	e00d      	b.n	800482a <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	0750      	lsls	r0, r2, #29
 8004812:	d507      	bpl.n	8004824 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	0711      	lsls	r1, r2, #28
 8004818:	f100 8083 	bmi.w	8004922 <UART_CheckIdleState+0x19a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	0512      	lsls	r2, r2, #20
 8004820:	f100 80ad 	bmi.w	800497e <UART_CheckIdleState+0x1f6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	025b      	lsls	r3, r3, #9
 8004828:	d4bd      	bmi.n	80047a6 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482a:	f7fd fbdb 	bl	8001fe4 <HAL_GetTick>
 800482e:	1b43      	subs	r3, r0, r5
 8004830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	d3ea      	bcc.n	800480e <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	e843 2100 	strex	r1, r2, [r3]
 8004844:	2900      	cmp	r1, #0
 8004846:	d1f7      	bne.n	8004838 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	f103 0208 	add.w	r2, r3, #8
 800484c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004850:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	f103 0008 	add.w	r0, r3, #8
 8004858:	e840 2100 	strex	r1, r2, [r0]
 800485c:	2900      	cmp	r1, #0
 800485e:	d1f3      	bne.n	8004848 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8004860:	2320      	movs	r3, #32
 8004862:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8004866:	2003      	movs	r0, #3
 8004868:	e7a5      	b.n	80047b6 <UART_CheckIdleState+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800486a:	2208      	movs	r2, #8
 800486c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004872:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	e843 2100 	strex	r1, r2, [r3]
 800487a:	2900      	cmp	r1, #0
 800487c:	d1f7      	bne.n	800486e <UART_CheckIdleState+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	f103 0208 	add.w	r2, r3, #8
 8004882:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004886:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	f103 0008 	add.w	r0, r3, #8
 800488e:	e840 2100 	strex	r1, r2, [r0]
 8004892:	2900      	cmp	r1, #0
 8004894:	d1f3      	bne.n	800487e <UART_CheckIdleState+0xf6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004896:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004898:	2a01      	cmp	r2, #1
 800489a:	d00b      	beq.n	80048b4 <UART_CheckIdleState+0x12c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800489e:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048a0:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80048a2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80048a6:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80048aa:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048ae:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_ERROR;
 80048b2:	e79c      	b.n	80047ee <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	e843 2100 	strex	r1, r2, [r3]
 80048c0:	2900      	cmp	r1, #0
 80048c2:	d1f7      	bne.n	80048b4 <UART_CheckIdleState+0x12c>
 80048c4:	e7ea      	b.n	800489c <UART_CheckIdleState+0x114>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ca:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	e843 2100 	strex	r1, r2, [r3]
 80048d8:	2900      	cmp	r1, #0
 80048da:	d1f7      	bne.n	80048cc <UART_CheckIdleState+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	f103 0208 	add.w	r2, r3, #8
 80048e0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	f103 0008 	add.w	r0, r3, #8
 80048ec:	e840 2100 	strex	r1, r2, [r0]
 80048f0:	2900      	cmp	r1, #0
 80048f2:	d1f3      	bne.n	80048dc <UART_CheckIdleState+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80048f6:	2a01      	cmp	r2, #1
 80048f8:	d00a      	beq.n	8004910 <UART_CheckIdleState+0x188>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fa:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80048fc:	2120      	movs	r1, #32
 80048fe:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8004902:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004904:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8004906:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800490a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 800490e:	e76e      	b.n	80047ee <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004914:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	e843 2100 	strex	r1, r2, [r3]
 800491c:	2900      	cmp	r1, #0
 800491e:	d1f7      	bne.n	8004910 <UART_CheckIdleState+0x188>
 8004920:	e7eb      	b.n	80048fa <UART_CheckIdleState+0x172>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004922:	2208      	movs	r2, #8
 8004924:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	e843 2100 	strex	r1, r2, [r3]
 8004932:	2900      	cmp	r1, #0
 8004934:	d1f7      	bne.n	8004926 <UART_CheckIdleState+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	f103 0208 	add.w	r2, r3, #8
 800493a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	f103 0008 	add.w	r0, r3, #8
 8004946:	e840 2100 	strex	r1, r2, [r0]
 800494a:	2900      	cmp	r1, #0
 800494c:	d1f3      	bne.n	8004936 <UART_CheckIdleState+0x1ae>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004950:	2a01      	cmp	r2, #1
 8004952:	d00b      	beq.n	800496c <UART_CheckIdleState+0x1e4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004954:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004956:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004958:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800495a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 800495e:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8004962:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004966:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_ERROR;
 800496a:	e765      	b.n	8004838 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004970:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	e843 2100 	strex	r1, r2, [r3]
 8004978:	2900      	cmp	r1, #0
 800497a:	d1f7      	bne.n	800496c <UART_CheckIdleState+0x1e4>
 800497c:	e7ea      	b.n	8004954 <UART_CheckIdleState+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800497e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004982:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004988:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	e843 2100 	strex	r1, r2, [r3]
 8004990:	2900      	cmp	r1, #0
 8004992:	d1f7      	bne.n	8004984 <UART_CheckIdleState+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	f103 0208 	add.w	r2, r3, #8
 8004998:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	f103 0008 	add.w	r0, r3, #8
 80049a4:	e840 2100 	strex	r1, r2, [r0]
 80049a8:	2900      	cmp	r1, #0
 80049aa:	d1f3      	bne.n	8004994 <UART_CheckIdleState+0x20c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80049ae:	2a01      	cmp	r2, #1
 80049b0:	d00a      	beq.n	80049c8 <UART_CheckIdleState+0x240>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80049b4:	2120      	movs	r1, #32
 80049b6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80049ba:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049bc:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80049be:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 80049c6:	e737      	b.n	8004838 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049cc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	e843 2100 	strex	r1, r2, [r3]
 80049d4:	2900      	cmp	r1, #0
 80049d6:	d1f7      	bne.n	80049c8 <UART_CheckIdleState+0x240>
 80049d8:	e7eb      	b.n	80049b2 <UART_CheckIdleState+0x22a>
 80049da:	bf00      	nop

080049dc <HAL_UART_Init>:
  if (huart == NULL)
 80049dc:	b370      	cbz	r0, 8004a3c <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80049de:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80049e0:	b510      	push	{r4, lr}
 80049e2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80049e4:	b32b      	cbz	r3, 8004a32 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 80049e6:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 80049ea:	2324      	movs	r3, #36	; 0x24
 80049ec:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049f6:	b9c1      	cbnz	r1, 8004a2a <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049f8:	4620      	mov	r0, r4
 80049fa:	f7ff fd09 	bl	8004410 <UART_SetConfig>
 80049fe:	2801      	cmp	r0, #1
 8004a00:	d011      	beq.n	8004a26 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a12:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004a1a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004a22:	f7ff beb1 	b.w	8004788 <UART_CheckIdleState>
}
 8004a26:	2001      	movs	r0, #1
 8004a28:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7ff fe54 	bl	80046d8 <UART_AdvFeatureConfig>
 8004a30:	e7e2      	b.n	80049f8 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8004a32:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8004a36:	f7fc fcfb 	bl	8001430 <HAL_UART_MspInit>
 8004a3a:	e7d4      	b.n	80049e6 <HAL_UART_Init+0xa>
}
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	4770      	bx	lr

08004a40 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop

08004a44 <memset>:
 8004a44:	4402      	add	r2, r0
 8004a46:	4603      	mov	r3, r0
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d100      	bne.n	8004a4e <memset+0xa>
 8004a4c:	4770      	bx	lr
 8004a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a52:	e7f9      	b.n	8004a48 <memset+0x4>

08004a54 <strncpy>:
 8004a54:	b510      	push	{r4, lr}
 8004a56:	3901      	subs	r1, #1
 8004a58:	4603      	mov	r3, r0
 8004a5a:	b132      	cbz	r2, 8004a6a <strncpy+0x16>
 8004a5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004a60:	f803 4b01 	strb.w	r4, [r3], #1
 8004a64:	3a01      	subs	r2, #1
 8004a66:	2c00      	cmp	r4, #0
 8004a68:	d1f7      	bne.n	8004a5a <strncpy+0x6>
 8004a6a:	441a      	add	r2, r3
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d100      	bne.n	8004a74 <strncpy+0x20>
 8004a72:	bd10      	pop	{r4, pc}
 8004a74:	f803 1b01 	strb.w	r1, [r3], #1
 8004a78:	e7f9      	b.n	8004a6e <strncpy+0x1a>
	...

08004a7c <__libc_init_array>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	4d0d      	ldr	r5, [pc, #52]	; (8004ab4 <__libc_init_array+0x38>)
 8004a80:	4c0d      	ldr	r4, [pc, #52]	; (8004ab8 <__libc_init_array+0x3c>)
 8004a82:	1b64      	subs	r4, r4, r5
 8004a84:	10a4      	asrs	r4, r4, #2
 8004a86:	2600      	movs	r6, #0
 8004a88:	42a6      	cmp	r6, r4
 8004a8a:	d109      	bne.n	8004aa0 <__libc_init_array+0x24>
 8004a8c:	4d0b      	ldr	r5, [pc, #44]	; (8004abc <__libc_init_array+0x40>)
 8004a8e:	4c0c      	ldr	r4, [pc, #48]	; (8004ac0 <__libc_init_array+0x44>)
 8004a90:	f000 f818 	bl	8004ac4 <_init>
 8004a94:	1b64      	subs	r4, r4, r5
 8004a96:	10a4      	asrs	r4, r4, #2
 8004a98:	2600      	movs	r6, #0
 8004a9a:	42a6      	cmp	r6, r4
 8004a9c:	d105      	bne.n	8004aaa <__libc_init_array+0x2e>
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa4:	4798      	blx	r3
 8004aa6:	3601      	adds	r6, #1
 8004aa8:	e7ee      	b.n	8004a88 <__libc_init_array+0xc>
 8004aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aae:	4798      	blx	r3
 8004ab0:	3601      	adds	r6, #1
 8004ab2:	e7f2      	b.n	8004a9a <__libc_init_array+0x1e>
 8004ab4:	08039a64 	.word	0x08039a64
 8004ab8:	08039a64 	.word	0x08039a64
 8004abc:	08039a64 	.word	0x08039a64
 8004ac0:	08039a68 	.word	0x08039a68

08004ac4 <_init>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	bf00      	nop
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr

08004ad0 <_fini>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr
